
c:/Users/mligh/OneDrive/Particle/NeoPixelClock512/target/1.5.2/boron/NeoPixelClock512.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000083c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc3e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003d9d8  000dc3e4  0001d9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000d28  2003dac8  2003dac8  0002dac8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc4d4  000dc4d4  0002c4d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc4fc  000dc4fc  0002c4fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e4ea5  00000000  00000000  0002c500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001190c  00000000  00000000  001113a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000219db  00000000  00000000  00122cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025d8  00000000  00000000  0014468c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004988  00000000  00000000  00146c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035ff7  00000000  00000000  0014b5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a292  00000000  00000000  001815e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106f15  00000000  00000000  001ab875  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000da3c  00000000  00000000  002b278c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fcab 	bl	d998c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fcb0 	bl	d99a2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d9d8 	.word	0x2003d9d8
   d404c:	000dc3e4 	.word	0x000dc3e4
   d4050:	2003dac8 	.word	0x2003dac8
   d4054:	2003dac8 	.word	0x2003dac8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fd8f 	bl	d7b80 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc3e0 	.word	0x000dc3e0
   d4084:	000dc3a4 	.word	0x000dc3a4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bad0 	b.w	d562c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f002 fd71 	bl	d6b74 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bd35 	b.w	d7b04 <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 baf3 	b.w	d7684 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 baf9 	b.w	d7694 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 baf7 	b.w	d7694 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z14weatherHandlerPKcS0_>:
    }
    if(apply){
        printScreen(screenArray,start,end);
    }
}
void weatherHandler(const char *event, const char *data) {
   d40b8:	b5f0      	push	{r4, r5, r6, r7, lr}
            {
                humdata[2] = data[j+12];
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
            cltr[0] = data[j+9];
   d40ba:	4f5f      	ldr	r7, [pc, #380]	; (d4238 <_Z14weatherHandlerPKcS0_+0x180>)
    }
    if(apply){
        printScreen(screenArray,start,end);
    }
}
void weatherHandler(const char *event, const char *data) {
   d40bc:	b085      	sub	sp, #20
   d40be:	460e      	mov	r6, r1
   d40c0:	1c8d      	adds	r5, r1, #2
   d40c2:	460c      	mov	r4, r1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    //screenArray[508] = 100;
    for(j=0; j<strlen(data); j++)
   d40c4:	4630      	mov	r0, r6
   d40c6:	f005 fcca 	bl	d9a5e <strlen>
   d40ca:	1ba3      	subs	r3, r4, r6
   d40cc:	4298      	cmp	r0, r3
   d40ce:	d962      	bls.n	d4196 <_Z14weatherHandlerPKcS0_+0xde>
    {
        if(data[j] == 't' && data[j+1] == 'e' && data[j+2] == 'm' && data[j+3] == 'p' && data[j+4] == '"'){
   d40d0:	f814 3b01 	ldrb.w	r3, [r4], #1
   d40d4:	2b74      	cmp	r3, #116	; 0x74
   d40d6:	d11e      	bne.n	d4116 <_Z14weatherHandlerPKcS0_+0x5e>
   d40d8:	7823      	ldrb	r3, [r4, #0]
   d40da:	2b65      	cmp	r3, #101	; 0x65
   d40dc:	d13f      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d40de:	782b      	ldrb	r3, [r5, #0]
   d40e0:	2b6d      	cmp	r3, #109	; 0x6d
   d40e2:	d13c      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d40e4:	786b      	ldrb	r3, [r5, #1]
   d40e6:	2b70      	cmp	r3, #112	; 0x70
   d40e8:	d139      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d40ea:	78e3      	ldrb	r3, [r4, #3]
   d40ec:	2b22      	cmp	r3, #34	; 0x22
   d40ee:	d136      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
            tempdata[0] = data[j+6];
   d40f0:	7963      	ldrb	r3, [r4, #5]
   d40f2:	f88d 3008 	strb.w	r3, [sp, #8]
            tempdata[1] = data[j+7];
   d40f6:	79a3      	ldrb	r3, [r4, #6]
   d40f8:	f88d 3009 	strb.w	r3, [sp, #9]
            tempdata[2] = data[j+8];
   d40fc:	79e3      	ldrb	r3, [r4, #7]
   d40fe:	f88d 300a 	strb.w	r3, [sp, #10]
            tempdata[3] = data[j+9];
   d4102:	7a23      	ldrb	r3, [r4, #8]
   d4104:	f88d 300b 	strb.w	r3, [sp, #11]
            tempdata[4] = data[j+10];
   d4108:	7a63      	ldrb	r3, [r4, #9]
   d410a:	f88d 300c 	strb.w	r3, [sp, #12]
            tempdata[5] = data[j+11];
   d410e:	7aa3      	ldrb	r3, [r4, #10]
   d4110:	f88d 300d 	strb.w	r3, [sp, #13]
   d4114:	e023      	b.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
        }
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
   d4116:	2b68      	cmp	r3, #104	; 0x68
   d4118:	d114      	bne.n	d4144 <_Z14weatherHandlerPKcS0_+0x8c>
   d411a:	7823      	ldrb	r3, [r4, #0]
   d411c:	2b75      	cmp	r3, #117	; 0x75
   d411e:	d11e      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d4120:	782b      	ldrb	r3, [r5, #0]
   d4122:	2b6d      	cmp	r3, #109	; 0x6d
   d4124:	d11b      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d4126:	786b      	ldrb	r3, [r5, #1]
   d4128:	2b69      	cmp	r3, #105	; 0x69
   d412a:	d118      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
            humdata[0] = data[j+10];
   d412c:	7a63      	ldrb	r3, [r4, #9]
   d412e:	f88d 3000 	strb.w	r3, [sp]
            humdata[1] = data[j+11];
   d4132:	7aa3      	ldrb	r3, [r4, #10]
   d4134:	f88d 3001 	strb.w	r3, [sp, #1]
            if(data[j+12] == '0')
   d4138:	7ae3      	ldrb	r3, [r4, #11]
   d413a:	2b30      	cmp	r3, #48	; 0x30
   d413c:	d10f      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
            {
                humdata[2] = data[j+12];
   d413e:	f88d 3002 	strb.w	r3, [sp, #2]
   d4142:	e00c      	b.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
   d4144:	2b69      	cmp	r3, #105	; 0x69
   d4146:	d10a      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d4148:	7823      	ldrb	r3, [r4, #0]
   d414a:	2b63      	cmp	r3, #99	; 0x63
   d414c:	d107      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d414e:	782b      	ldrb	r3, [r5, #0]
   d4150:	2b6f      	cmp	r3, #111	; 0x6f
   d4152:	d104      	bne.n	d415e <_Z14weatherHandlerPKcS0_+0xa6>
   d4154:	786b      	ldrb	r3, [r5, #1]
   d4156:	2b6e      	cmp	r3, #110	; 0x6e
            cltr[0] = data[j+9];
   d4158:	bf04      	itt	eq
   d415a:	7a23      	ldrbeq	r3, [r4, #8]
   d415c:	703b      	strbeq	r3, [r7, #0]
        }
        if(data[j-1] == '[' && data[j] == '{' && data[j+1] == '"' && data[j+2] == 'i' && data[j+3] == 'd'){
   d415e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   d4162:	2b5b      	cmp	r3, #91	; 0x5b
   d4164:	d115      	bne.n	d4192 <_Z14weatherHandlerPKcS0_+0xda>
   d4166:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   d416a:	2b7b      	cmp	r3, #123	; 0x7b
   d416c:	d111      	bne.n	d4192 <_Z14weatherHandlerPKcS0_+0xda>
   d416e:	7823      	ldrb	r3, [r4, #0]
   d4170:	2b22      	cmp	r3, #34	; 0x22
   d4172:	d10e      	bne.n	d4192 <_Z14weatherHandlerPKcS0_+0xda>
   d4174:	782b      	ldrb	r3, [r5, #0]
   d4176:	2b69      	cmp	r3, #105	; 0x69
   d4178:	d10b      	bne.n	d4192 <_Z14weatherHandlerPKcS0_+0xda>
   d417a:	786b      	ldrb	r3, [r5, #1]
   d417c:	2b64      	cmp	r3, #100	; 0x64
   d417e:	d108      	bne.n	d4192 <_Z14weatherHandlerPKcS0_+0xda>
            cdata[0] = data[j+6];
   d4180:	7963      	ldrb	r3, [r4, #5]
   d4182:	f88d 3004 	strb.w	r3, [sp, #4]
            cdata[1] = data[j+7];
   d4186:	79a3      	ldrb	r3, [r4, #6]
   d4188:	f88d 3005 	strb.w	r3, [sp, #5]
            cdata[2] = data[j+8];
   d418c:	79e3      	ldrb	r3, [r4, #7]
   d418e:	f88d 3006 	strb.w	r3, [sp, #6]
   d4192:	3501      	adds	r5, #1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    //screenArray[508] = 100;
    for(j=0; j<strlen(data); j++)
   d4194:	e796      	b.n	d40c4 <_Z14weatherHandlerPKcS0_+0xc>
            cdata[0] = data[j+6];
            cdata[1] = data[j+7];
            cdata[2] = data[j+8];
        }
    }
    if(humdata[0] >= '0' && humdata[0] <= '9'){
   d4196:	f89d 3000 	ldrb.w	r3, [sp]
   d419a:	3b30      	subs	r3, #48	; 0x30
   d419c:	2b09      	cmp	r3, #9
   d419e:	d808      	bhi.n	d41b2 <_Z14weatherHandlerPKcS0_+0xfa>
        humidity = atof(humdata);
   d41a0:	4668      	mov	r0, sp
   d41a2:	f005 fae5 	bl	d9770 <atof>
   d41a6:	ec51 0b10 	vmov	r0, r1, d0
   d41aa:	f005 fa49 	bl	d9640 <__aeabi_d2iz>
   d41ae:	4b23      	ldr	r3, [pc, #140]	; (d423c <_Z14weatherHandlerPKcS0_+0x184>)
   d41b0:	6018      	str	r0, [r3, #0]
    }
    if(cdata[0] >= '0' && cdata[0] <= '9'){
   d41b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d41b6:	3b30      	subs	r3, #48	; 0x30
   d41b8:	2b09      	cmp	r3, #9
   d41ba:	d808      	bhi.n	d41ce <_Z14weatherHandlerPKcS0_+0x116>
        cid = atof(cdata);
   d41bc:	a801      	add	r0, sp, #4
   d41be:	f005 fad7 	bl	d9770 <atof>
   d41c2:	ec51 0b10 	vmov	r0, r1, d0
   d41c6:	f005 fa3b 	bl	d9640 <__aeabi_d2iz>
   d41ca:	4b1d      	ldr	r3, [pc, #116]	; (d4240 <_Z14weatherHandlerPKcS0_+0x188>)
   d41cc:	6018      	str	r0, [r3, #0]
    }
    if(tempdata[0] >= '0' && tempdata[0] <= '9'){
   d41ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d41d2:	3b30      	subs	r3, #48	; 0x30
   d41d4:	2b09      	cmp	r3, #9
   d41d6:	d823      	bhi.n	d4220 <_Z14weatherHandlerPKcS0_+0x168>
        tempK = atof(tempdata);
   d41d8:	a802      	add	r0, sp, #8
   d41da:	f005 fac9 	bl	d9770 <atof>
        tempC = tempK-273.15;
        tempF = (tempC*1.8)+32;
        TFahr = (int)tempF;
   d41de:	ec51 0b10 	vmov	r0, r1, d0
   d41e2:	f005 fa75 	bl	d96d0 <__aeabi_d2f>
   d41e6:	f004 ff3d 	bl	d9064 <__aeabi_f2d>
   d41ea:	a30f      	add	r3, pc, #60	; (adr r3, d4228 <_Z14weatherHandlerPKcS0_+0x170>)
   d41ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41f0:	f004 fdd8 	bl	d8da4 <__aeabi_dsub>
   d41f4:	f005 fa6c 	bl	d96d0 <__aeabi_d2f>
   d41f8:	f004 ff34 	bl	d9064 <__aeabi_f2d>
   d41fc:	a30c      	add	r3, pc, #48	; (adr r3, d4230 <_Z14weatherHandlerPKcS0_+0x178>)
   d41fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4202:	f004 ff83 	bl	d910c <__aeabi_dmul>
   d4206:	4b0f      	ldr	r3, [pc, #60]	; (d4244 <_Z14weatherHandlerPKcS0_+0x18c>)
   d4208:	2200      	movs	r2, #0
   d420a:	f004 fdcd 	bl	d8da8 <__adddf3>
   d420e:	f005 fa5f 	bl	d96d0 <__aeabi_d2f>
   d4212:	ee07 0a90 	vmov	s15, r0
   d4216:	4b0c      	ldr	r3, [pc, #48]	; (d4248 <_Z14weatherHandlerPKcS0_+0x190>)
   d4218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d421c:	edc3 7a00 	vstr	s15, [r3]
    }
}
   d4220:	b005      	add	sp, #20
   d4222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4224:	f3af 8000 	nop.w
   d4228:	66666666 	.word	0x66666666
   d422c:	40711266 	.word	0x40711266
   d4230:	cccccccd 	.word	0xcccccccd
   d4234:	3ffccccc 	.word	0x3ffccccc
   d4238:	2003daf4 	.word	0x2003daf4
   d423c:	2003dae0 	.word	0x2003dae0
   d4240:	2003dae4 	.word	0x2003dae4
   d4244:	40400000 	.word	0x40400000
   d4248:	2003e338 	.word	0x2003e338

000d424c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d424c:	b510      	push	{r4, lr}
   d424e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4250:	6800      	ldr	r0, [r0, #0]
   d4252:	b108      	cbz	r0, d4258 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4254:	f003 fa1e 	bl	d7694 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4258:	4620      	mov	r0, r4
   d425a:	bd10      	pop	{r4, pc}

000d425c <_ZN11EEPROMClass4readEi.isra.6>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d425c:	f003 b81e 	b.w	d729c <HAL_EEPROM_Read>

000d4260 <_ZN11EEPROMClass5writeEih.isra.7>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4260:	f003 b824 	b.w	d72ac <HAL_EEPROM_Write>
   d4264:	0000      	movs	r0, r0
	...

000d4268 <_Z11printScreenPiii>:
    return ((colorCode/1000)%1000);
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printScreen(int inputArray[], int start, int end){
   d4268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d426c:	ed2d 8b04 	vpush	{d8-d9}
            int k = count-384;
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
            }
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d4270:	4ea9      	ldr	r6, [pc, #676]	; (d4518 <_Z11printScreenPiii+0x2b0>)
    return ((colorCode/1000)%1000);
}
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printScreen(int inputArray[], int start, int end){
   d4272:	b085      	sub	sp, #20
   d4274:	4605      	mov	r5, r0
   d4276:	4690      	mov	r8, r2
    uint16_t count;
    for(count = start; count <= end; count++){
   d4278:	b28c      	uxth	r4, r1
   d427a:	4544      	cmp	r4, r8
   d427c:	f300 813b 	bgt.w	d44f6 <_Z11printScreenPiii+0x28e>
        if(!(count>>8)){
   d4280:	0a23      	lsrs	r3, r4, #8
   d4282:	d13c      	bne.n	d42fe <_Z11printScreenPiii+0x96>
            if(((count/8)%2) == 0){                                                                                        //Prints standard row
   d4284:	0723      	lsls	r3, r4, #28
   d4286:	d41a      	bmi.n	d42be <_Z11printScreenPiii+0x56>
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
   d4288:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
   d428c:	fb97 fef6 	sdiv	lr, r7, r6
   d4290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4294:	fb97 f1f0 	sdiv	r1, r7, r0
   d4298:	fb91 f3f0 	sdiv	r3, r1, r0
   d429c:	fb00 1313 	mls	r3, r0, r3, r1
   d42a0:	fb00 7111 	mls	r1, r0, r1, r7
   d42a4:	fb9e f2f0 	sdiv	r2, lr, r0
   d42a8:	b2c9      	uxtb	r1, r1
   d42aa:	fb00 e212 	mls	r2, r0, r2, lr
   d42ae:	9100      	str	r1, [sp, #0]
   d42b0:	b2db      	uxtb	r3, r3
   d42b2:	b2d2      	uxtb	r2, r2
   d42b4:	4621      	mov	r1, r4
   d42b6:	4899      	ldr	r0, [pc, #612]	; (d451c <_Z11printScreenPiii+0x2b4>)
   d42b8:	f002 ff2e 	bl	d7118 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d42bc:	e118      	b.n	d44f0 <_Z11printScreenPiii+0x288>
            }
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                if((count%8) < 4){
                    strip.setPixelColor(count+7-((count%8)*2),getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));     //If on the right half of line, add to mirror to other side
   d42be:	f855 c024 	ldr.w	ip, [r5, r4, lsl #2]
   d42c2:	fb9c f2f6 	sdiv	r2, ip, r6
   d42c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42ca:	f004 0e07 	and.w	lr, r4, #7
   d42ce:	fb9c f7f0 	sdiv	r7, ip, r0
   d42d2:	fb92 f9f0 	sdiv	r9, r2, r0
   d42d6:	fb97 f3f0 	sdiv	r3, r7, r0
   d42da:	fb00 2219 	mls	r2, r0, r9, r2
   d42de:	fb00 7313 	mls	r3, r0, r3, r7
   d42e2:	1de1      	adds	r1, r4, #7
   d42e4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
   d42e8:	fb00 c017 	mls	r0, r0, r7, ip
   d42ec:	b2c0      	uxtb	r0, r0
   d42ee:	ebce 0101 	rsb	r1, lr, r1
   d42f2:	9000      	str	r0, [sp, #0]
   d42f4:	b2db      	uxtb	r3, r3
   d42f6:	b2d2      	uxtb	r2, r2
   d42f8:	b289      	uxth	r1, r1
   d42fa:	4888      	ldr	r0, [pc, #544]	; (d451c <_Z11printScreenPiii+0x2b4>)
   d42fc:	e0f6      	b.n	d44ec <_Z11printScreenPiii+0x284>
                else{
                    strip.setPixelColor(count+7-(2*(count%8)),getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));     //If on the left half of line, subtract to mirror to other side
                }
            }
        }
        else if ((count>>8) && count < 383){       // Red - 0.65, Green - 0.8, Blue - 0.65
   d42fe:	f5b4 7fbf 	cmp.w	r4, #382	; 0x17e
   d4302:	d86e      	bhi.n	d43e2 <_Z11printScreenPiii+0x17a>
            int k = count-256;
   d4304:	f5a4 7380 	sub.w	r3, r4, #256	; 0x100
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
   d4308:	f014 0f01 	tst.w	r4, #1
   d430c:	f003 0707 	and.w	r7, r3, #7
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d4310:	bf0a      	itet	eq
   d4312:	2208      	moveq	r2, #8
            }
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d4314:	10db      	asrne	r3, r3, #3
            }
        }
        else if ((count>>8) && count < 383){       // Red - 0.65, Green - 0.8, Blue - 0.65
            int k = count-256;
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d4316:	fb93 f3f2 	sdiveq	r3, r3, r2
            }
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d431a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
            }
        }
        else if ((count>>8) && count < 383){       // Red - 0.65, Green - 0.8, Blue - 0.65
            int k = count-256;
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d431e:	bf08      	it	eq
   d4320:	f1c3 030f 	rsbeq	r3, r3, #15
   d4324:	f1c7 0717 	rsb	r7, r7, #23
            }
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d4328:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   d432c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   d4330:	fb93 f3f6 	sdiv	r3, r3, r6
   d4334:	fb93 f0f9 	sdiv	r0, r3, r9
   d4338:	fb09 3010 	mls	r0, r9, r0, r3
   d433c:	f004 fe80 	bl	d9040 <__aeabi_i2d>
   d4340:	a371      	add	r3, pc, #452	; (adr r3, d4508 <_Z11printScreenPiii+0x2a0>)
   d4342:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4346:	f004 fee1 	bl	d910c <__aeabi_dmul>
   d434a:	ec41 0b10 	vmov	d0, r0, r1
   d434e:	f004 fccd 	bl	d8cec <round>
   d4352:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   d4356:	fb93 f3f9 	sdiv	r3, r3, r9
   d435a:	fb93 f0f9 	sdiv	r0, r3, r9
   d435e:	fb09 3010 	mls	r0, r9, r0, r3
   d4362:	eeb0 8a40 	vmov.f32	s16, s0
   d4366:	eef0 8a60 	vmov.f32	s17, s1
   d436a:	f004 fe69 	bl	d9040 <__aeabi_i2d>
   d436e:	a368      	add	r3, pc, #416	; (adr r3, d4510 <_Z11printScreenPiii+0x2a8>)
   d4370:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4374:	f004 feca 	bl	d910c <__aeabi_dmul>
   d4378:	ec41 0b10 	vmov	d0, r0, r1
   d437c:	f004 fcb6 	bl	d8cec <round>
   d4380:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   d4384:	fb93 f0f9 	sdiv	r0, r3, r9
   d4388:	fb09 3010 	mls	r0, r9, r0, r3
   d438c:	ec5b ab10 	vmov	sl, fp, d0
   d4390:	f004 fe56 	bl	d9040 <__aeabi_i2d>
   d4394:	a35c      	add	r3, pc, #368	; (adr r3, d4508 <_Z11printScreenPiii+0x2a0>)
   d4396:	e9d3 2300 	ldrd	r2, r3, [r3]
   d439a:	f004 feb7 	bl	d910c <__aeabi_dmul>
   d439e:	ec41 0b10 	vmov	d0, r0, r1
   d43a2:	f004 fca3 	bl	d8cec <round>
   d43a6:	4659      	mov	r1, fp
   d43a8:	4650      	mov	r0, sl
   d43aa:	ed8d 0b02 	vstr	d0, [sp, #8]
   d43ae:	f005 f96f 	bl	d9690 <__aeabi_d2uiz>
   d43b2:	fa5f fa80 	uxtb.w	sl, r0
   d43b6:	ec51 0b18 	vmov	r0, r1, d8
   d43ba:	f005 f969 	bl	d9690 <__aeabi_d2uiz>
   d43be:	ed9d 0b02 	vldr	d0, [sp, #8]
   d43c2:	fa5f f980 	uxtb.w	r9, r0
   d43c6:	ec51 0b10 	vmov	r0, r1, d0
   d43ca:	f005 f961 	bl	d9690 <__aeabi_d2uiz>
   d43ce:	b2bf      	uxth	r7, r7
   d43d0:	b2c0      	uxtb	r0, r0
   d43d2:	9000      	str	r0, [sp, #0]
   d43d4:	4653      	mov	r3, sl
   d43d6:	464a      	mov	r2, r9
   d43d8:	4639      	mov	r1, r7
   d43da:	4850      	ldr	r0, [pc, #320]	; (d451c <_Z11printScreenPiii+0x2b4>)
   d43dc:	f002 fe9c 	bl	d7118 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d43e0:	e086      	b.n	d44f0 <_Z11printScreenPiii+0x288>
            }
        }
        else if (count > 383 && count < 512){
   d43e2:	f5a4 72c0 	sub.w	r2, r4, #384	; 0x180
   d43e6:	b293      	uxth	r3, r2
   d43e8:	2b7f      	cmp	r3, #127	; 0x7f
   d43ea:	f200 8081 	bhi.w	d44f0 <_Z11printScreenPiii+0x288>
   d43ee:	4b4c      	ldr	r3, [pc, #304]	; (d4520 <_Z11printScreenPiii+0x2b8>)
            int k = count-384;
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
   d43f0:	f014 0f01 	tst.w	r4, #1
   d43f4:	ea4f 0784 	mov.w	r7, r4, lsl #2
   d43f8:	ea03 0302 	and.w	r3, r3, r2
   d43fc:	d10e      	bne.n	d441c <_Z11printScreenPiii+0x1b4>
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d43fe:	2b00      	cmp	r3, #0
   d4400:	bfbe      	ittt	lt
   d4402:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4406:	f063 0307 	ornlt	r3, r3, #7
   d440a:	3301      	addlt	r3, #1
   d440c:	2108      	movs	r1, #8
   d440e:	f1c3 031f 	rsb	r3, r3, #31
   d4412:	fb92 f2f1 	sdiv	r2, r2, r1
   d4416:	f1c2 020f 	rsb	r2, r2, #15
   d441a:	e00c      	b.n	d4436 <_Z11printScreenPiii+0x1ce>
            }
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
   d441c:	2b00      	cmp	r3, #0
   d441e:	bfbe      	ittt	lt
   d4420:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4424:	f063 0307 	ornlt	r3, r3, #7
   d4428:	3301      	addlt	r3, #1
   d442a:	f1c3 031f 	rsb	r3, r3, #31
   d442e:	f04f 0908 	mov.w	r9, #8
   d4432:	fb92 f2f9 	sdiv	r2, r2, r9
   d4436:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   d443a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d443e:	fa1f f983 	uxth.w	r9, r3
   d4442:	59eb      	ldr	r3, [r5, r7]
   d4444:	fb93 f3f6 	sdiv	r3, r3, r6
   d4448:	fb93 f0fa 	sdiv	r0, r3, sl
   d444c:	fb0a 3010 	mls	r0, sl, r0, r3
   d4450:	f004 fdf6 	bl	d9040 <__aeabi_i2d>
   d4454:	a32c      	add	r3, pc, #176	; (adr r3, d4508 <_Z11printScreenPiii+0x2a0>)
   d4456:	e9d3 2300 	ldrd	r2, r3, [r3]
   d445a:	f004 fe57 	bl	d910c <__aeabi_dmul>
   d445e:	ec41 0b10 	vmov	d0, r0, r1
   d4462:	f004 fc43 	bl	d8cec <round>
   d4466:	59eb      	ldr	r3, [r5, r7]
   d4468:	fb93 f3fa 	sdiv	r3, r3, sl
   d446c:	fb93 f0fa 	sdiv	r0, r3, sl
   d4470:	fb0a 3010 	mls	r0, sl, r0, r3
   d4474:	eeb0 8a40 	vmov.f32	s16, s0
   d4478:	eef0 8a60 	vmov.f32	s17, s1
   d447c:	f004 fde0 	bl	d9040 <__aeabi_i2d>
   d4480:	a323      	add	r3, pc, #140	; (adr r3, d4510 <_Z11printScreenPiii+0x2a8>)
   d4482:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4486:	f004 fe41 	bl	d910c <__aeabi_dmul>
   d448a:	ec41 0b10 	vmov	d0, r0, r1
   d448e:	f004 fc2d 	bl	d8cec <round>
   d4492:	59eb      	ldr	r3, [r5, r7]
   d4494:	fb93 f0fa 	sdiv	r0, r3, sl
   d4498:	fb0a 3010 	mls	r0, sl, r0, r3
   d449c:	eeb0 9a40 	vmov.f32	s18, s0
   d44a0:	eef0 9a60 	vmov.f32	s19, s1
   d44a4:	f004 fdcc 	bl	d9040 <__aeabi_i2d>
   d44a8:	a317      	add	r3, pc, #92	; (adr r3, d4508 <_Z11printScreenPiii+0x2a0>)
   d44aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ae:	f004 fe2d 	bl	d910c <__aeabi_dmul>
   d44b2:	ec41 0b10 	vmov	d0, r0, r1
   d44b6:	f004 fc19 	bl	d8cec <round>
   d44ba:	ec51 0b19 	vmov	r0, r1, d9
   d44be:	ed8d 0b02 	vstr	d0, [sp, #8]
   d44c2:	f005 f8e5 	bl	d9690 <__aeabi_d2uiz>
   d44c6:	fa5f fa80 	uxtb.w	sl, r0
   d44ca:	ec51 0b18 	vmov	r0, r1, d8
   d44ce:	f005 f8df 	bl	d9690 <__aeabi_d2uiz>
   d44d2:	ed9d 0b02 	vldr	d0, [sp, #8]
   d44d6:	b2c7      	uxtb	r7, r0
   d44d8:	ec51 0b10 	vmov	r0, r1, d0
   d44dc:	f005 f8d8 	bl	d9690 <__aeabi_d2uiz>
   d44e0:	b2c0      	uxtb	r0, r0
   d44e2:	9000      	str	r0, [sp, #0]
   d44e4:	480d      	ldr	r0, [pc, #52]	; (d451c <_Z11printScreenPiii+0x2b4>)
   d44e6:	4653      	mov	r3, sl
   d44e8:	463a      	mov	r2, r7
   d44ea:	4649      	mov	r1, r9
   d44ec:	f002 fe14 	bl	d7118 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
int getBVal(int colorCode){                                                                                         //Filters out Blue value from array element
    return (colorCode%1000);
}
void printScreen(int inputArray[], int start, int end){
    uint16_t count;
    for(count = start; count <= end; count++){
   d44f0:	3401      	adds	r4, #1
   d44f2:	b2a4      	uxth	r4, r4
   d44f4:	e6c1      	b.n	d427a <_Z11printScreenPiii+0x12>
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
            }
        }
    }
    strip.show();
   d44f6:	4809      	ldr	r0, [pc, #36]	; (d451c <_Z11printScreenPiii+0x2b4>)
}
   d44f8:	b005      	add	sp, #20
   d44fa:	ecbd 8b04 	vpop	{d8-d9}
   d44fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            else{                                                                                                       //Reversed row for S configuration (mirror function)
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
            }
        }
    }
    strip.show();
   d4502:	f002 bc67 	b.w	d6dd4 <_ZN17Adafruit_NeoPixel4showEv>
   d4506:	bf00      	nop
   d4508:	cccccccd 	.word	0xcccccccd
   d450c:	3fe4cccc 	.word	0x3fe4cccc
   d4510:	9999999a 	.word	0x9999999a
   d4514:	3fe99999 	.word	0x3fe99999
   d4518:	000f4240 	.word	0x000f4240
   d451c:	2003daf8 	.word	0x2003daf8
   d4520:	80000007 	.word	0x80000007

000d4524 <_Z4snumi>:
}
uint32_t snum(int val) {//Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d4524:	b570      	push	{r4, r5, r6, lr}
// 3 11 19  
// 4 12 20  
// 
// 

uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
   d4526:	4d09      	ldr	r5, [pc, #36]	; (d454c <_Z4snumi+0x28>)
            }
        }
    }
    strip.show();
}
uint32_t snum(int val) {//Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d4528:	4606      	mov	r6, r0
// 3 11 19  
// 4 12 20  
// 
// 

uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
   d452a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
            }
        }
    }
    strip.show();
}
uint32_t snum(int val) {//Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d452c:	b08a      	sub	sp, #40	; 0x28
// 3 11 19  
// 4 12 20  
// 
// 

uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
   d452e:	466c      	mov	r4, sp
   d4530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4536:	e895 0003 	ldmia.w	r5, {r0, r1}
return numArray[val];
   d453a:	ab0a      	add	r3, sp, #40	; 0x28
// 3 11 19  
// 4 12 20  
// 
// 

uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
   d453c:	e884 0003 	stmia.w	r4, {r0, r1}
return numArray[val];
   d4540:	eb03 0686 	add.w	r6, r3, r6, lsl #2

}
   d4544:	f856 0c28 	ldr.w	r0, [r6, #-40]
   d4548:	b00a      	add	sp, #40	; 0x28
   d454a:	bd70      	pop	{r4, r5, r6, pc}
   d454c:	000dbc60 	.word	0x000dbc60

000d4550 <_Z3numi>:
uint32_t num(int val) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d4550:	b570      	push	{r4, r5, r6, lr}
// 2 10 18  26
// 3 11 19  27
// 4 12 20  28
// 5 13 21  29
// 6 14 22  30
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
   d4552:	4d09      	ldr	r5, [pc, #36]	; (d4578 <_Z3numi+0x28>)

uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
return numArray[val];

}
uint32_t num(int val) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d4554:	4606      	mov	r6, r0
// 2 10 18  26
// 3 11 19  27
// 4 12 20  28
// 5 13 21  29
// 6 14 22  30
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
   d4556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
return numArray[val];

}
uint32_t num(int val) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d4558:	b08a      	sub	sp, #40	; 0x28
// 2 10 18  26
// 3 11 19  27
// 4 12 20  28
// 5 13 21  29
// 6 14 22  30
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
   d455a:	466c      	mov	r4, sp
   d455c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d455e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4562:	e895 0003 	ldmia.w	r5, {r0, r1}
return numArray[val];
   d4566:	ab0a      	add	r3, sp, #40	; 0x28
// 2 10 18  26
// 3 11 19  27
// 4 12 20  28
// 5 13 21  29
// 6 14 22  30
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
   d4568:	e884 0003 	stmia.w	r4, {r0, r1}
return numArray[val];
   d456c:	eb03 0686 	add.w	r6, r3, r6, lsl #2

}
   d4570:	f856 0c28 	ldr.w	r0, [r6, #-40]
   d4574:	b00a      	add	sp, #40	; 0x28
   d4576:	bd70      	pop	{r4, r5, r6, pc}
   d4578:	000dbc88 	.word	0x000dbc88

000d457c <_Z11encodeColorhhh>:
    int G_temp = G;
    int B_temp = B;
    if(R_temp > 255) R_temp = 255;
    if(G_temp > 255) G_temp = 255;
    if(B_temp > 255) B_temp = 255;
    return B_temp+(1000*G_temp)+(1000000*R_temp);
   d457c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4580:	fb03 2201 	mla	r2, r3, r1, r2
}
   d4584:	4b01      	ldr	r3, [pc, #4]	; (d458c <_Z11encodeColorhhh+0x10>)
   d4586:	fb03 2000 	mla	r0, r3, r0, r2
   d458a:	4770      	bx	lr
   d458c:	000f4240 	.word	0x000f4240

000d4590 <_Z12encode64Condyiihhhb>:
void encode64Cond(uint64_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d4590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4594:	461e      	mov	r6, r3
    uint64_t encNum = enCond;
    if(erase){
   d4596:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    if(R_temp > 255) R_temp = 255;
    if(G_temp > 255) G_temp = 255;
    if(B_temp > 255) B_temp = 255;
    return B_temp+(1000*G_temp)+(1000000*R_temp);
}
void encode64Cond(uint64_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d459a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d459e:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
   d45a2:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d45a6:	4682      	mov	sl, r0
   d45a8:	468b      	mov	fp, r1
   d45aa:	4615      	mov	r5, r2
    uint64_t encNum = enCond;
    if(erase){
   d45ac:	b15b      	cbz	r3, d45c6 <_Z12encode64Condyiihhhb+0x36>
        for(i = 0; i < length; i++){
   d45ae:	2300      	movs	r3, #0
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
   d45b0:	4a14      	ldr	r2, [pc, #80]	; (d4604 <_Z12encode64Condyiihhhb+0x74>)
   d45b2:	4619      	mov	r1, r3
    return B_temp+(1000*G_temp)+(1000000*R_temp);
}
void encode64Cond(uint64_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
    uint64_t encNum = enCond;
    if(erase){
        for(i = 0; i < length; i++){
   d45b4:	429e      	cmp	r6, r3
   d45b6:	dd06      	ble.n	d45c6 <_Z12encode64Condyiihhhb+0x36>
            if(i+inpix >= 0){
   d45b8:	18e8      	adds	r0, r5, r3
   d45ba:	f103 0301 	add.w	r3, r3, #1
                screenArray[i+inpix] = 0;
   d45be:	bf58      	it	pl
   d45c0:	f842 1020 	strpl.w	r1, [r2, r0, lsl #2]
    return B_temp+(1000*G_temp)+(1000000*R_temp);
}
void encode64Cond(uint64_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
    uint64_t encNum = enCond;
    if(erase){
        for(i = 0; i < length; i++){
   d45c4:	e7f6      	b.n	d45b4 <_Z12encode64Condyiihhhb+0x24>
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
            }
        }
    }
    for(i = 0; i < length; i++){
   d45c6:	2400      	movs	r4, #0
   d45c8:	42a6      	cmp	r6, r4
   d45ca:	dd16      	ble.n	d45fa <_Z12encode64Condyiihhhb+0x6a>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
   d45cc:	f00a 0201 	and.w	r2, sl, #1
   d45d0:	2300      	movs	r3, #0
   d45d2:	4313      	orrs	r3, r2
   d45d4:	d00b      	beq.n	d45ee <_Z12encode64Condyiihhhb+0x5e>
   d45d6:	192b      	adds	r3, r5, r4
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	d408      	bmi.n	d45ee <_Z12encode64Condyiihhhb+0x5e>
            screenArray[i+inpix] = encodeColor(R,G,B);
   d45dc:	464a      	mov	r2, r9
   d45de:	4641      	mov	r1, r8
   d45e0:	4638      	mov	r0, r7
   d45e2:	f7ff ffcb 	bl	d457c <_Z11encodeColorhhh>
   d45e6:	4a07      	ldr	r2, [pc, #28]	; (d4604 <_Z12encode64Condyiihhhb+0x74>)
   d45e8:	9b01      	ldr	r3, [sp, #4]
   d45ea:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        }
        encNum = encNum >> 1;
   d45ee:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
   d45f2:	ea4f 0a3a 	mov.w	sl, sl, rrx
   d45f6:	3401      	adds	r4, #1
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
            }
        }
    }
    for(i = 0; i < length; i++){
   d45f8:	e7e6      	b.n	d45c8 <_Z12encode64Condyiihhhb+0x38>
   d45fa:	4b03      	ldr	r3, [pc, #12]	; (d4608 <_Z12encode64Condyiihhhb+0x78>)
   d45fc:	601c      	str	r4, [r3, #0]
        if((encNum & 1) == 1 && (i + inpix) >= 0){
            screenArray[i+inpix] = encodeColor(R,G,B);
        }
        encNum = encNum >> 1;
    }
}
   d45fe:	b003      	add	sp, #12
   d4600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4604:	2003db10 	.word	0x2003db10
   d4608:	2003dad8 	.word	0x2003dad8

000d460c <_Z12encode32Condmiihhhb>:
void encode32Cond(uint32_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d460c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4610:	4698      	mov	r8, r3
    uint32_t encNum = enCond;
    if(erase){
   d4612:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
            screenArray[i+inpix] = encodeColor(R,G,B);
        }
        encNum = encNum >> 1;
    }
}
void encode32Cond(uint32_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d4616:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
   d461a:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   d461e:	4606      	mov	r6, r0
   d4620:	460d      	mov	r5, r1
   d4622:	4617      	mov	r7, r2
    uint32_t encNum = enCond;
    if(erase){
   d4624:	b15b      	cbz	r3, d463e <_Z12encode32Condmiihhhb+0x32>
        for(i = 0; i < length; i++){
   d4626:	2200      	movs	r2, #0
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
   d4628:	4b12      	ldr	r3, [pc, #72]	; (d4674 <_Z12encode32Condmiihhhb+0x68>)
   d462a:	4611      	mov	r1, r2
    }
}
void encode32Cond(uint32_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
    uint32_t encNum = enCond;
    if(erase){
        for(i = 0; i < length; i++){
   d462c:	4297      	cmp	r7, r2
   d462e:	dd06      	ble.n	d463e <_Z12encode32Condmiihhhb+0x32>
            if(i+inpix >= 0){
   d4630:	18a8      	adds	r0, r5, r2
   d4632:	f102 0201 	add.w	r2, r2, #1
                screenArray[i+inpix] = 0;
   d4636:	bf58      	it	pl
   d4638:	f843 1020 	strpl.w	r1, [r3, r0, lsl #2]
    }
}
void encode32Cond(uint32_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
    uint32_t encNum = enCond;
    if(erase){
        for(i = 0; i < length; i++){
   d463c:	e7f6      	b.n	d462c <_Z12encode32Condmiihhhb+0x20>
            }
        }
    }
    for(i = 0; i < length; i++){
        if((encNum & 1) == 1 && (i + inpix) >= 0){
            screenArray[i+inpix] = encodeColor(R,G,B);
   d463e:	4b0d      	ldr	r3, [pc, #52]	; (d4674 <_Z12encode32Condmiihhhb+0x68>)
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
            }
        }
    }
    for(i = 0; i < length; i++){
   d4640:	2400      	movs	r4, #0
   d4642:	42a7      	cmp	r7, r4
   d4644:	dd10      	ble.n	d4668 <_Z12encode32Condmiihhhb+0x5c>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
   d4646:	07f2      	lsls	r2, r6, #31
   d4648:	d50b      	bpl.n	d4662 <_Z12encode32Condmiihhhb+0x56>
   d464a:	eb15 0b04 	adds.w	fp, r5, r4
   d464e:	d408      	bmi.n	d4662 <_Z12encode32Condmiihhhb+0x56>
            screenArray[i+inpix] = encodeColor(R,G,B);
   d4650:	4652      	mov	r2, sl
   d4652:	4649      	mov	r1, r9
   d4654:	4640      	mov	r0, r8
   d4656:	9301      	str	r3, [sp, #4]
   d4658:	f7ff ff90 	bl	d457c <_Z11encodeColorhhh>
   d465c:	9b01      	ldr	r3, [sp, #4]
   d465e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
        }
        encNum = encNum >> 1;
   d4662:	0876      	lsrs	r6, r6, #1
   d4664:	3401      	adds	r4, #1
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
            }
        }
    }
    for(i = 0; i < length; i++){
   d4666:	e7ec      	b.n	d4642 <_Z12encode32Condmiihhhb+0x36>
   d4668:	4b03      	ldr	r3, [pc, #12]	; (d4678 <_Z12encode32Condmiihhhb+0x6c>)
   d466a:	601c      	str	r4, [r3, #0]
        if((encNum & 1) == 1 && (i + inpix) >= 0){
            screenArray[i+inpix] = encodeColor(R,G,B);
        }
        encNum = encNum >> 1;
    }
}
   d466c:	b003      	add	sp, #12
   d466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4672:	bf00      	nop
   d4674:	2003db10 	.word	0x2003db10
   d4678:	2003dad8 	.word	0x2003dad8

000d467c <_Z11encode8Condhiihhhb>:
void encode8Cond(uint8_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d467c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4680:	4698      	mov	r8, r3
    uint8_t encNum = enCond;
    if(erase){
   d4682:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
            screenArray[i+inpix] = encodeColor(R,G,B);
        }
        encNum = encNum >> 1;
    }
}
void encode8Cond(uint8_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d4686:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
   d468a:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   d468e:	4606      	mov	r6, r0
   d4690:	460d      	mov	r5, r1
   d4692:	4617      	mov	r7, r2
    uint8_t encNum = enCond;
    if(erase){
   d4694:	b15b      	cbz	r3, d46ae <_Z11encode8Condhiihhhb+0x32>
        for(i = 0; i < length; i++){
   d4696:	2200      	movs	r2, #0
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
   d4698:	4b12      	ldr	r3, [pc, #72]	; (d46e4 <_Z11encode8Condhiihhhb+0x68>)
   d469a:	4611      	mov	r1, r2
    }
}
void encode8Cond(uint8_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
    uint8_t encNum = enCond;
    if(erase){
        for(i = 0; i < length; i++){
   d469c:	4297      	cmp	r7, r2
   d469e:	dd06      	ble.n	d46ae <_Z11encode8Condhiihhhb+0x32>
            if(i+inpix >= 0){
   d46a0:	18a8      	adds	r0, r5, r2
   d46a2:	f102 0201 	add.w	r2, r2, #1
                screenArray[i+inpix] = 0;
   d46a6:	bf58      	it	pl
   d46a8:	f843 1020 	strpl.w	r1, [r3, r0, lsl #2]
    }
}
void encode8Cond(uint8_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
    uint8_t encNum = enCond;
    if(erase){
        for(i = 0; i < length; i++){
   d46ac:	e7f6      	b.n	d469c <_Z11encode8Condhiihhhb+0x20>
            }
        }
    }
    for(i = 0; i < length; i++){
        if((encNum & 1) == 1 && (i + inpix) >= 0){
            screenArray[i+inpix] = encodeColor(R,G,B);
   d46ae:	4b0d      	ldr	r3, [pc, #52]	; (d46e4 <_Z11encode8Condhiihhhb+0x68>)
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
            }
        }
    }
    for(i = 0; i < length; i++){
   d46b0:	2400      	movs	r4, #0
   d46b2:	42a7      	cmp	r7, r4
   d46b4:	dd10      	ble.n	d46d8 <_Z11encode8Condhiihhhb+0x5c>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
   d46b6:	07f2      	lsls	r2, r6, #31
   d46b8:	d50b      	bpl.n	d46d2 <_Z11encode8Condhiihhhb+0x56>
   d46ba:	eb15 0b04 	adds.w	fp, r5, r4
   d46be:	d408      	bmi.n	d46d2 <_Z11encode8Condhiihhhb+0x56>
            screenArray[i+inpix] = encodeColor(R,G,B);
   d46c0:	4652      	mov	r2, sl
   d46c2:	4649      	mov	r1, r9
   d46c4:	4640      	mov	r0, r8
   d46c6:	9301      	str	r3, [sp, #4]
   d46c8:	f7ff ff58 	bl	d457c <_Z11encodeColorhhh>
   d46cc:	9b01      	ldr	r3, [sp, #4]
   d46ce:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
        }
        encNum = encNum >> 1;
   d46d2:	0876      	lsrs	r6, r6, #1
   d46d4:	3401      	adds	r4, #1
            if(i+inpix >= 0){
                screenArray[i+inpix] = 0;
            }
        }
    }
    for(i = 0; i < length; i++){
   d46d6:	e7ec      	b.n	d46b2 <_Z11encode8Condhiihhhb+0x36>
   d46d8:	4b03      	ldr	r3, [pc, #12]	; (d46e8 <_Z11encode8Condhiihhhb+0x6c>)
   d46da:	601c      	str	r4, [r3, #0]
        if((encNum & 1) == 1 && (i + inpix) >= 0){
            screenArray[i+inpix] = encodeColor(R,G,B);
        }
        encNum = encNum >> 1;
    }
}
   d46dc:	b003      	add	sp, #12
   d46de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d46e2:	bf00      	nop
   d46e4:	2003db10 	.word	0x2003db10
   d46e8:	2003dad8 	.word	0x2003dad8
   d46ec:	00000000 	.word	0x00000000

000d46f0 <_Z16displayConditioniihhhb>:
void displayCondition(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d46f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d46f4:	ed2d 8b02 	vpush	{d8}
   d46f8:	461f      	mov	r7, r3
    if(cltr[0] == 'd')
   d46fa:	4b77      	ldr	r3, [pc, #476]	; (d48d8 <_Z16displayConditioniihhhb+0x1e8>)
   d46fc:	781b      	ldrb	r3, [r3, #0]
            screenArray[i+inpix] = encodeColor(R,G,B);
        }
        encNum = encNum >> 1;
    }
}
void displayCondition(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d46fe:	b084      	sub	sp, #16
    if(cltr[0] == 'd')
   d4700:	2b64      	cmp	r3, #100	; 0x64
            screenArray[i+inpix] = encodeColor(R,G,B);
        }
        encNum = encNum >> 1;
    }
}
void displayCondition(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
   d4702:	4604      	mov	r4, r0
   d4704:	460d      	mov	r5, r1
   d4706:	4616      	mov	r6, r2
   d4708:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d470c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
   d4710:	f5a0 7348 	sub.w	r3, r0, #800	; 0x320
   d4714:	f2a0 3a22 	subw	sl, r0, #802	; 0x322
    if(cltr[0] == 'd')
   d4718:	d15f      	bne.n	d47da <_Z16displayConditioniihhhb+0xea>
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)                       //Clear or Haze
   d471a:	2b01      	cmp	r3, #1
   d471c:	d903      	bls.n	d4726 <_Z16displayConditioniihhhb+0x36>
   d471e:	f240 23d1 	movw	r3, #721	; 0x2d1
   d4722:	4298      	cmp	r0, r3
   d4724:	d132      	bne.n	d478c <_Z16displayConditioniihhhb+0x9c>
        {
            encode64Cond(2251921634885640,inpix, 64,round(R/1.8),round(G*1.3),0, erase);
   d4726:	4630      	mov	r0, r6
   d4728:	f004 fc8a 	bl	d9040 <__aeabi_i2d>
   d472c:	a35c      	add	r3, pc, #368	; (adr r3, d48a0 <_Z16displayConditioniihhhb+0x1b0>)
   d472e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4732:	f004 fe15 	bl	d9360 <__aeabi_ddiv>
   d4736:	ec41 0b10 	vmov	d0, r0, r1
   d473a:	f004 fad7 	bl	d8cec <round>
   d473e:	4638      	mov	r0, r7
   d4740:	eeb0 8a40 	vmov.f32	s16, s0
   d4744:	eef0 8a60 	vmov.f32	s17, s1
   d4748:	f004 fc7a 	bl	d9040 <__aeabi_i2d>
   d474c:	a356      	add	r3, pc, #344	; (adr r3, d48a8 <_Z16displayConditioniihhhb+0x1b8>)
   d474e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4752:	f004 fcdb 	bl	d910c <__aeabi_dmul>
   d4756:	ec41 0b10 	vmov	d0, r0, r1
   d475a:	f004 fac7 	bl	d8cec <round>
   d475e:	2300      	movs	r3, #0
   d4760:	ec51 0b10 	vmov	r0, r1, d0
   d4764:	9302      	str	r3, [sp, #8]
   d4766:	f8cd 800c 	str.w	r8, [sp, #12]
   d476a:	f004 ff91 	bl	d9690 <__aeabi_d2uiz>
   d476e:	b2c0      	uxtb	r0, r0
   d4770:	9001      	str	r0, [sp, #4]
   d4772:	ec51 0b18 	vmov	r0, r1, d8
   d4776:	f004 ff8b 	bl	d9690 <__aeabi_d2uiz>
   d477a:	b2c0      	uxtb	r0, r0
   d477c:	9000      	str	r0, [sp, #0]
   d477e:	2340      	movs	r3, #64	; 0x40
   d4780:	462a      	mov	r2, r5
   d4782:	a14b      	add	r1, pc, #300	; (adr r1, d48b0 <_Z16displayConditioniihhhb+0x1c0>)
   d4784:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4788:	f7ff ff02 	bl	d4590 <_Z12encode64Condyiihhhb>
        }
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
   d478c:	f1ba 0f01 	cmp.w	sl, #1
   d4790:	d86a      	bhi.n	d4868 <_Z16displayConditioniihhhb+0x178>
        {
            encode64Cond(17264541704,inpix, 64, R,G*1.9,0, erase);
   d4792:	2300      	movs	r3, #0
   d4794:	4638      	mov	r0, r7
   d4796:	9302      	str	r3, [sp, #8]
   d4798:	f8cd 800c 	str.w	r8, [sp, #12]
   d479c:	f004 fc50 	bl	d9040 <__aeabi_i2d>
   d47a0:	a345      	add	r3, pc, #276	; (adr r3, d48b8 <_Z16displayConditioniihhhb+0x1c8>)
   d47a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47a6:	f004 fcb1 	bl	d910c <__aeabi_dmul>
   d47aa:	f004 ff71 	bl	d9690 <__aeabi_d2uiz>
   d47ae:	b2c0      	uxtb	r0, r0
   d47b0:	9001      	str	r0, [sp, #4]
   d47b2:	462a      	mov	r2, r5
   d47b4:	9600      	str	r6, [sp, #0]
   d47b6:	2340      	movs	r3, #64	; 0x40
   d47b8:	a141      	add	r1, pc, #260	; (adr r1, d48c0 <_Z16displayConditioniihhhb+0x1d0>)
   d47ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   d47be:	f7ff fee7 	bl	d4590 <_Z12encode64Condyiihhhb>
            encode64Cond(1168745917412540416,inpix, 64,R,G,B, erase);
   d47c2:	f8cd 800c 	str.w	r8, [sp, #12]
   d47c6:	e88d 02c0 	stmia.w	sp, {r6, r7, r9}
   d47ca:	2340      	movs	r3, #64	; 0x40
   d47cc:	462a      	mov	r2, r5
   d47ce:	a13e      	add	r1, pc, #248	; (adr r1, d48c8 <_Z16displayConditioniihhhb+0x1d8>)
   d47d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d47d4:	f7ff fedc 	bl	d4590 <_Z12encode64Condyiihhhb>
   d47d8:	e046      	b.n	d4868 <_Z16displayConditioniihhhb+0x178>
        }
    }
    else
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)
   d47da:	2b01      	cmp	r3, #1
   d47dc:	d903      	bls.n	d47e6 <_Z16displayConditioniihhhb+0xf6>
   d47de:	f240 23d1 	movw	r3, #721	; 0x2d1
   d47e2:	4298      	cmp	r0, r3
   d47e4:	d119      	bne.n	d481a <_Z16displayConditioniihhhb+0x12a>
        {
            encode64Cond(68716846972928,inpix, 64, R,G*1.2,B/3, erase);
   d47e6:	4638      	mov	r0, r7
   d47e8:	f8cd 800c 	str.w	r8, [sp, #12]
   d47ec:	2303      	movs	r3, #3
   d47ee:	fbb9 f3f3 	udiv	r3, r9, r3
   d47f2:	9302      	str	r3, [sp, #8]
   d47f4:	f004 fc24 	bl	d9040 <__aeabi_i2d>
   d47f8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d47fc:	4b37      	ldr	r3, [pc, #220]	; (d48dc <_Z16displayConditioniihhhb+0x1ec>)
   d47fe:	f004 fc85 	bl	d910c <__aeabi_dmul>
   d4802:	f004 ff45 	bl	d9690 <__aeabi_d2uiz>
   d4806:	b2c0      	uxtb	r0, r0
   d4808:	9001      	str	r0, [sp, #4]
   d480a:	9600      	str	r6, [sp, #0]
   d480c:	2340      	movs	r3, #64	; 0x40
   d480e:	462a      	mov	r2, r5
   d4810:	4833      	ldr	r0, [pc, #204]	; (d48e0 <_Z16displayConditioniihhhb+0x1f0>)
   d4812:	f643 617f 	movw	r1, #15999	; 0x3e7f
   d4816:	f7ff febb 	bl	d4590 <_Z12encode64Condyiihhhb>
        }
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
   d481a:	f1ba 0f01 	cmp.w	sl, #1
   d481e:	d823      	bhi.n	d4868 <_Z16displayConditioniihhhb+0x178>
        {
            encode64Cond(263714,inpix, 64, R,G*1.2,B/3, erase);
   d4820:	4638      	mov	r0, r7
   d4822:	f8cd 800c 	str.w	r8, [sp, #12]
   d4826:	2303      	movs	r3, #3
   d4828:	fbb9 f3f3 	udiv	r3, r9, r3
   d482c:	9302      	str	r3, [sp, #8]
   d482e:	f004 fc07 	bl	d9040 <__aeabi_i2d>
   d4832:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d4836:	4b29      	ldr	r3, [pc, #164]	; (d48dc <_Z16displayConditioniihhhb+0x1ec>)
   d4838:	f004 fc68 	bl	d910c <__aeabi_dmul>
   d483c:	f004 ff28 	bl	d9690 <__aeabi_d2uiz>
   d4840:	b2c0      	uxtb	r0, r0
   d4842:	9001      	str	r0, [sp, #4]
   d4844:	2340      	movs	r3, #64	; 0x40
   d4846:	462a      	mov	r2, r5
   d4848:	4826      	ldr	r0, [pc, #152]	; (d48e4 <_Z16displayConditioniihhhb+0x1f4>)
   d484a:	9600      	str	r6, [sp, #0]
   d484c:	2100      	movs	r1, #0
   d484e:	f7ff fe9f 	bl	d4590 <_Z12encode64Condyiihhhb>
            encode64Cond(17833647421456,inpix, 64,R,G,B, erase);
   d4852:	f8cd 800c 	str.w	r8, [sp, #12]
   d4856:	e88d 02c0 	stmia.w	sp, {r6, r7, r9}
   d485a:	2340      	movs	r3, #64	; 0x40
   d485c:	462a      	mov	r2, r5
   d485e:	4822      	ldr	r0, [pc, #136]	; (d48e8 <_Z16displayConditioniihhhb+0x1f8>)
   d4860:	f241 0138 	movw	r1, #4152	; 0x1038
   d4864:	f7ff fe94 	bl	d4590 <_Z12encode64Condyiihhhb>
        }
    }
    if((cnum > 199 && cnum < 721) || (cnum > 730 && cnum < 772)){
   d4868:	f1a4 03c8 	sub.w	r3, r4, #200	; 0xc8
   d486c:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
   d4870:	d903      	bls.n	d487a <_Z16displayConditioniihhhb+0x18a>
   d4872:	f2a4 24db 	subw	r4, r4, #731	; 0x2db
   d4876:	2c28      	cmp	r4, #40	; 0x28
   d4878:	d80a      	bhi.n	d4890 <_Z16displayConditioniihhhb+0x1a0>
        encode64Cond(570676717487874,inpix, 64, R,G,B, erase);
   d487a:	f8cd 800c 	str.w	r8, [sp, #12]
   d487e:	e88d 02c0 	stmia.w	sp, {r6, r7, r9}
   d4882:	2340      	movs	r3, #64	; 0x40
   d4884:	462a      	mov	r2, r5
   d4886:	a112      	add	r1, pc, #72	; (adr r1, d48d0 <_Z16displayConditioniihhhb+0x1e0>)
   d4888:	e9d1 0100 	ldrd	r0, r1, [r1]
   d488c:	f7ff fe80 	bl	d4590 <_Z12encode64Condyiihhhb>
    }
}
   d4890:	b004      	add	sp, #16
   d4892:	ecbd 8b02 	vpop	{d8}
   d4896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d489a:	bf00      	nop
   d489c:	f3af 8000 	nop.w
   d48a0:	cccccccd 	.word	0xcccccccd
   d48a4:	3ffccccc 	.word	0x3ffccccc
   d48a8:	cccccccd 	.word	0xcccccccd
   d48ac:	3ff4cccc 	.word	0x3ff4cccc
   d48b0:	5d1c0008 	.word	0x5d1c0008
   d48b4:	0008001c 	.word	0x0008001c
   d48b8:	66666666 	.word	0x66666666
   d48bc:	3ffe6666 	.word	0x3ffe6666
   d48c0:	050c0008 	.word	0x050c0008
   d48c4:	00000004 	.word	0x00000004
   d48c8:	38100000 	.word	0x38100000
   d48cc:	10383838 	.word	0x10383838
   d48d0:	07070702 	.word	0x07070702
   d48d4:	00020707 	.word	0x00020707
   d48d8:	2003daf4 	.word	0x2003daf4
   d48dc:	3ff33333 	.word	0x3ff33333
   d48e0:	63410000 	.word	0x63410000
   d48e4:	00040622 	.word	0x00040622
   d48e8:	38383810 	.word	0x38383810

000d48ec <_Z13displayNumberiihhhb>:
void displayNumber(int val, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d48ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48ee:	461e      	mov	r6, r3
    uint32_t encNum;
    if(small){
   d48f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
    }
    if((cnum > 199 && cnum < 721) || (cnum > 730 && cnum < 772)){
        encode64Cond(570676717487874,inpix, 64, R,G,B, erase);
    }
}
void displayNumber(int val, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d48f4:	460c      	mov	r4, r1
   d48f6:	4615      	mov	r5, r2
    uint32_t encNum;
    if(small){
   d48f8:	b113      	cbz	r3, d4900 <_Z13displayNumberiihhhb+0x14>
        encNum = snum(val);
   d48fa:	f7ff fe13 	bl	d4524 <_Z4snumi>
   d48fe:	e001      	b.n	d4904 <_Z13displayNumberiihhhb+0x18>
    }
    else{
        encNum = num(val);
   d4900:	f7ff fe26 	bl	d4550 <_Z3numi>
    } 
    for(i = 0; i < 32; i++){
   d4904:	2300      	movs	r3, #0
        if(i+inpix >= 0){
            screenArray[i+inpix] = 0;
   d4906:	4a12      	ldr	r2, [pc, #72]	; (d4950 <_Z13displayNumberiihhhb+0x64>)
   d4908:	4619      	mov	r1, r3
        encNum = snum(val);
    }
    else{
        encNum = num(val);
    } 
    for(i = 0; i < 32; i++){
   d490a:	2b20      	cmp	r3, #32
   d490c:	d006      	beq.n	d491c <_Z13displayNumberiihhhb+0x30>
        if(i+inpix >= 0){
   d490e:	18e7      	adds	r7, r4, r3
   d4910:	f103 0301 	add.w	r3, r3, #1
            screenArray[i+inpix] = 0;
   d4914:	bf58      	it	pl
   d4916:	f842 1027 	strpl.w	r1, [r2, r7, lsl #2]
        encNum = snum(val);
    }
    else{
        encNum = num(val);
    } 
    for(i = 0; i < 32; i++){
   d491a:	e7f6      	b.n	d490a <_Z13displayNumberiihhhb+0x1e>
            screenArray[i+inpix] = 0;
        }
    }
    for(i = 0; i < 32; i++){
        if((encNum & 1) == 1 && (i + inpix) >= 0){
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
   d491c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4924:	fb02 3606 	mla	r6, r2, r6, r3
   d4928:	4b0a      	ldr	r3, [pc, #40]	; (d4954 <_Z13displayNumberiihhhb+0x68>)
   d492a:	fb03 6505 	mla	r5, r3, r5, r6
   d492e:	4b08      	ldr	r3, [pc, #32]	; (d4950 <_Z13displayNumberiihhhb+0x64>)
   d4930:	2100      	movs	r1, #0
    for(i = 0; i < 32; i++){
        if(i+inpix >= 0){
            screenArray[i+inpix] = 0;
        }
    }
    for(i = 0; i < 32; i++){
   d4932:	2920      	cmp	r1, #32
   d4934:	d008      	beq.n	d4948 <_Z13displayNumberiihhhb+0x5c>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
   d4936:	07c2      	lsls	r2, r0, #31
   d4938:	d503      	bpl.n	d4942 <_Z13displayNumberiihhhb+0x56>
   d493a:	1862      	adds	r2, r4, r1
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
   d493c:	bf58      	it	pl
   d493e:	f843 5022 	strpl.w	r5, [r3, r2, lsl #2]
        }
        encNum = encNum >> 1;
   d4942:	0840      	lsrs	r0, r0, #1
   d4944:	3101      	adds	r1, #1
    for(i = 0; i < 32; i++){
        if(i+inpix >= 0){
            screenArray[i+inpix] = 0;
        }
    }
    for(i = 0; i < 32; i++){
   d4946:	e7f4      	b.n	d4932 <_Z13displayNumberiihhhb+0x46>
   d4948:	4b03      	ldr	r3, [pc, #12]	; (d4958 <_Z13displayNumberiihhhb+0x6c>)
   d494a:	6019      	str	r1, [r3, #0]
   d494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d494e:	bf00      	nop
   d4950:	2003db10 	.word	0x2003db10
   d4954:	000f4240 	.word	0x000f4240
   d4958:	2003dad8 	.word	0x2003dad8

000d495c <_Z6lettercihhhb>:
// 6 14 22  30
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
return numArray[val];

}
uint8_t letter(char ltr, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d495c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4960:	4604      	mov	r4, r0
    uint8_t charNumber = (int) ltr;
    if(charNumber >= 48 && charNumber <= 57){
   d4962:	3830      	subs	r0, #48	; 0x30
   d4964:	fa5f fc80 	uxtb.w	ip, r0
   d4968:	f1bc 0f09 	cmp.w	ip, #9
// 6 14 22  30
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
return numArray[val];

}
uint8_t letter(char ltr, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d496c:	460d      	mov	r5, r1
   d496e:	4617      	mov	r7, r2
   d4970:	4698      	mov	r8, r3
   d4972:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   d4976:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    uint8_t charNumber = (int) ltr;
    if(charNumber >= 48 && charNumber <= 57){
   d497a:	d812      	bhi.n	d49a2 <_Z6lettercihhhb+0x46>
        if(small){
   d497c:	f1be 0f00 	cmp.w	lr, #0
   d4980:	d008      	beq.n	d4994 <_Z6lettercihhhb+0x38>
            displayNumber((charNumber-48),inpix+2,R,G,B,true);
   d4982:	2101      	movs	r1, #1
   d4984:	9101      	str	r1, [sp, #4]
   d4986:	9600      	str	r6, [sp, #0]
   d4988:	1ca9      	adds	r1, r5, #2
   d498a:	f7ff ffaf 	bl	d48ec <_Z13displayNumberiihhhb>
            return 3;
   d498e:	2003      	movs	r0, #3
   d4990:	f000 bc73 	b.w	d527a <_Z6lettercihhhb+0x91e>
        }
        else{
            displayNumber((charNumber-48),inpix,R,G,B,false);
   d4994:	e88d 4040 	stmia.w	sp, {r6, lr}
   d4998:	f7ff ffa8 	bl	d48ec <_Z13displayNumberiihhhb>
        } 
        return 4;
   d499c:	2004      	movs	r0, #4
   d499e:	f000 bc6c 	b.w	d527a <_Z6lettercihhhb+0x91e>
    }
    switch (charNumber)
   d49a2:	3c20      	subs	r4, #32
   d49a4:	2c5c      	cmp	r4, #92	; 0x5c
   d49a6:	f200 8467 	bhi.w	d5278 <_Z6lettercihhhb+0x91c>
   d49aa:	e8df f014 	tbh	[pc, r4, lsl #1]
   d49ae:	005d      	.short	0x005d
   d49b0:	006f0063 	.word	0x006f0063
   d49b4:	04650465 	.word	0x04650465
   d49b8:	04650465 	.word	0x04650465
   d49bc:	0088007c 	.word	0x0088007c
   d49c0:	04650095 	.word	0x04650095
   d49c4:	00ae00a2 	.word	0x00ae00a2
   d49c8:	00c700ba 	.word	0x00c700ba
   d49cc:	046500d3 	.word	0x046500d3
   d49d0:	04650465 	.word	0x04650465
   d49d4:	04650465 	.word	0x04650465
   d49d8:	04650465 	.word	0x04650465
   d49dc:	04650465 	.word	0x04650465
   d49e0:	00df0465 	.word	0x00df0465
   d49e4:	00f700eb 	.word	0x00f700eb
   d49e8:	010f0103 	.word	0x010f0103
   d49ec:	0465011b 	.word	0x0465011b
   d49f0:	01330127 	.word	0x01330127
   d49f4:	014b013f 	.word	0x014b013f
   d49f8:	01630157 	.word	0x01630157
   d49fc:	017b016f 	.word	0x017b016f
   d4a00:	01930187 	.word	0x01930187
   d4a04:	01ab019f 	.word	0x01ab019f
   d4a08:	01ce01b7 	.word	0x01ce01b7
   d4a0c:	01f101e5 	.word	0x01f101e5
   d4a10:	020901fd 	.word	0x020901fd
   d4a14:	02530215 	.word	0x02530215
   d4a18:	0276026a 	.word	0x0276026a
   d4a1c:	02990282 	.word	0x02990282
   d4a20:	02bc02a5 	.word	0x02bc02a5
   d4a24:	046502c8 	.word	0x046502c8
   d4a28:	046502d5 	.word	0x046502d5
   d4a2c:	007c0465 	.word	0x007c0465
   d4a30:	02ee02e2 	.word	0x02ee02e2
   d4a34:	030602fa 	.word	0x030602fa
   d4a38:	031e0312 	.word	0x031e0312
   d4a3c:	0336032a 	.word	0x0336032a
   d4a40:	034e0342 	.word	0x034e0342
   d4a44:	0458035a 	.word	0x0458035a
   d4a48:	037d0366 	.word	0x037d0366
   d4a4c:	03950389 	.word	0x03950389
   d4a50:	03ad03a1 	.word	0x03ad03a1
   d4a54:	03c503b9 	.word	0x03c503b9
   d4a58:	041103d1 	.word	0x041103d1
   d4a5c:	0434041d 	.word	0x0434041d
   d4a60:	044c0440 	.word	0x044c0440
   d4a64:	04580465 	.word	0x04580465
    {
    case 32:
        encode8Cond(127,inpix,8,0,0,0,true);
   d4a68:	2300      	movs	r3, #0
   d4a6a:	2401      	movs	r4, #1
   d4a6c:	9402      	str	r4, [sp, #8]
   d4a6e:	9301      	str	r3, [sp, #4]
   d4a70:	9300      	str	r3, [sp, #0]
   d4a72:	e3fa      	b.n	d526a <_Z6lettercihhhb+0x90e>
        return 1;
    case 33:
        encode8Cond(47,inpix,8,R,G,B,true);
   d4a74:	2401      	movs	r4, #1
   d4a76:	4613      	mov	r3, r2
   d4a78:	202f      	movs	r0, #47	; 0x2f
   d4a7a:	9402      	str	r4, [sp, #8]
   d4a7c:	9601      	str	r6, [sp, #4]
   d4a7e:	f8cd 8000 	str.w	r8, [sp]
   d4a82:	2208      	movs	r2, #8
   d4a84:	f7ff fdfa 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d4a88:	4620      	mov	r0, r4
   d4a8a:	e3f6      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 34:
        encode32Cond(196611,inpix,24,R,G,B,true);
   d4a8c:	2301      	movs	r3, #1
   d4a8e:	9302      	str	r3, [sp, #8]
   d4a90:	f04f 1003 	mov.w	r0, #196611	; 0x30003
   d4a94:	4613      	mov	r3, r2
   d4a96:	9601      	str	r6, [sp, #4]
   d4a98:	f8cd 8000 	str.w	r8, [sp]
   d4a9c:	2218      	movs	r2, #24
   d4a9e:	f7ff fdb5 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4aa2:	2003      	movs	r0, #3
   d4aa4:	e3e9      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 39:
    case 96:
        encode8Cond(3,inpix,8,R,G,B,true);
   d4aa6:	2401      	movs	r4, #1
   d4aa8:	4613      	mov	r3, r2
   d4aaa:	2003      	movs	r0, #3
   d4aac:	9402      	str	r4, [sp, #8]
   d4aae:	9601      	str	r6, [sp, #4]
   d4ab0:	f8cd 8000 	str.w	r8, [sp]
   d4ab4:	2208      	movs	r2, #8
   d4ab6:	f7ff fde1 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d4aba:	4620      	mov	r0, r4
   d4abc:	e3dd      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 40:
        encode32Cond(16702,inpix,16,R,G,B,true);
   d4abe:	2301      	movs	r3, #1
   d4ac0:	9302      	str	r3, [sp, #8]
   d4ac2:	f244 103e 	movw	r0, #16702	; 0x413e
   d4ac6:	4613      	mov	r3, r2
   d4ac8:	9601      	str	r6, [sp, #4]
   d4aca:	f8cd 8000 	str.w	r8, [sp]
   d4ace:	2210      	movs	r2, #16
   d4ad0:	f7ff fd9c 	bl	d460c <_Z12encode32Condmiihhhb>
        return 2;
   d4ad4:	2002      	movs	r0, #2
   d4ad6:	e3d0      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 41:
        encode32Cond(15937,inpix,16,R,G,B,true);
   d4ad8:	2301      	movs	r3, #1
   d4ada:	9302      	str	r3, [sp, #8]
   d4adc:	f643 6041 	movw	r0, #15937	; 0x3e41
   d4ae0:	4613      	mov	r3, r2
   d4ae2:	9601      	str	r6, [sp, #4]
   d4ae4:	f8cd 8000 	str.w	r8, [sp]
   d4ae8:	2210      	movs	r2, #16
   d4aea:	f7ff fd8f 	bl	d460c <_Z12encode32Condmiihhhb>
        return 2;
   d4aee:	2002      	movs	r0, #2
   d4af0:	e3c3      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 43:
        encode32Cond(531464,inpix,24,R,G,B,true);
   d4af2:	2301      	movs	r3, #1
   d4af4:	9302      	str	r3, [sp, #8]
   d4af6:	48be      	ldr	r0, [pc, #760]	; (d4df0 <_Z6lettercihhhb+0x494>)
   d4af8:	9601      	str	r6, [sp, #4]
   d4afa:	4613      	mov	r3, r2
   d4afc:	f8cd 8000 	str.w	r8, [sp]
   d4b00:	2218      	movs	r2, #24
   d4b02:	f7ff fd83 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4b06:	2003      	movs	r0, #3
   d4b08:	e3b7      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 44:
        encode8Cond(96,inpix,8,R,G,B,true);
   d4b0a:	2401      	movs	r4, #1
   d4b0c:	4613      	mov	r3, r2
   d4b0e:	2060      	movs	r0, #96	; 0x60
   d4b10:	9402      	str	r4, [sp, #8]
   d4b12:	9601      	str	r6, [sp, #4]
   d4b14:	f8cd 8000 	str.w	r8, [sp]
   d4b18:	2208      	movs	r2, #8
   d4b1a:	f7ff fdaf 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d4b1e:	4620      	mov	r0, r4
   d4b20:	e3ab      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 45:
        encode32Cond(2056,inpix,16,R,G,B,true);
   d4b22:	2301      	movs	r3, #1
   d4b24:	9302      	str	r3, [sp, #8]
   d4b26:	f640 0008 	movw	r0, #2056	; 0x808
   d4b2a:	4613      	mov	r3, r2
   d4b2c:	9601      	str	r6, [sp, #4]
   d4b2e:	f8cd 8000 	str.w	r8, [sp]
   d4b32:	2210      	movs	r2, #16
   d4b34:	f7ff fd6a 	bl	d460c <_Z12encode32Condmiihhhb>
        return 2;
   d4b38:	2002      	movs	r0, #2
   d4b3a:	e39e      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 46:
        encode8Cond(64,inpix,8,R,G,B,true);
   d4b3c:	2401      	movs	r4, #1
   d4b3e:	4613      	mov	r3, r2
   d4b40:	2040      	movs	r0, #64	; 0x40
   d4b42:	9402      	str	r4, [sp, #8]
   d4b44:	9601      	str	r6, [sp, #4]
   d4b46:	f8cd 8000 	str.w	r8, [sp]
   d4b4a:	2208      	movs	r2, #8
   d4b4c:	f7ff fd96 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d4b50:	4620      	mov	r0, r4
   d4b52:	e392      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 47:
        encode32Cond(399456,inpix,24,R,G,B,true);
   d4b54:	2301      	movs	r3, #1
   d4b56:	9302      	str	r3, [sp, #8]
   d4b58:	48a6      	ldr	r0, [pc, #664]	; (d4df4 <_Z6lettercihhhb+0x498>)
   d4b5a:	9601      	str	r6, [sp, #4]
   d4b5c:	4613      	mov	r3, r2
   d4b5e:	f8cd 8000 	str.w	r8, [sp]
   d4b62:	2218      	movs	r2, #24
   d4b64:	f7ff fd52 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;   
   d4b68:	2003      	movs	r0, #3
   d4b6a:	e386      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 58:
        encode8Cond(34,inpix,8,R,G,B,true);
   d4b6c:	2401      	movs	r4, #1
   d4b6e:	4613      	mov	r3, r2
   d4b70:	2022      	movs	r0, #34	; 0x22
   d4b72:	9402      	str	r4, [sp, #8]
   d4b74:	9601      	str	r6, [sp, #4]
   d4b76:	f8cd 8000 	str.w	r8, [sp]
   d4b7a:	2208      	movs	r2, #8
   d4b7c:	f7ff fd7e 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d4b80:	4620      	mov	r0, r4
   d4b82:	e37a      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 59:
        encode8Cond(98,inpix,8,R,G,B,true);
   d4b84:	2401      	movs	r4, #1
   d4b86:	4613      	mov	r3, r2
   d4b88:	2062      	movs	r0, #98	; 0x62
   d4b8a:	9402      	str	r4, [sp, #8]
   d4b8c:	9601      	str	r6, [sp, #4]
   d4b8e:	f8cd 8000 	str.w	r8, [sp]
   d4b92:	2208      	movs	r2, #8
   d4b94:	f7ff fd72 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d4b98:	4620      	mov	r0, r4
   d4b9a:	e36e      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 60:
        encode32Cond(2233352,inpix,24,R,G,B,true);
   d4b9c:	2301      	movs	r3, #1
   d4b9e:	9302      	str	r3, [sp, #8]
   d4ba0:	4895      	ldr	r0, [pc, #596]	; (d4df8 <_Z6lettercihhhb+0x49c>)
   d4ba2:	9601      	str	r6, [sp, #4]
   d4ba4:	4613      	mov	r3, r2
   d4ba6:	f8cd 8000 	str.w	r8, [sp]
   d4baa:	2218      	movs	r2, #24
   d4bac:	f7ff fd2e 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4bb0:	2003      	movs	r0, #3
   d4bb2:	e362      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 61:
        encode32Cond(1315860,inpix,24,R,G,B,true);
   d4bb4:	2301      	movs	r3, #1
   d4bb6:	9302      	str	r3, [sp, #8]
   d4bb8:	4890      	ldr	r0, [pc, #576]	; (d4dfc <_Z6lettercihhhb+0x4a0>)
   d4bba:	9601      	str	r6, [sp, #4]
   d4bbc:	4613      	mov	r3, r2
   d4bbe:	f8cd 8000 	str.w	r8, [sp]
   d4bc2:	2218      	movs	r2, #24
   d4bc4:	f7ff fd22 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4bc8:	2003      	movs	r0, #3
   d4bca:	e356      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 62:
        encode32Cond(529442,inpix,24,R,G,B,true);
   d4bcc:	2301      	movs	r3, #1
   d4bce:	9302      	str	r3, [sp, #8]
   d4bd0:	488b      	ldr	r0, [pc, #556]	; (d4e00 <_Z6lettercihhhb+0x4a4>)
   d4bd2:	9601      	str	r6, [sp, #4]
   d4bd4:	4613      	mov	r3, r2
   d4bd6:	f8cd 8000 	str.w	r8, [sp]
   d4bda:	2218      	movs	r2, #24
   d4bdc:	f7ff fd16 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4be0:	2003      	movs	r0, #3
   d4be2:	e34a      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 63:
        encode32Cond(1005827,inpix,24,R,G,B,true);
   d4be4:	2301      	movs	r3, #1
   d4be6:	9302      	str	r3, [sp, #8]
   d4be8:	4886      	ldr	r0, [pc, #536]	; (d4e04 <_Z6lettercihhhb+0x4a8>)
   d4bea:	9601      	str	r6, [sp, #4]
   d4bec:	4613      	mov	r3, r2
   d4bee:	f8cd 8000 	str.w	r8, [sp]
   d4bf2:	2218      	movs	r2, #24
   d4bf4:	f7ff fd0a 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4bf8:	2003      	movs	r0, #3
   d4bfa:	e33e      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 65:
        encode32Cond(2114521470,inpix,32,R,G,B,true);
   d4bfc:	2301      	movs	r3, #1
   d4bfe:	9302      	str	r3, [sp, #8]
   d4c00:	4881      	ldr	r0, [pc, #516]	; (d4e08 <_Z6lettercihhhb+0x4ac>)
   d4c02:	9601      	str	r6, [sp, #4]
   d4c04:	4613      	mov	r3, r2
   d4c06:	f8cd 8000 	str.w	r8, [sp]
   d4c0a:	2220      	movs	r2, #32
   d4c0c:	f7ff fcfe 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4c10:	2004      	movs	r0, #4
   d4c12:	e332      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 66:
        encode32Cond(910772607,inpix,32,R,G,B,true);
   d4c14:	2301      	movs	r3, #1
   d4c16:	9302      	str	r3, [sp, #8]
   d4c18:	487c      	ldr	r0, [pc, #496]	; (d4e0c <_Z6lettercihhhb+0x4b0>)
   d4c1a:	9601      	str	r6, [sp, #4]
   d4c1c:	4613      	mov	r3, r2
   d4c1e:	f8cd 8000 	str.w	r8, [sp]
   d4c22:	2220      	movs	r2, #32
   d4c24:	f7ff fcf2 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4c28:	2004      	movs	r0, #4
   d4c2a:	e326      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 67:
        encode32Cond(574701886,inpix,32,R,G,B,true);
   d4c2c:	2301      	movs	r3, #1
   d4c2e:	9302      	str	r3, [sp, #8]
   d4c30:	4877      	ldr	r0, [pc, #476]	; (d4e10 <_Z6lettercihhhb+0x4b4>)
   d4c32:	9601      	str	r6, [sp, #4]
   d4c34:	4613      	mov	r3, r2
   d4c36:	f8cd 8000 	str.w	r8, [sp]
   d4c3a:	2220      	movs	r2, #32
   d4c3c:	f7ff fce6 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4c40:	2004      	movs	r0, #4
   d4c42:	e31a      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 68:
        encode32Cond(1044463999,inpix,32,R,G,B,true);
   d4c44:	2301      	movs	r3, #1
   d4c46:	9302      	str	r3, [sp, #8]
   d4c48:	4872      	ldr	r0, [pc, #456]	; (d4e14 <_Z6lettercihhhb+0x4b8>)
   d4c4a:	9601      	str	r6, [sp, #4]
   d4c4c:	4613      	mov	r3, r2
   d4c4e:	f8cd 8000 	str.w	r8, [sp]
   d4c52:	2220      	movs	r2, #32
   d4c54:	f7ff fcda 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4c58:	2004      	movs	r0, #4
   d4c5a:	e30e      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 69:
        encode32Cond(1095321983,inpix,32,R,G,B,true);
   d4c5c:	2301      	movs	r3, #1
   d4c5e:	9302      	str	r3, [sp, #8]
   d4c60:	486d      	ldr	r0, [pc, #436]	; (d4e18 <_Z6lettercihhhb+0x4bc>)
   d4c62:	9601      	str	r6, [sp, #4]
   d4c64:	4613      	mov	r3, r2
   d4c66:	f8cd 8000 	str.w	r8, [sp]
   d4c6a:	2220      	movs	r2, #32
   d4c6c:	f7ff fcce 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4c70:	2004      	movs	r0, #4
   d4c72:	e302      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 70:
        encode32Cond(17369471,inpix,32,R,G,B,true);
   d4c74:	2301      	movs	r3, #1
   d4c76:	9302      	str	r3, [sp, #8]
   d4c78:	4868      	ldr	r0, [pc, #416]	; (d4e1c <_Z6lettercihhhb+0x4c0>)
   d4c7a:	9601      	str	r6, [sp, #4]
   d4c7c:	4613      	mov	r3, r2
   d4c7e:	f8cd 8000 	str.w	r8, [sp]
   d4c82:	2220      	movs	r2, #32
   d4c84:	f7ff fcc2 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4c88:	2004      	movs	r0, #4
   d4c8a:	e2f6      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 71:
        encode32Cond(2018066815,inpix,32,R,G,B,true);
   d4c8c:	2301      	movs	r3, #1
   d4c8e:	9302      	str	r3, [sp, #8]
   d4c90:	4863      	ldr	r0, [pc, #396]	; (d4e20 <_Z6lettercihhhb+0x4c4>)
   d4c92:	9601      	str	r6, [sp, #4]
   d4c94:	4613      	mov	r3, r2
   d4c96:	f8cd 8000 	str.w	r8, [sp]
   d4c9a:	2220      	movs	r2, #32
   d4c9c:	f7ff fcb6 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4ca0:	2004      	movs	r0, #4
   d4ca2:	e2ea      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 72:
        encode32Cond(2131232895,inpix,32,R,G,B,true);
   d4ca4:	2301      	movs	r3, #1
   d4ca6:	9302      	str	r3, [sp, #8]
   d4ca8:	485e      	ldr	r0, [pc, #376]	; (d4e24 <_Z6lettercihhhb+0x4c8>)
   d4caa:	9601      	str	r6, [sp, #4]
   d4cac:	4613      	mov	r3, r2
   d4cae:	f8cd 8000 	str.w	r8, [sp]
   d4cb2:	2220      	movs	r2, #32
   d4cb4:	f7ff fcaa 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4cb8:	2004      	movs	r0, #4
   d4cba:	e2de      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 73:
        encode32Cond(4292417,inpix,24,R,G,B,true);
   d4cbc:	2301      	movs	r3, #1
   d4cbe:	9302      	str	r3, [sp, #8]
   d4cc0:	4859      	ldr	r0, [pc, #356]	; (d4e28 <_Z6lettercihhhb+0x4cc>)
   d4cc2:	9601      	str	r6, [sp, #4]
   d4cc4:	4613      	mov	r3, r2
   d4cc6:	f8cd 8000 	str.w	r8, [sp]
   d4cca:	2218      	movs	r2, #24
   d4ccc:	f7ff fc9e 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4cd0:	2003      	movs	r0, #3
   d4cd2:	e2d2      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 74:
        encode32Cond(20922657,inpix,32,R,G,B,true);
   d4cd4:	2301      	movs	r3, #1
   d4cd6:	9302      	str	r3, [sp, #8]
   d4cd8:	4854      	ldr	r0, [pc, #336]	; (d4e2c <_Z6lettercihhhb+0x4d0>)
   d4cda:	9601      	str	r6, [sp, #4]
   d4cdc:	4613      	mov	r3, r2
   d4cde:	f8cd 8000 	str.w	r8, [sp]
   d4ce2:	2220      	movs	r2, #32
   d4ce4:	f7ff fc92 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4ce8:	2004      	movs	r0, #4
   d4cea:	e2c6      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 75:
        encode32Cond(1997015167,inpix,32,R,G,B,true);
   d4cec:	2301      	movs	r3, #1
   d4cee:	9302      	str	r3, [sp, #8]
   d4cf0:	484f      	ldr	r0, [pc, #316]	; (d4e30 <_Z6lettercihhhb+0x4d4>)
   d4cf2:	9601      	str	r6, [sp, #4]
   d4cf4:	4613      	mov	r3, r2
   d4cf6:	f8cd 8000 	str.w	r8, [sp]
   d4cfa:	2220      	movs	r2, #32
   d4cfc:	f7ff fc86 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4d00:	2004      	movs	r0, #4
   d4d02:	e2ba      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 76:
        encode32Cond(1077952639,inpix,32,R,G,B,true);
   d4d04:	2301      	movs	r3, #1
   d4d06:	9302      	str	r3, [sp, #8]
   d4d08:	484a      	ldr	r0, [pc, #296]	; (d4e34 <_Z6lettercihhhb+0x4d8>)
   d4d0a:	9601      	str	r6, [sp, #4]
   d4d0c:	4613      	mov	r3, r2
   d4d0e:	f8cd 8000 	str.w	r8, [sp]
   d4d12:	2220      	movs	r2, #32
   d4d14:	f7ff fc7a 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4d18:	2004      	movs	r0, #4
   d4d1a:	e2ae      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 77:
        encode8Cond(127,inpix+32,8,R,G,B,true);
   d4d1c:	2401      	movs	r4, #1
   d4d1e:	4613      	mov	r3, r2
   d4d20:	3120      	adds	r1, #32
   d4d22:	2208      	movs	r2, #8
   d4d24:	207f      	movs	r0, #127	; 0x7f
   d4d26:	9402      	str	r4, [sp, #8]
   d4d28:	9601      	str	r6, [sp, #4]
   d4d2a:	f8cd 8000 	str.w	r8, [sp]
   d4d2e:	f7ff fca5 	bl	d467c <_Z11encode8Condhiihhhb>
        encode32Cond(25035135,inpix,32,R,G,B,true);
   d4d32:	4841      	ldr	r0, [pc, #260]	; (d4e38 <_Z6lettercihhhb+0x4dc>)
   d4d34:	9402      	str	r4, [sp, #8]
   d4d36:	9601      	str	r6, [sp, #4]
   d4d38:	f8cd 8000 	str.w	r8, [sp]
   d4d3c:	463b      	mov	r3, r7
   d4d3e:	2220      	movs	r2, #32
   d4d40:	4629      	mov	r1, r5
   d4d42:	f7ff fc63 	bl	d460c <_Z12encode32Condmiihhhb>
        return 5;
   d4d46:	2005      	movs	r0, #5
   d4d48:	e297      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 78:
        encode8Cond(127,inpix+32,8,R,G,B,true);
   d4d4a:	2401      	movs	r4, #1
   d4d4c:	4613      	mov	r3, r2
   d4d4e:	3120      	adds	r1, #32
   d4d50:	2208      	movs	r2, #8
   d4d52:	207f      	movs	r0, #127	; 0x7f
   d4d54:	9402      	str	r4, [sp, #8]
   d4d56:	9601      	str	r6, [sp, #4]
   d4d58:	f8cd 8000 	str.w	r8, [sp]
   d4d5c:	f7ff fc8e 	bl	d467c <_Z11encode8Condhiihhhb>
        encode32Cond(1077805439,inpix,32,R,G,B,true);
   d4d60:	4836      	ldr	r0, [pc, #216]	; (d4e3c <_Z6lettercihhhb+0x4e0>)
   d4d62:	9402      	str	r4, [sp, #8]
   d4d64:	9601      	str	r6, [sp, #4]
   d4d66:	f8cd 8000 	str.w	r8, [sp]
   d4d6a:	463b      	mov	r3, r7
   d4d6c:	2220      	movs	r2, #32
   d4d6e:	4629      	mov	r1, r5
   d4d70:	f7ff fc4c 	bl	d460c <_Z12encode32Condmiihhhb>
        return 5;
   d4d74:	2005      	movs	r0, #5
   d4d76:	e280      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 79:
        encode32Cond(1044463934,inpix,32,R,G,B,true);
   d4d78:	2301      	movs	r3, #1
   d4d7a:	9302      	str	r3, [sp, #8]
   d4d7c:	4830      	ldr	r0, [pc, #192]	; (d4e40 <_Z6lettercihhhb+0x4e4>)
   d4d7e:	9601      	str	r6, [sp, #4]
   d4d80:	4613      	mov	r3, r2
   d4d82:	f8cd 8000 	str.w	r8, [sp]
   d4d86:	2220      	movs	r2, #32
   d4d88:	f7ff fc40 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4d8c:	2004      	movs	r0, #4
   d4d8e:	e274      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 80:
        encode32Cond(101255551,inpix,32,R,G,B,true);
   d4d90:	2301      	movs	r3, #1
   d4d92:	9302      	str	r3, [sp, #8]
   d4d94:	482b      	ldr	r0, [pc, #172]	; (d4e44 <_Z6lettercihhhb+0x4e8>)
   d4d96:	9601      	str	r6, [sp, #4]
   d4d98:	4613      	mov	r3, r2
   d4d9a:	f8cd 8000 	str.w	r8, [sp]
   d4d9e:	2220      	movs	r2, #32
   d4da0:	f7ff fc34 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4da4:	2004      	movs	r0, #4
   d4da6:	e268      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 81:
        encode32Cond(522273086,inpix,32,R,G,B,true);
   d4da8:	2301      	movs	r3, #1
   d4daa:	9302      	str	r3, [sp, #8]
   d4dac:	4826      	ldr	r0, [pc, #152]	; (d4e48 <_Z6lettercihhhb+0x4ec>)
   d4dae:	9601      	str	r6, [sp, #4]
   d4db0:	4613      	mov	r3, r2
   d4db2:	f8cd 8000 	str.w	r8, [sp]
   d4db6:	2220      	movs	r2, #32
   d4db8:	f7ff fc28 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4dbc:	2004      	movs	r0, #4
   d4dbe:	e25c      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 82:
        encode32Cond(826886527,inpix,32,R,G,B,true);
   d4dc0:	2301      	movs	r3, #1
   d4dc2:	9302      	str	r3, [sp, #8]
   d4dc4:	4821      	ldr	r0, [pc, #132]	; (d4e4c <_Z6lettercihhhb+0x4f0>)
   d4dc6:	9601      	str	r6, [sp, #4]
   d4dc8:	4613      	mov	r3, r2
   d4dca:	f8cd 8000 	str.w	r8, [sp]
   d4dce:	2220      	movs	r2, #32
   d4dd0:	f7ff fc1c 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4dd4:	2004      	movs	r0, #4
   d4dd6:	e250      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 83:
        encode32Cond(826886470,inpix,32,R,G,B,true);
   d4dd8:	2301      	movs	r3, #1
   d4dda:	9302      	str	r3, [sp, #8]
   d4ddc:	481c      	ldr	r0, [pc, #112]	; (d4e50 <_Z6lettercihhhb+0x4f4>)
   d4dde:	9601      	str	r6, [sp, #4]
   d4de0:	4613      	mov	r3, r2
   d4de2:	f8cd 8000 	str.w	r8, [sp]
   d4de6:	2220      	movs	r2, #32
   d4de8:	f7ff fc10 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4dec:	2004      	movs	r0, #4
   d4dee:	e244      	b.n	d527a <_Z6lettercihhhb+0x91e>
   d4df0:	00081c08 	.word	0x00081c08
   d4df4:	00061860 	.word	0x00061860
   d4df8:	00221408 	.word	0x00221408
   d4dfc:	00141414 	.word	0x00141414
   d4e00:	00081422 	.word	0x00081422
   d4e04:	000f5903 	.word	0x000f5903
   d4e08:	7e09097e 	.word	0x7e09097e
   d4e0c:	3649497f 	.word	0x3649497f
   d4e10:	2241413e 	.word	0x2241413e
   d4e14:	3e41417f 	.word	0x3e41417f
   d4e18:	4149497f 	.word	0x4149497f
   d4e1c:	0109097f 	.word	0x0109097f
   d4e20:	7849417f 	.word	0x7849417f
   d4e24:	7f08087f 	.word	0x7f08087f
   d4e28:	00417f41 	.word	0x00417f41
   d4e2c:	013f4121 	.word	0x013f4121
   d4e30:	7708087f 	.word	0x7708087f
   d4e34:	4040407f 	.word	0x4040407f
   d4e38:	017e017f 	.word	0x017e017f
   d4e3c:	403e017f 	.word	0x403e017f
   d4e40:	3e41413e 	.word	0x3e41413e
   d4e44:	0609097f 	.word	0x0609097f
   d4e48:	1f21413e 	.word	0x1f21413e
   d4e4c:	3149497f 	.word	0x3149497f
   d4e50:	31494946 	.word	0x31494946
    case 84:
        encode8Cond(1,inpix+32,8,R,G,B,true);
   d4e54:	2401      	movs	r4, #1
   d4e56:	4613      	mov	r3, r2
   d4e58:	3120      	adds	r1, #32
   d4e5a:	2208      	movs	r2, #8
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	9402      	str	r4, [sp, #8]
   d4e60:	9601      	str	r6, [sp, #4]
   d4e62:	f8cd 8000 	str.w	r8, [sp]
   d4e66:	f7ff fc09 	bl	d467c <_Z11encode8Condhiihhhb>
        encode32Cond(25100545,inpix,32,R,G,B,true);
   d4e6a:	48bf      	ldr	r0, [pc, #764]	; (d5168 <_Z6lettercihhhb+0x80c>)
   d4e6c:	9402      	str	r4, [sp, #8]
   d4e6e:	9601      	str	r6, [sp, #4]
   d4e70:	f8cd 8000 	str.w	r8, [sp]
   d4e74:	463b      	mov	r3, r7
   d4e76:	2220      	movs	r2, #32
   d4e78:	4629      	mov	r1, r5
   d4e7a:	f7ff fbc7 	bl	d460c <_Z12encode32Condmiihhhb>
        return 5;
   d4e7e:	2005      	movs	r0, #5
   d4e80:	e1fb      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 85:
        encode32Cond(1061175359,inpix,32,R,G,B,true);
   d4e82:	2301      	movs	r3, #1
   d4e84:	9302      	str	r3, [sp, #8]
   d4e86:	48b9      	ldr	r0, [pc, #740]	; (d516c <_Z6lettercihhhb+0x810>)
   d4e88:	9601      	str	r6, [sp, #4]
   d4e8a:	4613      	mov	r3, r2
   d4e8c:	f8cd 8000 	str.w	r8, [sp]
   d4e90:	2220      	movs	r2, #32
   d4e92:	f7ff fbbb 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4e96:	2004      	movs	r0, #4
   d4e98:	e1ef      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 86:
        encode32Cond(526409759,inpix,32,R,G,B,true);
   d4e9a:	2301      	movs	r3, #1
   d4e9c:	9302      	str	r3, [sp, #8]
   d4e9e:	48b4      	ldr	r0, [pc, #720]	; (d5170 <_Z6lettercihhhb+0x814>)
   d4ea0:	9601      	str	r6, [sp, #4]
   d4ea2:	4613      	mov	r3, r2
   d4ea4:	f8cd 8000 	str.w	r8, [sp]
   d4ea8:	2220      	movs	r2, #32
   d4eaa:	f7ff fbaf 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4eae:	2004      	movs	r0, #4
   d4eb0:	e1e3      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 87:
        encode8Cond(63,inpix+32,8,R,G,B,true);
   d4eb2:	2401      	movs	r4, #1
   d4eb4:	4613      	mov	r3, r2
   d4eb6:	3120      	adds	r1, #32
   d4eb8:	2208      	movs	r2, #8
   d4eba:	203f      	movs	r0, #63	; 0x3f
   d4ebc:	9402      	str	r4, [sp, #8]
   d4ebe:	9601      	str	r6, [sp, #4]
   d4ec0:	f8cd 8000 	str.w	r8, [sp]
   d4ec4:	f7ff fbda 	bl	d467c <_Z11encode8Condhiihhhb>
        encode32Cond(1077887039,inpix,32,R,G,B,true);
   d4ec8:	48aa      	ldr	r0, [pc, #680]	; (d5174 <_Z6lettercihhhb+0x818>)
   d4eca:	9402      	str	r4, [sp, #8]
   d4ecc:	9601      	str	r6, [sp, #4]
   d4ece:	f8cd 8000 	str.w	r8, [sp]
   d4ed2:	463b      	mov	r3, r7
   d4ed4:	2220      	movs	r2, #32
   d4ed6:	4629      	mov	r1, r5
   d4ed8:	f7ff fb98 	bl	d460c <_Z12encode32Condmiihhhb>
        return 5;
   d4edc:	2005      	movs	r0, #5
   d4ede:	e1cc      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 88:
        encode32Cond(7569152,inpix,24,R,G,B,true);
   d4ee0:	2301      	movs	r3, #1
   d4ee2:	9302      	str	r3, [sp, #8]
   d4ee4:	48a4      	ldr	r0, [pc, #656]	; (d5178 <_Z6lettercihhhb+0x81c>)
   d4ee6:	9601      	str	r6, [sp, #4]
   d4ee8:	4613      	mov	r3, r2
   d4eea:	f8cd 8000 	str.w	r8, [sp]
   d4eee:	2218      	movs	r2, #24
   d4ef0:	f7ff fb8c 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4ef4:	2003      	movs	r0, #3
   d4ef6:	e1c0      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 89:
        encode8Cond(1,inpix+32,8,R,G,B,true);
   d4ef8:	2401      	movs	r4, #1
   d4efa:	4613      	mov	r3, r2
   d4efc:	3120      	adds	r1, #32
   d4efe:	2208      	movs	r2, #8
   d4f00:	4620      	mov	r0, r4
   d4f02:	9402      	str	r4, [sp, #8]
   d4f04:	9601      	str	r6, [sp, #4]
   d4f06:	f8cd 8000 	str.w	r8, [sp]
   d4f0a:	f7ff fbb7 	bl	d467c <_Z11encode8Condhiihhhb>
        encode32Cond(41681409,inpix,32,R,G,B,true);
   d4f0e:	489b      	ldr	r0, [pc, #620]	; (d517c <_Z6lettercihhhb+0x820>)
   d4f10:	9402      	str	r4, [sp, #8]
   d4f12:	9601      	str	r6, [sp, #4]
   d4f14:	f8cd 8000 	str.w	r8, [sp]
   d4f18:	463b      	mov	r3, r7
   d4f1a:	2220      	movs	r2, #32
   d4f1c:	4629      	mov	r1, r5
   d4f1e:	f7ff fb75 	bl	d460c <_Z12encode32Condmiihhhb>
        return 5;
   d4f22:	2005      	movs	r0, #5
   d4f24:	e1a9      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 90:
        encode32Cond(51196353,inpix,32,R,G,B,true);
   d4f26:	2301      	movs	r3, #1
   d4f28:	9302      	str	r3, [sp, #8]
   d4f2a:	4895      	ldr	r0, [pc, #596]	; (d5180 <_Z6lettercihhhb+0x824>)
   d4f2c:	9601      	str	r6, [sp, #4]
   d4f2e:	4613      	mov	r3, r2
   d4f30:	f8cd 8000 	str.w	r8, [sp]
   d4f34:	2220      	movs	r2, #32
   d4f36:	f7ff fb69 	bl	d460c <_Z12encode32Condmiihhhb>
        return 4;
   d4f3a:	2004      	movs	r0, #4
   d4f3c:	e19d      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 91:
        encode32Cond(16767,inpix,16,R,G,B,true);
   d4f3e:	2301      	movs	r3, #1
   d4f40:	9302      	str	r3, [sp, #8]
   d4f42:	f244 107f 	movw	r0, #16767	; 0x417f
   d4f46:	4613      	mov	r3, r2
   d4f48:	9601      	str	r6, [sp, #4]
   d4f4a:	f8cd 8000 	str.w	r8, [sp]
   d4f4e:	2210      	movs	r2, #16
   d4f50:	f7ff fb5c 	bl	d460c <_Z12encode32Condmiihhhb>
        return 2;
   d4f54:	2002      	movs	r0, #2
   d4f56:	e190      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 93:
        encode32Cond(32577,inpix,16,R,G,B,true);
   d4f58:	2301      	movs	r3, #1
   d4f5a:	9302      	str	r3, [sp, #8]
   d4f5c:	f647 7041 	movw	r0, #32577	; 0x7f41
   d4f60:	4613      	mov	r3, r2
   d4f62:	9601      	str	r6, [sp, #4]
   d4f64:	f8cd 8000 	str.w	r8, [sp]
   d4f68:	2210      	movs	r2, #16
   d4f6a:	f7ff fb4f 	bl	d460c <_Z12encode32Condmiihhhb>
        return 2;
   d4f6e:	2002      	movs	r0, #2
   d4f70:	e183      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 97:
        encode32Cond(7358512,inpix,24,R,G,B,true);
   d4f72:	2301      	movs	r3, #1
   d4f74:	9302      	str	r3, [sp, #8]
   d4f76:	4883      	ldr	r0, [pc, #524]	; (d5184 <_Z6lettercihhhb+0x828>)
   d4f78:	9601      	str	r6, [sp, #4]
   d4f7a:	4613      	mov	r3, r2
   d4f7c:	f8cd 8000 	str.w	r8, [sp]
   d4f80:	2218      	movs	r2, #24
   d4f82:	f7ff fb43 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4f86:	2003      	movs	r0, #3
   d4f88:	e177      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 98:
        encode32Cond(3164287,inpix,24,R,G,B,true);
   d4f8a:	2301      	movs	r3, #1
   d4f8c:	9302      	str	r3, [sp, #8]
   d4f8e:	487e      	ldr	r0, [pc, #504]	; (d5188 <_Z6lettercihhhb+0x82c>)
   d4f90:	9601      	str	r6, [sp, #4]
   d4f92:	4613      	mov	r3, r2
   d4f94:	f8cd 8000 	str.w	r8, [sp]
   d4f98:	2218      	movs	r2, #24
   d4f9a:	f7ff fb37 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4f9e:	2003      	movs	r0, #3
   d4fa0:	e16b      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 99:
        encode32Cond(4737072,inpix,24,R,G,B,true);
   d4fa2:	2301      	movs	r3, #1
   d4fa4:	9302      	str	r3, [sp, #8]
   d4fa6:	4879      	ldr	r0, [pc, #484]	; (d518c <_Z6lettercihhhb+0x830>)
   d4fa8:	9601      	str	r6, [sp, #4]
   d4faa:	4613      	mov	r3, r2
   d4fac:	f8cd 8000 	str.w	r8, [sp]
   d4fb0:	2218      	movs	r2, #24
   d4fb2:	f7ff fb2b 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4fb6:	2003      	movs	r0, #3
   d4fb8:	e15f      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 100:
        encode32Cond(8341552,inpix,24,R,G,B,true);
   d4fba:	2301      	movs	r3, #1
   d4fbc:	9302      	str	r3, [sp, #8]
   d4fbe:	4874      	ldr	r0, [pc, #464]	; (d5190 <_Z6lettercihhhb+0x834>)
   d4fc0:	9601      	str	r6, [sp, #4]
   d4fc2:	4613      	mov	r3, r2
   d4fc4:	f8cd 8000 	str.w	r8, [sp]
   d4fc8:	2218      	movs	r2, #24
   d4fca:	f7ff fb1f 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4fce:	2003      	movs	r0, #3
   d4fd0:	e153      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 101:
        encode32Cond(5788728,inpix,24,R,G,B,true);
   d4fd2:	2301      	movs	r3, #1
   d4fd4:	9302      	str	r3, [sp, #8]
   d4fd6:	486f      	ldr	r0, [pc, #444]	; (d5194 <_Z6lettercihhhb+0x838>)
   d4fd8:	9601      	str	r6, [sp, #4]
   d4fda:	4613      	mov	r3, r2
   d4fdc:	f8cd 8000 	str.w	r8, [sp]
   d4fe0:	2218      	movs	r2, #24
   d4fe2:	f7ff fb13 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4fe6:	2003      	movs	r0, #3
   d4fe8:	e147      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 102:
        encode32Cond(657790,inpix,24,R,G,B,true);
   d4fea:	2301      	movs	r3, #1
   d4fec:	9302      	str	r3, [sp, #8]
   d4fee:	486a      	ldr	r0, [pc, #424]	; (d5198 <_Z6lettercihhhb+0x83c>)
   d4ff0:	9601      	str	r6, [sp, #4]
   d4ff2:	4613      	mov	r3, r2
   d4ff4:	f8cd 8000 	str.w	r8, [sp]
   d4ff8:	2218      	movs	r2, #24
   d4ffa:	f7ff fb07 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d4ffe:	2003      	movs	r0, #3
   d5000:	e13b      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 103:
        encode32Cond(8148040,inpix,24,R,G,B,true);
   d5002:	2301      	movs	r3, #1
   d5004:	9302      	str	r3, [sp, #8]
   d5006:	4865      	ldr	r0, [pc, #404]	; (d519c <_Z6lettercihhhb+0x840>)
   d5008:	9601      	str	r6, [sp, #4]
   d500a:	4613      	mov	r3, r2
   d500c:	f8cd 8000 	str.w	r8, [sp]
   d5010:	2218      	movs	r2, #24
   d5012:	f7ff fafb 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d5016:	2003      	movs	r0, #3
   d5018:	e12f      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 104:
        encode32Cond(7342207,inpix,24,R,G,B,true);
   d501a:	2301      	movs	r3, #1
   d501c:	9302      	str	r3, [sp, #8]
   d501e:	4860      	ldr	r0, [pc, #384]	; (d51a0 <_Z6lettercihhhb+0x844>)
   d5020:	9601      	str	r6, [sp, #4]
   d5022:	4613      	mov	r3, r2
   d5024:	f8cd 8000 	str.w	r8, [sp]
   d5028:	2218      	movs	r2, #24
   d502a:	f7ff faef 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d502e:	2003      	movs	r0, #3
   d5030:	e123      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 105:
        encode8Cond(116,inpix,8,R,G,B,true);
   d5032:	2401      	movs	r4, #1
   d5034:	4613      	mov	r3, r2
   d5036:	2074      	movs	r0, #116	; 0x74
   d5038:	9402      	str	r4, [sp, #8]
   d503a:	9601      	str	r6, [sp, #4]
   d503c:	f8cd 8000 	str.w	r8, [sp]
   d5040:	2208      	movs	r2, #8
   d5042:	f7ff fb1b 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d5046:	4620      	mov	r0, r4
   d5048:	e117      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 106:
        encode32Cond(3817504,inpix,24,R,G,B,true);
   d504a:	2301      	movs	r3, #1
   d504c:	9302      	str	r3, [sp, #8]
   d504e:	4855      	ldr	r0, [pc, #340]	; (d51a4 <_Z6lettercihhhb+0x848>)
   d5050:	9601      	str	r6, [sp, #4]
   d5052:	4613      	mov	r3, r2
   d5054:	f8cd 8000 	str.w	r8, [sp]
   d5058:	2218      	movs	r2, #24
   d505a:	f7ff fad7 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d505e:	2003      	movs	r0, #3
   d5060:	e10b      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 107:
        encode32Cond(6819967,inpix,24,R,G,B,true);
   d5062:	2301      	movs	r3, #1
   d5064:	9302      	str	r3, [sp, #8]
   d5066:	4850      	ldr	r0, [pc, #320]	; (d51a8 <_Z6lettercihhhb+0x84c>)
   d5068:	9601      	str	r6, [sp, #4]
   d506a:	4613      	mov	r3, r2
   d506c:	f8cd 8000 	str.w	r8, [sp]
   d5070:	2218      	movs	r2, #24
   d5072:	f7ff facb 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d5076:	2003      	movs	r0, #3
   d5078:	e0ff      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 109:
        encode8Cond(112,inpix+32,8,R,G,B,true);
   d507a:	2401      	movs	r4, #1
   d507c:	4613      	mov	r3, r2
   d507e:	3120      	adds	r1, #32
   d5080:	2208      	movs	r2, #8
   d5082:	2070      	movs	r0, #112	; 0x70
   d5084:	9402      	str	r4, [sp, #8]
   d5086:	9601      	str	r6, [sp, #4]
   d5088:	f8cd 8000 	str.w	r8, [sp]
   d508c:	f7ff faf6 	bl	d467c <_Z11encode8Condhiihhhb>
        encode32Cond(141559920,inpix,32,R,G,B,true);
   d5090:	4846      	ldr	r0, [pc, #280]	; (d51ac <_Z6lettercihhhb+0x850>)
   d5092:	9402      	str	r4, [sp, #8]
   d5094:	9601      	str	r6, [sp, #4]
   d5096:	f8cd 8000 	str.w	r8, [sp]
   d509a:	463b      	mov	r3, r7
   d509c:	2220      	movs	r2, #32
   d509e:	4629      	mov	r1, r5
   d50a0:	f7ff fab4 	bl	d460c <_Z12encode32Condmiihhhb>
        return 5;    
   d50a4:	2005      	movs	r0, #5
   d50a6:	e0e8      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 110:
        encode32Cond(7342200,inpix,32,R,G,B,true);
   d50a8:	2301      	movs	r3, #1
   d50aa:	9302      	str	r3, [sp, #8]
   d50ac:	4840      	ldr	r0, [pc, #256]	; (d51b0 <_Z6lettercihhhb+0x854>)
   d50ae:	9601      	str	r6, [sp, #4]
   d50b0:	4613      	mov	r3, r2
   d50b2:	f8cd 8000 	str.w	r8, [sp]
   d50b6:	2220      	movs	r2, #32
   d50b8:	f7ff faa8 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d50bc:	2003      	movs	r0, #3
   d50be:	e0dc      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 111:
        encode32Cond(3164208,inpix,24,R,G,B,true);
   d50c0:	2301      	movs	r3, #1
   d50c2:	9302      	str	r3, [sp, #8]
   d50c4:	483b      	ldr	r0, [pc, #236]	; (d51b4 <_Z6lettercihhhb+0x858>)
   d50c6:	9601      	str	r6, [sp, #4]
   d50c8:	4613      	mov	r3, r2
   d50ca:	f8cd 8000 	str.w	r8, [sp]
   d50ce:	2218      	movs	r2, #24
   d50d0:	f7ff fa9c 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d50d4:	2003      	movs	r0, #3
   d50d6:	e0d0      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 112:
        encode32Cond(529532,inpix,24,R,G,B,true);
   d50d8:	2301      	movs	r3, #1
   d50da:	9302      	str	r3, [sp, #8]
   d50dc:	4836      	ldr	r0, [pc, #216]	; (d51b8 <_Z6lettercihhhb+0x85c>)
   d50de:	9601      	str	r6, [sp, #4]
   d50e0:	4613      	mov	r3, r2
   d50e2:	f8cd 8000 	str.w	r8, [sp]
   d50e6:	2218      	movs	r2, #24
   d50e8:	f7ff fa90 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d50ec:	2003      	movs	r0, #3
   d50ee:	e0c4      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 113:
        encode32Cond(8131592,inpix,24,R,G,B,true);
   d50f0:	2301      	movs	r3, #1
   d50f2:	9302      	str	r3, [sp, #8]
   d50f4:	4831      	ldr	r0, [pc, #196]	; (d51bc <_Z6lettercihhhb+0x860>)
   d50f6:	9601      	str	r6, [sp, #4]
   d50f8:	4613      	mov	r3, r2
   d50fa:	f8cd 8000 	str.w	r8, [sp]
   d50fe:	2218      	movs	r2, #24
   d5100:	f7ff fa84 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d5104:	2003      	movs	r0, #3
   d5106:	e0b8      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 114:
        encode32Cond(1050744,inpix,24,R,G,B,true);
   d5108:	2301      	movs	r3, #1
   d510a:	9302      	str	r3, [sp, #8]
   d510c:	482c      	ldr	r0, [pc, #176]	; (d51c0 <_Z6lettercihhhb+0x864>)
   d510e:	9601      	str	r6, [sp, #4]
   d5110:	4613      	mov	r3, r2
   d5112:	f8cd 8000 	str.w	r8, [sp]
   d5116:	2218      	movs	r2, #24
   d5118:	f7ff fa78 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d511c:	2003      	movs	r0, #3
   d511e:	e0ac      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 115:
        encode32Cond(7623772,inpix,24,R,G,B,true);
   d5120:	2301      	movs	r3, #1
   d5122:	9302      	str	r3, [sp, #8]
   d5124:	4827      	ldr	r0, [pc, #156]	; (d51c4 <_Z6lettercihhhb+0x868>)
   d5126:	9601      	str	r6, [sp, #4]
   d5128:	4613      	mov	r3, r2
   d512a:	f8cd 8000 	str.w	r8, [sp]
   d512e:	2218      	movs	r2, #24
   d5130:	f7ff fa6c 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d5134:	2003      	movs	r0, #3
   d5136:	e0a0      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 116:
        encode32Cond(556552,inpix,24,R,G,B,true);
   d5138:	2301      	movs	r3, #1
   d513a:	9302      	str	r3, [sp, #8]
   d513c:	4822      	ldr	r0, [pc, #136]	; (d51c8 <_Z6lettercihhhb+0x86c>)
   d513e:	9601      	str	r6, [sp, #4]
   d5140:	4613      	mov	r3, r2
   d5142:	f8cd 8000 	str.w	r8, [sp]
   d5146:	2218      	movs	r2, #24
   d5148:	f7ff fa60 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d514c:	2003      	movs	r0, #3
   d514e:	e094      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 117:
        encode32Cond(7880760,inpix,24,R,G,B,true);
   d5150:	2301      	movs	r3, #1
   d5152:	9302      	str	r3, [sp, #8]
   d5154:	481d      	ldr	r0, [pc, #116]	; (d51cc <_Z6lettercihhhb+0x870>)
   d5156:	9601      	str	r6, [sp, #4]
   d5158:	4613      	mov	r3, r2
   d515a:	f8cd 8000 	str.w	r8, [sp]
   d515e:	2218      	movs	r2, #24
   d5160:	f7ff fa54 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d5164:	2003      	movs	r0, #3
   d5166:	e088      	b.n	d527a <_Z6lettercihhhb+0x91e>
   d5168:	017f0101 	.word	0x017f0101
   d516c:	3f40403f 	.word	0x3f40403f
   d5170:	1f60601f 	.word	0x1f60601f
   d5174:	403f403f 	.word	0x403f403f
   d5178:	00737f00 	.word	0x00737f00
   d517c:	027c0201 	.word	0x027c0201
   d5180:	030d31c1 	.word	0x030d31c1
   d5184:	00704830 	.word	0x00704830
   d5188:	0030487f 	.word	0x0030487f
   d518c:	00484830 	.word	0x00484830
   d5190:	007f4830 	.word	0x007f4830
   d5194:	00585438 	.word	0x00585438
   d5198:	000a097e 	.word	0x000a097e
   d519c:	007c5448 	.word	0x007c5448
   d51a0:	0070087f 	.word	0x0070087f
   d51a4:	003a4020 	.word	0x003a4020
   d51a8:	0068107f 	.word	0x0068107f
   d51ac:	08700870 	.word	0x08700870
   d51b0:	00700878 	.word	0x00700878
   d51b4:	00304830 	.word	0x00304830
   d51b8:	0008147c 	.word	0x0008147c
   d51bc:	007c1408 	.word	0x007c1408
   d51c0:	00100878 	.word	0x00100878
   d51c4:	0074545c 	.word	0x0074545c
   d51c8:	00087e08 	.word	0x00087e08
   d51cc:	00784038 	.word	0x00784038
    case 118:
        encode32Cond(3686456,inpix,24,R,G,B,true);
   d51d0:	2301      	movs	r3, #1
   d51d2:	9302      	str	r3, [sp, #8]
   d51d4:	482a      	ldr	r0, [pc, #168]	; (d5280 <_Z6lettercihhhb+0x924>)
   d51d6:	9601      	str	r6, [sp, #4]
   d51d8:	4613      	mov	r3, r2
   d51da:	f8cd 8000 	str.w	r8, [sp]
   d51de:	2218      	movs	r2, #24
   d51e0:	f7ff fa14 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d51e4:	2003      	movs	r0, #3
   d51e6:	e048      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 119:
        encode8Cond(56,inpix+32,8,R,G,B,true);
   d51e8:	2401      	movs	r4, #1
   d51ea:	4613      	mov	r3, r2
   d51ec:	3120      	adds	r1, #32
   d51ee:	2208      	movs	r2, #8
   d51f0:	2038      	movs	r0, #56	; 0x38
   d51f2:	9402      	str	r4, [sp, #8]
   d51f4:	9601      	str	r6, [sp, #4]
   d51f6:	f8cd 8000 	str.w	r8, [sp]
   d51fa:	f7ff fa3f 	bl	d467c <_Z11encode8Condhiihhhb>
        encode32Cond(1081098296,inpix,32,R,G,B,true);
   d51fe:	4821      	ldr	r0, [pc, #132]	; (d5284 <_Z6lettercihhhb+0x928>)
   d5200:	9402      	str	r4, [sp, #8]
   d5202:	9601      	str	r6, [sp, #4]
   d5204:	f8cd 8000 	str.w	r8, [sp]
   d5208:	463b      	mov	r3, r7
   d520a:	2220      	movs	r2, #32
   d520c:	4629      	mov	r1, r5
   d520e:	f7ff f9fd 	bl	d460c <_Z12encode32Condmiihhhb>
        return 5;    
   d5212:	2005      	movs	r0, #5
   d5214:	e031      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 120:
        encode32Cond(4730952,inpix,24,R,G,B,true);
   d5216:	2301      	movs	r3, #1
   d5218:	9302      	str	r3, [sp, #8]
   d521a:	481b      	ldr	r0, [pc, #108]	; (d5288 <_Z6lettercihhhb+0x92c>)
   d521c:	9601      	str	r6, [sp, #4]
   d521e:	4613      	mov	r3, r2
   d5220:	f8cd 8000 	str.w	r8, [sp]
   d5224:	2218      	movs	r2, #24
   d5226:	f7ff f9f1 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d522a:	2003      	movs	r0, #3
   d522c:	e025      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 121:
        encode32Cond(3952716,inpix,24,R,G,B,true);
   d522e:	2301      	movs	r3, #1
   d5230:	9302      	str	r3, [sp, #8]
   d5232:	4816      	ldr	r0, [pc, #88]	; (d528c <_Z6lettercihhhb+0x930>)
   d5234:	9601      	str	r6, [sp, #4]
   d5236:	4613      	mov	r3, r2
   d5238:	f8cd 8000 	str.w	r8, [sp]
   d523c:	2218      	movs	r2, #24
   d523e:	f7ff f9e5 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d5242:	2003      	movs	r0, #3
   d5244:	e019      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 122:
        encode32Cond(5002340,inpix,24,R,G,B,true);
   d5246:	2301      	movs	r3, #1
   d5248:	9302      	str	r3, [sp, #8]
   d524a:	4811      	ldr	r0, [pc, #68]	; (d5290 <_Z6lettercihhhb+0x934>)
   d524c:	9601      	str	r6, [sp, #4]
   d524e:	4613      	mov	r3, r2
   d5250:	f8cd 8000 	str.w	r8, [sp]
   d5254:	2218      	movs	r2, #24
   d5256:	f7ff f9d9 	bl	d460c <_Z12encode32Condmiihhhb>
        return 3;
   d525a:	2003      	movs	r0, #3
   d525c:	e00d      	b.n	d527a <_Z6lettercihhhb+0x91e>
    case 108:
    case 124:
        encode8Cond(127,inpix,8,R,G,B,true);
   d525e:	2401      	movs	r4, #1
   d5260:	9402      	str	r4, [sp, #8]
   d5262:	9601      	str	r6, [sp, #4]
   d5264:	f8cd 8000 	str.w	r8, [sp]
   d5268:	4613      	mov	r3, r2
   d526a:	207f      	movs	r0, #127	; 0x7f
   d526c:	2208      	movs	r2, #8
   d526e:	4629      	mov	r1, r5
   d5270:	f7ff fa04 	bl	d467c <_Z11encode8Condhiihhhb>
        return 1;
   d5274:	4620      	mov	r0, r4
   d5276:	e000      	b.n	d527a <_Z6lettercihhhb+0x91e>
    default:
        return 0;
   d5278:	2000      	movs	r0, #0
    }
}
   d527a:	b004      	add	sp, #16
   d527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5280:	00384038 	.word	0x00384038
   d5284:	40704038 	.word	0x40704038
   d5288:	00483048 	.word	0x00483048
   d528c:	003c504c 	.word	0x003c504c
   d5290:	004c5464 	.word	0x004c5464

000d5294 <_Z7strDispPKcihhhb>:
void strDisp(const char *wrd, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d5294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5298:	b085      	sub	sp, #20
   d529a:	4605      	mov	r5, r0
   d529c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d52a0:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
   d52a4:	4690      	mov	r8, r2
   d52a6:	4699      	mov	r9, r3
    int loop;
    int pix = inpix;
    for(loop=0;loop<strlen(wrd);loop++)
   d52a8:	2400      	movs	r4, #0
    {
        pix = pix+8+(8*letter(wrd[loop],pix,R,G,B,small));
   d52aa:	2708      	movs	r7, #8
    }
}
void strDisp(const char *wrd, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
    int loop;
    int pix = inpix;
    for(loop=0;loop<strlen(wrd);loop++)
   d52ac:	4628      	mov	r0, r5
   d52ae:	9103      	str	r1, [sp, #12]
   d52b0:	f004 fbd5 	bl	d9a5e <strlen>
   d52b4:	42a0      	cmp	r0, r4
   d52b6:	d90d      	bls.n	d52d4 <_Z7strDispPKcihhhb+0x40>
    {
        pix = pix+8+(8*letter(wrd[loop],pix,R,G,B,small));
   d52b8:	9903      	ldr	r1, [sp, #12]
   d52ba:	5d28      	ldrb	r0, [r5, r4]
   d52bc:	e88d 0c00 	stmia.w	sp, {sl, fp}
   d52c0:	464b      	mov	r3, r9
   d52c2:	4642      	mov	r2, r8
   d52c4:	f101 0608 	add.w	r6, r1, #8
   d52c8:	f7ff fb48 	bl	d495c <_Z6lettercihhhb>
    }
}
void strDisp(const char *wrd, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
    int loop;
    int pix = inpix;
    for(loop=0;loop<strlen(wrd);loop++)
   d52cc:	3401      	adds	r4, #1
    {
        pix = pix+8+(8*letter(wrd[loop],pix,R,G,B,small));
   d52ce:	fb17 6100 	smlabb	r1, r7, r0, r6
    }
}
void strDisp(const char *wrd, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
    int loop;
    int pix = inpix;
    for(loop=0;loop<strlen(wrd);loop++)
   d52d2:	e7eb      	b.n	d52ac <_Z7strDispPKcihhhb+0x18>
    {
        pix = pix+8+(8*letter(wrd[loop],pix,R,G,B,small));
    }
}
   d52d4:	b005      	add	sp, #20
   d52d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d52dc <_Z12displayClockihhhi>:
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
        }
        encNum = encNum >> 1;
    }
}
void displayClock(int inpix, uint8_t R, uint8_t G, uint8_t B, int manctrl){
   d52dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52e0:	b085      	sub	sp, #20
   d52e2:	4616      	mov	r6, r2
   d52e4:	461f      	mov	r7, r3
   d52e6:	460d      	mov	r5, r1
   d52e8:	4604      	mov	r4, r0
    int hr = Time.hourFormat12();
   d52ea:	f002 fb7d 	bl	d79e8 <_ZN9TimeClass12hourFormat12Ev>
   d52ee:	9003      	str	r0, [sp, #12]
    int min = Time.minute();
   d52f0:	f002 fb82 	bl	d79f8 <_ZN9TimeClass6minuteEv>
    if(mprev != min || manctrl) {                                      //Check if time has changed from last pixel push
   d52f4:	4b3d      	ldr	r3, [pc, #244]	; (d53ec <_Z12displayClockihhhi+0x110>)
   d52f6:	681a      	ldr	r2, [r3, #0]
   d52f8:	4290      	cmp	r0, r2
        encNum = encNum >> 1;
    }
}
void displayClock(int inpix, uint8_t R, uint8_t G, uint8_t B, int manctrl){
    int hr = Time.hourFormat12();
    int min = Time.minute();
   d52fa:	4681      	mov	r9, r0
   d52fc:	469a      	mov	sl, r3
    if(mprev != min || manctrl) {                                      //Check if time has changed from last pixel push
   d52fe:	d102      	bne.n	d5306 <_Z12displayClockihhhi+0x2a>
   d5300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5302:	2b00      	cmp	r3, #0
   d5304:	d06f      	beq.n	d53e6 <_Z12displayClockihhhi+0x10a>
        if(EEPROM.read(6) == 0){                            //If the brightness is above the threshold, post large numbers by default
   d5306:	f003 fb31 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d530a:	2006      	movs	r0, #6
   d530c:	f7fe ffa6 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d5310:	4680      	mov	r8, r0
   d5312:	2800      	cmp	r0, #0
   d5314:	d167      	bne.n	d53e6 <_Z12displayClockihhhi+0x10a>
            mprev = Time.minute();                          //Save current time for next check
   d5316:	f002 fb6f 	bl	d79f8 <_ZN9TimeClass6minuteEv>
            screenArray[inpix+57] = (B/2)+(1000*(G/2))+(1000000*(R/2));                        //Display clock colons
   d531a:	0872      	lsrs	r2, r6, #1
   d531c:	087b      	lsrs	r3, r7, #1
void displayClock(int inpix, uint8_t R, uint8_t G, uint8_t B, int manctrl){
    int hr = Time.hourFormat12();
    int min = Time.minute();
    if(mprev != min || manctrl) {                                      //Check if time has changed from last pixel push
        if(EEPROM.read(6) == 0){                            //If the brightness is above the threshold, post large numbers by default
            mprev = Time.minute();                          //Save current time for next check
   d531e:	f8ca 0000 	str.w	r0, [sl]
            screenArray[inpix+57] = (B/2)+(1000*(G/2))+(1000000*(R/2));                        //Display clock colons
   d5322:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5326:	4832      	ldr	r0, [pc, #200]	; (d53f0 <_Z12displayClockihhhi+0x114>)
   d5328:	fb01 3102 	mla	r1, r1, r2, r3
   d532c:	086b      	lsrs	r3, r5, #1
   d532e:	fb00 1303 	mla	r3, r0, r3, r1
   d5332:	4a30      	ldr	r2, [pc, #192]	; (d53f4 <_Z12displayClockihhhi+0x118>)
   d5334:	f104 0139 	add.w	r1, r4, #57	; 0x39
   d5338:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            screenArray[inpix+61] = (B/2)+(1000*(G/2))+(1000000*(R/2));
   d533c:	f104 013d 	add.w	r1, r4, #61	; 0x3d
   d5340:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            if(min/10 == 0) {                               //Check if minute number is less than 10
   d5344:	f109 0309 	add.w	r3, r9, #9
   d5348:	2b12      	cmp	r3, #18
   d534a:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d534e:	d810      	bhi.n	d5372 <_Z12displayClockihhhi+0x96>
                displayNumber(0,72+inpix,R,G,B,false);            //Display 0 digit if less than 10 in 10's place
   d5350:	4633      	mov	r3, r6
   d5352:	462a      	mov	r2, r5
   d5354:	4640      	mov	r0, r8
   d5356:	e88d 0180 	stmia.w	sp, {r7, r8}
   d535a:	f7ff fac7 	bl	d48ec <_Z13displayNumberiihhhb>
                displayNumber(min,112+inpix,R,G,B,false);
   d535e:	e88d 0180 	stmia.w	sp, {r7, r8}
   d5362:	4633      	mov	r3, r6
   d5364:	462a      	mov	r2, r5
   d5366:	f104 0170 	add.w	r1, r4, #112	; 0x70
   d536a:	4648      	mov	r0, r9
   d536c:	f7ff fabe 	bl	d48ec <_Z13displayNumberiihhhb>
   d5370:	e014      	b.n	d539c <_Z12displayClockihhhi+0xc0>
            }
            else {
                displayNumber((min/10),72+inpix,R,G,B,false);
   d5372:	f04f 0b0a 	mov.w	fp, #10
   d5376:	4633      	mov	r3, r6
   d5378:	fb99 fafb 	sdiv	sl, r9, fp
   d537c:	462a      	mov	r2, r5
   d537e:	4650      	mov	r0, sl
   d5380:	e88d 0180 	stmia.w	sp, {r7, r8}
   d5384:	f7ff fab2 	bl	d48ec <_Z13displayNumberiihhhb>
                displayNumber((min%10),112+inpix,R,G,B,false);
   d5388:	e88d 0180 	stmia.w	sp, {r7, r8}
   d538c:	4633      	mov	r3, r6
   d538e:	462a      	mov	r2, r5
   d5390:	f104 0170 	add.w	r1, r4, #112	; 0x70
   d5394:	fb0b 901a 	mls	r0, fp, sl, r9
   d5398:	f7ff faa8 	bl	d48ec <_Z13displayNumberiihhhb>
            }
            displayNumber(1,inpix-24,R*(hr/10),G*(hr/10),B*(hr/10),false);   //Display 1 if present in the hour
   d539c:	9b03      	ldr	r3, [sp, #12]
   d539e:	f04f 090a 	mov.w	r9, #10
   d53a2:	fb93 f8f9 	sdiv	r8, r3, r9
   d53a6:	fa5f f188 	uxtb.w	r1, r8
   d53aa:	fb16 f301 	smulbb	r3, r6, r1
   d53ae:	fb15 f201 	smulbb	r2, r5, r1
   d53b2:	fb17 f101 	smulbb	r1, r7, r1
   d53b6:	f04f 0a00 	mov.w	sl, #0
   d53ba:	b2c9      	uxtb	r1, r1
   d53bc:	9100      	str	r1, [sp, #0]
   d53be:	b2db      	uxtb	r3, r3
   d53c0:	b2d2      	uxtb	r2, r2
   d53c2:	f1a4 0118 	sub.w	r1, r4, #24
   d53c6:	2001      	movs	r0, #1
   d53c8:	f8cd a004 	str.w	sl, [sp, #4]
   d53cc:	f7ff fa8e 	bl	d48ec <_Z13displayNumberiihhhb>
            displayNumber(hr-(10*(hr/10)),inpix+16,R,G,B,false);        //Display other digit of hour
   d53d0:	9803      	ldr	r0, [sp, #12]
   d53d2:	e88d 0480 	stmia.w	sp, {r7, sl}
   d53d6:	4633      	mov	r3, r6
   d53d8:	462a      	mov	r2, r5
   d53da:	f104 0110 	add.w	r1, r4, #16
   d53de:	fb09 0018 	mls	r0, r9, r8, r0
   d53e2:	f7ff fa83 	bl	d48ec <_Z13displayNumberiihhhb>
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);*/
        }
    }
} 
   d53e6:	b005      	add	sp, #20
   d53e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d53ec:	2003daf0 	.word	0x2003daf0
   d53f0:	000f4240 	.word	0x000f4240
   d53f4:	2003db10 	.word	0x2003db10

000d53f8 <_Z11displayTempiihhhb>:
void displayTemp(int temperature, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d53f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d53fc:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d5400:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   d5404:	f8df a078 	ldr.w	sl, [pc, #120]	; d5480 <_Z11displayTempiihhhb+0x88>
   d5408:	4686      	mov	lr, r0
    int TC1 = temperature/10;
   d540a:	260a      	movs	r6, #10
            }
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);*/
        }
    }
} 
void displayTemp(int temperature, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d540c:	460c      	mov	r4, r1
    int TC1 = temperature/10;
   d540e:	fb90 f0f6 	sdiv	r0, r0, r6
            }
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);*/
        }
    }
} 
void displayTemp(int temperature, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
   d5412:	4617      	mov	r7, r2
   d5414:	4698      	mov	r8, r3
    int TC1 = temperature/10;
    int TC2 = temperature%10;
   d5416:	fb06 e610 	mls	r6, r6, r0, lr
    if(small){
   d541a:	f1b9 0f00 	cmp.w	r9, #0
   d541e:	d017      	beq.n	d5450 <_Z11displayTempiihhhb+0x58>
        displayNumber(TC1,inpix, R, G, B,true);
   d5420:	f04f 0901 	mov.w	r9, #1
   d5424:	e88d 0220 	stmia.w	sp, {r5, r9}
   d5428:	f7ff fa60 	bl	d48ec <_Z13displayNumberiihhhb>
        displayNumber(TC2,inpix+32,R,G,B,true);
   d542c:	f104 0120 	add.w	r1, r4, #32
   d5430:	4643      	mov	r3, r8
   d5432:	463a      	mov	r2, r7
   d5434:	4630      	mov	r0, r6
   d5436:	e88d 0220 	stmia.w	sp, {r5, r9}
   d543a:	f7ff fa57 	bl	d48ec <_Z13displayNumberiihhhb>
        screenArray[inpix+64] = encodeColor(R,G,B);
   d543e:	462a      	mov	r2, r5
   d5440:	4641      	mov	r1, r8
   d5442:	4638      	mov	r0, r7
   d5444:	f7ff f89a 	bl	d457c <_Z11encodeColorhhh>
   d5448:	3440      	adds	r4, #64	; 0x40
   d544a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
   d544e:	e014      	b.n	d547a <_Z11displayTempiihhhb+0x82>
    }
    else{
        displayNumber(TC1,inpix, R, G, B,false);
   d5450:	e88d 0220 	stmia.w	sp, {r5, r9}
   d5454:	f7ff fa4a 	bl	d48ec <_Z13displayNumberiihhhb>
        displayNumber(TC2,inpix+40,R,G,B,false);
   d5458:	f104 0128 	add.w	r1, r4, #40	; 0x28
   d545c:	4643      	mov	r3, r8
   d545e:	463a      	mov	r2, r7
   d5460:	4630      	mov	r0, r6
   d5462:	e88d 0220 	stmia.w	sp, {r5, r9}
   d5466:	f7ff fa41 	bl	d48ec <_Z13displayNumberiihhhb>
        screenArray[inpix+80] = encodeColor(R,G,B);
   d546a:	462a      	mov	r2, r5
   d546c:	4641      	mov	r1, r8
   d546e:	4638      	mov	r0, r7
   d5470:	f7ff f884 	bl	d457c <_Z11encodeColorhhh>
   d5474:	3450      	adds	r4, #80	; 0x50
   d5476:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    }
}
   d547a:	b002      	add	sp, #8
   d547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5480:	2003db10 	.word	0x2003db10

000d5484 <_Z12displayHumidiihhh>:
void displayHumid(int humidPercent, int inpix, uint8_t R, uint8_t G, uint8_t B){
   d5484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int HC1 = humidPercent/10;
    int HC2 = humidPercent%10;
    if(humidPercent == 100){
   d5488:	2864      	cmp	r0, #100	; 0x64
        displayNumber(TC1,inpix, R, G, B,false);
        displayNumber(TC2,inpix+40,R,G,B,false);
        screenArray[inpix+80] = encodeColor(R,G,B);
    }
}
void displayHumid(int humidPercent, int inpix, uint8_t R, uint8_t G, uint8_t B){
   d548a:	4680      	mov	r8, r0
   d548c:	460d      	mov	r5, r1
   d548e:	4616      	mov	r6, r2
   d5490:	461f      	mov	r7, r3
   d5492:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    int HC1 = humidPercent/10;
    int HC2 = humidPercent%10;
    if(humidPercent == 100){
   d5496:	d121      	bne.n	d54dc <_Z12displayHumidiihhh+0x58>
        for(HC1 = 0; HC1 < 7; HC1++){
            screenArray[inpix+HC1] = encodeColor(R,G,B);
   d5498:	4622      	mov	r2, r4
   d549a:	4619      	mov	r1, r3
   d549c:	4630      	mov	r0, r6
   d549e:	f7ff f86d 	bl	d457c <_Z11encodeColorhhh>
   d54a2:	4a1a      	ldr	r2, [pc, #104]	; (d550c <_Z12displayHumidiihhh+0x88>)
   d54a4:	2300      	movs	r3, #0
   d54a6:	1959      	adds	r1, r3, r5
}
void displayHumid(int humidPercent, int inpix, uint8_t R, uint8_t G, uint8_t B){
    int HC1 = humidPercent/10;
    int HC2 = humidPercent%10;
    if(humidPercent == 100){
        for(HC1 = 0; HC1 < 7; HC1++){
   d54a8:	3301      	adds	r3, #1
   d54aa:	2b07      	cmp	r3, #7
            screenArray[inpix+HC1] = encodeColor(R,G,B);
   d54ac:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
void displayHumid(int humidPercent, int inpix, uint8_t R, uint8_t G, uint8_t B){
    int HC1 = humidPercent/10;
    int HC2 = humidPercent%10;
    if(humidPercent == 100){
        for(HC1 = 0; HC1 < 7; HC1++){
   d54b0:	d1f9      	bne.n	d54a6 <_Z12displayHumidiihhh+0x22>
            screenArray[inpix+HC1] = encodeColor(R,G,B);
        }
        displayNumber(0,inpix+16, R, G, B,false);
   d54b2:	f04f 0800 	mov.w	r8, #0
   d54b6:	463b      	mov	r3, r7
   d54b8:	4632      	mov	r2, r6
   d54ba:	f105 0110 	add.w	r1, r5, #16
   d54be:	4640      	mov	r0, r8
   d54c0:	e88d 0110 	stmia.w	sp, {r4, r8}
   d54c4:	f7ff fa12 	bl	d48ec <_Z13displayNumberiihhhb>
        displayNumber(0,inpix+56,R,G,B,false);
   d54c8:	e88d 0110 	stmia.w	sp, {r4, r8}
   d54cc:	463b      	mov	r3, r7
   d54ce:	4632      	mov	r2, r6
   d54d0:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d54d4:	4640      	mov	r0, r8
   d54d6:	f7ff fa09 	bl	d48ec <_Z13displayNumberiihhhb>
   d54da:	e014      	b.n	d5506 <_Z12displayHumidiihhh+0x82>
    }
    else{
        displayNumber(HC1,inpix, R, G, B,false);
   d54dc:	f04f 0b00 	mov.w	fp, #0
   d54e0:	f04f 0a0a 	mov.w	sl, #10
   d54e4:	e88d 0810 	stmia.w	sp, {r4, fp}
   d54e8:	fb90 f9fa 	sdiv	r9, r0, sl
   d54ec:	4648      	mov	r0, r9
   d54ee:	f7ff f9fd 	bl	d48ec <_Z13displayNumberiihhhb>
        displayNumber(HC2,inpix+40,R,G,B,false);
   d54f2:	e88d 0810 	stmia.w	sp, {r4, fp}
   d54f6:	463b      	mov	r3, r7
   d54f8:	4632      	mov	r2, r6
   d54fa:	f105 0128 	add.w	r1, r5, #40	; 0x28
   d54fe:	fb0a 8019 	mls	r0, sl, r9, r8
   d5502:	f7ff f9f3 	bl	d48ec <_Z13displayNumberiihhhb>
    }
}
   d5506:	b003      	add	sp, #12
   d5508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d550c:	2003db10 	.word	0x2003db10

000d5510 <_Z4dimgiihhh>:
void dimg(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B){                     //Code block for displaying a still weather animation when in dark mode
   d5510:	b538      	push	{r3, r4, r5, lr}
   d5512:	4605      	mov	r5, r0
   d5514:	460c      	mov	r4, r1
   d5516:	4619      	mov	r1, r3
    if(cnum > 299 && cnum < 322)
   d5518:	f5a5 7396 	sub.w	r3, r5, #300	; 0x12c
   d551c:	2b15      	cmp	r3, #21
    else{
        displayNumber(HC1,inpix, R, G, B,false);
        displayNumber(HC2,inpix+40,R,G,B,false);
    }
}
void dimg(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B){                     //Code block for displaying a still weather animation when in dark mode
   d551e:	4610      	mov	r0, r2
   d5520:	f89d 2010 	ldrb.w	r2, [sp, #16]
    if(cnum > 299 && cnum < 322)
   d5524:	d80e      	bhi.n	d5544 <_Z4dimgiihhh+0x34>
    {
        screenArray[inpix+14] = encodeColor(R,G,B);
   d5526:	f7ff f829 	bl	d457c <_Z11encodeColorhhh>
   d552a:	4b21      	ldr	r3, [pc, #132]	; (d55b0 <_Z4dimgiihhh+0xa0>)
   d552c:	f104 020e 	add.w	r2, r4, #14
   d5530:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+28] = encodeColor(R,G,B);
   d5534:	f104 021c 	add.w	r2, r4, #28
        screenArray[inpix+46] = encodeColor(R,G,B);
   d5538:	342e      	adds	r4, #46	; 0x2e
}
void dimg(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B){                     //Code block for displaying a still weather animation when in dark mode
    if(cnum > 299 && cnum < 322)
    {
        screenArray[inpix+14] = encodeColor(R,G,B);
        screenArray[inpix+28] = encodeColor(R,G,B);
   d553a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+46] = encodeColor(R,G,B);
   d553e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
   d5542:	bd38      	pop	{r3, r4, r5, pc}
    }
    else if(cnum > 199 && cnum < 235)
   d5544:	f1a5 03c8 	sub.w	r3, r5, #200	; 0xc8
   d5548:	2b22      	cmp	r3, #34	; 0x22
   d554a:	d812      	bhi.n	d5572 <_Z4dimgiihhh+0x62>
    {
        screenArray[inpix+27] = encodeColor(R,G,B);
   d554c:	f7ff f816 	bl	d457c <_Z11encodeColorhhh>
   d5550:	4b17      	ldr	r3, [pc, #92]	; (d55b0 <_Z4dimgiihhh+0xa0>)
   d5552:	f104 021b 	add.w	r2, r4, #27
   d5556:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+20] = encodeColor(R,G,B);
   d555a:	f104 0214 	add.w	r2, r4, #20
   d555e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+29] = encodeColor(R,G,B);
   d5562:	f104 021d 	add.w	r2, r4, #29
        screenArray[inpix+22] = encodeColor(R,G,B);
   d5566:	3416      	adds	r4, #22
    }
    else if(cnum > 199 && cnum < 235)
    {
        screenArray[inpix+27] = encodeColor(R,G,B);
        screenArray[inpix+20] = encodeColor(R,G,B);
        screenArray[inpix+29] = encodeColor(R,G,B);
   d5568:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+22] = encodeColor(R,G,B);
   d556c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
   d5570:	bd38      	pop	{r3, r4, r5, pc}
    }
    else if(cnum > 499 && cnum < 533)
   d5572:	f5a5 73fa 	sub.w	r3, r5, #500	; 0x1f4
   d5576:	2b20      	cmp	r3, #32
   d5578:	d903      	bls.n	d5582 <_Z4dimgiihhh+0x72>
        screenArray[inpix+22] = encodeColor(R,G,B);
        screenArray[inpix+28] = encodeColor(R,G,B);
        screenArray[inpix+37] = encodeColor(R,G,B);
        screenArray[inpix+43] = encodeColor(R,G,B);
    }
    else if(cnum > 599 && cnum < 630)                                    //Snow
   d557a:	f5a5 7516 	sub.w	r5, r5, #600	; 0x258
   d557e:	2d1d      	cmp	r5, #29
   d5580:	d815      	bhi.n	d55ae <_Z4dimgiihhh+0x9e>
    {
        screenArray[inpix+11] = encodeColor(R,G,B);
   d5582:	f7fe fffb 	bl	d457c <_Z11encodeColorhhh>
   d5586:	4b0a      	ldr	r3, [pc, #40]	; (d55b0 <_Z4dimgiihhh+0xa0>)
   d5588:	f104 020b 	add.w	r2, r4, #11
   d558c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+22] = encodeColor(R,G,B);
   d5590:	f104 0216 	add.w	r2, r4, #22
   d5594:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+28] = encodeColor(R,G,B);
   d5598:	f104 021c 	add.w	r2, r4, #28
   d559c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+37] = encodeColor(R,G,B);
   d55a0:	f104 0225 	add.w	r2, r4, #37	; 0x25
        screenArray[inpix+43] = encodeColor(R,G,B);   
   d55a4:	342b      	adds	r4, #43	; 0x2b
    else if(cnum > 599 && cnum < 630)                                    //Snow
    {
        screenArray[inpix+11] = encodeColor(R,G,B);
        screenArray[inpix+22] = encodeColor(R,G,B);
        screenArray[inpix+28] = encodeColor(R,G,B);
        screenArray[inpix+37] = encodeColor(R,G,B);
   d55a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        screenArray[inpix+43] = encodeColor(R,G,B);   
   d55aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
   d55ae:	bd38      	pop	{r3, r4, r5, pc}
   d55b0:	2003db10 	.word	0x2003db10

000d55b4 <_Z14checkForUpdateb>:
    }
    else{
        if(connDelay(tmr*3)) return;
    }
}
void checkForUpdate(bool manualCtrl){
   d55b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
   d55b6:	4d19      	ldr	r5, [pc, #100]	; (d561c <_Z14checkForUpdateb+0x68>)
   d55b8:	682c      	ldr	r4, [r5, #0]
    }
    else{
        if(connDelay(tmr*3)) return;
    }
}
void checkForUpdate(bool manualCtrl){
   d55ba:	4606      	mov	r6, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d55bc:	f001 fe56 	bl	d726c <HAL_Timer_Get_Milli_Seconds>
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
   d55c0:	f504 2492 	add.w	r4, r4, #299008	; 0x49000
   d55c4:	f504 7478 	add.w	r4, r4, #992	; 0x3e0
   d55c8:	4284      	cmp	r4, r0
   d55ca:	d305      	bcc.n	d55d8 <_Z14checkForUpdateb+0x24>
   d55cc:	f001 fe4e 	bl	d726c <HAL_Timer_Get_Milli_Seconds>
   d55d0:	682b      	ldr	r3, [r5, #0]
   d55d2:	4298      	cmp	r0, r3
   d55d4:	d300      	bcc.n	d55d8 <_Z14checkForUpdateb+0x24>
   d55d6:	b1f6      	cbz	r6, d5616 <_Z14checkForUpdateb+0x62>
   d55d8:	4b11      	ldr	r3, [pc, #68]	; (d5620 <_Z14checkForUpdateb+0x6c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d55da:	4a12      	ldr	r2, [pc, #72]	; (d5624 <_Z14checkForUpdateb+0x70>)
   d55dc:	781b      	ldrb	r3, [r3, #0]
   d55de:	f88d 3000 	strb.w	r3, [sp]
   d55e2:	4911      	ldr	r1, [pc, #68]	; (d5628 <_Z14checkForUpdateb+0x74>)
   d55e4:	233c      	movs	r3, #60	; 0x3c
   d55e6:	a802      	add	r0, sp, #8
   d55e8:	f002 fc38 	bl	d7e5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d55ec:	9c03      	ldr	r4, [sp, #12]
   d55ee:	b17c      	cbz	r4, d5610 <_Z14checkForUpdateb+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d55f0:	6863      	ldr	r3, [r4, #4]
   d55f2:	3b01      	subs	r3, #1
   d55f4:	6063      	str	r3, [r4, #4]
   d55f6:	b95b      	cbnz	r3, d5610 <_Z14checkForUpdateb+0x5c>
        {
          _M_dispose();
   d55f8:	6823      	ldr	r3, [r4, #0]
   d55fa:	4620      	mov	r0, r4
   d55fc:	689b      	ldr	r3, [r3, #8]
   d55fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5600:	68a3      	ldr	r3, [r4, #8]
   d5602:	3b01      	subs	r3, #1
   d5604:	60a3      	str	r3, [r4, #8]
   d5606:	b91b      	cbnz	r3, d5610 <_Z14checkForUpdateb+0x5c>
            _M_destroy();
   d5608:	6823      	ldr	r3, [r4, #0]
   d560a:	4620      	mov	r0, r4
   d560c:	68db      	ldr	r3, [r3, #12]
   d560e:	4798      	blx	r3
   d5610:	f001 fe2c 	bl	d726c <HAL_Timer_Get_Milli_Seconds>
        if(EEPROM.read(4) == 1)
        {
            Particle.publish("itempdat", "1", PRIVATE);
        }*/
        //Particle.publish("GetStock", "DIA", PRIVATE);
        lastUpdate = millis();
   d5614:	6028      	str	r0, [r5, #0]
    }
    /*else if(lastUpdate+15000 < millis() && lastUpdate+30000 > millis()){
        Particle.publish("WeatherHL", "1", PRIVATE);
    }*/
}                          
   d5616:	b004      	add	sp, #16
   d5618:	bd70      	pop	{r4, r5, r6, pc}
   d561a:	bf00      	nop
   d561c:	2003dad4 	.word	0x2003dad4
   d5620:	2003dae8 	.word	0x2003dae8
   d5624:	000dbd83 	.word	0x000dbd83
   d5628:	000dbcca 	.word	0x000dbcca

000d562c <setup>:

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
   d562c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    lastUpdate = 0;
   d5630:	4b6d      	ldr	r3, [pc, #436]	; (d57e8 <setup+0x1bc>)
   d5632:	2400      	movs	r4, #0
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
   d5634:	2103      	movs	r1, #3
   d5636:	4620      	mov	r0, r4
void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
    lastUpdate = 0;
   d5638:	601c      	str	r4, [r3, #0]
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
   d563a:	f003 f943 	bl	d88c4 <pinMode>
    pinMode(D1, INPUT_PULLDOWN);
   d563e:	2103      	movs	r1, #3
   d5640:	2001      	movs	r0, #1
   d5642:	f003 f93f 	bl	d88c4 <pinMode>
    pinMode(D2, INPUT_PULLDOWN);
   d5646:	2103      	movs	r1, #3
   d5648:	2002      	movs	r0, #2
   d564a:	f003 f93b 	bl	d88c4 <pinMode>
    pinMode(D7,OUTPUT);
   d564e:	2101      	movs	r1, #1
   d5650:	2007      	movs	r0, #7
   d5652:	f003 f937 	bl	d88c4 <pinMode>
    RGB.control(true);
   d5656:	2001      	movs	r0, #1
   d5658:	f002 f9f4 	bl	d7a44 <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 0);
   d565c:	4622      	mov	r2, r4
   d565e:	4621      	mov	r1, r4
   d5660:	4620      	mov	r0, r4
   d5662:	f002 f9ff 	bl	d7a64 <_ZN8RGBClass5colorEiii>
    scan = 1;                                                                       //scans photoresistor for room brightness
   d5666:	4a61      	ldr	r2, [pc, #388]	; (d57ec <setup+0x1c0>)
    photoupd = 0;
    wmode = 1;
    dmode = 1;
    fdark = 2;
    trueTone = true;
    strip.begin();
   d5668:	4861      	ldr	r0, [pc, #388]	; (d57f0 <setup+0x1c4>)
    pinMode(D1, INPUT_PULLDOWN);
    pinMode(D2, INPUT_PULLDOWN);
    pinMode(D7,OUTPUT);
    RGB.control(true);
    RGB.color(0, 0, 0);
    scan = 1;                                                                       //scans photoresistor for room brightness
   d566a:	2301      	movs	r3, #1
   d566c:	6013      	str	r3, [r2, #0]
    photoupd = 0;
   d566e:	4a61      	ldr	r2, [pc, #388]	; (d57f4 <setup+0x1c8>)
   d5670:	6014      	str	r4, [r2, #0]
    wmode = 1;
   d5672:	4a61      	ldr	r2, [pc, #388]	; (d57f8 <setup+0x1cc>)
   d5674:	6013      	str	r3, [r2, #0]
    dmode = 1;
   d5676:	4a61      	ldr	r2, [pc, #388]	; (d57fc <setup+0x1d0>)
   d5678:	6013      	str	r3, [r2, #0]
    fdark = 2;
   d567a:	4a61      	ldr	r2, [pc, #388]	; (d5800 <setup+0x1d4>)
   d567c:	2102      	movs	r1, #2
   d567e:	6011      	str	r1, [r2, #0]
    trueTone = true;
   d5680:	4a60      	ldr	r2, [pc, #384]	; (d5804 <setup+0x1d8>)
   d5682:	7013      	strb	r3, [r2, #0]
    strip.begin();
   d5684:	f001 fb6f 	bl	d6d66 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
   d5688:	4859      	ldr	r0, [pc, #356]	; (d57f0 <setup+0x1c4>)
   d568a:	f001 fba3 	bl	d6dd4 <_ZN17Adafruit_NeoPixel4showEv>
    for(j=0; j < 512; j++){
        screenArray[j] = 0;
   d568e:	4b5e      	ldr	r3, [pc, #376]	; (d5808 <setup+0x1dc>)
   d5690:	4622      	mov	r2, r4
   d5692:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    dmode = 1;
    fdark = 2;
    trueTone = true;
    strip.begin();
    strip.show();
    for(j=0; j < 512; j++){
   d5696:	3401      	adds	r4, #1
   d5698:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   d569c:	4d5a      	ldr	r5, [pc, #360]	; (d5808 <setup+0x1dc>)
   d569e:	d1f8      	bne.n	d5692 <setup+0x66>
   d56a0:	4e5a      	ldr	r6, [pc, #360]	; (d580c <setup+0x1e0>)
        screenArray[j] = 0;
    }
    photo = analogRead(A4)/18;
   d56a2:	200f      	movs	r0, #15
   d56a4:	6034      	str	r4, [r6, #0]
   d56a6:	f003 f94a 	bl	d893e <analogRead>
   d56aa:	4a59      	ldr	r2, [pc, #356]	; (d5810 <setup+0x1e4>)
    strDisp("Hello",56,photo,photo,photo,true);
    for(i = 56; i < 200; i+=8){
   d56ac:	4c59      	ldr	r4, [pc, #356]	; (d5814 <setup+0x1e8>)
    strip.begin();
    strip.show();
    for(j=0; j < 512; j++){
        screenArray[j] = 0;
    }
    photo = analogRead(A4)/18;
   d56ae:	2312      	movs	r3, #18
   d56b0:	fb90 f0f3 	sdiv	r0, r0, r3
   d56b4:	6010      	str	r0, [r2, #0]
    strDisp("Hello",56,photo,photo,photo,true);
   d56b6:	b2c3      	uxtb	r3, r0
   d56b8:	2201      	movs	r2, #1
   d56ba:	9201      	str	r2, [sp, #4]
   d56bc:	9300      	str	r3, [sp, #0]
   d56be:	461a      	mov	r2, r3
   d56c0:	2138      	movs	r1, #56	; 0x38
   d56c2:	4855      	ldr	r0, [pc, #340]	; (d5818 <setup+0x1ec>)
   d56c4:	f7ff fde6 	bl	d5294 <_Z7strDispPKcihhhb>
    for(i = 56; i < 200; i+=8){
   d56c8:	2338      	movs	r3, #56	; 0x38
   d56ca:	46b2      	mov	sl, r6
   d56cc:	6023      	str	r3, [r4, #0]
   d56ce:	4626      	mov	r6, r4
   d56d0:	6821      	ldr	r1, [r4, #0]
   d56d2:	29c7      	cmp	r1, #199	; 0xc7
   d56d4:	dc0a      	bgt.n	d56ec <setup+0xc0>
        printScreen(screenArray,i,i+7);
   d56d6:	1dca      	adds	r2, r1, #7
   d56d8:	484b      	ldr	r0, [pc, #300]	; (d5808 <setup+0x1dc>)
   d56da:	f7fe fdc5 	bl	d4268 <_Z11printScreenPiii>
        delay(75);
   d56de:	204b      	movs	r0, #75	; 0x4b
   d56e0:	f002 f99e 	bl	d7a20 <delay>
    for(j=0; j < 512; j++){
        screenArray[j] = 0;
    }
    photo = analogRead(A4)/18;
    strDisp("Hello",56,photo,photo,photo,true);
    for(i = 56; i < 200; i+=8){
   d56e4:	6833      	ldr	r3, [r6, #0]
   d56e6:	3308      	adds	r3, #8
   d56e8:	6033      	str	r3, [r6, #0]
   d56ea:	e7f1      	b.n	d56d0 <setup+0xa4>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d56ec:	2000      	movs	r0, #0
   d56ee:	f001 fded 	bl	d72cc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d56f2:	f8df 8140 	ldr.w	r8, [pc, #320]	; d5834 <setup+0x208>
   d56f6:	4606      	mov	r6, r0
   d56f8:	2700      	movs	r7, #0
   d56fa:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d56fe:	2000      	movs	r0, #0
   d5700:	f001 fde4 	bl	d72cc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5704:	1b80      	subs	r0, r0, r6
   d5706:	eb61 0107 	sbc.w	r1, r1, r7
   d570a:	4589      	cmp	r9, r1
   d570c:	bf08      	it	eq
   d570e:	4580      	cmpeq	r8, r0
   d5710:	d303      	bcc.n	d571a <setup+0xee>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5712:	f001 ff8f 	bl	d7634 <spark_cloud_flag_connected>
   d5716:	2800      	cmp	r0, #0
   d5718:	d062      	beq.n	d57e0 <setup+0x1b4>
   d571a:	f001 ff8b 	bl	d7634 <spark_cloud_flag_connected>
   d571e:	2300      	movs	r3, #0
        printScreen(screenArray,i,i+7);
        delay(75);
    }
    waitFor(Particle.connected,100000);
    for(j=0; j < 256; j++){
        screenArray[j] = 0;
   d5720:	461a      	mov	r2, r3
   d5722:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for(i = 56; i < 200; i+=8){
        printScreen(screenArray,i,i+7);
        delay(75);
    }
    waitFor(Particle.connected,100000);
    for(j=0; j < 256; j++){
   d5726:	3301      	adds	r3, #1
   d5728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
        screenArray[j] = 0;
   d572c:	f04f 0400 	mov.w	r4, #0
    for(i = 56; i < 200; i+=8){
        printScreen(screenArray,i,i+7);
        delay(75);
    }
    waitFor(Particle.connected,100000);
    for(j=0; j < 256; j++){
   d5730:	d1f7      	bne.n	d5722 <setup+0xf6>
   d5732:	f8ca 3000 	str.w	r3, [sl]
        screenArray[j] = 0;
    }
    EEPROM.write(1,17);
   d5736:	f003 f919 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d573a:	2111      	movs	r1, #17
   d573c:	2001      	movs	r0, #1
   d573e:	f7fe fd8f 	bl	d4260 <_ZN11EEPROMClass5writeEih.isra.7>
    EEPROM.write(2,1);
   d5742:	f003 f913 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d5746:	2101      	movs	r1, #1
   d5748:	2002      	movs	r0, #2
   d574a:	f7fe fd89 	bl	d4260 <_ZN11EEPROMClass5writeEih.isra.7>
    EEPROM.write(3,0);
   d574e:	f003 f90d 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d5752:	4621      	mov	r1, r4
   d5754:	2003      	movs	r0, #3
   d5756:	f7fe fd83 	bl	d4260 <_ZN11EEPROMClass5writeEih.isra.7>
    EEPROM.write(4,0);
   d575a:	f003 f907 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d575e:	4621      	mov	r1, r4
   d5760:	2004      	movs	r0, #4
   d5762:	f7fe fd7d 	bl	d4260 <_ZN11EEPROMClass5writeEih.isra.7>
    EEPROM.write(5,1);
   d5766:	f003 f901 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d576a:	2101      	movs	r1, #1
   d576c:	2005      	movs	r0, #5
   d576e:	f7fe fd77 	bl	d4260 <_ZN11EEPROMClass5writeEih.isra.7>
    EEPROM.write(6,0);
   d5772:	f003 f8fb 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d5776:	4621      	mov	r1, r4
   d5778:	2006      	movs	r0, #6
   d577a:	f7fe fd71 	bl	d4260 <_ZN11EEPROMClass5writeEih.isra.7>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d577e:	4623      	mov	r3, r4
   d5780:	2202      	movs	r2, #2
   d5782:	4923      	ldr	r1, [pc, #140]	; (d5810 <setup+0x1e4>)
   d5784:	4825      	ldr	r0, [pc, #148]	; (d581c <setup+0x1f0>)
   d5786:	f001 ff45 	bl	d7614 <spark_variable>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d578a:	4622      	mov	r2, r4
   d578c:	4924      	ldr	r1, [pc, #144]	; (d5820 <setup+0x1f4>)
   d578e:	9401      	str	r4, [sp, #4]
   d5790:	4623      	mov	r3, r4
   d5792:	9400      	str	r4, [sp, #0]
   d5794:	4823      	ldr	r0, [pc, #140]	; (d5824 <setup+0x1f8>)
   d5796:	f001 ff5d 	bl	d7654 <spark_subscribe>
    Particle.variable("Photo", photo);
    Particle.subscribe("hook-response/Weather", weatherHandler, MY_DEVICES);             //Subscribes to Weather API event
    Time.zone(12-EEPROM.read(1));
   d579a:	f003 f8e7 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d579e:	2001      	movs	r0, #1
   d57a0:	f7fe fd5c 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d57a4:	f1c0 000c 	rsb	r0, r0, #12
   d57a8:	ee07 0a90 	vmov	s15, r0
   d57ac:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d57b0:	f002 f8d6 	bl	d7960 <_ZN9TimeClass4zoneEf>
    mprev=(Time.minute()-1);
   d57b4:	f002 f920 	bl	d79f8 <_ZN9TimeClass6minuteEv>
   d57b8:	4b1b      	ldr	r3, [pc, #108]	; (d5828 <setup+0x1fc>)
   d57ba:	3801      	subs	r0, #1
   d57bc:	6018      	str	r0, [r3, #0]
    hprev=(Time.hourFormat12()-1);
   d57be:	f002 f913 	bl	d79e8 <_ZN9TimeClass12hourFormat12Ev>
   d57c2:	4b1a      	ldr	r3, [pc, #104]	; (d582c <setup+0x200>)
   d57c4:	3801      	subs	r0, #1
   d57c6:	6018      	str	r0, [r3, #0]
    bound = dnbound;
   d57c8:	4b19      	ldr	r3, [pc, #100]	; (d5830 <setup+0x204>)
   d57ca:	223c      	movs	r2, #60	; 0x3c
    delay(50);
   d57cc:	2032      	movs	r0, #50	; 0x32
    Particle.variable("Photo", photo);
    Particle.subscribe("hook-response/Weather", weatherHandler, MY_DEVICES);             //Subscribes to Weather API event
    Time.zone(12-EEPROM.read(1));
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
   d57ce:	601a      	str	r2, [r3, #0]
    delay(50);
   d57d0:	f002 f926 	bl	d7a20 <delay>
    checkForUpdate(true);
   d57d4:	2001      	movs	r0, #1


}
   d57d6:	b002      	add	sp, #8
   d57d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Time.zone(12-EEPROM.read(1));
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
    delay(50);
    checkForUpdate(true);
   d57dc:	f7ff beea 	b.w	d55b4 <_Z14checkForUpdateb>
            spark_process();
   d57e0:	f001 ff20 	bl	d7624 <spark_process>
   d57e4:	e78b      	b.n	d56fe <setup+0xd2>
   d57e6:	bf00      	nop
   d57e8:	2003dad4 	.word	0x2003dad4
   d57ec:	2003e324 	.word	0x2003e324
   d57f0:	2003daf8 	.word	0x2003daf8
   d57f4:	2003e320 	.word	0x2003e320
   d57f8:	2003daec 	.word	0x2003daec
   d57fc:	2003e328 	.word	0x2003e328
   d5800:	2003e334 	.word	0x2003e334
   d5804:	2003e32c 	.word	0x2003e32c
   d5808:	2003db10 	.word	0x2003db10
   d580c:	2003dadc 	.word	0x2003dadc
   d5810:	2003e310 	.word	0x2003e310
   d5814:	2003dad8 	.word	0x2003dad8
   d5818:	000dbcb0 	.word	0x000dbcb0
   d581c:	000dbcb6 	.word	0x000dbcb6
   d5820:	000d40b9 	.word	0x000d40b9
   d5824:	000dbcbc 	.word	0x000dbcbc
   d5828:	2003daf0 	.word	0x2003daf0
   d582c:	2003e33c 	.word	0x2003e33c
   d5830:	2003e340 	.word	0x2003e340
   d5834:	0001869f 	.word	0x0001869f

000d5838 <_Z9connDelayi>:
    }
    /*else if(lastUpdate+15000 < millis() && lastUpdate+30000 > millis()){
        Particle.publish("WeatherHL", "1", PRIVATE);
    }*/
}                          
bool connDelay(int length){
   d5838:	b538      	push	{r3, r4, r5, lr}
    int count;
    for(count=0; count<(length/100); count++){
   d583a:	2400      	movs	r4, #0
   d583c:	2564      	movs	r5, #100	; 0x64
   d583e:	fb90 f5f5 	sdiv	r5, r0, r5
   d5842:	42ac      	cmp	r4, r5
        }
        else{
            return true;
        }
    }
    return false;
   d5844:	f04f 0000 	mov.w	r0, #0
        Particle.publish("WeatherHL", "1", PRIVATE);
    }*/
}                          
bool connDelay(int length){
    int count;
    for(count=0; count<(length/100); count++){
   d5848:	da0f      	bge.n	d586a <_Z9connDelayi+0x32>
        if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW){
   d584a:	f003 f865 	bl	d8918 <digitalRead>
   d584e:	b968      	cbnz	r0, d586c <_Z9connDelayi+0x34>
   d5850:	2001      	movs	r0, #1
   d5852:	f003 f861 	bl	d8918 <digitalRead>
   d5856:	b948      	cbnz	r0, d586c <_Z9connDelayi+0x34>
   d5858:	2002      	movs	r0, #2
   d585a:	f003 f85d 	bl	d8918 <digitalRead>
   d585e:	b928      	cbnz	r0, d586c <_Z9connDelayi+0x34>
            delay(100);
   d5860:	2064      	movs	r0, #100	; 0x64
   d5862:	f002 f8dd 	bl	d7a20 <delay>
        Particle.publish("WeatherHL", "1", PRIVATE);
    }*/
}                          
bool connDelay(int length){
    int count;
    for(count=0; count<(length/100); count++){
   d5866:	3401      	adds	r4, #1
   d5868:	e7eb      	b.n	d5842 <_Z9connDelayi+0xa>
   d586a:	bd38      	pop	{r3, r4, r5, pc}
        if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW){
            delay(100);
        }
        else{
            return true;
   d586c:	2001      	movs	r0, #1
        }
    }
    return false;
}
   d586e:	bd38      	pop	{r3, r4, r5, pc}

000d5870 <_Z16animateConditioniiihhh>:
        screenArray[inpix+28] = encodeColor(R,G,B);
        screenArray[inpix+37] = encodeColor(R,G,B);
        screenArray[inpix+43] = encodeColor(R,G,B);   
    }
}
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
   d5870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5874:	469b      	mov	fp, r3
   d5876:	b089      	sub	sp, #36	; 0x24
    if(cnum > 199 && cnum < 235){
   d5878:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
   d587c:	2b22      	cmp	r3, #34	; 0x22
        screenArray[inpix+28] = encodeColor(R,G,B);
        screenArray[inpix+37] = encodeColor(R,G,B);
        screenArray[inpix+43] = encodeColor(R,G,B);   
    }
}
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
   d587e:	9201      	str	r2, [sp, #4]
   d5880:	4688      	mov	r8, r1
   d5882:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
   d5886:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
    if(cnum > 199 && cnum < 235){
   d588a:	f200 8086 	bhi.w	d599a <_Z16animateConditioniiihhh+0x12a>
        screenArray[inpix+27] = 0;
   d588e:	4c9e      	ldr	r4, [pc, #632]	; (d5b08 <_Z16animateConditioniiihhh+0x298>)
        screenArray[inpix+20] = 0;
        screenArray[inpix+29] = 0;
   d5890:	f101 061d 	add.w	r6, r1, #29
        screenArray[inpix+43] = encodeColor(R,G,B);   
    }
}
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235){
        screenArray[inpix+27] = 0;
   d5894:	f101 091b 	add.w	r9, r1, #27
        screenArray[inpix+20] = 0;
   d5898:	f101 0714 	add.w	r7, r1, #20
        screenArray[inpix+29] = 0;
        screenArray[inpix+22] = 0;
   d589c:	f101 0816 	add.w	r8, r1, #22
        screenArray[inpix+43] = encodeColor(R,G,B);   
    }
}
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235){
        screenArray[inpix+27] = 0;
   d58a0:	2300      	movs	r3, #0
        screenArray[inpix+20] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+22] = 0;
        printScreen(screenArray,inpix+20,inpix+29);
   d58a2:	4632      	mov	r2, r6
   d58a4:	4639      	mov	r1, r7
   d58a6:	4620      	mov	r0, r4
        screenArray[inpix+43] = encodeColor(R,G,B);   
    }
}
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235){
        screenArray[inpix+27] = 0;
   d58a8:	f844 3029 	str.w	r3, [r4, r9, lsl #2]
        screenArray[inpix+20] = 0;
   d58ac:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
        screenArray[inpix+29] = 0;
   d58b0:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
        screenArray[inpix+22] = 0;
   d58b4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
        printScreen(screenArray,inpix+20,inpix+29);
   d58b8:	f7fe fcd6 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr/4)) return;
   d58bc:	9b01      	ldr	r3, [sp, #4]
   d58be:	2004      	movs	r0, #4
   d58c0:	fb93 f0f0 	sdiv	r0, r3, r0
   d58c4:	f7ff ffb8 	bl	d5838 <_Z9connDelayi>
   d58c8:	9002      	str	r0, [sp, #8]
   d58ca:	2800      	cmp	r0, #0
   d58cc:	f040 8214 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        //printScreen(screenArray,inpix+20,inpix+29);
        //if(connDelay(tmr)) return;
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
   d58d0:	4658      	mov	r0, fp
   d58d2:	f003 fbb5 	bl	d9040 <__aeabi_i2d>
   d58d6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d58da:	4b8c      	ldr	r3, [pc, #560]	; (d5b0c <_Z16animateConditioniiihhh+0x29c>)
   d58dc:	f003 fd40 	bl	d9360 <__aeabi_ddiv>
   d58e0:	f003 fed6 	bl	d9690 <__aeabi_d2uiz>
   d58e4:	fa5f fa80 	uxtb.w	sl, r0
   d58e8:	4628      	mov	r0, r5
   d58ea:	f003 fba9 	bl	d9040 <__aeabi_i2d>
   d58ee:	a384      	add	r3, pc, #528	; (adr r3, d5b00 <_Z16animateConditioniiihhh+0x290>)
   d58f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58f4:	f003 fc0a 	bl	d910c <__aeabi_dmul>
   d58f8:	f003 feca 	bl	d9690 <__aeabi_d2uiz>
   d58fc:	9a02      	ldr	r2, [sp, #8]
   d58fe:	b2c1      	uxtb	r1, r0
   d5900:	4650      	mov	r0, sl
   d5902:	f7fe fe3b 	bl	d457c <_Z11encodeColorhhh>
        printScreen(screenArray,inpix+27, inpix+27);
   d5906:	464a      	mov	r2, r9
        screenArray[inpix+22] = 0;
        printScreen(screenArray,inpix+20,inpix+29);
        if(connDelay(tmr/4)) return;
        //printScreen(screenArray,inpix+20,inpix+29);
        //if(connDelay(tmr)) return;
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
   d5908:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        printScreen(screenArray,inpix+27, inpix+27);
   d590c:	4649      	mov	r1, r9
   d590e:	4620      	mov	r0, r4
   d5910:	f7fe fcaa 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
   d5914:	f04f 0b02 	mov.w	fp, #2
   d5918:	9b01      	ldr	r3, [sp, #4]
   d591a:	fb93 fbfb 	sdiv	fp, r3, fp
   d591e:	4658      	mov	r0, fp
   d5920:	f7ff ff8a 	bl	d5838 <_Z9connDelayi>
   d5924:	4602      	mov	r2, r0
   d5926:	2800      	cmp	r0, #0
   d5928:	f040 81e6 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+20] = encodeColor(R/1.2,G*2,0);
   d592c:	0069      	lsls	r1, r5, #1
   d592e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   d5932:	4650      	mov	r0, sl
   d5934:	f7fe fe22 	bl	d457c <_Z11encodeColorhhh>
        printScreen(screenArray,inpix+20, inpix+20);
   d5938:	463a      	mov	r2, r7
        //printScreen(screenArray,inpix+20,inpix+29);
        //if(connDelay(tmr)) return;
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
        printScreen(screenArray,inpix+27, inpix+27);
        if(connDelay(tmr/2)) return;
        screenArray[inpix+20] = encodeColor(R/1.2,G*2,0);
   d593a:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
   d593e:	4605      	mov	r5, r0
        printScreen(screenArray,inpix+20, inpix+20);
   d5940:	4639      	mov	r1, r7
   d5942:	4620      	mov	r0, r4
   d5944:	f7fe fc90 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
   d5948:	4658      	mov	r0, fp
   d594a:	f7ff ff75 	bl	d5838 <_Z9connDelayi>
   d594e:	2800      	cmp	r0, #0
   d5950:	f040 81d2 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+29] = encodeColor(R/1.2,G*2,0);
        printScreen(screenArray,inpix+29, inpix+29);
   d5954:	4620      	mov	r0, r4
   d5956:	4632      	mov	r2, r6
   d5958:	4631      	mov	r1, r6
        printScreen(screenArray,inpix+27, inpix+27);
        if(connDelay(tmr/2)) return;
        screenArray[inpix+20] = encodeColor(R/1.2,G*2,0);
        printScreen(screenArray,inpix+20, inpix+20);
        if(connDelay(tmr/2)) return;
        screenArray[inpix+29] = encodeColor(R/1.2,G*2,0);
   d595a:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
        printScreen(screenArray,inpix+29, inpix+29);
   d595e:	f7fe fc83 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
   d5962:	4658      	mov	r0, fp
   d5964:	f7ff ff68 	bl	d5838 <_Z9connDelayi>
   d5968:	2800      	cmp	r0, #0
   d596a:	f040 81c5 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+22] = encodeColor(R/1.2,G*2,0);
        printScreen(screenArray,inpix+22, inpix+22);
   d596e:	4620      	mov	r0, r4
   d5970:	4642      	mov	r2, r8
   d5972:	4641      	mov	r1, r8
        printScreen(screenArray,inpix+20, inpix+20);
        if(connDelay(tmr/2)) return;
        screenArray[inpix+29] = encodeColor(R/1.2,G*2,0);
        printScreen(screenArray,inpix+29, inpix+29);
        if(connDelay(tmr/2)) return;
        screenArray[inpix+22] = encodeColor(R/1.2,G*2,0);
   d5974:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
        printScreen(screenArray,inpix+22, inpix+22);
   d5978:	f7fe fc76 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d597c:	9801      	ldr	r0, [sp, #4]
   d597e:	f7ff ff5b 	bl	d5838 <_Z9connDelayi>
   d5982:	2800      	cmp	r0, #0
   d5984:	f040 81b8 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+27] = 0;
   d5988:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+20] = 0;
   d598c:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        screenArray[inpix+29] = 0;
   d5990:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        screenArray[inpix+22] = 0;
   d5994:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
   d5998:	e1ae      	b.n	d5cf8 <_Z16animateConditioniiihhh+0x488>
    }
    else if(cnum > 299 && cnum < 322){
   d599a:	f5a0 7396 	sub.w	r3, r0, #300	; 0x12c
   d599e:	2b15      	cmp	r3, #21
   d59a0:	f200 8086 	bhi.w	d5ab0 <_Z16animateConditioniiihhh+0x240>
        screenArray[inpix+14] = 0;
   d59a4:	4c58      	ldr	r4, [pc, #352]	; (d5b08 <_Z16animateConditioniiihhh+0x298>)
        screenArray[inpix+28] = 0;
   d59a6:	f101 031c 	add.w	r3, r1, #28
        screenArray[inpix+46] = 0;
   d59aa:	f101 062e 	add.w	r6, r1, #46	; 0x2e
        screenArray[inpix+20] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+22] = 0;
    }
    else if(cnum > 299 && cnum < 322){
        screenArray[inpix+14] = 0;
   d59ae:	f101 090e 	add.w	r9, r1, #14
   d59b2:	2000      	movs	r0, #0
        screenArray[inpix+28] = 0;
        screenArray[inpix+46] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+11] = encodeColor(0,G,B);
   d59b4:	f101 070b 	add.w	r7, r1, #11
   d59b8:	4629      	mov	r1, r5
        screenArray[inpix+20] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+22] = 0;
    }
    else if(cnum > 299 && cnum < 322){
        screenArray[inpix+14] = 0;
   d59ba:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+28] = 0;
   d59be:	9302      	str	r3, [sp, #8]
   d59c0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+46] = 0;
   d59c4:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+11] = encodeColor(0,G,B);
   d59c8:	f7fe fdd8 	bl	d457c <_Z11encodeColorhhh>
        screenArray[inpix+29] = encodeColor(0,G,B);
   d59cc:	f108 0b1d 	add.w	fp, r8, #29
        screenArray[inpix+43] = encodeColor(0,G,B);
   d59d0:	f108 0a2b 	add.w	sl, r8, #43	; 0x2b
        screenArray[inpix+14] = 0;
        screenArray[inpix+28] = 0;
        screenArray[inpix+46] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+11] = encodeColor(0,G,B);
   d59d4:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
   d59d8:	4605      	mov	r5, r0
        screenArray[inpix+29] = encodeColor(0,G,B);
   d59da:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
        screenArray[inpix+43] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
   d59de:	4632      	mov	r2, r6
        screenArray[inpix+46] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+11] = encodeColor(0,G,B);
        screenArray[inpix+29] = encodeColor(0,G,B);
        screenArray[inpix+43] = encodeColor(0,G,B);
   d59e0:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d59e4:	4639      	mov	r1, r7
   d59e6:	4620      	mov	r0, r4
   d59e8:	f7fe fc3e 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d59ec:	9801      	ldr	r0, [sp, #4]
   d59ee:	f7ff ff23 	bl	d5838 <_Z9connDelayi>
   d59f2:	2800      	cmp	r0, #0
   d59f4:	f040 8180 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+11] = 0;
   d59f8:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        screenArray[inpix+29] = 0;
        screenArray[inpix+43] = 0;
        screenArray[inpix+12] = encodeColor(0,G,B);
   d59fc:	f108 030c 	add.w	r3, r8, #12
        screenArray[inpix+29] = encodeColor(0,G,B);
        screenArray[inpix+43] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+11] = 0;
        screenArray[inpix+29] = 0;
   d5a00:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
        screenArray[inpix+43] = 0;
   d5a04:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        screenArray[inpix+12] = encodeColor(0,G,B);
        screenArray[inpix+30] = encodeColor(0,G,B);
   d5a08:	f108 0b1e 	add.w	fp, r8, #30
        screenArray[inpix+44] = encodeColor(0,G,B);
   d5a0c:	f108 0a2c 	add.w	sl, r8, #44	; 0x2c
        printScreen(screenArray,inpix+11, inpix+46);
   d5a10:	4632      	mov	r2, r6
   d5a12:	4639      	mov	r1, r7
   d5a14:	4620      	mov	r0, r4
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+11] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+43] = 0;
        screenArray[inpix+12] = encodeColor(0,G,B);
   d5a16:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5a1a:	9303      	str	r3, [sp, #12]
        screenArray[inpix+30] = encodeColor(0,G,B);
   d5a1c:	f844 502b 	str.w	r5, [r4, fp, lsl #2]
        screenArray[inpix+44] = encodeColor(0,G,B);
   d5a20:	f844 502a 	str.w	r5, [r4, sl, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d5a24:	f7fe fc20 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d5a28:	9801      	ldr	r0, [sp, #4]
   d5a2a:	f7ff ff05 	bl	d5838 <_Z9connDelayi>
   d5a2e:	9b03      	ldr	r3, [sp, #12]
   d5a30:	2800      	cmp	r0, #0
   d5a32:	f040 8161 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+12] = 0;
   d5a36:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+30] = 0;
   d5a3a:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
        screenArray[inpix+44] = 0;
   d5a3e:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        screenArray[inpix+13] = encodeColor(0,G,B);
   d5a42:	f108 0b0d 	add.w	fp, r8, #13
        screenArray[inpix+27] = encodeColor(0,G,B);
   d5a46:	f108 0a1b 	add.w	sl, r8, #27
        screenArray[inpix+45] = encodeColor(0,G,B);
   d5a4a:	f108 082d 	add.w	r8, r8, #45	; 0x2d
        printScreen(screenArray,inpix+11, inpix+46);
   d5a4e:	4620      	mov	r0, r4
   d5a50:	4632      	mov	r2, r6
   d5a52:	4639      	mov	r1, r7
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+12] = 0;
        screenArray[inpix+30] = 0;
        screenArray[inpix+44] = 0;
        screenArray[inpix+13] = encodeColor(0,G,B);
   d5a54:	f844 502b 	str.w	r5, [r4, fp, lsl #2]
        screenArray[inpix+27] = encodeColor(0,G,B);
   d5a58:	f844 502a 	str.w	r5, [r4, sl, lsl #2]
        screenArray[inpix+45] = encodeColor(0,G,B);
   d5a5c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d5a60:	f7fe fc02 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d5a64:	9801      	ldr	r0, [sp, #4]
   d5a66:	f7ff fee7 	bl	d5838 <_Z9connDelayi>
   d5a6a:	2800      	cmp	r0, #0
   d5a6c:	f040 8144 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+13] = 0;
        screenArray[inpix+27] = 0;
        screenArray[inpix+45] = 0;
        screenArray[inpix+14] = encodeColor(0,G,B);
        screenArray[inpix+28] = encodeColor(0,G,B);
   d5a70:	9b02      	ldr	r3, [sp, #8]
        screenArray[inpix+13] = encodeColor(0,G,B);
        screenArray[inpix+27] = encodeColor(0,G,B);
        screenArray[inpix+45] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+13] = 0;
   d5a72:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
        screenArray[inpix+27] = 0;
        screenArray[inpix+45] = 0;
        screenArray[inpix+14] = encodeColor(0,G,B);
        screenArray[inpix+28] = encodeColor(0,G,B);
        screenArray[inpix+46] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
   d5a76:	4632      	mov	r2, r6
        screenArray[inpix+27] = encodeColor(0,G,B);
        screenArray[inpix+45] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+13] = 0;
        screenArray[inpix+27] = 0;
   d5a78:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        screenArray[inpix+45] = 0;
        screenArray[inpix+14] = encodeColor(0,G,B);
        screenArray[inpix+28] = encodeColor(0,G,B);
        screenArray[inpix+46] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
   d5a7c:	4639      	mov	r1, r7
        screenArray[inpix+45] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+13] = 0;
        screenArray[inpix+27] = 0;
        screenArray[inpix+45] = 0;
   d5a7e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
        screenArray[inpix+14] = encodeColor(0,G,B);
        screenArray[inpix+28] = encodeColor(0,G,B);
        screenArray[inpix+46] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
   d5a82:	4620      	mov	r0, r4
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+13] = 0;
        screenArray[inpix+27] = 0;
        screenArray[inpix+45] = 0;
        screenArray[inpix+14] = encodeColor(0,G,B);
   d5a84:	f844 5029 	str.w	r5, [r4, r9, lsl #2]
        screenArray[inpix+28] = encodeColor(0,G,B);
   d5a88:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        screenArray[inpix+46] = encodeColor(0,G,B);
   d5a8c:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d5a90:	f7fe fbea 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d5a94:	9801      	ldr	r0, [sp, #4]
   d5a96:	f7ff fecf 	bl	d5838 <_Z9connDelayi>
   d5a9a:	2800      	cmp	r0, #0
   d5a9c:	f040 812c 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+14] = 0;
        screenArray[inpix+28] = 0;
   d5aa0:	9b02      	ldr	r3, [sp, #8]
        screenArray[inpix+14] = encodeColor(0,G,B);
        screenArray[inpix+28] = encodeColor(0,G,B);
        screenArray[inpix+46] = encodeColor(0,G,B);
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+14] = 0;
   d5aa2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+28] = 0;
   d5aa6:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+46] = 0;
   d5aaa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
   d5aae:	e123      	b.n	d5cf8 <_Z16animateConditioniiihhh+0x488>
    }
    else if(cnum > 499 && cnum < 533){
   d5ab0:	f5a0 73fa 	sub.w	r3, r0, #500	; 0x1f4
   d5ab4:	2b20      	cmp	r3, #32
   d5ab6:	d82b      	bhi.n	d5b10 <_Z16animateConditioniiihhh+0x2a0>
        screenArray[inpix+11] = 0;
   d5ab8:	4c13      	ldr	r4, [pc, #76]	; (d5b08 <_Z16animateConditioniiihhh+0x298>)
        screenArray[inpix+22] = 0;
   d5aba:	f101 0316 	add.w	r3, r1, #22
        screenArray[inpix+14] = 0;
        screenArray[inpix+28] = 0;
        screenArray[inpix+46] = 0;
    }
    else if(cnum > 499 && cnum < 533){
        screenArray[inpix+11] = 0;
   d5abe:	f101 0a0b 	add.w	sl, r1, #11
   d5ac2:	2000      	movs	r0, #0
   d5ac4:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        screenArray[inpix+22] = 0;
   d5ac8:	9302      	str	r3, [sp, #8]
   d5aca:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+28] = 0;
   d5ace:	f101 031c 	add.w	r3, r1, #28
   d5ad2:	9303      	str	r3, [sp, #12]
   d5ad4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+37] = 0;
   d5ad8:	f101 0325 	add.w	r3, r1, #37	; 0x25
   d5adc:	9304      	str	r3, [sp, #16]
   d5ade:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+43] = 0;
   d5ae2:	f101 032b 	add.w	r3, r1, #43	; 0x2b
   d5ae6:	9305      	str	r3, [sp, #20]
   d5ae8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(0,G/3,B);
   d5aec:	f101 030c 	add.w	r3, r1, #12
   d5af0:	9306      	str	r3, [sp, #24]
   d5af2:	2103      	movs	r1, #3
   d5af4:	fbb5 f1f1 	udiv	r1, r5, r1
   d5af8:	e04c      	b.n	d5b94 <_Z16animateConditioniiihhh+0x324>
   d5afa:	bf00      	nop
   d5afc:	f3af 8000 	nop.w
   d5b00:	33333333 	.word	0x33333333
   d5b04:	40033333 	.word	0x40033333
   d5b08:	2003db10 	.word	0x2003db10
   d5b0c:	3ff33333 	.word	0x3ff33333
        screenArray[inpix+22] = 0;
        screenArray[inpix+28] = 0;
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
    }
    else if(cnum > 599 && cnum < 630){
   d5b10:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
   d5b14:	2b1d      	cmp	r3, #29
   d5b16:	f200 80e7 	bhi.w	d5ce8 <_Z16animateConditioniiihhh+0x478>
        screenArray[inpix+11] = 0;
   d5b1a:	4c7b      	ldr	r4, [pc, #492]	; (d5d08 <_Z16animateConditioniiihhh+0x498>)
   d5b1c:	f101 0a0b 	add.w	sl, r1, #11
        screenArray[inpix+22] = 0;
   d5b20:	3116      	adds	r1, #22
        screenArray[inpix+28] = 0;
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
    }
    else if(cnum > 599 && cnum < 630){
        screenArray[inpix+11] = 0;
   d5b22:	2300      	movs	r3, #0
   d5b24:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
        screenArray[inpix+22] = 0;
   d5b28:	9102      	str	r1, [sp, #8]
   d5b2a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
        screenArray[inpix+28] = 0;
   d5b2e:	f108 011c 	add.w	r1, r8, #28
   d5b32:	9103      	str	r1, [sp, #12]
   d5b34:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
        screenArray[inpix+37] = 0;
   d5b38:	f108 0125 	add.w	r1, r8, #37	; 0x25
   d5b3c:	9104      	str	r1, [sp, #16]
   d5b3e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
        screenArray[inpix+43] = 0;
   d5b42:	f108 012b 	add.w	r1, r8, #43	; 0x2b
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5b46:	4610      	mov	r0, r2
    else if(cnum > 599 && cnum < 630){
        screenArray[inpix+11] = 0;
        screenArray[inpix+22] = 0;
        screenArray[inpix+28] = 0;
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
   d5b48:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5b4c:	f108 030c 	add.w	r3, r8, #12
   d5b50:	9306      	str	r3, [sp, #24]
    else if(cnum > 599 && cnum < 630){
        screenArray[inpix+11] = 0;
        screenArray[inpix+22] = 0;
        screenArray[inpix+28] = 0;
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
   d5b52:	9105      	str	r1, [sp, #20]
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5b54:	f003 fa74 	bl	d9040 <__aeabi_i2d>
   d5b58:	a369      	add	r3, pc, #420	; (adr r3, d5d00 <_Z16animateConditioniiihhh+0x490>)
   d5b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b5e:	f003 fad5 	bl	d910c <__aeabi_dmul>
   d5b62:	f003 fd95 	bl	d9690 <__aeabi_d2uiz>
   d5b66:	b2c6      	uxtb	r6, r0
   d5b68:	4628      	mov	r0, r5
   d5b6a:	f003 fa69 	bl	d9040 <__aeabi_i2d>
   d5b6e:	2200      	movs	r2, #0
   d5b70:	4b66      	ldr	r3, [pc, #408]	; (d5d0c <_Z16animateConditioniiihhh+0x49c>)
   d5b72:	f003 facb 	bl	d910c <__aeabi_dmul>
   d5b76:	f003 fd8b 	bl	d9690 <__aeabi_d2uiz>
   d5b7a:	b2c5      	uxtb	r5, r0
   d5b7c:	4658      	mov	r0, fp
   d5b7e:	f003 fa5f 	bl	d9040 <__aeabi_i2d>
   d5b82:	2200      	movs	r2, #0
   d5b84:	4b61      	ldr	r3, [pc, #388]	; (d5d0c <_Z16animateConditioniiihhh+0x49c>)
   d5b86:	f003 fac1 	bl	d910c <__aeabi_dmul>
   d5b8a:	f003 fd81 	bl	d9690 <__aeabi_d2uiz>
   d5b8e:	4632      	mov	r2, r6
   d5b90:	4629      	mov	r1, r5
   d5b92:	b2c0      	uxtb	r0, r0
   d5b94:	f7fe fcf2 	bl	d457c <_Z11encodeColorhhh>
   d5b98:	9b06      	ldr	r3, [sp, #24]
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5b9a:	f108 0913 	add.w	r9, r8, #19
        screenArray[inpix+28] = 0;
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5b9e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5ba2:	f108 0726 	add.w	r7, r8, #38	; 0x26
        screenArray[inpix+43] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5ba6:	f108 031d 	add.w	r3, r8, #29
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+44] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5baa:	f108 062c 	add.w	r6, r8, #44	; 0x2c
        printScreen(screenArray,inpix+11, inpix+46);
   d5bae:	f108 0b2e 	add.w	fp, r8, #46	; 0x2e
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bb2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+44] = encodeColor(1.5*R,1.5*G,1.8*B);
        printScreen(screenArray,inpix+11, inpix+46);
   d5bb6:	465a      	mov	r2, fp
        screenArray[inpix+43] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bb8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+44] = encodeColor(1.5*R,1.5*G,1.8*B);
        printScreen(screenArray,inpix+11, inpix+46);
   d5bbc:	4651      	mov	r1, sl
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bbe:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        screenArray[inpix+28] = 0;
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bc2:	4605      	mov	r5, r0
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+44] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bc4:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d5bc8:	4620      	mov	r0, r4
        screenArray[inpix+43] = 0;
        //printScreen(screenArray,inpix+11,inpix+46);
        //if(connDelay(tmr)) return;
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bca:	9307      	str	r3, [sp, #28]
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+44] = encodeColor(1.5*R,1.5*G,1.8*B);
        printScreen(screenArray,inpix+11, inpix+46);
   d5bcc:	f7fe fb4c 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d5bd0:	9801      	ldr	r0, [sp, #4]
   d5bd2:	f7ff fe31 	bl	d5838 <_Z9connDelayi>
   d5bd6:	9b07      	ldr	r3, [sp, #28]
   d5bd8:	2800      	cmp	r0, #0
   d5bda:	f040 808d 	bne.w	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+12] = 0;
   d5bde:	9a06      	ldr	r2, [sp, #24]
   d5be0:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
        screenArray[inpix+19] = 0;
   d5be4:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+29] = 0;
   d5be8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+38] = 0;
        screenArray[inpix+44] = 0;
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bec:	f108 030d 	add.w	r3, r8, #13
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+12] = 0;
        screenArray[inpix+19] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+38] = 0;
   d5bf0:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        screenArray[inpix+44] = 0;
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bf4:	9306      	str	r3, [sp, #24]
        if(connDelay(tmr)) return;
        screenArray[inpix+12] = 0;
        screenArray[inpix+19] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+38] = 0;
        screenArray[inpix+44] = 0;
   d5bf6:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+20] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bfa:	f108 0914 	add.w	r9, r8, #20
        screenArray[inpix+12] = 0;
        screenArray[inpix+19] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+38] = 0;
        screenArray[inpix+44] = 0;
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5bfe:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        screenArray[inpix+20] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+30] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+35] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c02:	f108 0723 	add.w	r7, r8, #35	; 0x23
        screenArray[inpix+29] = 0;
        screenArray[inpix+38] = 0;
        screenArray[inpix+44] = 0;
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+20] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+30] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c06:	f108 031e 	add.w	r3, r8, #30
        screenArray[inpix+35] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+45] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c0a:	f108 062d 	add.w	r6, r8, #45	; 0x2d
        printScreen(screenArray,inpix+11, inpix+46);
   d5c0e:	465a      	mov	r2, fp
   d5c10:	4651      	mov	r1, sl
   d5c12:	4620      	mov	r0, r4
        screenArray[inpix+19] = 0;
        screenArray[inpix+29] = 0;
        screenArray[inpix+38] = 0;
        screenArray[inpix+44] = 0;
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+20] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c14:	f844 5029 	str.w	r5, [r4, r9, lsl #2]
        screenArray[inpix+30] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c18:	9307      	str	r3, [sp, #28]
   d5c1a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        screenArray[inpix+35] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c1e:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        screenArray[inpix+45] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c22:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d5c26:	f7fe fb1f 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d5c2a:	9801      	ldr	r0, [sp, #4]
   d5c2c:	f7ff fe04 	bl	d5838 <_Z9connDelayi>
   d5c30:	9b07      	ldr	r3, [sp, #28]
   d5c32:	2800      	cmp	r0, #0
   d5c34:	d160      	bne.n	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+13] = 0;
   d5c36:	9a06      	ldr	r2, [sp, #24]
   d5c38:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
        screenArray[inpix+20] = 0;
   d5c3c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+30] = 0;
   d5c40:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+35] = 0;
        screenArray[inpix+45] = 0;
        screenArray[inpix+14] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+21] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+27] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+36] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c44:	f108 0924 	add.w	r9, r8, #36	; 0x24
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+13] = 0;
        screenArray[inpix+20] = 0;
        screenArray[inpix+30] = 0;
        screenArray[inpix+35] = 0;
   d5c48:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        screenArray[inpix+45] = 0;
        screenArray[inpix+14] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c4c:	f108 030e 	add.w	r3, r8, #14
        if(connDelay(tmr)) return;
        screenArray[inpix+13] = 0;
        screenArray[inpix+20] = 0;
        screenArray[inpix+30] = 0;
        screenArray[inpix+35] = 0;
        screenArray[inpix+45] = 0;
   d5c50:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        screenArray[inpix+14] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+21] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c54:	f108 0715 	add.w	r7, r8, #21
        screenArray[inpix+27] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c58:	f108 061b 	add.w	r6, r8, #27
        screenArray[inpix+36] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+46] = encodeColor(1.5*R,1.5*G,1.8*B);
        printScreen(screenArray,inpix+11, inpix+46);
   d5c5c:	465a      	mov	r2, fp
   d5c5e:	4651      	mov	r1, sl
   d5c60:	4620      	mov	r0, r4
        screenArray[inpix+13] = 0;
        screenArray[inpix+20] = 0;
        screenArray[inpix+30] = 0;
        screenArray[inpix+35] = 0;
        screenArray[inpix+45] = 0;
        screenArray[inpix+14] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c62:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5c66:	9306      	str	r3, [sp, #24]
        screenArray[inpix+21] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c68:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        screenArray[inpix+27] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c6c:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
        screenArray[inpix+36] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c70:	f844 5029 	str.w	r5, [r4, r9, lsl #2]
        screenArray[inpix+46] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c74:	f844 502b 	str.w	r5, [r4, fp, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d5c78:	f7fe faf6 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d5c7c:	9801      	ldr	r0, [sp, #4]
   d5c7e:	f7ff fddb 	bl	d5838 <_Z9connDelayi>
   d5c82:	9b06      	ldr	r3, [sp, #24]
   d5c84:	2800      	cmp	r0, #0
   d5c86:	d137      	bne.n	d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+14] = 0;
   d5c88:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+21] = 0;
        screenArray[inpix+27] = 0;
        screenArray[inpix+36] = 0;
        screenArray[inpix+46] = 0;
        screenArray[inpix+11] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+22] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c8c:	9b02      	ldr	r3, [sp, #8]
        screenArray[inpix+36] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+46] = encodeColor(1.5*R,1.5*G,1.8*B);
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+14] = 0;
        screenArray[inpix+21] = 0;
   d5c8e:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        screenArray[inpix+27] = 0;
   d5c92:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        screenArray[inpix+36] = 0;
   d5c96:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+46] = 0;
   d5c9a:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
        screenArray[inpix+11] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5c9e:	f844 502a 	str.w	r5, [r4, sl, lsl #2]
        screenArray[inpix+22] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5ca2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        screenArray[inpix+28] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5ca6:	9b03      	ldr	r3, [sp, #12]
   d5ca8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        screenArray[inpix+37] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5cac:	9b04      	ldr	r3, [sp, #16]
   d5cae:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        screenArray[inpix+43] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5cb2:	9b05      	ldr	r3, [sp, #20]
        printScreen(screenArray,inpix+11, inpix+46);
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	465a      	mov	r2, fp
   d5cb8:	4651      	mov	r1, sl
        screenArray[inpix+46] = 0;
        screenArray[inpix+11] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+22] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+28] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+37] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+43] = encodeColor(1.5*R,1.5*G,1.8*B);
   d5cba:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
   d5cbe:	f7fe fad3 	bl	d4268 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
   d5cc2:	9801      	ldr	r0, [sp, #4]
   d5cc4:	f7ff fdb8 	bl	d5838 <_Z9connDelayi>
   d5cc8:	b9b0      	cbnz	r0, d5cf8 <_Z16animateConditioniiihhh+0x488>
        screenArray[inpix+11] = 0;
        screenArray[inpix+22] = 0;
   d5cca:	9b02      	ldr	r3, [sp, #8]
        screenArray[inpix+28] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+37] = encodeColor(1.5*R,1.5*G,1.8*B);
        screenArray[inpix+43] = encodeColor(1.5*R,1.5*G,1.8*B);
        printScreen(screenArray,inpix+11, inpix+46);
        if(connDelay(tmr)) return;
        screenArray[inpix+11] = 0;
   d5ccc:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        screenArray[inpix+22] = 0;
   d5cd0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+28] = 0;
   d5cd4:	9b03      	ldr	r3, [sp, #12]
   d5cd6:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+37] = 0;
   d5cda:	9b04      	ldr	r3, [sp, #16]
   d5cdc:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        screenArray[inpix+43] = 0;
   d5ce0:	9b05      	ldr	r3, [sp, #20]
   d5ce2:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
   d5ce6:	e007      	b.n	d5cf8 <_Z16animateConditioniiihhh+0x488>
    }
    else{
        if(connDelay(tmr*3)) return;
   d5ce8:	9b01      	ldr	r3, [sp, #4]
   d5cea:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    }
}
   d5cee:	b009      	add	sp, #36	; 0x24
   d5cf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        screenArray[inpix+28] = 0;
        screenArray[inpix+37] = 0;
        screenArray[inpix+43] = 0;
    }
    else{
        if(connDelay(tmr*3)) return;
   d5cf4:	f7ff bda0 	b.w	d5838 <_Z9connDelayi>
    }
}
   d5cf8:	b009      	add	sp, #36	; 0x24
   d5cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5cfe:	bf00      	nop
   d5d00:	cccccccd 	.word	0xcccccccd
   d5d04:	3ffccccc 	.word	0x3ffccccc
   d5d08:	2003db10 	.word	0x2003db10
   d5d0c:	3ff80000 	.word	0x3ff80000

000d5d10 <_Z12isSensorDarkv>:
            return true;
        }
    }
    return false;
}
bool isSensorDark(){
   d5d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(analogRead(A4) < bound) {
   d5d14:	200f      	movs	r0, #15
   d5d16:	f002 fe12 	bl	d893e <analogRead>
   d5d1a:	4b17      	ldr	r3, [pc, #92]	; (d5d78 <_Z12isSensorDarkv+0x68>)
   d5d1c:	681a      	ldr	r2, [r3, #0]
   d5d1e:	4290      	cmp	r0, r2
   d5d20:	da26      	bge.n	d5d70 <_Z12isSensorDarkv+0x60>
        bound = upbound;
   d5d22:	22fa      	movs	r2, #250	; 0xfa
   d5d24:	601a      	str	r2, [r3, #0]
        scan = 1;
        rclock = 1;
   d5d26:	4e15      	ldr	r6, [pc, #84]	; (d5d7c <_Z12isSensorDarkv+0x6c>)
    return false;
}
bool isSensorDark(){
    if(analogRead(A4) < bound) {
        bound = upbound;
        scan = 1;
   d5d28:	4b15      	ldr	r3, [pc, #84]	; (d5d80 <_Z12isSensorDarkv+0x70>)
        rclock = 1;
        gclock = 0;
   d5d2a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d5d8c <_Z12isSensorDarkv+0x7c>
        bclock = 0;
   d5d2e:	4f15      	ldr	r7, [pc, #84]	; (d5d84 <_Z12isSensorDarkv+0x74>)
    return false;
}
bool isSensorDark(){
    if(analogRead(A4) < bound) {
        bound = upbound;
        scan = 1;
   d5d30:	2501      	movs	r5, #1
        rclock = 1;
        gclock = 0;
   d5d32:	2400      	movs	r4, #0
    return false;
}
bool isSensorDark(){
    if(analogRead(A4) < bound) {
        bound = upbound;
        scan = 1;
   d5d34:	601d      	str	r5, [r3, #0]
        rclock = 1;
   d5d36:	6035      	str	r5, [r6, #0]
        gclock = 0;
   d5d38:	f8c8 4000 	str.w	r4, [r8]
        bclock = 0;
   d5d3c:	603c      	str	r4, [r7, #0]
        if(EEPROM.read(5) == 2){
   d5d3e:	f002 fe15 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d5d42:	2005      	movs	r0, #5
   d5d44:	f7fe fa8a 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d5d48:	2802      	cmp	r0, #2
   d5d4a:	d103      	bne.n	d5d54 <_Z12isSensorDarkv+0x44>
            gclock = 1;
   d5d4c:	f8c8 5000 	str.w	r5, [r8]
            rclock = 0;
   d5d50:	6034      	str	r4, [r6, #0]
   d5d52:	e008      	b.n	d5d66 <_Z12isSensorDarkv+0x56>
        }
        else if(EEPROM.read(5) == 3){
   d5d54:	f002 fe0a 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d5d58:	2005      	movs	r0, #5
   d5d5a:	f7fe fa7f 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d5d5e:	2803      	cmp	r0, #3
            bclock = 1;
   d5d60:	bf04      	itt	eq
   d5d62:	603d      	streq	r5, [r7, #0]
            rclock = 0;
   d5d64:	6034      	streq	r4, [r6, #0]
        }
        dmode = 1;
   d5d66:	4b08      	ldr	r3, [pc, #32]	; (d5d88 <_Z12isSensorDarkv+0x78>)
   d5d68:	2001      	movs	r0, #1
   d5d6a:	6018      	str	r0, [r3, #0]
   d5d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return true;
    }
    return false;
   d5d70:	2000      	movs	r0, #0
}
   d5d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d76:	bf00      	nop
   d5d78:	2003e340 	.word	0x2003e340
   d5d7c:	2003dad0 	.word	0x2003dad0
   d5d80:	2003e324 	.word	0x2003e324
   d5d84:	2003dacc 	.word	0x2003dacc
   d5d88:	2003e328 	.word	0x2003e328
   d5d8c:	2003db0c 	.word	0x2003db0c

000d5d90 <_Z11weatherLoopiihhh>:
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
   d5d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d94:	b08b      	sub	sp, #44	; 0x2c
    if(wmode == 1)                                                  //Outdoor Temperature
   d5d96:	4e91      	ldr	r6, [pc, #580]	; (d5fdc <_Z11weatherLoopiihhh+0x24c>)
        dmode = 1;
        return true;
    }
    return false;
}
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
   d5d98:	9303      	str	r3, [sp, #12]
   d5d9a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   d5d9e:	9302      	str	r3, [sp, #8]
    if(wmode == 1)                                                  //Outdoor Temperature
   d5da0:	6833      	ldr	r3, [r6, #0]
        dmode = 1;
        return true;
    }
    return false;
}
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
   d5da2:	9105      	str	r1, [sp, #20]
    if(wmode == 1)                                                  //Outdoor Temperature
   d5da4:	2b01      	cmp	r3, #1
        dmode = 1;
        return true;
    }
    return false;
}
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
   d5da6:	4683      	mov	fp, r0
   d5da8:	9204      	str	r2, [sp, #16]
    if(wmode == 1)                                                  //Outdoor Temperature
   d5daa:	f040 8097 	bne.w	d5edc <_Z11weatherLoopiihhh+0x14c>
    {
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
   d5dae:	4f8c      	ldr	r7, [pc, #560]	; (d5fe0 <_Z11weatherLoopiihhh+0x250>)
   d5db0:	4c8c      	ldr	r4, [pc, #560]	; (d5fe4 <_Z11weatherLoopiihhh+0x254>)
   d5db2:	2500      	movs	r5, #0
   d5db4:	683b      	ldr	r3, [r7, #0]
   d5db6:	f8df 822c 	ldr.w	r8, [pc, #556]	; d5fe4 <_Z11weatherLoopiihhh+0x254>
   d5dba:	2200      	movs	r2, #0
   d5dbc:	9201      	str	r2, [sp, #4]
   d5dbe:	9200      	str	r2, [sp, #0]
   d5dc0:	436b      	muls	r3, r5
   d5dc2:	4659      	mov	r1, fp
   d5dc4:	6820      	ldr	r0, [r4, #0]
   d5dc6:	f04f 0919 	mov.w	r9, #25
            printScreen(screenArray,inpix,inpix+88);
   d5dca:	f10b 0a58 	add.w	sl, fp, #88	; 0x58
}
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
    if(wmode == 1)                                                  //Outdoor Temperature
    {
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
   d5dce:	fb93 f3f9 	sdiv	r3, r3, r9
   d5dd2:	b2db      	uxtb	r3, r3
   d5dd4:	f7ff fb10 	bl	d53f8 <_Z11displayTempiihhhb>
            printScreen(screenArray,inpix,inpix+88);
   d5dd8:	4652      	mov	r2, sl
   d5dda:	4659      	mov	r1, fp
   d5ddc:	4882      	ldr	r0, [pc, #520]	; (d5fe8 <_Z11weatherLoopiihhh+0x258>)
   d5dde:	f7fe fa43 	bl	d4268 <_Z11printScreenPiii>
    return false;
}
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
    if(wmode == 1)                                                  //Outdoor Temperature
    {
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
   d5de2:	3501      	adds	r5, #1
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
   d5de4:	200a      	movs	r0, #10
   d5de6:	f001 fe1b 	bl	d7a20 <delay>
    return false;
}
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
    if(wmode == 1)                                                  //Outdoor Temperature
    {
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
   d5dea:	2d1a      	cmp	r5, #26
   d5dec:	d1e2      	bne.n	d5db4 <_Z11weatherLoopiihhh+0x24>
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
        }
        connDelay(2500);
   d5dee:	f640 10c4 	movw	r0, #2500	; 0x9c4
   d5df2:	f7ff fd21 	bl	d5838 <_Z9connDelayi>
        if(isSensorDark()){
   d5df6:	f7ff ff8b 	bl	d5d10 <_Z12isSensorDarkv>
   d5dfa:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	d045      	beq.n	d5e8e <_Z11weatherLoopiihhh+0xfe>
   d5e02:	9b04      	ldr	r3, [sp, #16]
            for(int l=25; l >= 0; l--){                                     //Fade down animation
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
   d5e04:	f8df 91d8 	ldr.w	r9, [pc, #472]	; d5fe0 <_Z11weatherLoopiihhh+0x250>
   d5e08:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   d5e0c:	9b02      	ldr	r3, [sp, #8]
   d5e0e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d5e12:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   d5e16:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   d5e1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d5e1e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
        }
        connDelay(2500);
        if(isSensorDark()){
   d5e22:	46a8      	mov	r8, r5
            for(int l=25; l >= 0; l--){                                     //Fade down animation
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
   d5e24:	4b71      	ldr	r3, [pc, #452]	; (d5fec <_Z11weatherLoopiihhh+0x25c>)
   d5e26:	4872      	ldr	r0, [pc, #456]	; (d5ff0 <_Z11weatherLoopiihhh+0x260>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6800      	ldr	r0, [r0, #0]
   d5e2c:	2119      	movs	r1, #25
   d5e2e:	fb96 f2f1 	sdiv	r2, r6, r1
   d5e32:	4413      	add	r3, r2
   d5e34:	f8d9 2000 	ldr.w	r2, [r9]
   d5e38:	fb94 f5f1 	sdiv	r5, r4, r1
   d5e3c:	b2ed      	uxtb	r5, r5
   d5e3e:	fb97 f1f1 	sdiv	r1, r7, r1
   d5e42:	442a      	add	r2, r5
   d5e44:	4401      	add	r1, r0
   d5e46:	2001      	movs	r0, #1
   d5e48:	9000      	str	r0, [sp, #0]
   d5e4a:	b2db      	uxtb	r3, r3
   d5e4c:	b2d2      	uxtb	r2, r2
   d5e4e:	b2c9      	uxtb	r1, r1
   d5e50:	9805      	ldr	r0, [sp, #20]
   d5e52:	f7ff fa43 	bl	d52dc <_Z12displayClockihhhi>
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
   d5e56:	2200      	movs	r2, #0
   d5e58:	4862      	ldr	r0, [pc, #392]	; (d5fe4 <_Z11weatherLoopiihhh+0x254>)
   d5e5a:	9201      	str	r2, [sp, #4]
   d5e5c:	9200      	str	r2, [sp, #0]
   d5e5e:	462b      	mov	r3, r5
   d5e60:	4659      	mov	r1, fp
   d5e62:	6800      	ldr	r0, [r0, #0]
   d5e64:	f7ff fac8 	bl	d53f8 <_Z11displayTempiihhhb>
                printScreen(screenArray,clockpix,inpix+88);
   d5e68:	4652      	mov	r2, sl
   d5e6a:	9905      	ldr	r1, [sp, #20]
   d5e6c:	485e      	ldr	r0, [pc, #376]	; (d5fe8 <_Z11weatherLoopiihhh+0x258>)
   d5e6e:	f7fe f9fb 	bl	d4268 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
   d5e72:	200a      	movs	r0, #10
   d5e74:	f001 fdd4 	bl	d7a20 <delay>
   d5e78:	9b04      	ldr	r3, [sp, #16]
   d5e7a:	1aff      	subs	r7, r7, r3
   d5e7c:	9b03      	ldr	r3, [sp, #12]
   d5e7e:	1ae4      	subs	r4, r4, r3
   d5e80:	9b02      	ldr	r3, [sp, #8]
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
        }
        connDelay(2500);
        if(isSensorDark()){
            for(int l=25; l >= 0; l--){                                     //Fade down animation
   d5e82:	f1b8 0801 	subs.w	r8, r8, #1
   d5e86:	eba6 0603 	sub.w	r6, r6, r3
   d5e8a:	d1cb      	bne.n	d5e24 <_Z11weatherLoopiihhh+0x94>
   d5e8c:	e2b0      	b.n	d63f0 <_Z11weatherLoopiihhh+0x660>
   d5e8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d5e92:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){                                     //Fade down animation
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
   d5e96:	4607      	mov	r7, r0
   d5e98:	9701      	str	r7, [sp, #4]
   d5e9a:	9700      	str	r7, [sp, #0]
   d5e9c:	fb94 f3f9 	sdiv	r3, r4, r9
   d5ea0:	2200      	movs	r2, #0
   d5ea2:	b2db      	uxtb	r3, r3
   d5ea4:	4659      	mov	r1, fp
   d5ea6:	f8d8 0000 	ldr.w	r0, [r8]
   d5eaa:	f7ff faa5 	bl	d53f8 <_Z11displayTempiihhhb>
                printScreen(screenArray,inpix,inpix+88);
   d5eae:	4652      	mov	r2, sl
   d5eb0:	4659      	mov	r1, fp
   d5eb2:	484d      	ldr	r0, [pc, #308]	; (d5fe8 <_Z11weatherLoopiihhh+0x258>)
   d5eb4:	f7fe f9d8 	bl	d4268 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
   d5eb8:	200a      	movs	r0, #10
   d5eba:	f001 fdb1 	bl	d7a20 <delay>
   d5ebe:	9b03      	ldr	r3, [sp, #12]
                delay(10);                                              //Adjust this delay to change animation duration
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){                                     //Fade down animation
   d5ec0:	3d01      	subs	r5, #1
   d5ec2:	eba4 0403 	sub.w	r4, r4, r3
   d5ec6:	d1e7      	bne.n	d5e98 <_Z11weatherLoopiihhh+0x108>
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
                printScreen(screenArray,inpix,inpix+88);
                delay(10);                                              //Adjust this delay to change animation duration
            }
        }
        if(EEPROM.read(4) == 1){                                    //Check settings in EEPROM
   d5ec8:	f002 fd50 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d5ecc:	2004      	movs	r0, #4
   d5ece:	f7fe f9c5 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d5ed2:	2801      	cmp	r0, #1
            wmode = 2;                                              //Go to indoor temperature code block if configured to do so
   d5ed4:	bf0c      	ite	eq
   d5ed6:	2302      	moveq	r3, #2
        }
        else{
            wmode = 3;                                              //Otherwise skip, and go to the humidity control
   d5ed8:	2303      	movne	r3, #3
   d5eda:	6033      	str	r3, [r6, #0]
        }
    }
    if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
   d5edc:	6833      	ldr	r3, [r6, #0]
   d5ede:	2b02      	cmp	r3, #2
   d5ee0:	f040 80b3 	bne.w	d604a <_Z11weatherLoopiihhh+0x2ba>
    {
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
   d5ee4:	4f43      	ldr	r7, [pc, #268]	; (d5ff4 <_Z11weatherLoopiihhh+0x264>)
   d5ee6:	251a      	movs	r5, #26
   d5ee8:	2400      	movs	r4, #0
   d5eea:	f04f 0832 	mov.w	r8, #50	; 0x32
   d5eee:	9b04      	ldr	r3, [sp, #16]
   d5ef0:	9902      	ldr	r1, [sp, #8]
   d5ef2:	fb04 f203 	mul.w	r2, r4, r3
   d5ef6:	4361      	muls	r1, r4
   d5ef8:	2300      	movs	r3, #0
   d5efa:	2019      	movs	r0, #25
   d5efc:	fb91 f1f0 	sdiv	r1, r1, r0
   d5f00:	b2c9      	uxtb	r1, r1
   d5f02:	9301      	str	r3, [sp, #4]
   d5f04:	9100      	str	r1, [sp, #0]
   d5f06:	6838      	ldr	r0, [r7, #0]
   d5f08:	fb92 f2f8 	sdiv	r2, r2, r8
   d5f0c:	4659      	mov	r1, fp
   d5f0e:	b2d2      	uxtb	r2, r2
            printScreen(screenArray,inpix,inpix+88);
   d5f10:	f10b 0a58 	add.w	sl, fp, #88	; 0x58
        }
    }
    if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
    {
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
   d5f14:	f7ff fa70 	bl	d53f8 <_Z11displayTempiihhhb>
            printScreen(screenArray,inpix,inpix+88);
   d5f18:	4652      	mov	r2, sl
   d5f1a:	4659      	mov	r1, fp
   d5f1c:	4832      	ldr	r0, [pc, #200]	; (d5fe8 <_Z11weatherLoopiihhh+0x258>)
   d5f1e:	f7fe f9a3 	bl	d4268 <_Z11printScreenPiii>
            delay(10);                                               //Adjust this delay to change animation duration
   d5f22:	200a      	movs	r0, #10
   d5f24:	f001 fd7c 	bl	d7a20 <delay>
            wmode = 3;                                              //Otherwise skip, and go to the humidity control
        }
    }
    if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
    {
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
   d5f28:	3d01      	subs	r5, #1
   d5f2a:	f104 0401 	add.w	r4, r4, #1
   d5f2e:	d1de      	bne.n	d5eee <_Z11weatherLoopiihhh+0x15e>
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
        }
        connDelay(2500);
   d5f30:	f640 10c4 	movw	r0, #2500	; 0x9c4
   d5f34:	f7ff fc80 	bl	d5838 <_Z9connDelayi>
        if(isSensorDark()){
   d5f38:	f7ff feea 	bl	d5d10 <_Z12isSensorDarkv>
   d5f3c:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
   d5f40:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
   d5f44:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d5f48:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d5f4c:	2800      	cmp	r0, #0
   d5f4e:	d053      	beq.n	d5ff8 <_Z11weatherLoopiihhh+0x268>
   d5f50:	9b03      	ldr	r3, [sp, #12]
            for(int l=25; l >= 0; l--){                                     //Fade down animation
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
   d5f52:	f8df 908c 	ldr.w	r9, [pc, #140]	; d5fe0 <_Z11weatherLoopiihhh+0x250>
   d5f56:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   d5f5a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d5f5e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   d5f62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
        }
        connDelay(2500);
        if(isSensorDark()){
   d5f66:	f04f 081a 	mov.w	r8, #26
            for(int l=25; l >= 0; l--){                                     //Fade down animation
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
   d5f6a:	f8d9 2000 	ldr.w	r2, [r9]
   d5f6e:	4b1f      	ldr	r3, [pc, #124]	; (d5fec <_Z11weatherLoopiihhh+0x25c>)
   d5f70:	2119      	movs	r1, #25
   d5f72:	fb96 f0f1 	sdiv	r0, r6, r1
   d5f76:	4402      	add	r2, r0
   d5f78:	481d      	ldr	r0, [pc, #116]	; (d5ff0 <_Z11weatherLoopiihhh+0x260>)
   d5f7a:	681b      	ldr	r3, [r3, #0]
   d5f7c:	6800      	ldr	r0, [r0, #0]
   d5f7e:	fb95 f7f1 	sdiv	r7, r5, r1
   d5f82:	b2ff      	uxtb	r7, r7
   d5f84:	fb94 f1f1 	sdiv	r1, r4, r1
   d5f88:	443b      	add	r3, r7
   d5f8a:	4401      	add	r1, r0
   d5f8c:	2001      	movs	r0, #1
   d5f8e:	9000      	str	r0, [sp, #0]
   d5f90:	b2db      	uxtb	r3, r3
   d5f92:	b2d2      	uxtb	r2, r2
   d5f94:	b2c9      	uxtb	r1, r1
   d5f96:	9805      	ldr	r0, [sp, #20]
   d5f98:	f7ff f9a0 	bl	d52dc <_Z12displayClockihhhi>
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
   d5f9c:	2300      	movs	r3, #0
   d5f9e:	4815      	ldr	r0, [pc, #84]	; (d5ff4 <_Z11weatherLoopiihhh+0x264>)
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	9700      	str	r7, [sp, #0]
   d5fa4:	4659      	mov	r1, fp
   d5fa6:	6800      	ldr	r0, [r0, #0]
   d5fa8:	2232      	movs	r2, #50	; 0x32
   d5faa:	fb94 f2f2 	sdiv	r2, r4, r2
   d5fae:	b2d2      	uxtb	r2, r2
   d5fb0:	f7ff fa22 	bl	d53f8 <_Z11displayTempiihhhb>
                printScreen(screenArray,clockpix,inpix+88);
   d5fb4:	4652      	mov	r2, sl
   d5fb6:	9905      	ldr	r1, [sp, #20]
   d5fb8:	480b      	ldr	r0, [pc, #44]	; (d5fe8 <_Z11weatherLoopiihhh+0x258>)
   d5fba:	f7fe f955 	bl	d4268 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
   d5fbe:	200a      	movs	r0, #10
   d5fc0:	f001 fd2e 	bl	d7a20 <delay>
   d5fc4:	9b04      	ldr	r3, [sp, #16]
   d5fc6:	1ae4      	subs	r4, r4, r3
   d5fc8:	9b03      	ldr	r3, [sp, #12]
   d5fca:	1af6      	subs	r6, r6, r3
   d5fcc:	9b02      	ldr	r3, [sp, #8]
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
        }
        connDelay(2500);
        if(isSensorDark()){
            for(int l=25; l >= 0; l--){                                     //Fade down animation
   d5fce:	f1b8 0801 	subs.w	r8, r8, #1
   d5fd2:	eba5 0503 	sub.w	r5, r5, r3
   d5fd6:	d1c8      	bne.n	d5f6a <_Z11weatherLoopiihhh+0x1da>
   d5fd8:	e20a      	b.n	d63f0 <_Z11weatherLoopiihhh+0x660>
   d5fda:	bf00      	nop
   d5fdc:	2003daec 	.word	0x2003daec
   d5fe0:	2003db0c 	.word	0x2003db0c
   d5fe4:	2003e338 	.word	0x2003e338
   d5fe8:	2003db10 	.word	0x2003db10
   d5fec:	2003dacc 	.word	0x2003dacc
   d5ff0:	2003dad0 	.word	0x2003dad0
   d5ff4:	2003e330 	.word	0x2003e330
   d5ff8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){                                     //Fade down animation
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
   d5ffc:	f8df 8154 	ldr.w	r8, [pc, #340]	; d6154 <_Z11weatherLoopiihhh+0x3c4>
   d6000:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
            printScreen(screenArray,inpix,inpix+88);
            delay(10);                                               //Adjust this delay to change animation duration
        }
        connDelay(2500);
        if(isSensorDark()){
   d6004:	271a      	movs	r7, #26
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){                                     //Fade down animation
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
   d6006:	f04f 0932 	mov.w	r9, #50	; 0x32
   d600a:	2300      	movs	r3, #0
   d600c:	2119      	movs	r1, #25
   d600e:	fb95 f1f1 	sdiv	r1, r5, r1
   d6012:	b2c9      	uxtb	r1, r1
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	9100      	str	r1, [sp, #0]
   d6018:	fb94 f2f9 	sdiv	r2, r4, r9
   d601c:	4659      	mov	r1, fp
   d601e:	b2d2      	uxtb	r2, r2
   d6020:	f8d8 0000 	ldr.w	r0, [r8]
   d6024:	f7ff f9e8 	bl	d53f8 <_Z11displayTempiihhhb>
                printScreen(screenArray,inpix,inpix+88);
   d6028:	4652      	mov	r2, sl
   d602a:	4659      	mov	r1, fp
   d602c:	4844      	ldr	r0, [pc, #272]	; (d6140 <_Z11weatherLoopiihhh+0x3b0>)
   d602e:	f7fe f91b 	bl	d4268 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
   d6032:	200a      	movs	r0, #10
   d6034:	f001 fcf4 	bl	d7a20 <delay>
   d6038:	9b04      	ldr	r3, [sp, #16]
   d603a:	1ae4      	subs	r4, r4, r3
   d603c:	9b02      	ldr	r3, [sp, #8]
                delay(10);                                              //Adjust this delay to change animation duration
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){                                     //Fade down animation
   d603e:	3f01      	subs	r7, #1
   d6040:	eba5 0503 	sub.w	r5, r5, r3
   d6044:	d1e1      	bne.n	d600a <_Z11weatherLoopiihhh+0x27a>
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
                printScreen(screenArray,inpix,inpix+88);
                delay(10);                                              //Adjust this delay to change animation duration
            }
        }
        wmode = 3;
   d6046:	2303      	movs	r3, #3
   d6048:	6033      	str	r3, [r6, #0]
    }
    if (wmode == 3)
   d604a:	6833      	ldr	r3, [r6, #0]
   d604c:	2b03      	cmp	r3, #3
   d604e:	f040 80ae 	bne.w	d61ae <_Z11weatherLoopiihhh+0x41e>
    {
        for(int l=0; l <= 25; l++){
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
   d6052:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d6150 <_Z11weatherLoopiihhh+0x3c0>
   d6056:	251a      	movs	r5, #26
   d6058:	2400      	movs	r4, #0
   d605a:	2719      	movs	r7, #25
   d605c:	9a02      	ldr	r2, [sp, #8]
   d605e:	9b03      	ldr	r3, [sp, #12]
   d6060:	4362      	muls	r2, r4
   d6062:	fb92 f2f7 	sdiv	r2, r2, r7
   d6066:	b2d2      	uxtb	r2, r2
   d6068:	9200      	str	r2, [sp, #0]
   d606a:	4363      	muls	r3, r4
   d606c:	2200      	movs	r2, #0
   d606e:	4659      	mov	r1, fp
   d6070:	f8d8 0000 	ldr.w	r0, [r8]
   d6074:	fb93 f3f7 	sdiv	r3, r3, r7
            printScreen(screenArray,inpix,inpix+88);
   d6078:	f10b 0a58 	add.w	sl, fp, #88	; 0x58
        wmode = 3;
    }
    if (wmode == 3)
    {
        for(int l=0; l <= 25; l++){
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
   d607c:	b2db      	uxtb	r3, r3
   d607e:	f7ff fa01 	bl	d5484 <_Z12displayHumidiihhh>
            printScreen(screenArray,inpix,inpix+88);
   d6082:	4652      	mov	r2, sl
   d6084:	4659      	mov	r1, fp
   d6086:	482e      	ldr	r0, [pc, #184]	; (d6140 <_Z11weatherLoopiihhh+0x3b0>)
   d6088:	f7fe f8ee 	bl	d4268 <_Z11printScreenPiii>
            delay(10);
   d608c:	200a      	movs	r0, #10
   d608e:	f001 fcc7 	bl	d7a20 <delay>
        }
        wmode = 3;
    }
    if (wmode == 3)
    {
        for(int l=0; l <= 25; l++){
   d6092:	3d01      	subs	r5, #1
   d6094:	f104 0401 	add.w	r4, r4, #1
   d6098:	d1e0      	bne.n	d605c <_Z11weatherLoopiihhh+0x2cc>
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
            printScreen(screenArray,inpix,inpix+88);
            delay(10);
        }
        connDelay(2500);
   d609a:	f640 10c4 	movw	r0, #2500	; 0x9c4
   d609e:	f7ff fbcb 	bl	d5838 <_Z9connDelayi>
        if(isSensorDark()){
   d60a2:	f7ff fe35 	bl	d5d10 <_Z12isSensorDarkv>
   d60a6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d60aa:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
   d60ae:	2800      	cmp	r0, #0
   d60b0:	d052      	beq.n	d6158 <_Z11weatherLoopiihhh+0x3c8>
   d60b2:	9b04      	ldr	r3, [sp, #16]
   d60b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d60b8:	eb03 0683 	add.w	r6, r3, r3, lsl #2
   d60bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d60c0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   d60c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d60c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d60cc:	f04f 091a 	mov.w	r9, #26
            for(int l=25; l >= 0; l--){
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
   d60d0:	4b1c      	ldr	r3, [pc, #112]	; (d6144 <_Z11weatherLoopiihhh+0x3b4>)
   d60d2:	4a1d      	ldr	r2, [pc, #116]	; (d6148 <_Z11weatherLoopiihhh+0x3b8>)
   d60d4:	481d      	ldr	r0, [pc, #116]	; (d614c <_Z11weatherLoopiihhh+0x3bc>)
   d60d6:	681b      	ldr	r3, [r3, #0]
   d60d8:	6800      	ldr	r0, [r0, #0]
   d60da:	6812      	ldr	r2, [r2, #0]
   d60dc:	2119      	movs	r1, #25
   d60de:	fb95 f7f1 	sdiv	r7, r5, r1
   d60e2:	fb94 f8f1 	sdiv	r8, r4, r1
   d60e6:	b2ff      	uxtb	r7, r7
   d60e8:	fa5f f888 	uxtb.w	r8, r8
   d60ec:	fb96 f1f1 	sdiv	r1, r6, r1
   d60f0:	4443      	add	r3, r8
   d60f2:	4401      	add	r1, r0
   d60f4:	443a      	add	r2, r7
   d60f6:	2001      	movs	r0, #1
   d60f8:	9000      	str	r0, [sp, #0]
   d60fa:	b2db      	uxtb	r3, r3
   d60fc:	b2d2      	uxtb	r2, r2
   d60fe:	b2c9      	uxtb	r1, r1
   d6100:	9805      	ldr	r0, [sp, #20]
   d6102:	f7ff f8eb 	bl	d52dc <_Z12displayClockihhhi>
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
   d6106:	4812      	ldr	r0, [pc, #72]	; (d6150 <_Z11weatherLoopiihhh+0x3c0>)
   d6108:	f8cd 8000 	str.w	r8, [sp]
   d610c:	463b      	mov	r3, r7
   d610e:	2200      	movs	r2, #0
   d6110:	4659      	mov	r1, fp
   d6112:	6800      	ldr	r0, [r0, #0]
   d6114:	f7ff f9b6 	bl	d5484 <_Z12displayHumidiihhh>
                printScreen(screenArray,clockpix,inpix+88);
   d6118:	4652      	mov	r2, sl
   d611a:	9905      	ldr	r1, [sp, #20]
   d611c:	4808      	ldr	r0, [pc, #32]	; (d6140 <_Z11weatherLoopiihhh+0x3b0>)
   d611e:	f7fe f8a3 	bl	d4268 <_Z11printScreenPiii>
                delay(10);
   d6122:	200a      	movs	r0, #10
   d6124:	f001 fc7c 	bl	d7a20 <delay>
   d6128:	9b04      	ldr	r3, [sp, #16]
   d612a:	1af6      	subs	r6, r6, r3
   d612c:	9b03      	ldr	r3, [sp, #12]
   d612e:	1aed      	subs	r5, r5, r3
   d6130:	9b02      	ldr	r3, [sp, #8]
            printScreen(screenArray,inpix,inpix+88);
            delay(10);
        }
        connDelay(2500);
        if(isSensorDark()){
            for(int l=25; l >= 0; l--){
   d6132:	f1b9 0901 	subs.w	r9, r9, #1
   d6136:	eba4 0403 	sub.w	r4, r4, r3
   d613a:	d1c9      	bne.n	d60d0 <_Z11weatherLoopiihhh+0x340>
   d613c:	e158      	b.n	d63f0 <_Z11weatherLoopiihhh+0x660>
   d613e:	bf00      	nop
   d6140:	2003db10 	.word	0x2003db10
   d6144:	2003dacc 	.word	0x2003dacc
   d6148:	2003db0c 	.word	0x2003db0c
   d614c:	2003dad0 	.word	0x2003dad0
   d6150:	2003dae0 	.word	0x2003dae0
   d6154:	2003e330 	.word	0x2003e330
   d6158:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d615c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
   d6160:	f8df 92ac 	ldr.w	r9, [pc, #684]	; d6410 <_Z11weatherLoopiihhh+0x680>
   d6164:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d6168:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
            printScreen(screenArray,inpix,inpix+88);
            delay(10);
        }
        connDelay(2500);
        if(isSensorDark()){
   d616c:	271a      	movs	r7, #26
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
   d616e:	f04f 0819 	mov.w	r8, #25
   d6172:	fb94 f2f8 	sdiv	r2, r4, r8
   d6176:	b2d2      	uxtb	r2, r2
   d6178:	9200      	str	r2, [sp, #0]
   d617a:	fb95 f3f8 	sdiv	r3, r5, r8
   d617e:	2200      	movs	r2, #0
   d6180:	b2db      	uxtb	r3, r3
   d6182:	4659      	mov	r1, fp
   d6184:	f8d9 0000 	ldr.w	r0, [r9]
   d6188:	f7ff f97c 	bl	d5484 <_Z12displayHumidiihhh>
                printScreen(screenArray,inpix,inpix+88);
   d618c:	4652      	mov	r2, sl
   d618e:	4659      	mov	r1, fp
   d6190:	4899      	ldr	r0, [pc, #612]	; (d63f8 <_Z11weatherLoopiihhh+0x668>)
   d6192:	f7fe f869 	bl	d4268 <_Z11printScreenPiii>
                delay(10);
   d6196:	200a      	movs	r0, #10
   d6198:	f001 fc42 	bl	d7a20 <delay>
   d619c:	9b03      	ldr	r3, [sp, #12]
   d619e:	1aed      	subs	r5, r5, r3
   d61a0:	9b02      	ldr	r3, [sp, #8]
                delay(10);
            }
            return;
        }
        else{
            for(int l=25; l >= 0; l--){
   d61a2:	3f01      	subs	r7, #1
   d61a4:	eba4 0403 	sub.w	r4, r4, r3
   d61a8:	d1e3      	bne.n	d6172 <_Z11weatherLoopiihhh+0x3e2>
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
                printScreen(screenArray,inpix,inpix+88);
                delay(10);
            }
        }
        wmode = 4;
   d61aa:	2304      	movs	r3, #4
   d61ac:	6033      	str	r3, [r6, #0]
    }
    if(wmode == 4)
   d61ae:	6833      	ldr	r3, [r6, #0]
   d61b0:	2b04      	cmp	r3, #4
   d61b2:	f040 811d 	bne.w	d63f0 <_Z11weatherLoopiihhh+0x660>
    {
        for(int l = 0; l <= 20; l++){
            displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
   d61b6:	f8df 8244 	ldr.w	r8, [pc, #580]	; d63fc <_Z11weatherLoopiihhh+0x66c>
   d61ba:	2415      	movs	r4, #21
   d61bc:	2500      	movs	r5, #0
   d61be:	2614      	movs	r6, #20
   d61c0:	2100      	movs	r1, #0
   d61c2:	9101      	str	r1, [sp, #4]
   d61c4:	9902      	ldr	r1, [sp, #8]
   d61c6:	9b03      	ldr	r3, [sp, #12]
   d61c8:	9a04      	ldr	r2, [sp, #16]
   d61ca:	4f8c      	ldr	r7, [pc, #560]	; (d63fc <_Z11weatherLoopiihhh+0x66c>)
   d61cc:	4369      	muls	r1, r5
   d61ce:	fb91 f1f6 	sdiv	r1, r1, r6
   d61d2:	b2c9      	uxtb	r1, r1
   d61d4:	9100      	str	r1, [sp, #0]
   d61d6:	436b      	muls	r3, r5
   d61d8:	436a      	muls	r2, r5
   d61da:	4659      	mov	r1, fp
   d61dc:	f8d8 0000 	ldr.w	r0, [r8]
   d61e0:	fb93 f3f6 	sdiv	r3, r3, r6
   d61e4:	fb92 f2f6 	sdiv	r2, r2, r6
   d61e8:	b2db      	uxtb	r3, r3
   d61ea:	b2d2      	uxtb	r2, r2
   d61ec:	f7fe fa80 	bl	d46f0 <_Z16displayConditioniihhhb>
            printScreen(screenArray,inpix,inpix+88);
   d61f0:	f10b 0358 	add.w	r3, fp, #88	; 0x58
   d61f4:	461a      	mov	r2, r3
   d61f6:	4659      	mov	r1, fp
   d61f8:	487f      	ldr	r0, [pc, #508]	; (d63f8 <_Z11weatherLoopiihhh+0x668>)
   d61fa:	9308      	str	r3, [sp, #32]
   d61fc:	f7fe f834 	bl	d4268 <_Z11printScreenPiii>
            delay(10);
   d6200:	200a      	movs	r0, #10
   d6202:	f001 fc0d 	bl	d7a20 <delay>
        }
        wmode = 4;
    }
    if(wmode == 4)
    {
        for(int l = 0; l <= 20; l++){
   d6206:	3c01      	subs	r4, #1
   d6208:	f105 0501 	add.w	r5, r5, #1
   d620c:	d1d8      	bne.n	d61c0 <_Z11weatherLoopiihhh+0x430>
            displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
            printScreen(screenArray,inpix,inpix+88);
            delay(10);
        }
        animateCondition(cid,inpix,250,R,G,B);
   d620e:	9b02      	ldr	r3, [sp, #8]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	9b03      	ldr	r3, [sp, #12]
   d6214:	9300      	str	r3, [sp, #0]
   d6216:	22fa      	movs	r2, #250	; 0xfa
   d6218:	9b04      	ldr	r3, [sp, #16]
   d621a:	6838      	ldr	r0, [r7, #0]
   d621c:	4659      	mov	r1, fp
   d621e:	f7ff fb27 	bl	d5870 <_Z16animateConditioniiihhh>
        displayClock(clockpix, R,G,B, false);
   d6222:	9400      	str	r4, [sp, #0]
   d6224:	9b02      	ldr	r3, [sp, #8]
   d6226:	9a03      	ldr	r2, [sp, #12]
   d6228:	9904      	ldr	r1, [sp, #16]
   d622a:	9805      	ldr	r0, [sp, #20]
   d622c:	f7ff f856 	bl	d52dc <_Z12displayClockihhhi>
        printScreen(screenArray,clockpix,clockpix+152);
   d6230:	9b05      	ldr	r3, [sp, #20]
   d6232:	4871      	ldr	r0, [pc, #452]	; (d63f8 <_Z11weatherLoopiihhh+0x668>)
   d6234:	f103 0598 	add.w	r5, r3, #152	; 0x98
   d6238:	462a      	mov	r2, r5
   d623a:	4619      	mov	r1, r3
   d623c:	f7fe f814 	bl	d4268 <_Z11printScreenPiii>
        animateCondition(cid,inpix,250,R,G,B);
   d6240:	9b02      	ldr	r3, [sp, #8]
   d6242:	9301      	str	r3, [sp, #4]
   d6244:	9b03      	ldr	r3, [sp, #12]
   d6246:	9300      	str	r3, [sp, #0]
   d6248:	22fa      	movs	r2, #250	; 0xfa
   d624a:	9b04      	ldr	r3, [sp, #16]
   d624c:	6838      	ldr	r0, [r7, #0]
   d624e:	4659      	mov	r1, fp
   d6250:	f7ff fb0e 	bl	d5870 <_Z16animateConditioniiihhh>
        displayClock(clockpix, R,G,B, false);
   d6254:	9b02      	ldr	r3, [sp, #8]
   d6256:	9400      	str	r4, [sp, #0]
   d6258:	9a03      	ldr	r2, [sp, #12]
   d625a:	9904      	ldr	r1, [sp, #16]
   d625c:	9805      	ldr	r0, [sp, #20]
   d625e:	f7ff f83d 	bl	d52dc <_Z12displayClockihhhi>
        printScreen(screenArray,clockpix,clockpix+152);
   d6262:	462a      	mov	r2, r5
   d6264:	9905      	ldr	r1, [sp, #20]
   d6266:	4864      	ldr	r0, [pc, #400]	; (d63f8 <_Z11weatherLoopiihhh+0x668>)
   d6268:	f7fd fffe 	bl	d4268 <_Z11printScreenPiii>
        animateCondition(cid,inpix,250,R,G,B);
   d626c:	9b02      	ldr	r3, [sp, #8]
   d626e:	9301      	str	r3, [sp, #4]
   d6270:	9b03      	ldr	r3, [sp, #12]
   d6272:	9300      	str	r3, [sp, #0]
   d6274:	22fa      	movs	r2, #250	; 0xfa
   d6276:	9b04      	ldr	r3, [sp, #16]
   d6278:	6838      	ldr	r0, [r7, #0]
   d627a:	4659      	mov	r1, fp
   d627c:	f7ff faf8 	bl	d5870 <_Z16animateConditioniiihhh>
        displayClock(clockpix, R,G,B, false);
   d6280:	9b02      	ldr	r3, [sp, #8]
   d6282:	9400      	str	r4, [sp, #0]
   d6284:	9a03      	ldr	r2, [sp, #12]
   d6286:	9904      	ldr	r1, [sp, #16]
   d6288:	9805      	ldr	r0, [sp, #20]
   d628a:	f7ff f827 	bl	d52dc <_Z12displayClockihhhi>
        printScreen(screenArray,clockpix,clockpix+152);
   d628e:	462a      	mov	r2, r5
   d6290:	9905      	ldr	r1, [sp, #20]
   d6292:	4859      	ldr	r0, [pc, #356]	; (d63f8 <_Z11weatherLoopiihhh+0x668>)
   d6294:	f7fd ffe8 	bl	d4268 <_Z11printScreenPiii>
        if(isSensorDark()){
   d6298:	f7ff fd3a 	bl	d5d10 <_Z12isSensorDarkv>
   d629c:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
   d62a0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d62a4:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
   d62a8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   d62ac:	2800      	cmp	r0, #0
   d62ae:	d062      	beq.n	d6376 <_Z11weatherLoopiihhh+0x5e6>
   d62b0:	00b3      	lsls	r3, r6, #2
   d62b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d62b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   d62ba:	9307      	str	r3, [sp, #28]
   d62bc:	00ab      	lsls	r3, r5, #2
   d62be:	9306      	str	r3, [sp, #24]
   d62c0:	00a7      	lsls	r7, r4, #2
   d62c2:	2315      	movs	r3, #21
            for(int l = 20; l >= 0; l--){
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
   d62c4:	4c4e      	ldr	r4, [pc, #312]	; (d6400 <_Z11weatherLoopiihhh+0x670>)
   d62c6:	4e4f      	ldr	r6, [pc, #316]	; (d6404 <_Z11weatherLoopiihhh+0x674>)
   d62c8:	4d4f      	ldr	r5, [pc, #316]	; (d6408 <_Z11weatherLoopiihhh+0x678>)
        displayClock(clockpix, R,G,B, false);
        printScreen(screenArray,clockpix,clockpix+152);
        animateCondition(cid,inpix,250,R,G,B);
        displayClock(clockpix, R,G,B, false);
        printScreen(screenArray,clockpix,clockpix+152);
        if(isSensorDark()){
   d62ca:	9309      	str	r3, [sp, #36]	; 0x24
            for(int l = 20; l >= 0; l--){
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
   d62cc:	f04f 0919 	mov.w	r9, #25
   d62d0:	9b07      	ldr	r3, [sp, #28]
   d62d2:	6832      	ldr	r2, [r6, #0]
   d62d4:	fb93 faf9 	sdiv	sl, r3, r9
   d62d8:	6829      	ldr	r1, [r5, #0]
   d62da:	9b06      	ldr	r3, [sp, #24]
   d62dc:	fb93 f8f9 	sdiv	r8, r3, r9
   d62e0:	6823      	ldr	r3, [r4, #0]
   d62e2:	fb97 f9f9 	sdiv	r9, r7, r9
   d62e6:	fa5f fa8a 	uxtb.w	sl, sl
   d62ea:	fa5f f888 	uxtb.w	r8, r8
   d62ee:	fa5f f989 	uxtb.w	r9, r9
   d62f2:	2001      	movs	r0, #1
   d62f4:	444b      	add	r3, r9
   d62f6:	4442      	add	r2, r8
   d62f8:	4451      	add	r1, sl
   d62fa:	9000      	str	r0, [sp, #0]
   d62fc:	b2db      	uxtb	r3, r3
   d62fe:	b2d2      	uxtb	r2, r2
   d6300:	b2c9      	uxtb	r1, r1
   d6302:	9805      	ldr	r0, [sp, #20]
   d6304:	f7fe ffea 	bl	d52dc <_Z12displayClockihhhi>
                displayCondition(cid,inpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, false);
   d6308:	2100      	movs	r1, #0
   d630a:	6833      	ldr	r3, [r6, #0]
   d630c:	682a      	ldr	r2, [r5, #0]
   d630e:	9101      	str	r1, [sp, #4]
   d6310:	6821      	ldr	r1, [r4, #0]
   d6312:	483a      	ldr	r0, [pc, #232]	; (d63fc <_Z11weatherLoopiihhh+0x66c>)
   d6314:	4449      	add	r1, r9
   d6316:	b2c9      	uxtb	r1, r1
   d6318:	9100      	str	r1, [sp, #0]
   d631a:	4443      	add	r3, r8
   d631c:	4452      	add	r2, sl
   d631e:	b2db      	uxtb	r3, r3
   d6320:	b2d2      	uxtb	r2, r2
   d6322:	4659      	mov	r1, fp
   d6324:	6800      	ldr	r0, [r0, #0]
   d6326:	f7fe f9e3 	bl	d46f0 <_Z16displayConditioniihhhb>
                dimg(cid,160, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock);
   d632a:	6821      	ldr	r1, [r4, #0]
   d632c:	6833      	ldr	r3, [r6, #0]
   d632e:	682a      	ldr	r2, [r5, #0]
   d6330:	4832      	ldr	r0, [pc, #200]	; (d63fc <_Z11weatherLoopiihhh+0x66c>)
   d6332:	4449      	add	r1, r9
   d6334:	b2c9      	uxtb	r1, r1
   d6336:	9100      	str	r1, [sp, #0]
   d6338:	4443      	add	r3, r8
   d633a:	4452      	add	r2, sl
   d633c:	b2db      	uxtb	r3, r3
   d633e:	b2d2      	uxtb	r2, r2
   d6340:	21a0      	movs	r1, #160	; 0xa0
   d6342:	6800      	ldr	r0, [r0, #0]
   d6344:	f7ff f8e4 	bl	d5510 <_Z4dimgiihhh>
                printScreen(screenArray,clockpix,inpix+88);
   d6348:	9a08      	ldr	r2, [sp, #32]
   d634a:	9905      	ldr	r1, [sp, #20]
   d634c:	482a      	ldr	r0, [pc, #168]	; (d63f8 <_Z11weatherLoopiihhh+0x668>)
   d634e:	f7fd ff8b 	bl	d4268 <_Z11printScreenPiii>
                delay(10);
   d6352:	200a      	movs	r0, #10
   d6354:	f001 fb64 	bl	d7a20 <delay>
   d6358:	9b07      	ldr	r3, [sp, #28]
   d635a:	9a04      	ldr	r2, [sp, #16]
   d635c:	1a9b      	subs	r3, r3, r2
   d635e:	9307      	str	r3, [sp, #28]
   d6360:	9a03      	ldr	r2, [sp, #12]
   d6362:	9b06      	ldr	r3, [sp, #24]
   d6364:	1a9b      	subs	r3, r3, r2
   d6366:	9306      	str	r3, [sp, #24]
   d6368:	9b02      	ldr	r3, [sp, #8]
   d636a:	1aff      	subs	r7, r7, r3
        printScreen(screenArray,clockpix,clockpix+152);
        animateCondition(cid,inpix,250,R,G,B);
        displayClock(clockpix, R,G,B, false);
        printScreen(screenArray,clockpix,clockpix+152);
        if(isSensorDark()){
            for(int l = 20; l >= 0; l--){
   d636c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d636e:	3b01      	subs	r3, #1
   d6370:	9309      	str	r3, [sp, #36]	; 0x24
   d6372:	d1ab      	bne.n	d62cc <_Z11weatherLoopiihhh+0x53c>
   d6374:	e03c      	b.n	d63f0 <_Z11weatherLoopiihhh+0x660>
   d6376:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d637a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        displayClock(clockpix, R,G,B, false);
        printScreen(screenArray,clockpix,clockpix+152);
        animateCondition(cid,inpix,250,R,G,B);
        displayClock(clockpix, R,G,B, false);
        printScreen(screenArray,clockpix,clockpix+152);
        if(isSensorDark()){
   d637e:	2315      	movs	r3, #21
   d6380:	00b6      	lsls	r6, r6, #2
   d6382:	00ad      	lsls	r5, r5, #2
   d6384:	00a4      	lsls	r4, r4, #2
   d6386:	9305      	str	r3, [sp, #20]
            }
            return;
        }
        else{
            for(int l = 20; l >= 0; l--){
                displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
   d6388:	2314      	movs	r3, #20
   d638a:	fb96 f8f3 	sdiv	r8, r6, r3
   d638e:	fb95 f9f3 	sdiv	r9, r5, r3
   d6392:	fb94 faf3 	sdiv	sl, r4, r3
   d6396:	2300      	movs	r3, #0
   d6398:	fa5f fa8a 	uxtb.w	sl, sl
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	fa5f f888 	uxtb.w	r8, r8
   d63a2:	fa5f f989 	uxtb.w	r9, r9
   d63a6:	f8cd a000 	str.w	sl, [sp]
   d63aa:	464b      	mov	r3, r9
   d63ac:	4642      	mov	r2, r8
   d63ae:	4659      	mov	r1, fp
   d63b0:	6838      	ldr	r0, [r7, #0]
   d63b2:	f7fe f99d 	bl	d46f0 <_Z16displayConditioniihhhb>
                dimg(cid,160, (R*l)/20, (G*l)/20, (B*l)/20);
   d63b6:	f8cd a000 	str.w	sl, [sp]
   d63ba:	464b      	mov	r3, r9
   d63bc:	4642      	mov	r2, r8
   d63be:	21a0      	movs	r1, #160	; 0xa0
   d63c0:	6838      	ldr	r0, [r7, #0]
   d63c2:	f7ff f8a5 	bl	d5510 <_Z4dimgiihhh>
                printScreen(screenArray,inpix,inpix+88);
   d63c6:	9a08      	ldr	r2, [sp, #32]
   d63c8:	480b      	ldr	r0, [pc, #44]	; (d63f8 <_Z11weatherLoopiihhh+0x668>)
   d63ca:	4659      	mov	r1, fp
   d63cc:	f7fd ff4c 	bl	d4268 <_Z11printScreenPiii>
                delay(10);
   d63d0:	200a      	movs	r0, #10
   d63d2:	f001 fb25 	bl	d7a20 <delay>
   d63d6:	9b04      	ldr	r3, [sp, #16]
   d63d8:	1af6      	subs	r6, r6, r3
   d63da:	9b03      	ldr	r3, [sp, #12]
   d63dc:	1aed      	subs	r5, r5, r3
   d63de:	9b02      	ldr	r3, [sp, #8]
   d63e0:	1ae4      	subs	r4, r4, r3
                delay(10);
            }
            return;
        }
        else{
            for(int l = 20; l >= 0; l--){
   d63e2:	9b05      	ldr	r3, [sp, #20]
   d63e4:	3b01      	subs	r3, #1
   d63e6:	9305      	str	r3, [sp, #20]
   d63e8:	d1ce      	bne.n	d6388 <_Z11weatherLoopiihhh+0x5f8>
                dimg(cid,160, (R*l)/20, (G*l)/20, (B*l)/20);
                printScreen(screenArray,inpix,inpix+88);
                delay(10);
            }
        }
        wmode = 1;
   d63ea:	4b08      	ldr	r3, [pc, #32]	; (d640c <_Z11weatherLoopiihhh+0x67c>)
   d63ec:	2201      	movs	r2, #1
   d63ee:	601a      	str	r2, [r3, #0]
    }
}
   d63f0:	b00b      	add	sp, #44	; 0x2c
   d63f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63f6:	bf00      	nop
   d63f8:	2003db10 	.word	0x2003db10
   d63fc:	2003dae4 	.word	0x2003dae4
   d6400:	2003dacc 	.word	0x2003dacc
   d6404:	2003db0c 	.word	0x2003db0c
   d6408:	2003dad0 	.word	0x2003dad0
   d640c:	2003daec 	.word	0x2003daec
   d6410:	2003dae0 	.word	0x2003dae0

000d6414 <_Z16menuButtonUpdatePii>:
        if(menuButtonUpdate(&smode,numMenuItems)) fillStrip(inpix,inpix+255,0,0,0,true);
        printScreen(screenArray,inpix,inpix+255);
        delay(50);
    }
}
bool menuButtonUpdate(int *modeSelect, int maxItems){
   d6414:	b538      	push	{r3, r4, r5, lr}
   d6416:	4604      	mov	r4, r0
    if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == HIGH)
   d6418:	2000      	movs	r0, #0
        if(menuButtonUpdate(&smode,numMenuItems)) fillStrip(inpix,inpix+255,0,0,0,true);
        printScreen(screenArray,inpix,inpix+255);
        delay(50);
    }
}
bool menuButtonUpdate(int *modeSelect, int maxItems){
   d641a:	460d      	mov	r5, r1
    if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == HIGH)
   d641c:	f002 fa7c 	bl	d8918 <digitalRead>
   d6420:	b9e0      	cbnz	r0, d645c <_Z16menuButtonUpdatePii+0x48>
   d6422:	2001      	movs	r0, #1
   d6424:	f002 fa78 	bl	d8918 <digitalRead>
   d6428:	b9c0      	cbnz	r0, d645c <_Z16menuButtonUpdatePii+0x48>
   d642a:	2002      	movs	r0, #2
   d642c:	f002 fa74 	bl	d8918 <digitalRead>
   d6430:	2801      	cmp	r0, #1
   d6432:	d113      	bne.n	d645c <_Z16menuButtonUpdatePii+0x48>
    {
        if(*modeSelect < maxItems){
   d6434:	6823      	ldr	r3, [r4, #0]
   d6436:	42ab      	cmp	r3, r5
   d6438:	da02      	bge.n	d6440 <_Z16menuButtonUpdatePii+0x2c>
            *modeSelect = *modeSelect + 1;
   d643a:	3301      	adds	r3, #1
   d643c:	6023      	str	r3, [r4, #0]
   d643e:	e000      	b.n	d6442 <_Z16menuButtonUpdatePii+0x2e>
        }
        else{
            *modeSelect = 1;
   d6440:	6020      	str	r0, [r4, #0]
        }
        while(digitalRead(dnbtn) == HIGH && digitalRead(upbtn) == LOW) delay(5);
   d6442:	2002      	movs	r0, #2
   d6444:	f002 fa68 	bl	d8918 <digitalRead>
   d6448:	2801      	cmp	r0, #1
   d644a:	d11d      	bne.n	d6488 <_Z16menuButtonUpdatePii+0x74>
   d644c:	2000      	movs	r0, #0
   d644e:	f002 fa63 	bl	d8918 <digitalRead>
   d6452:	b9c8      	cbnz	r0, d6488 <_Z16menuButtonUpdatePii+0x74>
   d6454:	2005      	movs	r0, #5
   d6456:	f001 fae3 	bl	d7a20 <delay>
   d645a:	e7f2      	b.n	d6442 <_Z16menuButtonUpdatePii+0x2e>
        return true;
    }
    if(digitalRead(upbtn) == HIGH && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == LOW)
   d645c:	2000      	movs	r0, #0
   d645e:	f002 fa5b 	bl	d8918 <digitalRead>
   d6462:	2801      	cmp	r0, #1
   d6464:	d112      	bne.n	d648c <_Z16menuButtonUpdatePii+0x78>
   d6466:	f002 fa57 	bl	d8918 <digitalRead>
   d646a:	b978      	cbnz	r0, d648c <_Z16menuButtonUpdatePii+0x78>
   d646c:	2002      	movs	r0, #2
   d646e:	f002 fa53 	bl	d8918 <digitalRead>
   d6472:	b958      	cbnz	r0, d648c <_Z16menuButtonUpdatePii+0x78>
    {
        if(*modeSelect > 1){
   d6474:	6823      	ldr	r3, [r4, #0]
   d6476:	2b01      	cmp	r3, #1
   d6478:	dd0a      	ble.n	d6490 <_Z16menuButtonUpdatePii+0x7c>
            *modeSelect = *modeSelect - 1;
   d647a:	3b01      	subs	r3, #1
   d647c:	6023      	str	r3, [r4, #0]
        }
        else{
            *modeSelect = maxItems;
        }
        while(digitalRead(upbtn) == HIGH && digitalRead(dnbtn) == LOW) delay(5);
   d647e:	2000      	movs	r0, #0
   d6480:	f002 fa4a 	bl	d8918 <digitalRead>
   d6484:	2801      	cmp	r0, #1
   d6486:	d005      	beq.n	d6494 <_Z16menuButtonUpdatePii+0x80>
        }
        else{
            *modeSelect = 1;
        }
        while(digitalRead(dnbtn) == HIGH && digitalRead(upbtn) == LOW) delay(5);
        return true;
   d6488:	2001      	movs	r0, #1
   d648a:	bd38      	pop	{r3, r4, r5, pc}
            *modeSelect = maxItems;
        }
        while(digitalRead(upbtn) == HIGH && digitalRead(dnbtn) == LOW) delay(5);
        return true;
    }
    return false;
   d648c:	2000      	movs	r0, #0
   d648e:	bd38      	pop	{r3, r4, r5, pc}
    {
        if(*modeSelect > 1){
            *modeSelect = *modeSelect - 1;
        }
        else{
            *modeSelect = maxItems;
   d6490:	6025      	str	r5, [r4, #0]
   d6492:	e7f4      	b.n	d647e <_Z16menuButtonUpdatePii+0x6a>
        }
        while(digitalRead(upbtn) == HIGH && digitalRead(dnbtn) == LOW) delay(5);
   d6494:	2002      	movs	r0, #2
   d6496:	f002 fa3f 	bl	d8918 <digitalRead>
   d649a:	2800      	cmp	r0, #0
   d649c:	d1f4      	bne.n	d6488 <_Z16menuButtonUpdatePii+0x74>
   d649e:	2005      	movs	r0, #5
   d64a0:	f001 fabe 	bl	d7a20 <delay>
   d64a4:	e7eb      	b.n	d647e <_Z16menuButtonUpdatePii+0x6a>
	...

000d64a8 <_Z9fillStripiihhhb>:
            //digitalWrite(D7,LOW);
        }
    }
    delay(100);
}
void fillStrip(int start, int end, uint8_t R, uint8_t G, uint8_t B, bool apply){
   d64a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for(i = start; i <= end; i++){
        screenArray[i] = encodeColor(R,G,B);
   d64ac:	f8df 8044 	ldr.w	r8, [pc, #68]	; d64f4 <_Z9fillStripiihhhb+0x4c>
            //digitalWrite(D7,LOW);
        }
    }
    delay(100);
}
void fillStrip(int start, int end, uint8_t R, uint8_t G, uint8_t B, bool apply){
   d64b0:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d64b4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
   d64b8:	4605      	mov	r5, r0
   d64ba:	460e      	mov	r6, r1
   d64bc:	4691      	mov	r9, r2
   d64be:	469a      	mov	sl, r3
    for(i = start; i <= end; i++){
   d64c0:	4604      	mov	r4, r0
   d64c2:	42a6      	cmp	r6, r4
   d64c4:	db08      	blt.n	d64d8 <_Z9fillStripiihhhb+0x30>
        screenArray[i] = encodeColor(R,G,B);
   d64c6:	465a      	mov	r2, fp
   d64c8:	4651      	mov	r1, sl
   d64ca:	4648      	mov	r0, r9
   d64cc:	f7fe f856 	bl	d457c <_Z11encodeColorhhh>
   d64d0:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        }
    }
    delay(100);
}
void fillStrip(int start, int end, uint8_t R, uint8_t G, uint8_t B, bool apply){
    for(i = start; i <= end; i++){
   d64d4:	3401      	adds	r4, #1
   d64d6:	e7f4      	b.n	d64c2 <_Z9fillStripiihhhb+0x1a>
   d64d8:	4b05      	ldr	r3, [pc, #20]	; (d64f0 <_Z9fillStripiihhhb+0x48>)
   d64da:	601c      	str	r4, [r3, #0]
        screenArray[i] = encodeColor(R,G,B);
    }
    if(apply){
   d64dc:	b137      	cbz	r7, d64ec <_Z9fillStripiihhhb+0x44>
        printScreen(screenArray,start,end);
   d64de:	4632      	mov	r2, r6
   d64e0:	4629      	mov	r1, r5
   d64e2:	4804      	ldr	r0, [pc, #16]	; (d64f4 <_Z9fillStripiihhhb+0x4c>)
    }
}
   d64e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void fillStrip(int start, int end, uint8_t R, uint8_t G, uint8_t B, bool apply){
    for(i = start; i <= end; i++){
        screenArray[i] = encodeColor(R,G,B);
    }
    if(apply){
        printScreen(screenArray,start,end);
   d64e8:	f7fd bebe 	b.w	d4268 <_Z11printScreenPiii>
   d64ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64f0:	2003dad8 	.word	0x2003dad8
   d64f4:	2003db10 	.word	0x2003db10

000d64f8 <_Z8settingsihhh>:
            }
        }
        wmode = 1;
    }
}
void settings(int inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   d64f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64fc:	b085      	sub	sp, #20
    #define numMenuItems 5
    bool sett = true;
    int smode = 1;
    fillStrip(inpix,inpix+255,0,0,0,true);
   d64fe:	f100 09ff 	add.w	r9, r0, #255	; 0xff
   d6502:	f04f 0800 	mov.w	r8, #0
            }
        }
        wmode = 1;
    }
}
void settings(int inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   d6506:	461f      	mov	r7, r3
    #define numMenuItems 5
    bool sett = true;
    int smode = 1;
   d6508:	2301      	movs	r3, #1
            }
        }
        wmode = 1;
    }
}
void settings(int inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   d650a:	4604      	mov	r4, r0
   d650c:	460d      	mov	r5, r1
   d650e:	4616      	mov	r6, r2
    #define numMenuItems 5
    bool sett = true;
    int smode = 1;
   d6510:	9302      	str	r3, [sp, #8]
    fillStrip(inpix,inpix+255,0,0,0,true);
   d6512:	9301      	str	r3, [sp, #4]
   d6514:	4642      	mov	r2, r8
   d6516:	4643      	mov	r3, r8
   d6518:	4649      	mov	r1, r9
   d651a:	f8cd 8000 	str.w	r8, [sp]
   d651e:	f7ff ffc3 	bl	d64a8 <_Z9fillStripiihhhb>
    strDisp("Settings",inpix,R,G,B,false);
   d6522:	462a      	mov	r2, r5
   d6524:	4621      	mov	r1, r4
   d6526:	48b4      	ldr	r0, [pc, #720]	; (d67f8 <_Z8settingsihhh+0x300>)
   d6528:	e88d 0180 	stmia.w	sp, {r7, r8}
   d652c:	4633      	mov	r3, r6
   d652e:	f7fe feb1 	bl	d5294 <_Z7strDispPKcihhhb>
    printScreen(screenArray,inpix,inpix+255);
   d6532:	464a      	mov	r2, r9
   d6534:	4621      	mov	r1, r4
   d6536:	48b1      	ldr	r0, [pc, #708]	; (d67fc <_Z8settingsihhh+0x304>)
   d6538:	f7fd fe96 	bl	d4268 <_Z11printScreenPiii>
    while(digitalRead(enbtn) == HIGH) delay(5);
   d653c:	2001      	movs	r0, #1
   d653e:	f002 f9eb 	bl	d8918 <digitalRead>
   d6542:	2801      	cmp	r0, #1
   d6544:	d103      	bne.n	d654e <_Z8settingsihhh+0x56>
   d6546:	2005      	movs	r0, #5
   d6548:	f001 fa6a 	bl	d7a20 <delay>
   d654c:	e7f6      	b.n	d653c <_Z8settingsihhh+0x44>
    fillStrip(inpix,inpix+255,0,0,0,true);
   d654e:	2300      	movs	r3, #0
   d6550:	f04f 0b01 	mov.w	fp, #1
   d6554:	e88d 0808 	stmia.w	sp, {r3, fp}
   d6558:	461a      	mov	r2, r3
   d655a:	4649      	mov	r1, r9
   d655c:	4620      	mov	r0, r4
   d655e:	f7ff ffa3 	bl	d64a8 <_Z9fillStripiihhhb>
    while(sett == true) 
    {
        switch (smode){
   d6562:	9b02      	ldr	r3, [sp, #8]
   d6564:	3b01      	subs	r3, #1
   d6566:	2b04      	cmp	r3, #4
   d6568:	d858      	bhi.n	d661c <_Z8settingsihhh+0x124>
   d656a:	e8df f003 	tbb	[pc, r3]
   d656e:	0f03      	.short	0x0f03
   d6570:	271b      	.short	0x271b
   d6572:	33          	.byte	0x33
   d6573:	00          	.byte	0x00
            case 1:
                strDisp("WiFi", inpix, R, G, B, false);
   d6574:	2300      	movs	r3, #0
   d6576:	9301      	str	r3, [sp, #4]
   d6578:	9700      	str	r7, [sp, #0]
   d657a:	4633      	mov	r3, r6
   d657c:	462a      	mov	r2, r5
   d657e:	4621      	mov	r1, r4
   d6580:	489f      	ldr	r0, [pc, #636]	; (d6800 <_Z8settingsihhh+0x308>)
   d6582:	f7fe fe87 	bl	d5294 <_Z7strDispPKcihhhb>
                break;
   d6586:	f04f 0a01 	mov.w	sl, #1
   d658a:	e049      	b.n	d6620 <_Z8settingsihhh+0x128>
            case 2:
                strDisp("Display", inpix, R, G, B, false);
   d658c:	2300      	movs	r3, #0
   d658e:	9301      	str	r3, [sp, #4]
   d6590:	9700      	str	r7, [sp, #0]
   d6592:	4633      	mov	r3, r6
   d6594:	462a      	mov	r2, r5
   d6596:	4621      	mov	r1, r4
   d6598:	489a      	ldr	r0, [pc, #616]	; (d6804 <_Z8settingsihhh+0x30c>)
   d659a:	f7fe fe7b 	bl	d5294 <_Z7strDispPKcihhhb>
                break;
   d659e:	f04f 0a01 	mov.w	sl, #1
   d65a2:	e03d      	b.n	d6620 <_Z8settingsihhh+0x128>
            case 3:
                strDisp("Dark md", inpix, R, G, B, false);
   d65a4:	2300      	movs	r3, #0
   d65a6:	9301      	str	r3, [sp, #4]
   d65a8:	9700      	str	r7, [sp, #0]
   d65aa:	4633      	mov	r3, r6
   d65ac:	462a      	mov	r2, r5
   d65ae:	4621      	mov	r1, r4
   d65b0:	4895      	ldr	r0, [pc, #596]	; (d6808 <_Z8settingsihhh+0x310>)
   d65b2:	f7fe fe6f 	bl	d5294 <_Z7strDispPKcihhhb>
                break;
   d65b6:	f04f 0a01 	mov.w	sl, #1
   d65ba:	e031      	b.n	d6620 <_Z8settingsihhh+0x128>
            case 4:
                strDisp("About", inpix, R, G, B, false);
   d65bc:	2300      	movs	r3, #0
   d65be:	9301      	str	r3, [sp, #4]
   d65c0:	9700      	str	r7, [sp, #0]
   d65c2:	4633      	mov	r3, r6
   d65c4:	462a      	mov	r2, r5
   d65c6:	4621      	mov	r1, r4
   d65c8:	4890      	ldr	r0, [pc, #576]	; (d680c <_Z8settingsihhh+0x314>)
   d65ca:	f7fe fe63 	bl	d5294 <_Z7strDispPKcihhhb>
                break;
   d65ce:	f04f 0a01 	mov.w	sl, #1
   d65d2:	e025      	b.n	d6620 <_Z8settingsihhh+0x128>
            case 5:
                strDisp("Exit", inpix, R, G, B, false);
   d65d4:	2300      	movs	r3, #0
   d65d6:	9301      	str	r3, [sp, #4]
   d65d8:	462a      	mov	r2, r5
   d65da:	4633      	mov	r3, r6
   d65dc:	4621      	mov	r1, r4
   d65de:	488c      	ldr	r0, [pc, #560]	; (d6810 <_Z8settingsihhh+0x318>)
   d65e0:	9700      	str	r7, [sp, #0]
   d65e2:	f7fe fe57 	bl	d5294 <_Z7strDispPKcihhhb>
                if(digitalRead(enbtn) == HIGH){
   d65e6:	2001      	movs	r0, #1
   d65e8:	f002 f996 	bl	d8918 <digitalRead>
   d65ec:	2801      	cmp	r0, #1
   d65ee:	d115      	bne.n	d661c <_Z8settingsihhh+0x124>
                    sett = false;
                    while(digitalRead(enbtn) == HIGH) delay(5);
   d65f0:	2001      	movs	r0, #1
   d65f2:	f002 f991 	bl	d8918 <digitalRead>
   d65f6:	2801      	cmp	r0, #1
   d65f8:	d103      	bne.n	d6602 <_Z8settingsihhh+0x10a>
   d65fa:	2005      	movs	r0, #5
   d65fc:	f001 fa10 	bl	d7a20 <delay>
   d6600:	e7f6      	b.n	d65f0 <_Z8settingsihhh+0xf8>
                    fillStrip(inpix,inpix+255,0,0,0,true);
   d6602:	f04f 0a00 	mov.w	sl, #0
   d6606:	f8cd b004 	str.w	fp, [sp, #4]
   d660a:	f8cd a000 	str.w	sl, [sp]
   d660e:	4653      	mov	r3, sl
   d6610:	4652      	mov	r2, sl
   d6612:	4649      	mov	r1, r9
   d6614:	4620      	mov	r0, r4
   d6616:	f7ff ff47 	bl	d64a8 <_Z9fillStripiihhhb>
   d661a:	e001      	b.n	d6620 <_Z8settingsihhh+0x128>
   d661c:	f04f 0a01 	mov.w	sl, #1
                break;
            case 9:
                strDisp("Mini clk", inpix, R, G, B, false);
                break;*/                
        }
        if(digitalRead(enbtn) == HIGH){
   d6620:	2001      	movs	r0, #1
   d6622:	f002 f979 	bl	d8918 <digitalRead>
   d6626:	2801      	cmp	r0, #1
   d6628:	f040 816a 	bne.w	d6900 <_Z8settingsihhh+0x408>
            bool submenu = true;
            int submode = 1;
   d662c:	9003      	str	r0, [sp, #12]
            while(digitalRead(enbtn) == HIGH) delay(5);
   d662e:	2001      	movs	r0, #1
   d6630:	f002 f972 	bl	d8918 <digitalRead>
   d6634:	2801      	cmp	r0, #1
   d6636:	d103      	bne.n	d6640 <_Z8settingsihhh+0x148>
   d6638:	2005      	movs	r0, #5
   d663a:	f001 f9f1 	bl	d7a20 <delay>
   d663e:	e7f6      	b.n	d662e <_Z8settingsihhh+0x136>
            fillStrip(inpix,inpix+255,0,0,0,true);
   d6640:	2300      	movs	r3, #0
   d6642:	f8cd b004 	str.w	fp, [sp, #4]
   d6646:	9300      	str	r3, [sp, #0]
   d6648:	461a      	mov	r2, r3
   d664a:	4649      	mov	r1, r9
   d664c:	4620      	mov	r0, r4
   d664e:	f7ff ff2b 	bl	d64a8 <_Z9fillStripiihhhb>
            while(submenu){
                switch (smode){
   d6652:	9b02      	ldr	r3, [sp, #8]
   d6654:	3b01      	subs	r3, #1
   d6656:	2b04      	cmp	r3, #4
   d6658:	f200 8147 	bhi.w	d68ea <_Z8settingsihhh+0x3f2>
   d665c:	e8df f013 	tbh	[pc, r3, lsl #1]
   d6660:	006a0005 	.word	0x006a0005
   d6664:	00c40097 	.word	0x00c40097
   d6668:	0133      	.short	0x0133
                    case 1:     //Wifi Sub-menu
                        switch(submode){
   d666a:	9b03      	ldr	r3, [sp, #12]
   d666c:	3b01      	subs	r3, #1
   d666e:	2b03      	cmp	r3, #3
   d6670:	f200 8118 	bhi.w	d68a4 <_Z8settingsihhh+0x3ac>
   d6674:	e8df f013 	tbh	[pc, r3, lsl #1]
   d6678:	00460004 	.word	0x00460004
   d667c:	01040052 	.word	0x01040052
                            case 1:
                                strDisp("sig str", inpix, R, G, B, false);
   d6680:	f04f 0800 	mov.w	r8, #0
   d6684:	4633      	mov	r3, r6
   d6686:	462a      	mov	r2, r5
   d6688:	4621      	mov	r1, r4
   d668a:	4862      	ldr	r0, [pc, #392]	; (d6814 <_Z8settingsihhh+0x31c>)
   d668c:	e88d 0180 	stmia.w	sp, {r7, r8}
   d6690:	f7fe fe00 	bl	d5294 <_Z7strDispPKcihhhb>
                                if(digitalRead(enbtn) == HIGH){
   d6694:	2001      	movs	r0, #1
   d6696:	f002 f93f 	bl	d8918 <digitalRead>
   d669a:	2801      	cmp	r0, #1
   d669c:	f040 8102 	bne.w	d68a4 <_Z8settingsihhh+0x3ac>
                                    //WiFiSignal sig = WiFi.RSSI();
                                    //uint8_t strength = uint8_t(sig.getStrength());
                                    fillStrip(inpix,inpix+255,0,0,0,true);
   d66a0:	9001      	str	r0, [sp, #4]
   d66a2:	4642      	mov	r2, r8
   d66a4:	4649      	mov	r1, r9
   d66a6:	4620      	mov	r0, r4
   d66a8:	f8cd 8000 	str.w	r8, [sp]
   d66ac:	4643      	mov	r3, r8
   d66ae:	f7ff fefb 	bl	d64a8 <_Z9fillStripiihhhb>
                                    //displayNumber(strength/100,inpix,R,G,B,true);
                                    //displayNumber((strength/10)%10,inpix+48,R,G,B,true);
                                    //displayNumber(strength%10,inpix+96,R,G,B,true);
                                    printScreen(screenArray,inpix,inpix+255);
   d66b2:	464a      	mov	r2, r9
   d66b4:	4621      	mov	r1, r4
   d66b6:	4851      	ldr	r0, [pc, #324]	; (d67fc <_Z8settingsihhh+0x304>)
   d66b8:	f7fd fdd6 	bl	d4268 <_Z11printScreenPiii>
                                    while(digitalRead(enbtn) == HIGH) delay(5);
   d66bc:	2001      	movs	r0, #1
   d66be:	f002 f92b 	bl	d8918 <digitalRead>
   d66c2:	2801      	cmp	r0, #1
   d66c4:	d103      	bne.n	d66ce <_Z8settingsihhh+0x1d6>
   d66c6:	2005      	movs	r0, #5
   d66c8:	f001 f9aa 	bl	d7a20 <delay>
   d66cc:	e7f6      	b.n	d66bc <_Z8settingsihhh+0x1c4>
                                    while(digitalRead(enbtn) == LOW) delay(5);
   d66ce:	2001      	movs	r0, #1
   d66d0:	f002 f922 	bl	d8918 <digitalRead>
   d66d4:	b918      	cbnz	r0, d66de <_Z8settingsihhh+0x1e6>
   d66d6:	2005      	movs	r0, #5
   d66d8:	f001 f9a2 	bl	d7a20 <delay>
   d66dc:	e7f7      	b.n	d66ce <_Z8settingsihhh+0x1d6>
                                    fillStrip(inpix,inpix+255,0,0,0,true);
   d66de:	2300      	movs	r3, #0
   d66e0:	f8cd b004 	str.w	fp, [sp, #4]
   d66e4:	9300      	str	r3, [sp, #0]
   d66e6:	461a      	mov	r2, r3
   d66e8:	4649      	mov	r1, r9
   d66ea:	4620      	mov	r0, r4
   d66ec:	f7ff fedc 	bl	d64a8 <_Z9fillStripiihhhb>
                                    while(digitalRead(enbtn) == HIGH) delay(5);
   d66f0:	2001      	movs	r0, #1
   d66f2:	f002 f911 	bl	d8918 <digitalRead>
   d66f6:	2801      	cmp	r0, #1
   d66f8:	f040 80d4 	bne.w	d68a4 <_Z8settingsihhh+0x3ac>
   d66fc:	2005      	movs	r0, #5
   d66fe:	f001 f98f 	bl	d7a20 <delay>
   d6702:	e7f5      	b.n	d66f0 <_Z8settingsihhh+0x1f8>
                                }
                                break;
                            case 2:
                                strDisp("IP",inpix, R, G, B, false);
   d6704:	2300      	movs	r3, #0
   d6706:	9301      	str	r3, [sp, #4]
   d6708:	9700      	str	r7, [sp, #0]
   d670a:	4633      	mov	r3, r6
   d670c:	462a      	mov	r2, r5
   d670e:	4621      	mov	r1, r4
   d6710:	4841      	ldr	r0, [pc, #260]	; (d6818 <_Z8settingsihhh+0x320>)
   d6712:	f7fe fdbf 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d6716:	f04f 0801 	mov.w	r8, #1
   d671a:	e0c5      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 3:
                                strDisp("Net name", inpix, R, G, B, false);
   d671c:	2300      	movs	r3, #0
   d671e:	9301      	str	r3, [sp, #4]
   d6720:	9700      	str	r7, [sp, #0]
   d6722:	4633      	mov	r3, r6
   d6724:	462a      	mov	r2, r5
   d6726:	4621      	mov	r1, r4
   d6728:	483c      	ldr	r0, [pc, #240]	; (d681c <_Z8settingsihhh+0x324>)
   d672a:	f7fe fdb3 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d672e:	f04f 0801 	mov.w	r8, #1
   d6732:	e0b9      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                                break;
                        }
                        if(menuButtonUpdate(&submode,4)) fillStrip(inpix,inpix+255,0,0,0,true);
                        break;
                    case 2:     //Display Sub-menu
                        switch(submode){
   d6734:	9b03      	ldr	r3, [sp, #12]
   d6736:	3b01      	subs	r3, #1
   d6738:	2b03      	cmp	r3, #3
   d673a:	f200 80b3 	bhi.w	d68a4 <_Z8settingsihhh+0x3ac>
   d673e:	e8df f003 	tbb	[pc, r3]
   d6742:	0e02      	.short	0x0e02
   d6744:	9f1a      	.short	0x9f1a
                            case 1:
                                strDisp("Tru-tone", inpix, R, G, B, false);
   d6746:	2300      	movs	r3, #0
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	9700      	str	r7, [sp, #0]
   d674c:	4633      	mov	r3, r6
   d674e:	462a      	mov	r2, r5
   d6750:	4621      	mov	r1, r4
   d6752:	4833      	ldr	r0, [pc, #204]	; (d6820 <_Z8settingsihhh+0x328>)
   d6754:	f7fe fd9e 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d6758:	f04f 0801 	mov.w	r8, #1
   d675c:	e0a4      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 2:
                                strDisp("Get wthr",inpix, R, G, B, false);
   d675e:	2300      	movs	r3, #0
   d6760:	9301      	str	r3, [sp, #4]
   d6762:	9700      	str	r7, [sp, #0]
   d6764:	4633      	mov	r3, r6
   d6766:	462a      	mov	r2, r5
   d6768:	4621      	mov	r1, r4
   d676a:	482e      	ldr	r0, [pc, #184]	; (d6824 <_Z8settingsihhh+0x32c>)
   d676c:	f7fe fd92 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d6770:	f04f 0801 	mov.w	r8, #1
   d6774:	e098      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 3:
                                strDisp("Get temp", inpix, R, G, B, false);
   d6776:	2300      	movs	r3, #0
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	9700      	str	r7, [sp, #0]
   d677c:	4633      	mov	r3, r6
   d677e:	462a      	mov	r2, r5
   d6780:	4621      	mov	r1, r4
   d6782:	4829      	ldr	r0, [pc, #164]	; (d6828 <_Z8settingsihhh+0x330>)
   d6784:	f7fe fd86 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d6788:	f04f 0801 	mov.w	r8, #1
   d678c:	e08c      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                                break;
                        }
                        if(menuButtonUpdate(&submode,4)) fillStrip(inpix,inpix+255,0,0,0,true);
                        break;
                    case 3:     //Dark Sub-menu
                        switch(submode){
   d678e:	9b03      	ldr	r3, [sp, #12]
   d6790:	3b01      	subs	r3, #1
   d6792:	2b03      	cmp	r3, #3
   d6794:	f200 8086 	bhi.w	d68a4 <_Z8settingsihhh+0x3ac>
   d6798:	e8df f003 	tbb	[pc, r3]
   d679c:	721a0e02 	.word	0x721a0e02
                            case 1:
                                strDisp("Mini clk", inpix, R, G, B, false);
   d67a0:	2300      	movs	r3, #0
   d67a2:	9301      	str	r3, [sp, #4]
   d67a4:	9700      	str	r7, [sp, #0]
   d67a6:	4633      	mov	r3, r6
   d67a8:	462a      	mov	r2, r5
   d67aa:	4621      	mov	r1, r4
   d67ac:	481f      	ldr	r0, [pc, #124]	; (d682c <_Z8settingsihhh+0x334>)
   d67ae:	f7fe fd71 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d67b2:	f04f 0801 	mov.w	r8, #1
   d67b6:	e077      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 2:
                                strDisp("Dark clr",inpix, R, G, B, false);
   d67b8:	2300      	movs	r3, #0
   d67ba:	9301      	str	r3, [sp, #4]
   d67bc:	9700      	str	r7, [sp, #0]
   d67be:	4633      	mov	r3, r6
   d67c0:	462a      	mov	r2, r5
   d67c2:	4621      	mov	r1, r4
   d67c4:	481a      	ldr	r0, [pc, #104]	; (d6830 <_Z8settingsihhh+0x338>)
   d67c6:	f7fe fd65 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d67ca:	f04f 0801 	mov.w	r8, #1
   d67ce:	e06b      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 3:
                                strDisp("Disp temp", inpix, R, G, B, false);
   d67d0:	2300      	movs	r3, #0
   d67d2:	9301      	str	r3, [sp, #4]
   d67d4:	9700      	str	r7, [sp, #0]
   d67d6:	4633      	mov	r3, r6
   d67d8:	462a      	mov	r2, r5
   d67da:	4621      	mov	r1, r4
   d67dc:	4815      	ldr	r0, [pc, #84]	; (d6834 <_Z8settingsihhh+0x33c>)
   d67de:	f7fe fd59 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d67e2:	f04f 0801 	mov.w	r8, #1
   d67e6:	e05f      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                                break;
                        }
                        if(menuButtonUpdate(&submode,4)) fillStrip(inpix,inpix+255,0,0,0,true);
                        break;
                    case 4:     //Dark Sub-menu
                        switch(submode){
   d67e8:	9b03      	ldr	r3, [sp, #12]
   d67ea:	3b01      	subs	r3, #1
   d67ec:	2b03      	cmp	r3, #3
   d67ee:	d859      	bhi.n	d68a4 <_Z8settingsihhh+0x3ac>
   d67f0:	e8df f003 	tbb	[pc, r3]
   d67f4:	463a2e22 	.word	0x463a2e22
   d67f8:	000dbcee 	.word	0x000dbcee
   d67fc:	2003db10 	.word	0x2003db10
   d6800:	000dbcf7 	.word	0x000dbcf7
   d6804:	000dbcfc 	.word	0x000dbcfc
   d6808:	000dbd04 	.word	0x000dbd04
   d680c:	000dbd0c 	.word	0x000dbd0c
   d6810:	000dbd12 	.word	0x000dbd12
   d6814:	000dbd17 	.word	0x000dbd17
   d6818:	000dbd1f 	.word	0x000dbd1f
   d681c:	000dbd22 	.word	0x000dbd22
   d6820:	000dbd2b 	.word	0x000dbd2b
   d6824:	000dbd34 	.word	0x000dbd34
   d6828:	000dbd3d 	.word	0x000dbd3d
   d682c:	000dbd46 	.word	0x000dbd46
   d6830:	000dbd4f 	.word	0x000dbd4f
   d6834:	000dbd58 	.word	0x000dbd58
                            case 1:
                                strDisp("Sys-vsn", inpix, R, G, B, false);
   d6838:	2300      	movs	r3, #0
   d683a:	9301      	str	r3, [sp, #4]
   d683c:	9700      	str	r7, [sp, #0]
   d683e:	4633      	mov	r3, r6
   d6840:	462a      	mov	r2, r5
   d6842:	4621      	mov	r1, r4
   d6844:	483d      	ldr	r0, [pc, #244]	; (d693c <_Z8settingsihhh+0x444>)
   d6846:	f7fe fd25 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d684a:	f04f 0801 	mov.w	r8, #1
   d684e:	e02b      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 2:
                                strDisp("Firm-vsn",inpix, R, G, B, false);
   d6850:	2300      	movs	r3, #0
   d6852:	9301      	str	r3, [sp, #4]
   d6854:	9700      	str	r7, [sp, #0]
   d6856:	4633      	mov	r3, r6
   d6858:	462a      	mov	r2, r5
   d685a:	4621      	mov	r1, r4
   d685c:	4838      	ldr	r0, [pc, #224]	; (d6940 <_Z8settingsihhh+0x448>)
   d685e:	f7fe fd19 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d6862:	f04f 0801 	mov.w	r8, #1
   d6866:	e01f      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 3:
                                strDisp("Reset", inpix, R, G, B, false);
   d6868:	2300      	movs	r3, #0
   d686a:	9301      	str	r3, [sp, #4]
   d686c:	9700      	str	r7, [sp, #0]
   d686e:	4633      	mov	r3, r6
   d6870:	462a      	mov	r2, r5
   d6872:	4621      	mov	r1, r4
   d6874:	4833      	ldr	r0, [pc, #204]	; (d6944 <_Z8settingsihhh+0x44c>)
   d6876:	f7fe fd0d 	bl	d5294 <_Z7strDispPKcihhhb>
                                break;
   d687a:	f04f 0801 	mov.w	r8, #1
   d687e:	e013      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                            case 4:
                                strDisp("Exit", inpix, R, G, B, false);
   d6880:	2300      	movs	r3, #0
   d6882:	9301      	str	r3, [sp, #4]
   d6884:	462a      	mov	r2, r5
   d6886:	4633      	mov	r3, r6
   d6888:	4621      	mov	r1, r4
   d688a:	482f      	ldr	r0, [pc, #188]	; (d6948 <_Z8settingsihhh+0x450>)
   d688c:	9700      	str	r7, [sp, #0]
   d688e:	f7fe fd01 	bl	d5294 <_Z7strDispPKcihhhb>
                                if(digitalRead(enbtn) == HIGH) submenu = false;
   d6892:	2001      	movs	r0, #1
   d6894:	f002 f840 	bl	d8918 <digitalRead>
   d6898:	f110 38ff 	adds.w	r8, r0, #4294967295
   d689c:	bf18      	it	ne
   d689e:	f04f 0801 	movne.w	r8, #1
   d68a2:	e001      	b.n	d68a8 <_Z8settingsihhh+0x3b0>
                                break;
                        }
                        if(menuButtonUpdate(&submode,4)) fillStrip(inpix,inpix+255,0,0,0,true);
                        break;
                    case 4:     //Dark Sub-menu
                        switch(submode){
   d68a4:	f04f 0801 	mov.w	r8, #1
                            case 4:
                                strDisp("Exit", inpix, R, G, B, false);
                                if(digitalRead(enbtn) == HIGH) submenu = false;
                                break;
                        }
                        if(menuButtonUpdate(&submode,4)) fillStrip(inpix,inpix+255,0,0,0,true);
   d68a8:	2104      	movs	r1, #4
   d68aa:	a803      	add	r0, sp, #12
   d68ac:	f7ff fdb2 	bl	d6414 <_Z16menuButtonUpdatePii>
   d68b0:	b1e8      	cbz	r0, d68ee <_Z8settingsihhh+0x3f6>
   d68b2:	2300      	movs	r3, #0
   d68b4:	f8cd b004 	str.w	fp, [sp, #4]
   d68b8:	9300      	str	r3, [sp, #0]
   d68ba:	461a      	mov	r2, r3
   d68bc:	4649      	mov	r1, r9
   d68be:	4620      	mov	r0, r4
   d68c0:	f7ff fdf2 	bl	d64a8 <_Z9fillStripiihhhb>
   d68c4:	e013      	b.n	d68ee <_Z8settingsihhh+0x3f6>
                        break;
                    case 5:     //Dark Sub-menu
                        strDisp("Exit", inpix, R, G, B, false);
   d68c6:	2300      	movs	r3, #0
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	462a      	mov	r2, r5
   d68cc:	4633      	mov	r3, r6
   d68ce:	4621      	mov	r1, r4
   d68d0:	481d      	ldr	r0, [pc, #116]	; (d6948 <_Z8settingsihhh+0x450>)
   d68d2:	9700      	str	r7, [sp, #0]
   d68d4:	f7fe fcde 	bl	d5294 <_Z7strDispPKcihhhb>
                        if(digitalRead(enbtn) == HIGH) submenu = false;
   d68d8:	2001      	movs	r0, #1
   d68da:	f002 f81d 	bl	d8918 <digitalRead>
   d68de:	f110 38ff 	adds.w	r8, r0, #4294967295
   d68e2:	bf18      	it	ne
   d68e4:	f04f 0801 	movne.w	r8, #1
   d68e8:	e001      	b.n	d68ee <_Z8settingsihhh+0x3f6>
            bool submenu = true;
            int submode = 1;
            while(digitalRead(enbtn) == HIGH) delay(5);
            fillStrip(inpix,inpix+255,0,0,0,true);
            while(submenu){
                switch (smode){
   d68ea:	f04f 0801 	mov.w	r8, #1
                    case 5:     //Dark Sub-menu
                        strDisp("Exit", inpix, R, G, B, false);
                        if(digitalRead(enbtn) == HIGH) submenu = false;
                        break;
                }
                printScreen(screenArray,inpix,inpix+255);
   d68ee:	464a      	mov	r2, r9
   d68f0:	4621      	mov	r1, r4
   d68f2:	4816      	ldr	r0, [pc, #88]	; (d694c <_Z8settingsihhh+0x454>)
   d68f4:	f7fd fcb8 	bl	d4268 <_Z11printScreenPiii>
        if(digitalRead(enbtn) == HIGH){
            bool submenu = true;
            int submode = 1;
            while(digitalRead(enbtn) == HIGH) delay(5);
            fillStrip(inpix,inpix+255,0,0,0,true);
            while(submenu){
   d68f8:	f1b8 0f00 	cmp.w	r8, #0
   d68fc:	f47f aea9 	bne.w	d6652 <_Z8settingsihhh+0x15a>
                {
                    delay(5);
                }
            }*/
        }
        if(menuButtonUpdate(&smode,numMenuItems)) fillStrip(inpix,inpix+255,0,0,0,true);
   d6900:	2105      	movs	r1, #5
   d6902:	a802      	add	r0, sp, #8
   d6904:	f7ff fd86 	bl	d6414 <_Z16menuButtonUpdatePii>
   d6908:	b140      	cbz	r0, d691c <_Z8settingsihhh+0x424>
   d690a:	2300      	movs	r3, #0
   d690c:	f8cd b004 	str.w	fp, [sp, #4]
   d6910:	9300      	str	r3, [sp, #0]
   d6912:	461a      	mov	r2, r3
   d6914:	4649      	mov	r1, r9
   d6916:	4620      	mov	r0, r4
   d6918:	f7ff fdc6 	bl	d64a8 <_Z9fillStripiihhhb>
        printScreen(screenArray,inpix,inpix+255);
   d691c:	480b      	ldr	r0, [pc, #44]	; (d694c <_Z8settingsihhh+0x454>)
   d691e:	464a      	mov	r2, r9
   d6920:	4621      	mov	r1, r4
   d6922:	f7fd fca1 	bl	d4268 <_Z11printScreenPiii>
        delay(50);
   d6926:	2032      	movs	r0, #50	; 0x32
   d6928:	f001 f87a 	bl	d7a20 <delay>
    fillStrip(inpix,inpix+255,0,0,0,true);
    strDisp("Settings",inpix,R,G,B,false);
    printScreen(screenArray,inpix,inpix+255);
    while(digitalRead(enbtn) == HIGH) delay(5);
    fillStrip(inpix,inpix+255,0,0,0,true);
    while(sett == true) 
   d692c:	f1ba 0f00 	cmp.w	sl, #0
   d6930:	f47f ae17 	bne.w	d6562 <_Z8settingsihhh+0x6a>
        }
        if(menuButtonUpdate(&smode,numMenuItems)) fillStrip(inpix,inpix+255,0,0,0,true);
        printScreen(screenArray,inpix,inpix+255);
        delay(50);
    }
}
   d6934:	b005      	add	sp, #20
   d6936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d693a:	bf00      	nop
   d693c:	000dbd62 	.word	0x000dbd62
   d6940:	000dbd6a 	.word	0x000dbd6a
   d6944:	000dbd73 	.word	0x000dbd73
   d6948:	000dbd12 	.word	0x000dbd12
   d694c:	2003db10 	.word	0x2003db10

000d6950 <_Z16colorModeProcessv>:
    displayNumber(curDate%10,inpix+178,R,G,B,true);
}
void dimZone(int spix, int epix, int delay){

}
void colorModeProcess(){
   d6950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6954:	ed2d 8b02 	vpush	{d8}
    if(scan == 1){
   d6958:	4b7b      	ldr	r3, [pc, #492]	; (d6b48 <_Z16colorModeProcessv+0x1f8>)
   d695a:	f8d3 9000 	ldr.w	r9, [r3]
   d695e:	f1b9 0f01 	cmp.w	r9, #1
    displayNumber(curDate%10,inpix+178,R,G,B,true);
}
void dimZone(int spix, int epix, int delay){

}
void colorModeProcess(){
   d6962:	b082      	sub	sp, #8
    if(scan == 1){
   d6964:	f040 80db 	bne.w	d6b1e <_Z16colorModeProcessv+0x1ce>
        scan=2;
   d6968:	f04f 0802 	mov.w	r8, #2
        if(analogRead(A4) < bound) {
   d696c:	200f      	movs	r0, #15
void dimZone(int spix, int epix, int delay){

}
void colorModeProcess(){
    if(scan == 1){
        scan=2;
   d696e:	f8c3 8000 	str.w	r8, [r3]
        if(analogRead(A4) < bound) {
   d6972:	f001 ffe4 	bl	d893e <analogRead>
   d6976:	4b75      	ldr	r3, [pc, #468]	; (d6b4c <_Z16colorModeProcessv+0x1fc>)
   d6978:	4c75      	ldr	r4, [pc, #468]	; (d6b50 <_Z16colorModeProcessv+0x200>)
   d697a:	681a      	ldr	r2, [r3, #0]
   d697c:	4f75      	ldr	r7, [pc, #468]	; (d6b54 <_Z16colorModeProcessv+0x204>)
   d697e:	4e76      	ldr	r6, [pc, #472]	; (d6b58 <_Z16colorModeProcessv+0x208>)
   d6980:	4d76      	ldr	r5, [pc, #472]	; (d6b5c <_Z16colorModeProcessv+0x20c>)
   d6982:	4290      	cmp	r0, r2
   d6984:	469a      	mov	sl, r3
   d6986:	da35      	bge.n	d69f4 <_Z16colorModeProcessv+0xa4>
            bound = upbound;
   d6988:	22fa      	movs	r2, #250	; 0xfa
   d698a:	601a      	str	r2, [r3, #0]
            if(fdark == 2){
   d698c:	6823      	ldr	r3, [r4, #0]
   d698e:	4543      	cmp	r3, r8
   d6990:	d10a      	bne.n	d69a8 <_Z16colorModeProcessv+0x58>
                fillStrip(0,511,0,0,0,false);
   d6992:	2300      	movs	r3, #0
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	9300      	str	r3, [sp, #0]
   d6998:	461a      	mov	r2, r3
   d699a:	f240 11ff 	movw	r1, #511	; 0x1ff
   d699e:	4618      	mov	r0, r3
   d69a0:	f7ff fd82 	bl	d64a8 <_Z9fillStripiihhhb>
                fdark = 1;
   d69a4:	f8c4 9000 	str.w	r9, [r4]
            }
            rclock = 1;
            gclock = 0;
   d69a8:	2400      	movs	r4, #0
            bound = upbound;
            if(fdark == 2){
                fillStrip(0,511,0,0,0,false);
                fdark = 1;
            }
            rclock = 1;
   d69aa:	f04f 0801 	mov.w	r8, #1
   d69ae:	f8c7 8000 	str.w	r8, [r7]
            gclock = 0;
   d69b2:	6034      	str	r4, [r6, #0]
            bclock = 0;
   d69b4:	602c      	str	r4, [r5, #0]
            if(EEPROM.read(5) == 2){
   d69b6:	f001 ffd9 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d69ba:	2005      	movs	r0, #5
   d69bc:	f7fd fc4e 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d69c0:	2802      	cmp	r0, #2
            bound = upbound;
            if(fdark == 2){
                fillStrip(0,511,0,0,0,false);
                fdark = 1;
            }
            rclock = 1;
   d69c2:	f8df 9190 	ldr.w	r9, [pc, #400]	; d6b54 <_Z16colorModeProcessv+0x204>
            gclock = 0;
            bclock = 0;
            if(EEPROM.read(5) == 2){
   d69c6:	d105      	bne.n	d69d4 <_Z16colorModeProcessv+0x84>
                gclock = 1;
   d69c8:	4b63      	ldr	r3, [pc, #396]	; (d6b58 <_Z16colorModeProcessv+0x208>)
   d69ca:	f8c3 8000 	str.w	r8, [r3]
                rclock = 0;
   d69ce:	f8c9 4000 	str.w	r4, [r9]
   d69d2:	e00b      	b.n	d69ec <_Z16colorModeProcessv+0x9c>
            }
            else if(EEPROM.read(5) == 3){
   d69d4:	f001 ffca 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d69d8:	2005      	movs	r0, #5
   d69da:	f7fd fc3f 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d69de:	2803      	cmp	r0, #3
                bclock = 1;
   d69e0:	bf02      	ittt	eq
   d69e2:	4b5e      	ldreq	r3, [pc, #376]	; (d6b5c <_Z16colorModeProcessv+0x20c>)
   d69e4:	f8c3 8000 	streq.w	r8, [r3]
                rclock = 0;
   d69e8:	f8c9 4000 	streq.w	r4, [r9]
            }
            dmode = 1;
   d69ec:	4b5c      	ldr	r3, [pc, #368]	; (d6b60 <_Z16colorModeProcessv+0x210>)
   d69ee:	2201      	movs	r2, #1
   d69f0:	601a      	str	r2, [r3, #0]
   d69f2:	e094      	b.n	d6b1e <_Z16colorModeProcessv+0x1ce>
        }
        else {
            if(fdark == 1){
   d69f4:	6823      	ldr	r3, [r4, #0]
   d69f6:	2b01      	cmp	r3, #1
   d69f8:	d10a      	bne.n	d6a10 <_Z16colorModeProcessv+0xc0>
                fillStrip(0,511,0,0,0,false);
   d69fa:	2300      	movs	r3, #0
   d69fc:	9301      	str	r3, [sp, #4]
   d69fe:	9300      	str	r3, [sp, #0]
   d6a00:	461a      	mov	r2, r3
   d6a02:	f240 11ff 	movw	r1, #511	; 0x1ff
   d6a06:	4618      	mov	r0, r3
   d6a08:	f7ff fd4e 	bl	d64a8 <_Z9fillStripiihhhb>
                fdark = 2;
   d6a0c:	f8c4 8000 	str.w	r8, [r4]
            }
            photo = analogRead(A4)/18;
   d6a10:	200f      	movs	r0, #15
   d6a12:	f001 ff94 	bl	d893e <analogRead>
   d6a16:	4b53      	ldr	r3, [pc, #332]	; (d6b64 <_Z16colorModeProcessv+0x214>)
   d6a18:	2412      	movs	r4, #18
   d6a1a:	fb90 f0f4 	sdiv	r0, r0, r4
   d6a1e:	6018      	str	r0, [r3, #0]
            if(trueTone){
   d6a20:	4b51      	ldr	r3, [pc, #324]	; (d6b68 <_Z16colorModeProcessv+0x218>)
   d6a22:	781b      	ldrb	r3, [r3, #0]
                double tempB;
                double tempG;
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
   d6a24:	200f      	movs	r0, #15
            if(fdark == 1){
                fillStrip(0,511,0,0,0,false);
                fdark = 2;
            }
            photo = analogRead(A4)/18;
            if(trueTone){
   d6a26:	2b00      	cmp	r3, #0
   d6a28:	d053      	beq.n	d6ad2 <_Z16colorModeProcessv+0x182>
                double tempB;
                double tempG;
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
   d6a2a:	f001 ff88 	bl	d893e <analogRead>
   d6a2e:	ee08 0a10 	vmov	s16, r0
                tempG = (float)analogRead(A4)/((float)10000)+0.65;
   d6a32:	200f      	movs	r0, #15
   d6a34:	f001 ff83 	bl	d893e <analogRead>
   d6a38:	ee08 0a90 	vmov	s17, r0
                rclock = analogRead(A4)/18;//*(1-(analogRead(A4)/9500));
   d6a3c:	200f      	movs	r0, #15
   d6a3e:	f001 ff7e 	bl	d893e <analogRead>
   d6a42:	fb90 f0f4 	sdiv	r0, r0, r4
   d6a46:	6038      	str	r0, [r7, #0]
                gclock = (analogRead(A4)/18)*tempG;
   d6a48:	200f      	movs	r0, #15
   d6a4a:	f001 ff78 	bl	d893e <analogRead>
   d6a4e:	eddf 7a47 	vldr	s15, [pc, #284]	; d6b6c <_Z16colorModeProcessv+0x21c>
   d6a52:	eef8 8ae8 	vcvt.f32.s32	s17, s17
   d6a56:	4607      	mov	r7, r0
   d6a58:	ee88 7aa7 	vdiv.f32	s14, s17, s15
   d6a5c:	ee17 0a10 	vmov	r0, s14
   d6a60:	f002 fb00 	bl	d9064 <__aeabi_f2d>
   d6a64:	a330      	add	r3, pc, #192	; (adr r3, d6b28 <_Z16colorModeProcessv+0x1d8>)
   d6a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6a6a:	f002 f99d 	bl	d8da8 <__adddf3>
   d6a6e:	4680      	mov	r8, r0
   d6a70:	fb97 f0f4 	sdiv	r0, r7, r4
   d6a74:	4689      	mov	r9, r1
   d6a76:	f002 fae3 	bl	d9040 <__aeabi_i2d>
   d6a7a:	4602      	mov	r2, r0
   d6a7c:	460b      	mov	r3, r1
   d6a7e:	4640      	mov	r0, r8
   d6a80:	4649      	mov	r1, r9
   d6a82:	f002 fb43 	bl	d910c <__aeabi_dmul>
   d6a86:	f002 fddb 	bl	d9640 <__aeabi_d2iz>
   d6a8a:	6030      	str	r0, [r6, #0]
                bclock = (analogRead(A4)/18)*tempB;
   d6a8c:	200f      	movs	r0, #15
   d6a8e:	f001 ff56 	bl	d893e <analogRead>
   d6a92:	eddf 7a37 	vldr	s15, [pc, #220]	; d6b70 <_Z16colorModeProcessv+0x220>
   d6a96:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d6a9a:	4680      	mov	r8, r0
   d6a9c:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d6aa0:	ee17 0a10 	vmov	r0, s14
   d6aa4:	f002 fade 	bl	d9064 <__aeabi_f2d>
   d6aa8:	a321      	add	r3, pc, #132	; (adr r3, d6b30 <_Z16colorModeProcessv+0x1e0>)
   d6aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6aae:	f002 f97b 	bl	d8da8 <__adddf3>
   d6ab2:	4606      	mov	r6, r0
   d6ab4:	fb98 f0f4 	sdiv	r0, r8, r4
   d6ab8:	460f      	mov	r7, r1
   d6aba:	f002 fac1 	bl	d9040 <__aeabi_i2d>
   d6abe:	4602      	mov	r2, r0
   d6ac0:	460b      	mov	r3, r1
   d6ac2:	4630      	mov	r0, r6
   d6ac4:	4639      	mov	r1, r7
   d6ac6:	f002 fb21 	bl	d910c <__aeabi_dmul>
   d6aca:	f002 fdb9 	bl	d9640 <__aeabi_d2iz>
   d6ace:	6028      	str	r0, [r5, #0]
   d6ad0:	e022      	b.n	d6b18 <_Z16colorModeProcessv+0x1c8>
            }
            else{
                rclock = analogRead(A4)/18;
   d6ad2:	f001 ff34 	bl	d893e <analogRead>
   d6ad6:	fb90 f0f4 	sdiv	r0, r0, r4
   d6ada:	6038      	str	r0, [r7, #0]
                gclock = (analogRead(A4)/18)*0.9;
   d6adc:	200f      	movs	r0, #15
   d6ade:	f001 ff2e 	bl	d893e <analogRead>
   d6ae2:	fb90 f0f4 	sdiv	r0, r0, r4
   d6ae6:	f002 faab 	bl	d9040 <__aeabi_i2d>
   d6aea:	a313      	add	r3, pc, #76	; (adr r3, d6b38 <_Z16colorModeProcessv+0x1e8>)
   d6aec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6af0:	f002 fb0c 	bl	d910c <__aeabi_dmul>
   d6af4:	f002 fda4 	bl	d9640 <__aeabi_d2iz>
   d6af8:	6030      	str	r0, [r6, #0]
                bclock = (analogRead(A4)/18)*0.8;
   d6afa:	200f      	movs	r0, #15
   d6afc:	f001 ff1f 	bl	d893e <analogRead>
   d6b00:	fb90 f0f4 	sdiv	r0, r0, r4
   d6b04:	f002 fa9c 	bl	d9040 <__aeabi_i2d>
   d6b08:	a30d      	add	r3, pc, #52	; (adr r3, d6b40 <_Z16colorModeProcessv+0x1f0>)
   d6b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b0e:	f002 fafd 	bl	d910c <__aeabi_dmul>
   d6b12:	f002 fd95 	bl	d9640 <__aeabi_d2iz>
   d6b16:	6028      	str	r0, [r5, #0]
            }
            bound = dnbound;
   d6b18:	233c      	movs	r3, #60	; 0x3c
   d6b1a:	f8ca 3000 	str.w	r3, [sl]
            //RGB.control(false);
        }
    }
}
   d6b1e:	b002      	add	sp, #8
   d6b20:	ecbd 8b02 	vpop	{d8}
   d6b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b28:	cccccccd 	.word	0xcccccccd
   d6b2c:	3fe4cccc 	.word	0x3fe4cccc
   d6b30:	33333333 	.word	0x33333333
   d6b34:	3fd33333 	.word	0x3fd33333
   d6b38:	cccccccd 	.word	0xcccccccd
   d6b3c:	3feccccc 	.word	0x3feccccc
   d6b40:	9999999a 	.word	0x9999999a
   d6b44:	3fe99999 	.word	0x3fe99999
   d6b48:	2003e324 	.word	0x2003e324
   d6b4c:	2003e340 	.word	0x2003e340
   d6b50:	2003e334 	.word	0x2003e334
   d6b54:	2003dad0 	.word	0x2003dad0
   d6b58:	2003db0c 	.word	0x2003db0c
   d6b5c:	2003dacc 	.word	0x2003dacc
   d6b60:	2003e328 	.word	0x2003e328
   d6b64:	2003e310 	.word	0x2003e310
   d6b68:	2003e32c 	.word	0x2003e32c
   d6b6c:	461c4000 	.word	0x461c4000
   d6b70:	45a9a000 	.word	0x45a9a000

000d6b74 <loop>:
void loop(){
   d6b74:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    colorModeProcess();
   d6b78:	f7ff feea 	bl	d6950 <_Z16colorModeProcessv>

//////////////////////////////////////
//////////////MODE 1//////////////////              Clock with cycling weather conditions
//////////////////////////////////////
    
    if(dmode == 1){                                                     
   d6b7c:	4b3d      	ldr	r3, [pc, #244]	; (d6c74 <loop+0x100>)
   d6b7e:	681d      	ldr	r5, [r3, #0]
   d6b80:	2d01      	cmp	r5, #1
   d6b82:	d166      	bne.n	d6c52 <loop+0xde>

        displayClock(0, rclock, gclock, bclock, true);                          //Manually Update Temperature every full cycle
   d6b84:	4c3c      	ldr	r4, [pc, #240]	; (d6c78 <loop+0x104>)
   d6b86:	4f3d      	ldr	r7, [pc, #244]	; (d6c7c <loop+0x108>)
   d6b88:	4e3d      	ldr	r6, [pc, #244]	; (d6c80 <loop+0x10c>)
   d6b8a:	7823      	ldrb	r3, [r4, #0]
   d6b8c:	783a      	ldrb	r2, [r7, #0]
   d6b8e:	7831      	ldrb	r1, [r6, #0]
   d6b90:	9500      	str	r5, [sp, #0]
   d6b92:	2000      	movs	r0, #0
   d6b94:	f7fe fba2 	bl	d52dc <_Z12displayClockihhhi>
        //strDisp("Sat 9",256,rclock,gclock,bclock);
        //strDisp("123456",256,rclock,gclock,bclock);
        //displayNumber(6,162+256, rclock,gclock,0,true);
        //displayNumber(9,162+32+256, rclock,gclock,0,true);
        //strDisp(dowVal,256,0,gclock,0,true);
        printScreen(screenArray,0,PIXEL_COUNT-1);
   d6b98:	f240 127f 	movw	r2, #383	; 0x17f
   d6b9c:	2100      	movs	r1, #0
   d6b9e:	4839      	ldr	r0, [pc, #228]	; (d6c84 <loop+0x110>)
   d6ba0:	f7fd fb62 	bl	d4268 <_Z11printScreenPiii>
        checkForUpdate(false);
   d6ba4:	2000      	movs	r0, #0
   d6ba6:	f7fe fd05 	bl	d55b4 <_Z14checkForUpdateb>
        scan = 1;
   d6baa:	4b37      	ldr	r3, [pc, #220]	; (d6c88 <loop+0x114>)
        

        //////////IF SENSOR IS BRIGHT//////////
        if(analogRead(A4) >= bound)             
   d6bac:	200f      	movs	r0, #15
        //displayNumber(6,162+256, rclock,gclock,0,true);
        //displayNumber(9,162+32+256, rclock,gclock,0,true);
        //strDisp(dowVal,256,0,gclock,0,true);
        printScreen(screenArray,0,PIXEL_COUNT-1);
        checkForUpdate(false);
        scan = 1;
   d6bae:	601d      	str	r5, [r3, #0]
        

        //////////IF SENSOR IS BRIGHT//////////
        if(analogRead(A4) >= bound)             
   d6bb0:	f001 fec5 	bl	d893e <analogRead>
   d6bb4:	4b35      	ldr	r3, [pc, #212]	; (d6c8c <loop+0x118>)
   d6bb6:	681b      	ldr	r3, [r3, #0]
   d6bb8:	4298      	cmp	r0, r3
   d6bba:	46a2      	mov	sl, r4
   d6bbc:	46b9      	mov	r9, r7
   d6bbe:	46b0      	mov	r8, r6
   d6bc0:	db1e      	blt.n	d6c00 <loop+0x8c>
        {
            ///////WEATHER DISPLAY MODES//////////
            if(EEPROM.read(2) == 1)                                             //Check if setting is enabled for displaying weather elements
   d6bc2:	f001 fed3 	bl	d896c <_Z21__fetch_global_EEPROMv>
   d6bc6:	2002      	movs	r0, #2
   d6bc8:	f7fd fb48 	bl	d425c <_ZN11EEPROMClass4readEi.isra.6>
   d6bcc:	2801      	cmp	r0, #1
   d6bce:	d107      	bne.n	d6be0 <loop+0x6c>
            {
                weatherLoop(160,0,rclock,gclock,bclock);
   d6bd0:	7821      	ldrb	r1, [r4, #0]
   d6bd2:	783b      	ldrb	r3, [r7, #0]
   d6bd4:	7832      	ldrb	r2, [r6, #0]
   d6bd6:	9100      	str	r1, [sp, #0]
   d6bd8:	20a0      	movs	r0, #160	; 0xa0
   d6bda:	2100      	movs	r1, #0
   d6bdc:	f7ff f8d8 	bl	d5d90 <_Z11weatherLoopiihhh>
                //displayTemp(TMin,258+16,0,gclock,bclock,true);
                //PdisplayTemp(TMax,258+88+16,rclock,gclock,0,true);
                //weatherLoop(416,0,rclock,gclock,bclock);
            }
            if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == HIGH && digitalRead(dnbtn) == LOW){
   d6be0:	2000      	movs	r0, #0
   d6be2:	f001 fe99 	bl	d8918 <digitalRead>
   d6be6:	2800      	cmp	r0, #0
   d6be8:	d133      	bne.n	d6c52 <loop+0xde>
   d6bea:	2001      	movs	r0, #1
   d6bec:	f001 fe94 	bl	d8918 <digitalRead>
   d6bf0:	2801      	cmp	r0, #1
   d6bf2:	d12e      	bne.n	d6c52 <loop+0xde>
   d6bf4:	2002      	movs	r0, #2
   d6bf6:	f001 fe8f 	bl	d8918 <digitalRead>
   d6bfa:	2800      	cmp	r0, #0
   d6bfc:	d02f      	beq.n	d6c5e <loop+0xea>
   d6bfe:	e028      	b.n	d6c52 <loop+0xde>

        ///////IF SENSOR IS DARK//////////
        else
        {
            //if(EEPROM.read(2) == 1){
                displayCondition(cid,160, rclock, gclock, bclock, true);
   d6c00:	7821      	ldrb	r1, [r4, #0]
   d6c02:	f8df 8090 	ldr.w	r8, [pc, #144]	; d6c94 <loop+0x120>
   d6c06:	783b      	ldrb	r3, [r7, #0]
   d6c08:	9100      	str	r1, [sp, #0]
   d6c0a:	9501      	str	r5, [sp, #4]
   d6c0c:	7832      	ldrb	r2, [r6, #0]
   d6c0e:	f8d8 0000 	ldr.w	r0, [r8]
   d6c12:	21a0      	movs	r1, #160	; 0xa0
   d6c14:	f7fd fd6c 	bl	d46f0 <_Z16displayConditioniihhhb>
                dimg(cid,160, rclock, gclock, bclock);
   d6c18:	7821      	ldrb	r1, [r4, #0]
   d6c1a:	783b      	ldrb	r3, [r7, #0]
   d6c1c:	9100      	str	r1, [sp, #0]
   d6c1e:	7832      	ldrb	r2, [r6, #0]
   d6c20:	f8d8 0000 	ldr.w	r0, [r8]
   d6c24:	21a0      	movs	r1, #160	; 0xa0
   d6c26:	f7fe fc73 	bl	d5510 <_Z4dimgiihhh>
                displayTemp(TFahr,256/*169+256*/,rclock, gclock, bclock,true);
   d6c2a:	7821      	ldrb	r1, [r4, #0]
   d6c2c:	4818      	ldr	r0, [pc, #96]	; (d6c90 <loop+0x11c>)
   d6c2e:	783b      	ldrb	r3, [r7, #0]
   d6c30:	9100      	str	r1, [sp, #0]
   d6c32:	9501      	str	r5, [sp, #4]
   d6c34:	7832      	ldrb	r2, [r6, #0]
   d6c36:	6800      	ldr	r0, [r0, #0]
   d6c38:	f44f 7180 	mov.w	r1, #256	; 0x100
   d6c3c:	f7fe fbdc 	bl	d53f8 <_Z11displayTempiihhhb>
                //digitalWrite(D7,HIGH);
                printScreen(screenArray,160,255);
   d6c40:	4810      	ldr	r0, [pc, #64]	; (d6c84 <loop+0x110>)
   d6c42:	22ff      	movs	r2, #255	; 0xff
   d6c44:	21a0      	movs	r1, #160	; 0xa0
   d6c46:	f7fd fb0f 	bl	d4268 <_Z11printScreenPiii>
            //}
            delay(1000);
   d6c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6c4e:	f000 fee7 	bl	d7a20 <delay>
            //digitalWrite(D7,LOW);
        }
    }
    delay(100);
   d6c52:	2064      	movs	r0, #100	; 0x64
}
   d6c54:	b002      	add	sp, #8
   d6c56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            //}
            delay(1000);
            //digitalWrite(D7,LOW);
        }
    }
    delay(100);
   d6c5a:	f000 bee1 	b.w	d7a20 <delay>
                //displayTemp(TMin,258+16,0,gclock,bclock,true);
                //PdisplayTemp(TMax,258+88+16,rclock,gclock,0,true);
                //weatherLoop(416,0,rclock,gclock,bclock);
            }
            if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == HIGH && digitalRead(dnbtn) == LOW){
                settings(256,rclock,gclock,bclock);
   d6c5e:	f89a 3000 	ldrb.w	r3, [sl]
   d6c62:	f899 2000 	ldrb.w	r2, [r9]
   d6c66:	f898 1000 	ldrb.w	r1, [r8]
   d6c6a:	f44f 7080 	mov.w	r0, #256	; 0x100
   d6c6e:	f7ff fc43 	bl	d64f8 <_Z8settingsihhh>
   d6c72:	e7ee      	b.n	d6c52 <loop+0xde>
   d6c74:	2003e328 	.word	0x2003e328
   d6c78:	2003dacc 	.word	0x2003dacc
   d6c7c:	2003db0c 	.word	0x2003db0c
   d6c80:	2003dad0 	.word	0x2003dad0
   d6c84:	2003db10 	.word	0x2003db10
   d6c88:	2003e324 	.word	0x2003e324
   d6c8c:	2003e340 	.word	0x2003e340
   d6c90:	2003e338 	.word	0x2003e338
   d6c94:	2003dae4 	.word	0x2003dae4

000d6c98 <_GLOBAL__sub_I_strip>:
                }
            }
        }
        strcpy(dowVal,tempdat);
    }
}
   d6c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6c9a:	4b15      	ldr	r3, [pc, #84]	; (d6cf0 <_GLOBAL__sub_I_strip+0x58>)

#define PIXEL_PIN A3            //Define Hardware pin used for data

#define PIXEL_TYPE WS2812B       //Define LED Type

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
   d6c9c:	4c15      	ldr	r4, [pc, #84]	; (d6cf4 <_GLOBAL__sub_I_strip+0x5c>)
   d6c9e:	4f16      	ldr	r7, [pc, #88]	; (d6cf8 <_GLOBAL__sub_I_strip+0x60>)
   d6ca0:	2601      	movs	r6, #1
   d6ca2:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d6ca4:	f000 fa82 	bl	d71ac <HAL_Pin_Map>
   d6ca8:	2302      	movs	r3, #2
   d6caa:	2210      	movs	r2, #16
   d6cac:	f44f 71c0 	mov.w	r1, #384	; 0x180
   d6cb0:	4620      	mov	r0, r4
   d6cb2:	f000 f87d 	bl	d6db0 <_ZN17Adafruit_NeoPixelC1Ethh>
   d6cb6:	463a      	mov	r2, r7
   d6cb8:	4910      	ldr	r1, [pc, #64]	; (d6cfc <_GLOBAL__sub_I_strip+0x64>)
   d6cba:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6cbc:	4c10      	ldr	r4, [pc, #64]	; (d6d00 <_GLOBAL__sub_I_strip+0x68>)
   d6cbe:	f001 fea9 	bl	d8a14 <__aeabi_atexit>
   d6cc2:	2500      	movs	r5, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6cc8:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6cca:	4630      	mov	r0, r6

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6ccc:	6025      	str	r5, [r4, #0]
   d6cce:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6cd0:	71a5      	strb	r5, [r4, #6]
   d6cd2:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6cd4:	f000 fc0a 	bl	d74ec <set_system_mode>

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
   d6cd8:	463a      	mov	r2, r7
   d6cda:	490a      	ldr	r1, [pc, #40]	; (d6d04 <_GLOBAL__sub_I_strip+0x6c>)
   d6cdc:	4620      	mov	r0, r4
   d6cde:	f001 fe99 	bl	d8a14 <__aeabi_atexit>

SYSTEM_THREAD(ENABLED);
   d6ce2:	4629      	mov	r1, r5
   d6ce4:	4630      	mov	r0, r6
                }
            }
        }
        strcpy(dowVal,tempdat);
    }
}
   d6ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default

SYSTEM_THREAD(ENABLED);
   d6cea:	f000 bc0f 	b.w	d750c <system_thread_set_state>
   d6cee:	bf00      	nop
   d6cf0:	2003dae8 	.word	0x2003dae8
   d6cf4:	2003daf8 	.word	0x2003daf8
   d6cf8:	2003dac8 	.word	0x2003dac8
   d6cfc:	000d6d11 	.word	0x000d6d11
   d6d00:	2003e314 	.word	0x2003e314
   d6d04:	000d424d 	.word	0x000d424d

000d6d08 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6d08:	f000 baa8 	b.w	d725c <HAL_Timer_Get_Micro_Seconds>

000d6d0c <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6d0c:	f000 ba9e 	b.w	d724c <HAL_Delay_Microseconds>

000d6d10 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d6d10:	b510      	push	{r4, lr}
   d6d12:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d6d14:	68c0      	ldr	r0, [r0, #12]
   d6d16:	b108      	cbz	r0, d6d1c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d6d18:	f000 fcbc 	bl	d7694 <free>
  if (begun) pinMode(pin, INPUT);
   d6d1c:	7823      	ldrb	r3, [r4, #0]
   d6d1e:	b11b      	cbz	r3, d6d28 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d6d20:	2100      	movs	r1, #0
   d6d22:	79e0      	ldrb	r0, [r4, #7]
   d6d24:	f001 fdce 	bl	d88c4 <pinMode>
}
   d6d28:	4620      	mov	r0, r4
   d6d2a:	bd10      	pop	{r4, pc}

000d6d2c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d6d2c:	b538      	push	{r3, r4, r5, lr}
   d6d2e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d6d30:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d6d32:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d6d34:	b108      	cbz	r0, d6d3a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d6d36:	f000 fcad 	bl	d7694 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d6d3a:	79a3      	ldrb	r3, [r4, #6]
   d6d3c:	2b06      	cmp	r3, #6
   d6d3e:	bf0c      	ite	eq
   d6d40:	2004      	moveq	r0, #4
   d6d42:	2003      	movne	r0, #3
   d6d44:	fb10 f005 	smulbb	r0, r0, r5
   d6d48:	b280      	uxth	r0, r0
   d6d4a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d6d4c:	f000 fc9a 	bl	d7684 <malloc>
   d6d50:	60e0      	str	r0, [r4, #12]
   d6d52:	b128      	cbz	r0, d6d60 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d6d54:	88a2      	ldrh	r2, [r4, #4]
   d6d56:	2100      	movs	r1, #0
   d6d58:	f002 fe23 	bl	d99a2 <memset>
    numLEDs = n;
   d6d5c:	8065      	strh	r5, [r4, #2]
   d6d5e:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d6d60:	80a0      	strh	r0, [r4, #4]
   d6d62:	8060      	strh	r0, [r4, #2]
   d6d64:	bd38      	pop	{r3, r4, r5, pc}

000d6d66 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d6d66:	b510      	push	{r4, lr}
   d6d68:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d6d6a:	2101      	movs	r1, #1
   d6d6c:	79c0      	ldrb	r0, [r0, #7]
   d6d6e:	f001 fda9 	bl	d88c4 <pinMode>
  digitalWrite(pin, LOW);
   d6d72:	2100      	movs	r1, #0
   d6d74:	79e0      	ldrb	r0, [r4, #7]
   d6d76:	f001 fdb6 	bl	d88e6 <digitalWrite>
  begun = true;
   d6d7a:	2301      	movs	r3, #1
   d6d7c:	7023      	strb	r3, [r4, #0]
   d6d7e:	bd10      	pop	{r4, pc}

000d6d80 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d6d80:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d6d82:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d6d84:	4605      	mov	r5, r0
   d6d86:	460c      	mov	r4, r1
    if (begun) {
   d6d88:	b11b      	cbz	r3, d6d92 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d6d8a:	2100      	movs	r1, #0
   d6d8c:	79c0      	ldrb	r0, [r0, #7]
   d6d8e:	f001 fd99 	bl	d88c4 <pinMode>
    }
    pin = p;
    if (begun) {
   d6d92:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d6d94:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d6d96:	b153      	cbz	r3, d6dae <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d6d98:	b2a4      	uxth	r4, r4
   d6d9a:	4620      	mov	r0, r4
   d6d9c:	2101      	movs	r1, #1
   d6d9e:	f001 fd91 	bl	d88c4 <pinMode>
        digitalWrite(p, LOW);
   d6da2:	4620      	mov	r0, r4
   d6da4:	2100      	movs	r1, #0
    }
}
   d6da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d6daa:	f001 bd9c 	b.w	d88e6 <digitalWrite>
   d6dae:	bd38      	pop	{r3, r4, r5, pc}

000d6db0 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d6db0:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d6db2:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d6db4:	4604      	mov	r4, r0
   d6db6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d6db8:	7183      	strb	r3, [r0, #6]
   d6dba:	7005      	strb	r5, [r0, #0]
   d6dbc:	7205      	strb	r5, [r0, #8]
   d6dbe:	60c5      	str	r5, [r0, #12]
   d6dc0:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d6dc2:	f7ff ffb3 	bl	d6d2c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d6dc6:	4620      	mov	r0, r4
   d6dc8:	4631      	mov	r1, r6
   d6dca:	f7ff ffd9 	bl	d6d80 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d6dce:	4620      	mov	r0, r4
   d6dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6dd4 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d6dd4:	68c3      	ldr	r3, [r0, #12]
   d6dd6:	2b00      	cmp	r3, #0
   d6dd8:	f000 818b 	beq.w	d70f2 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d6ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6de0:	7983      	ldrb	r3, [r0, #6]
   d6de2:	3b02      	subs	r3, #2
   d6de4:	b2db      	uxtb	r3, r3
   d6de6:	2b04      	cmp	r3, #4
   d6de8:	bf9c      	itt	ls
   d6dea:	4ac4      	ldrls	r2, [pc, #784]	; (d70fc <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d6dec:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d6df0:	b087      	sub	sp, #28
   d6df2:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d6df4:	bf88      	it	hi
   d6df6:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d6df8:	f7ff ff86 	bl	d6d08 <micros>
   d6dfc:	692b      	ldr	r3, [r5, #16]
   d6dfe:	1ac0      	subs	r0, r0, r3
   d6e00:	42a0      	cmp	r0, r4
   d6e02:	d3f9      	bcc.n	d6df8 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d6e04:	4abe      	ldr	r2, [pc, #760]	; (d7100 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d6e06:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d6e08:	ca07      	ldmia	r2, {r0, r1, r2}
   d6e0a:	ac06      	add	r4, sp, #24
   d6e0c:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d6e10:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d6e12:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d6e14:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d6e18:	3304      	adds	r3, #4
   d6e1a:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6e1c:	b922      	cbnz	r2, d6e28 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6e1e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d6e22:	2b00      	cmp	r3, #0
   d6e24:	f2c0 8155 	blt.w	d70d2 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d6e28:	9c04      	ldr	r4, [sp, #16]
   d6e2a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6e2e:	b923      	cbnz	r3, d6e3a <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6e30:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d6e34:	2b00      	cmp	r3, #0
   d6e36:	f2c0 813c 	blt.w	d70b2 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d6e3a:	9c05      	ldr	r4, [sp, #20]
   d6e3c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6e40:	b91b      	cbnz	r3, d6e4a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6e42:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d6e46:	2b00      	cmp	r3, #0
   d6e48:	db6e      	blt.n	d6f28 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d6e4a:	4bae      	ldr	r3, [pc, #696]	; (d7104 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d6e4c:	79ea      	ldrb	r2, [r5, #7]
   d6e4e:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d6e50:	4cad      	ldr	r4, [pc, #692]	; (d7108 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d6e52:	49ae      	ldr	r1, [pc, #696]	; (d710c <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d6e54:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d6e56:	0112      	lsls	r2, r2, #4
   d6e58:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d6e5a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d6e5e:	785b      	ldrb	r3, [r3, #1]
   d6e60:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d6e62:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d6e64:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d6e66:	f003 031f 	and.w	r3, r3, #31
   d6e6a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d6e6e:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d6e70:	433a      	orrs	r2, r7
   d6e72:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d6e74:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d6e76:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d6e78:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d6e7c:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d6e80:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d6e82:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d6e84:	2800      	cmp	r0, #0
   d6e86:	d044      	beq.n	d6f12 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d6e88:	46cc      	mov	ip, r9
   d6e8a:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d6e8c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d6e90:	f81c eb01 	ldrb.w	lr, [ip], #1
   d6e94:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d6e96:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d6e98:	6863      	ldr	r3, [r4, #4]
   d6e9a:	1a9b      	subs	r3, r3, r2
   d6e9c:	2b46      	cmp	r3, #70	; 0x46
   d6e9e:	d9fb      	bls.n	d6e98 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d6ea0:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d6ea4:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d6ea8:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d6eac:	ea43 0307 	orr.w	r3, r3, r7
   d6eb0:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d6eb4:	d02f      	beq.n	d6f16 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d6eb6:	6863      	ldr	r3, [r4, #4]
   d6eb8:	1a9b      	subs	r3, r3, r2
   d6eba:	2b28      	cmp	r3, #40	; 0x28
   d6ebc:	d9fb      	bls.n	d6eb6 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d6ebe:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d6ec2:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d6ec4:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d6ec8:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d6ecc:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d6ed0:	d1e2      	bne.n	d6e98 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d6ed2:	ebc9 030c 	rsb	r3, r9, ip
   d6ed6:	88a8      	ldrh	r0, [r5, #4]
   d6ed8:	b29b      	uxth	r3, r3
   d6eda:	4298      	cmp	r0, r3
   d6edc:	d8d8      	bhi.n	d6e90 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d6ede:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d6ee2:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d6ee6:	6863      	ldr	r3, [r4, #4]
   d6ee8:	1a9b      	subs	r3, r3, r2
   d6eea:	2b46      	cmp	r3, #70	; 0x46
   d6eec:	d9fb      	bls.n	d6ee6 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d6eee:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d6ef2:	ebca 0a03 	rsb	sl, sl, r3
   d6ef6:	4582      	cmp	sl, r0
   d6ef8:	f0c0 80d5 	bcc.w	d70a6 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d6efc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6f00:	f7ff ff04 	bl	d6d0c <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d6f04:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d6f06:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d6f0a:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d6f0e:	2800      	cmp	r0, #0
   d6f10:	d1ba      	bne.n	d6e88 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d6f12:	4602      	mov	r2, r0
   d6f14:	e7e7      	b.n	d6ee6 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d6f16:	6863      	ldr	r3, [r4, #4]
   d6f18:	1a9b      	subs	r3, r3, r2
   d6f1a:	2b11      	cmp	r3, #17
   d6f1c:	d8cf      	bhi.n	d6ebe <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d6f1e:	6863      	ldr	r3, [r4, #4]
   d6f20:	1a9b      	subs	r3, r3, r2
   d6f22:	2b11      	cmp	r3, #17
   d6f24:	d9f7      	bls.n	d6f16 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d6f26:	e7ca      	b.n	d6ebe <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6f28:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6f2c:	2b00      	cmp	r3, #0
   d6f2e:	da8c      	bge.n	d6e4a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6f30:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6f34:	2b00      	cmp	r3, #0
   d6f36:	da88      	bge.n	d6e4a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d6f38:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d6f3c:	2b00      	cmp	r3, #0
   d6f3e:	da84      	bge.n	d6e4a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d6f40:	9801      	ldr	r0, [sp, #4]
   d6f42:	f000 fb9f 	bl	d7684 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d6f46:	2800      	cmp	r0, #0
   d6f48:	f43f af7f 	beq.w	d6e4a <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d6f4c:	88ab      	ldrh	r3, [r5, #4]
   d6f4e:	2b00      	cmp	r3, #0
   d6f50:	f000 80d0 	beq.w	d70f4 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d6f54:	2700      	movs	r7, #0
   d6f56:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d6f58:	4e6d      	ldr	r6, [pc, #436]	; (d7110 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d6f5a:	496e      	ldr	r1, [pc, #440]	; (d7114 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d6f5c:	e000      	b.n	d6f60 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d6f5e:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d6f60:	68ea      	ldr	r2, [r5, #12]
   d6f62:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d6f64:	f103 0e01 	add.w	lr, r3, #1
   d6f68:	f012 0f80 	tst.w	r2, #128	; 0x80
   d6f6c:	bf14      	ite	ne
   d6f6e:	46b0      	movne	r8, r6
   d6f70:	4688      	moveq	r8, r1
   d6f72:	fa1f fe8e 	uxth.w	lr, lr
   d6f76:	f012 0f40 	tst.w	r2, #64	; 0x40
   d6f7a:	bf14      	ite	ne
   d6f7c:	46b1      	movne	r9, r6
   d6f7e:	4689      	moveq	r9, r1
   d6f80:	f012 0f20 	tst.w	r2, #32
   d6f84:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d6f88:	bf18      	it	ne
   d6f8a:	46b2      	movne	sl, r6
   d6f8c:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d6f90:	bf08      	it	eq
   d6f92:	468a      	moveq	sl, r1
   d6f94:	f103 0802 	add.w	r8, r3, #2
   d6f98:	f012 0f10 	tst.w	r2, #16
   d6f9c:	f103 0e03 	add.w	lr, r3, #3
   d6fa0:	bf14      	ite	ne
   d6fa2:	46b4      	movne	ip, r6
   d6fa4:	468c      	moveq	ip, r1
   d6fa6:	fa1f f888 	uxth.w	r8, r8
   d6faa:	f012 0f08 	tst.w	r2, #8
   d6fae:	fa1f fe8e 	uxth.w	lr, lr
   d6fb2:	f103 0904 	add.w	r9, r3, #4
   d6fb6:	fa1f f989 	uxth.w	r9, r9
   d6fba:	bf14      	ite	ne
   d6fbc:	46b3      	movne	fp, r6
   d6fbe:	468b      	moveq	fp, r1
   d6fc0:	f012 0f04 	tst.w	r2, #4
   d6fc4:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d6fc8:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d6fcc:	bf14      	ite	ne
   d6fce:	46b2      	movne	sl, r6
   d6fd0:	468a      	moveq	sl, r1
   d6fd2:	f103 0805 	add.w	r8, r3, #5
   d6fd6:	f012 0f02 	tst.w	r2, #2
   d6fda:	f103 0c06 	add.w	ip, r3, #6
   d6fde:	f103 0e07 	add.w	lr, r3, #7
   d6fe2:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d6fe6:	fa1f fe8e 	uxth.w	lr, lr
   d6fea:	bf14      	ite	ne
   d6fec:	46b1      	movne	r9, r6
   d6fee:	4689      	moveq	r9, r1
   d6ff0:	fa1f f888 	uxth.w	r8, r8
   d6ff4:	f012 0f01 	tst.w	r2, #1
   d6ff8:	fa1f fc8c 	uxth.w	ip, ip
   d6ffc:	bf14      	ite	ne
   d6ffe:	4632      	movne	r2, r6
   d7000:	460a      	moveq	r2, r1
   d7002:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d7006:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d700a:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d700e:	3701      	adds	r7, #1
   d7010:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d7014:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d7016:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d701a:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d701c:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d701e:	d89e      	bhi.n	d6f5e <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d7020:	f103 0209 	add.w	r2, r3, #9
   d7024:	330a      	adds	r3, #10
   d7026:	b292      	uxth	r2, r2
   d7028:	b29b      	uxth	r3, r3
   d702a:	0052      	lsls	r2, r2, #1
   d702c:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d702e:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d7030:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d7034:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d7036:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d7038:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d703a:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d703c:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d703e:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d7042:	4e30      	ldr	r6, [pc, #192]	; (d7104 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d7044:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d7048:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d704c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d7050:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d7054:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d7058:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d705c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d7060:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d7064:	79eb      	ldrb	r3, [r5, #7]
   d7066:	6831      	ldr	r1, [r6, #0]
   d7068:	011b      	lsls	r3, r3, #4
   d706a:	18ce      	adds	r6, r1, r3
   d706c:	5cc9      	ldrb	r1, [r1, r3]
   d706e:	7873      	ldrb	r3, [r6, #1]
   d7070:	f003 031f 	and.w	r3, r3, #31
   d7074:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d7078:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d707a:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d707e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d7082:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d7086:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d7088:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d708c:	2b00      	cmp	r3, #0
   d708e:	d0fb      	beq.n	d7088 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d7090:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d7092:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d7096:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d709a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d709e:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d70a2:	f000 faf7 	bl	d7694 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d70a6:	f7ff fe2f 	bl	d6d08 <micros>
   d70aa:	6128      	str	r0, [r5, #16]
}
   d70ac:	b007      	add	sp, #28
   d70ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70b2:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70b6:	2b00      	cmp	r3, #0
   d70b8:	f6bf aebf 	bge.w	d6e3a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70bc:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70c0:	2b00      	cmp	r3, #0
   d70c2:	f6bf aeba 	bge.w	d6e3a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d70c6:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70ca:	2b00      	cmp	r3, #0
   d70cc:	f6bf aeb5 	bge.w	d6e3a <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d70d0:	e736      	b.n	d6f40 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70d2:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70d6:	2b00      	cmp	r3, #0
   d70d8:	f6bf aea6 	bge.w	d6e28 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70dc:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70e0:	2b00      	cmp	r3, #0
   d70e2:	f6bf aea1 	bge.w	d6e28 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d70e6:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d70ea:	2b00      	cmp	r3, #0
   d70ec:	f6bf ae9c 	bge.w	d6e28 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d70f0:	e726      	b.n	d6f40 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d70f2:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d70f4:	2304      	movs	r3, #4
   d70f6:	2202      	movs	r2, #2
   d70f8:	e799      	b.n	d702e <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d70fa:	bf00      	nop
   d70fc:	000dbd94 	.word	0x000dbd94
   d7100:	000dbd88 	.word	0x000dbd88
   d7104:	2003e344 	.word	0x2003e344
   d7108:	e000edf0 	.word	0xe000edf0
   d710c:	e0001000 	.word	0xe0001000
   d7110:	ffff800d 	.word	0xffff800d
   d7114:	ffff8006 	.word	0xffff8006

000d7118 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d7118:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d711a:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d711c:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   d7120:	428c      	cmp	r4, r1
   d7122:	d927      	bls.n	d7174 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   d7124:	7a04      	ldrb	r4, [r0, #8]
   d7126:	b144      	cbz	r4, d713a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d7128:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d712c:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d7130:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d7134:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d7136:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d7138:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   d713a:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   d713c:	68c6      	ldr	r6, [r0, #12]
   d713e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d7142:	2f08      	cmp	r7, #8
   d7144:	eb06 0401 	add.w	r4, r6, r1
   d7148:	d811      	bhi.n	d716e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   d714a:	2001      	movs	r0, #1
   d714c:	40b8      	lsls	r0, r7
   d714e:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   d7152:	d108      	bne.n	d7166 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   d7154:	06c0      	lsls	r0, r0, #27
   d7156:	d50a      	bpl.n	d716e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d7158:	2aff      	cmp	r2, #255	; 0xff
   d715a:	bf08      	it	eq
   d715c:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   d715e:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d7160:	7065      	strb	r5, [r4, #1]
          *p = g;
   d7162:	70a3      	strb	r3, [r4, #2]
   d7164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d7166:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d7168:	7062      	strb	r2, [r4, #1]
          *p = b;
   d716a:	70a5      	strb	r5, [r4, #2]
   d716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d716e:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d7170:	7063      	strb	r3, [r4, #1]
          *p = b;
   d7172:	70a5      	strb	r5, [r4, #2]
   d7174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7178 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d7178:	b508      	push	{r3, lr}
   d717a:	f000 f817 	bl	d71ac <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d717e:	f000 f815 	bl	d71ac <HAL_Pin_Map>
   d7182:	4b01      	ldr	r3, [pc, #4]	; (d7188 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d7184:	6018      	str	r0, [r3, #0]
   d7186:	bd08      	pop	{r3, pc}
   d7188:	2003e344 	.word	0x2003e344

000d718c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d718c:	b508      	push	{r3, lr}
   d718e:	4b02      	ldr	r3, [pc, #8]	; (d7198 <netdb_freeaddrinfo+0xc>)
   d7190:	681b      	ldr	r3, [r3, #0]
   d7192:	689b      	ldr	r3, [r3, #8]
   d7194:	9301      	str	r3, [sp, #4]
   d7196:	bd08      	pop	{r3, pc}
   d7198:	00030268 	.word	0x00030268

000d719c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d719c:	b508      	push	{r3, lr}
   d719e:	4b02      	ldr	r3, [pc, #8]	; (d71a8 <netdb_getaddrinfo+0xc>)
   d71a0:	681b      	ldr	r3, [r3, #0]
   d71a2:	68db      	ldr	r3, [r3, #12]
   d71a4:	9301      	str	r3, [sp, #4]
   d71a6:	bd08      	pop	{r3, pc}
   d71a8:	00030268 	.word	0x00030268

000d71ac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d71ac:	b508      	push	{r3, lr}
   d71ae:	4b02      	ldr	r3, [pc, #8]	; (d71b8 <HAL_Pin_Map+0xc>)
   d71b0:	681b      	ldr	r3, [r3, #0]
   d71b2:	681b      	ldr	r3, [r3, #0]
   d71b4:	9301      	str	r3, [sp, #4]
   d71b6:	bd08      	pop	{r3, pc}
   d71b8:	0003022c 	.word	0x0003022c

000d71bc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d71bc:	b508      	push	{r3, lr}
   d71be:	4b02      	ldr	r3, [pc, #8]	; (d71c8 <HAL_Validate_Pin_Function+0xc>)
   d71c0:	681b      	ldr	r3, [r3, #0]
   d71c2:	685b      	ldr	r3, [r3, #4]
   d71c4:	9301      	str	r3, [sp, #4]
   d71c6:	bd08      	pop	{r3, pc}
   d71c8:	0003022c 	.word	0x0003022c

000d71cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d71cc:	b508      	push	{r3, lr}
   d71ce:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <HAL_Pin_Mode+0xc>)
   d71d0:	681b      	ldr	r3, [r3, #0]
   d71d2:	689b      	ldr	r3, [r3, #8]
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	bd08      	pop	{r3, pc}
   d71d8:	0003022c 	.word	0x0003022c

000d71dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d71dc:	b508      	push	{r3, lr}
   d71de:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <HAL_Get_Pin_Mode+0xc>)
   d71e0:	681b      	ldr	r3, [r3, #0]
   d71e2:	68db      	ldr	r3, [r3, #12]
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	0003022c 	.word	0x0003022c

000d71ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d71ec:	b508      	push	{r3, lr}
   d71ee:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <HAL_GPIO_Write+0xc>)
   d71f0:	681b      	ldr	r3, [r3, #0]
   d71f2:	691b      	ldr	r3, [r3, #16]
   d71f4:	9301      	str	r3, [sp, #4]
   d71f6:	bd08      	pop	{r3, pc}
   d71f8:	0003022c 	.word	0x0003022c

000d71fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4b02      	ldr	r3, [pc, #8]	; (d7208 <HAL_GPIO_Read+0xc>)
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	695b      	ldr	r3, [r3, #20]
   d7204:	9301      	str	r3, [sp, #4]
   d7206:	bd08      	pop	{r3, pc}
   d7208:	0003022c 	.word	0x0003022c

000d720c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d720c:	b508      	push	{r3, lr}
   d720e:	4b02      	ldr	r3, [pc, #8]	; (d7218 <HAL_ADC_Read+0xc>)
   d7210:	681b      	ldr	r3, [r3, #0]
   d7212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7214:	9301      	str	r3, [sp, #4]
   d7216:	bd08      	pop	{r3, pc}
   d7218:	0003022c 	.word	0x0003022c

000d721c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d721c:	b508      	push	{r3, lr}
   d721e:	4b02      	ldr	r3, [pc, #8]	; (d7228 <HAL_SPI_Init+0xc>)
   d7220:	681b      	ldr	r3, [r3, #0]
   d7222:	69db      	ldr	r3, [r3, #28]
   d7224:	9301      	str	r3, [sp, #4]
   d7226:	bd08      	pop	{r3, pc}
   d7228:	00030230 	.word	0x00030230

000d722c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d722c:	b508      	push	{r3, lr}
   d722e:	4b02      	ldr	r3, [pc, #8]	; (d7238 <HAL_SPI_Is_Enabled+0xc>)
   d7230:	681b      	ldr	r3, [r3, #0]
   d7232:	6a1b      	ldr	r3, [r3, #32]
   d7234:	9301      	str	r3, [sp, #4]
   d7236:	bd08      	pop	{r3, pc}
   d7238:	00030230 	.word	0x00030230

000d723c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d723c:	b508      	push	{r3, lr}
   d723e:	4b02      	ldr	r3, [pc, #8]	; (d7248 <HAL_RNG_GetRandomNumber+0xc>)
   d7240:	681b      	ldr	r3, [r3, #0]
   d7242:	685b      	ldr	r3, [r3, #4]
   d7244:	9301      	str	r3, [sp, #4]
   d7246:	bd08      	pop	{r3, pc}
   d7248:	00030218 	.word	0x00030218

000d724c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d724c:	b508      	push	{r3, lr}
   d724e:	4b02      	ldr	r3, [pc, #8]	; (d7258 <HAL_Delay_Microseconds+0xc>)
   d7250:	681b      	ldr	r3, [r3, #0]
   d7252:	68db      	ldr	r3, [r3, #12]
   d7254:	9301      	str	r3, [sp, #4]
   d7256:	bd08      	pop	{r3, pc}
   d7258:	00030218 	.word	0x00030218

000d725c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d725c:	b508      	push	{r3, lr}
   d725e:	4b02      	ldr	r3, [pc, #8]	; (d7268 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7260:	681b      	ldr	r3, [r3, #0]
   d7262:	691b      	ldr	r3, [r3, #16]
   d7264:	9301      	str	r3, [sp, #4]
   d7266:	bd08      	pop	{r3, pc}
   d7268:	00030218 	.word	0x00030218

000d726c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d726c:	b508      	push	{r3, lr}
   d726e:	4b02      	ldr	r3, [pc, #8]	; (d7278 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7270:	681b      	ldr	r3, [r3, #0]
   d7272:	695b      	ldr	r3, [r3, #20]
   d7274:	9301      	str	r3, [sp, #4]
   d7276:	bd08      	pop	{r3, pc}
   d7278:	00030218 	.word	0x00030218

000d727c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d727c:	b508      	push	{r3, lr}
   d727e:	4b02      	ldr	r3, [pc, #8]	; (d7288 <HAL_RTC_Get_UnixTime+0xc>)
   d7280:	681b      	ldr	r3, [r3, #0]
   d7282:	69db      	ldr	r3, [r3, #28]
   d7284:	9301      	str	r3, [sp, #4]
   d7286:	bd08      	pop	{r3, pc}
   d7288:	00030218 	.word	0x00030218

000d728c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d728c:	b508      	push	{r3, lr}
   d728e:	4b02      	ldr	r3, [pc, #8]	; (d7298 <HAL_EEPROM_Init+0xc>)
   d7290:	681b      	ldr	r3, [r3, #0]
   d7292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7294:	9301      	str	r3, [sp, #4]
   d7296:	bd08      	pop	{r3, pc}
   d7298:	00030218 	.word	0x00030218

000d729c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d729c:	b508      	push	{r3, lr}
   d729e:	4b02      	ldr	r3, [pc, #8]	; (d72a8 <HAL_EEPROM_Read+0xc>)
   d72a0:	681b      	ldr	r3, [r3, #0]
   d72a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d72a4:	9301      	str	r3, [sp, #4]
   d72a6:	bd08      	pop	{r3, pc}
   d72a8:	00030218 	.word	0x00030218

000d72ac <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d72ac:	b508      	push	{r3, lr}
   d72ae:	4b02      	ldr	r3, [pc, #8]	; (d72b8 <HAL_EEPROM_Write+0xc>)
   d72b0:	681b      	ldr	r3, [r3, #0]
   d72b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d72b4:	9301      	str	r3, [sp, #4]
   d72b6:	bd08      	pop	{r3, pc}
   d72b8:	00030218 	.word	0x00030218

000d72bc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d72bc:	b508      	push	{r3, lr}
   d72be:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <HAL_RTC_Time_Is_Valid+0xc>)
   d72c0:	681b      	ldr	r3, [r3, #0]
   d72c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d72c4:	9301      	str	r3, [sp, #4]
   d72c6:	bd08      	pop	{r3, pc}
   d72c8:	00030218 	.word	0x00030218

000d72cc <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d72cc:	b508      	push	{r3, lr}
   d72ce:	4b02      	ldr	r3, [pc, #8]	; (d72d8 <hal_timer_millis+0xc>)
   d72d0:	681b      	ldr	r3, [r3, #0]
   d72d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d72d4:	9301      	str	r3, [sp, #4]
   d72d6:	bd08      	pop	{r3, pc}
   d72d8:	00030218 	.word	0x00030218

000d72dc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d72dc:	b508      	push	{r3, lr}
   d72de:	4b02      	ldr	r3, [pc, #8]	; (d72e8 <os_thread_is_current+0xc>)
   d72e0:	681b      	ldr	r3, [r3, #0]
   d72e2:	689b      	ldr	r3, [r3, #8]
   d72e4:	9301      	str	r3, [sp, #4]
   d72e6:	bd08      	pop	{r3, pc}
   d72e8:	00030248 	.word	0x00030248

000d72ec <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d72ec:	b508      	push	{r3, lr}
   d72ee:	4b02      	ldr	r3, [pc, #8]	; (d72f8 <os_thread_join+0xc>)
   d72f0:	681b      	ldr	r3, [r3, #0]
   d72f2:	691b      	ldr	r3, [r3, #16]
   d72f4:	9301      	str	r3, [sp, #4]
   d72f6:	bd08      	pop	{r3, pc}
   d72f8:	00030248 	.word	0x00030248

000d72fc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d72fc:	b508      	push	{r3, lr}
   d72fe:	4b02      	ldr	r3, [pc, #8]	; (d7308 <os_thread_cleanup+0xc>)
   d7300:	681b      	ldr	r3, [r3, #0]
   d7302:	695b      	ldr	r3, [r3, #20]
   d7304:	9301      	str	r3, [sp, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	00030248 	.word	0x00030248

000d730c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d730c:	b508      	push	{r3, lr}
   d730e:	4b02      	ldr	r3, [pc, #8]	; (d7318 <os_mutex_recursive_create+0xc>)
   d7310:	681b      	ldr	r3, [r3, #0]
   d7312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7314:	9301      	str	r3, [sp, #4]
   d7316:	bd08      	pop	{r3, pc}
   d7318:	00030248 	.word	0x00030248

000d731c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b02      	ldr	r3, [pc, #8]	; (d7328 <os_mutex_recursive_destroy+0xc>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7324:	9301      	str	r3, [sp, #4]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	00030248 	.word	0x00030248

000d732c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d732c:	b508      	push	{r3, lr}
   d732e:	4b02      	ldr	r3, [pc, #8]	; (d7338 <inet_inet_ntop+0xc>)
   d7330:	681b      	ldr	r3, [r3, #0]
   d7332:	695b      	ldr	r3, [r3, #20]
   d7334:	9301      	str	r3, [sp, #4]
   d7336:	bd08      	pop	{r3, pc}
   d7338:	00030264 	.word	0x00030264

000d733c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d733c:	b508      	push	{r3, lr}
   d733e:	4b02      	ldr	r3, [pc, #8]	; (d7348 <HAL_USART_Init+0xc>)
   d7340:	681b      	ldr	r3, [r3, #0]
   d7342:	681b      	ldr	r3, [r3, #0]
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	bd08      	pop	{r3, pc}
   d7348:	0003023c 	.word	0x0003023c

000d734c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d734c:	b508      	push	{r3, lr}
   d734e:	4b02      	ldr	r3, [pc, #8]	; (d7358 <HAL_USART_Write_Data+0xc>)
   d7350:	681b      	ldr	r3, [r3, #0]
   d7352:	68db      	ldr	r3, [r3, #12]
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	bd08      	pop	{r3, pc}
   d7358:	0003023c 	.word	0x0003023c

000d735c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d735c:	b508      	push	{r3, lr}
   d735e:	4b02      	ldr	r3, [pc, #8]	; (d7368 <HAL_USART_Available_Data+0xc>)
   d7360:	681b      	ldr	r3, [r3, #0]
   d7362:	691b      	ldr	r3, [r3, #16]
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	bd08      	pop	{r3, pc}
   d7368:	0003023c 	.word	0x0003023c

000d736c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d736c:	b508      	push	{r3, lr}
   d736e:	4b02      	ldr	r3, [pc, #8]	; (d7378 <HAL_USART_Read_Data+0xc>)
   d7370:	681b      	ldr	r3, [r3, #0]
   d7372:	695b      	ldr	r3, [r3, #20]
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	bd08      	pop	{r3, pc}
   d7378:	0003023c 	.word	0x0003023c

000d737c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d737c:	b508      	push	{r3, lr}
   d737e:	4b02      	ldr	r3, [pc, #8]	; (d7388 <HAL_USART_Peek_Data+0xc>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	699b      	ldr	r3, [r3, #24]
   d7384:	9301      	str	r3, [sp, #4]
   d7386:	bd08      	pop	{r3, pc}
   d7388:	0003023c 	.word	0x0003023c

000d738c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d738c:	b508      	push	{r3, lr}
   d738e:	4b02      	ldr	r3, [pc, #8]	; (d7398 <HAL_USART_Flush_Data+0xc>)
   d7390:	681b      	ldr	r3, [r3, #0]
   d7392:	69db      	ldr	r3, [r3, #28]
   d7394:	9301      	str	r3, [sp, #4]
   d7396:	bd08      	pop	{r3, pc}
   d7398:	0003023c 	.word	0x0003023c

000d739c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d739c:	b508      	push	{r3, lr}
   d739e:	4b02      	ldr	r3, [pc, #8]	; (d73a8 <HAL_USART_Is_Enabled+0xc>)
   d73a0:	681b      	ldr	r3, [r3, #0]
   d73a2:	6a1b      	ldr	r3, [r3, #32]
   d73a4:	9301      	str	r3, [sp, #4]
   d73a6:	bd08      	pop	{r3, pc}
   d73a8:	0003023c 	.word	0x0003023c

000d73ac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d73ac:	b508      	push	{r3, lr}
   d73ae:	4b02      	ldr	r3, [pc, #8]	; (d73b8 <HAL_USART_Available_Data_For_Write+0xc>)
   d73b0:	681b      	ldr	r3, [r3, #0]
   d73b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73b4:	9301      	str	r3, [sp, #4]
   d73b6:	bd08      	pop	{r3, pc}
   d73b8:	0003023c 	.word	0x0003023c

000d73bc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d73bc:	b508      	push	{r3, lr}
   d73be:	4b02      	ldr	r3, [pc, #8]	; (d73c8 <HAL_I2C_Write_Data+0xc>)
   d73c0:	681b      	ldr	r3, [r3, #0]
   d73c2:	6a1b      	ldr	r3, [r3, #32]
   d73c4:	9301      	str	r3, [sp, #4]
   d73c6:	bd08      	pop	{r3, pc}
   d73c8:	00030228 	.word	0x00030228

000d73cc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <HAL_I2C_Available_Data+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	00030228 	.word	0x00030228

000d73dc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <HAL_I2C_Read_Data+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	00030228 	.word	0x00030228

000d73ec <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <HAL_I2C_Peek_Data+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	00030228 	.word	0x00030228

000d73fc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <HAL_I2C_Flush_Data+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	00030228 	.word	0x00030228

000d740c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <HAL_I2C_Is_Enabled+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	00030228 	.word	0x00030228

000d741c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <HAL_I2C_Init+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	00030228 	.word	0x00030228

000d742c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <HAL_USB_USART_Init+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	681b      	ldr	r3, [r3, #0]
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	0003024c 	.word	0x0003024c

000d743c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <HAL_USB_USART_Available_Data+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	691b      	ldr	r3, [r3, #16]
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	0003024c 	.word	0x0003024c

000d744c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	695b      	ldr	r3, [r3, #20]
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	0003024c 	.word	0x0003024c

000d745c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b02      	ldr	r3, [pc, #8]	; (d7468 <HAL_USB_USART_Receive_Data+0xc>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	699b      	ldr	r3, [r3, #24]
   d7464:	9301      	str	r3, [sp, #4]
   d7466:	bd08      	pop	{r3, pc}
   d7468:	0003024c 	.word	0x0003024c

000d746c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d746c:	b508      	push	{r3, lr}
   d746e:	4b02      	ldr	r3, [pc, #8]	; (d7478 <HAL_USB_USART_Send_Data+0xc>)
   d7470:	681b      	ldr	r3, [r3, #0]
   d7472:	69db      	ldr	r3, [r3, #28]
   d7474:	9301      	str	r3, [sp, #4]
   d7476:	bd08      	pop	{r3, pc}
   d7478:	0003024c 	.word	0x0003024c

000d747c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d747c:	b508      	push	{r3, lr}
   d747e:	4b02      	ldr	r3, [pc, #8]	; (d7488 <HAL_USB_USART_Flush_Data+0xc>)
   d7480:	681b      	ldr	r3, [r3, #0]
   d7482:	6a1b      	ldr	r3, [r3, #32]
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	bd08      	pop	{r3, pc}
   d7488:	0003024c 	.word	0x0003024c

000d748c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <LED_SetSignalingColor+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	685b      	ldr	r3, [r3, #4]
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	00030260 	.word	0x00030260

000d749c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <LED_Signaling_Start+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	689b      	ldr	r3, [r3, #8]
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	00030260 	.word	0x00030260

000d74ac <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <LED_Signaling_Stop+0xc>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	68db      	ldr	r3, [r3, #12]
   d74b4:	9301      	str	r3, [sp, #4]
   d74b6:	bd08      	pop	{r3, pc}
   d74b8:	00030260 	.word	0x00030260

000d74bc <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d74bc:	b508      	push	{r3, lr}
   d74be:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <LED_RGB_IsOverRidden+0xc>)
   d74c0:	681b      	ldr	r3, [r3, #0]
   d74c2:	699b      	ldr	r3, [r3, #24]
   d74c4:	9301      	str	r3, [sp, #4]
   d74c6:	bd08      	pop	{r3, pc}
   d74c8:	00030260 	.word	0x00030260

000d74cc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d74cc:	b508      	push	{r3, lr}
   d74ce:	4b02      	ldr	r3, [pc, #8]	; (d74d8 <LED_On+0xc>)
   d74d0:	681b      	ldr	r3, [r3, #0]
   d74d2:	69db      	ldr	r3, [r3, #28]
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	bd08      	pop	{r3, pc}
   d74d8:	00030260 	.word	0x00030260

000d74dc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d74dc:	b508      	push	{r3, lr}
   d74de:	4b02      	ldr	r3, [pc, #8]	; (d74e8 <system_mode+0xc>)
   d74e0:	681b      	ldr	r3, [r3, #0]
   d74e2:	681b      	ldr	r3, [r3, #0]
   d74e4:	9301      	str	r3, [sp, #4]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	00030220 	.word	0x00030220

000d74ec <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d74ec:	b508      	push	{r3, lr}
   d74ee:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <set_system_mode+0xc>)
   d74f0:	681b      	ldr	r3, [r3, #0]
   d74f2:	685b      	ldr	r3, [r3, #4]
   d74f4:	9301      	str	r3, [sp, #4]
   d74f6:	bd08      	pop	{r3, pc}
   d74f8:	00030220 	.word	0x00030220

000d74fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d74fc:	b508      	push	{r3, lr}
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <system_delay_ms+0xc>)
   d7500:	681b      	ldr	r3, [r3, #0]
   d7502:	695b      	ldr	r3, [r3, #20]
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	00030220 	.word	0x00030220

000d750c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d750c:	b508      	push	{r3, lr}
   d750e:	4b02      	ldr	r3, [pc, #8]	; (d7518 <system_thread_set_state+0xc>)
   d7510:	681b      	ldr	r3, [r3, #0]
   d7512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7514:	9301      	str	r3, [sp, #4]
   d7516:	bd08      	pop	{r3, pc}
   d7518:	00030220 	.word	0x00030220

000d751c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d751c:	b508      	push	{r3, lr}
   d751e:	4b02      	ldr	r3, [pc, #8]	; (d7528 <application_thread_current+0xc>)
   d7520:	681b      	ldr	r3, [r3, #0]
   d7522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7524:	9301      	str	r3, [sp, #4]
   d7526:	bd08      	pop	{r3, pc}
   d7528:	00030220 	.word	0x00030220

000d752c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d752c:	b508      	push	{r3, lr}
   d752e:	4b02      	ldr	r3, [pc, #8]	; (d7538 <application_thread_invoke+0xc>)
   d7530:	681b      	ldr	r3, [r3, #0]
   d7532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7534:	9301      	str	r3, [sp, #4]
   d7536:	bd08      	pop	{r3, pc}
   d7538:	00030220 	.word	0x00030220

000d753c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d753c:	b508      	push	{r3, lr}
   d753e:	4b02      	ldr	r3, [pc, #8]	; (d7548 <system_thread_get_state+0xc>)
   d7540:	681b      	ldr	r3, [r3, #0]
   d7542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7544:	9301      	str	r3, [sp, #4]
   d7546:	bd08      	pop	{r3, pc}
   d7548:	00030220 	.word	0x00030220

000d754c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d754c:	b508      	push	{r3, lr}
   d754e:	4b03      	ldr	r3, [pc, #12]	; (d755c <system_ctrl_set_app_request_handler+0x10>)
   d7550:	681b      	ldr	r3, [r3, #0]
   d7552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7556:	9301      	str	r3, [sp, #4]
   d7558:	bd08      	pop	{r3, pc}
   d755a:	0000      	.short	0x0000
   d755c:	00030220 	.word	0x00030220

000d7560 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7560:	b508      	push	{r3, lr}
   d7562:	4b03      	ldr	r3, [pc, #12]	; (d7570 <system_ctrl_set_result+0x10>)
   d7564:	681b      	ldr	r3, [r3, #0]
   d7566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d756a:	9301      	str	r3, [sp, #4]
   d756c:	bd08      	pop	{r3, pc}
   d756e:	0000      	.short	0x0000
   d7570:	00030220 	.word	0x00030220

000d7574 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7574:	b508      	push	{r3, lr}
   d7576:	4b02      	ldr	r3, [pc, #8]	; (d7580 <network_connect+0xc>)
   d7578:	681b      	ldr	r3, [r3, #0]
   d757a:	685b      	ldr	r3, [r3, #4]
   d757c:	9301      	str	r3, [sp, #4]
   d757e:	bd08      	pop	{r3, pc}
   d7580:	00030240 	.word	0x00030240

000d7584 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7584:	b508      	push	{r3, lr}
   d7586:	4b02      	ldr	r3, [pc, #8]	; (d7590 <network_connecting+0xc>)
   d7588:	681b      	ldr	r3, [r3, #0]
   d758a:	689b      	ldr	r3, [r3, #8]
   d758c:	9301      	str	r3, [sp, #4]
   d758e:	bd08      	pop	{r3, pc}
   d7590:	00030240 	.word	0x00030240

000d7594 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7594:	b508      	push	{r3, lr}
   d7596:	4b02      	ldr	r3, [pc, #8]	; (d75a0 <network_disconnect+0xc>)
   d7598:	681b      	ldr	r3, [r3, #0]
   d759a:	68db      	ldr	r3, [r3, #12]
   d759c:	9301      	str	r3, [sp, #4]
   d759e:	bd08      	pop	{r3, pc}
   d75a0:	00030240 	.word	0x00030240

000d75a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d75a4:	b508      	push	{r3, lr}
   d75a6:	4b02      	ldr	r3, [pc, #8]	; (d75b0 <network_ready+0xc>)
   d75a8:	681b      	ldr	r3, [r3, #0]
   d75aa:	691b      	ldr	r3, [r3, #16]
   d75ac:	9301      	str	r3, [sp, #4]
   d75ae:	bd08      	pop	{r3, pc}
   d75b0:	00030240 	.word	0x00030240

000d75b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d75b4:	b508      	push	{r3, lr}
   d75b6:	4b02      	ldr	r3, [pc, #8]	; (d75c0 <network_on+0xc>)
   d75b8:	681b      	ldr	r3, [r3, #0]
   d75ba:	695b      	ldr	r3, [r3, #20]
   d75bc:	9301      	str	r3, [sp, #4]
   d75be:	bd08      	pop	{r3, pc}
   d75c0:	00030240 	.word	0x00030240

000d75c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d75c4:	b508      	push	{r3, lr}
   d75c6:	4b02      	ldr	r3, [pc, #8]	; (d75d0 <network_off+0xc>)
   d75c8:	681b      	ldr	r3, [r3, #0]
   d75ca:	699b      	ldr	r3, [r3, #24]
   d75cc:	9301      	str	r3, [sp, #4]
   d75ce:	bd08      	pop	{r3, pc}
   d75d0:	00030240 	.word	0x00030240

000d75d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d75d4:	b508      	push	{r3, lr}
   d75d6:	4b02      	ldr	r3, [pc, #8]	; (d75e0 <network_listen+0xc>)
   d75d8:	681b      	ldr	r3, [r3, #0]
   d75da:	69db      	ldr	r3, [r3, #28]
   d75dc:	9301      	str	r3, [sp, #4]
   d75de:	bd08      	pop	{r3, pc}
   d75e0:	00030240 	.word	0x00030240

000d75e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d75e4:	b508      	push	{r3, lr}
   d75e6:	4b02      	ldr	r3, [pc, #8]	; (d75f0 <network_listening+0xc>)
   d75e8:	681b      	ldr	r3, [r3, #0]
   d75ea:	6a1b      	ldr	r3, [r3, #32]
   d75ec:	9301      	str	r3, [sp, #4]
   d75ee:	bd08      	pop	{r3, pc}
   d75f0:	00030240 	.word	0x00030240

000d75f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d75f4:	b508      	push	{r3, lr}
   d75f6:	4b02      	ldr	r3, [pc, #8]	; (d7600 <network_set_listen_timeout+0xc>)
   d75f8:	681b      	ldr	r3, [r3, #0]
   d75fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d75fc:	9301      	str	r3, [sp, #4]
   d75fe:	bd08      	pop	{r3, pc}
   d7600:	00030240 	.word	0x00030240

000d7604 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7604:	b508      	push	{r3, lr}
   d7606:	4b02      	ldr	r3, [pc, #8]	; (d7610 <network_get_listen_timeout+0xc>)
   d7608:	681b      	ldr	r3, [r3, #0]
   d760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d760c:	9301      	str	r3, [sp, #4]
   d760e:	bd08      	pop	{r3, pc}
   d7610:	00030240 	.word	0x00030240

000d7614 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7614:	b508      	push	{r3, lr}
   d7616:	4b02      	ldr	r3, [pc, #8]	; (d7620 <spark_variable+0xc>)
   d7618:	681b      	ldr	r3, [r3, #0]
   d761a:	681b      	ldr	r3, [r3, #0]
   d761c:	9301      	str	r3, [sp, #4]
   d761e:	bd08      	pop	{r3, pc}
   d7620:	00030244 	.word	0x00030244

000d7624 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7624:	b508      	push	{r3, lr}
   d7626:	4b02      	ldr	r3, [pc, #8]	; (d7630 <spark_process+0xc>)
   d7628:	681b      	ldr	r3, [r3, #0]
   d762a:	689b      	ldr	r3, [r3, #8]
   d762c:	9301      	str	r3, [sp, #4]
   d762e:	bd08      	pop	{r3, pc}
   d7630:	00030244 	.word	0x00030244

000d7634 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7634:	b508      	push	{r3, lr}
   d7636:	4b02      	ldr	r3, [pc, #8]	; (d7640 <spark_cloud_flag_connected+0xc>)
   d7638:	681b      	ldr	r3, [r3, #0]
   d763a:	695b      	ldr	r3, [r3, #20]
   d763c:	9301      	str	r3, [sp, #4]
   d763e:	bd08      	pop	{r3, pc}
   d7640:	00030244 	.word	0x00030244

000d7644 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7644:	b508      	push	{r3, lr}
   d7646:	4b02      	ldr	r3, [pc, #8]	; (d7650 <spark_send_event+0xc>)
   d7648:	681b      	ldr	r3, [r3, #0]
   d764a:	6a1b      	ldr	r3, [r3, #32]
   d764c:	9301      	str	r3, [sp, #4]
   d764e:	bd08      	pop	{r3, pc}
   d7650:	00030244 	.word	0x00030244

000d7654 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7654:	b508      	push	{r3, lr}
   d7656:	4b02      	ldr	r3, [pc, #8]	; (d7660 <spark_subscribe+0xc>)
   d7658:	681b      	ldr	r3, [r3, #0]
   d765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d765c:	9301      	str	r3, [sp, #4]
   d765e:	bd08      	pop	{r3, pc}
   d7660:	00030244 	.word	0x00030244

000d7664 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7664:	b508      	push	{r3, lr}
   d7666:	4b02      	ldr	r3, [pc, #8]	; (d7670 <spark_sync_time_pending+0xc>)
   d7668:	681b      	ldr	r3, [r3, #0]
   d766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d766c:	9301      	str	r3, [sp, #4]
   d766e:	bd08      	pop	{r3, pc}
   d7670:	00030244 	.word	0x00030244

000d7674 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7674:	b508      	push	{r3, lr}
   d7676:	4b02      	ldr	r3, [pc, #8]	; (d7680 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7678:	681b      	ldr	r3, [r3, #0]
   d767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d767c:	9301      	str	r3, [sp, #4]
   d767e:	bd08      	pop	{r3, pc}
   d7680:	00030244 	.word	0x00030244

000d7684 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7684:	b508      	push	{r3, lr}
   d7686:	4b02      	ldr	r3, [pc, #8]	; (d7690 <malloc+0xc>)
   d7688:	681b      	ldr	r3, [r3, #0]
   d768a:	681b      	ldr	r3, [r3, #0]
   d768c:	9301      	str	r3, [sp, #4]
   d768e:	bd08      	pop	{r3, pc}
   d7690:	0003021c 	.word	0x0003021c

000d7694 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7694:	b508      	push	{r3, lr}
   d7696:	4b02      	ldr	r3, [pc, #8]	; (d76a0 <free+0xc>)
   d7698:	681b      	ldr	r3, [r3, #0]
   d769a:	685b      	ldr	r3, [r3, #4]
   d769c:	9301      	str	r3, [sp, #4]
   d769e:	bd08      	pop	{r3, pc}
   d76a0:	0003021c 	.word	0x0003021c

000d76a4 <siscanf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d76a4:	b508      	push	{r3, lr}
   d76a6:	4b02      	ldr	r3, [pc, #8]	; (d76b0 <siscanf+0xc>)
   d76a8:	681b      	ldr	r3, [r3, #0]
   d76aa:	699b      	ldr	r3, [r3, #24]
   d76ac:	9301      	str	r3, [sp, #4]
   d76ae:	bd08      	pop	{r3, pc}
   d76b0:	0003021c 	.word	0x0003021c

000d76b4 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d76b4:	b508      	push	{r3, lr}
   d76b6:	4b02      	ldr	r3, [pc, #8]	; (d76c0 <abort+0xc>)
   d76b8:	681b      	ldr	r3, [r3, #0]
   d76ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d76bc:	9301      	str	r3, [sp, #4]
   d76be:	bd08      	pop	{r3, pc}
   d76c0:	0003021c 	.word	0x0003021c

000d76c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d76c4:	b508      	push	{r3, lr}
   d76c6:	4b02      	ldr	r3, [pc, #8]	; (d76d0 <_malloc_r+0xc>)
   d76c8:	681b      	ldr	r3, [r3, #0]
   d76ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d76cc:	9301      	str	r3, [sp, #4]
   d76ce:	bd08      	pop	{r3, pc}
   d76d0:	0003021c 	.word	0x0003021c

000d76d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d76d4:	2200      	movs	r2, #0
   d76d6:	4611      	mov	r1, r2
   d76d8:	6840      	ldr	r0, [r0, #4]
   d76da:	f7ff bf83 	b.w	d75e4 <network_listening>

000d76de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d76de:	2200      	movs	r2, #0
   d76e0:	4611      	mov	r1, r2
   d76e2:	6840      	ldr	r0, [r0, #4]
   d76e4:	f7ff bf8e 	b.w	d7604 <network_get_listen_timeout>

000d76e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d76e8:	2200      	movs	r2, #0
   d76ea:	6840      	ldr	r0, [r0, #4]
   d76ec:	f7ff bf82 	b.w	d75f4 <network_set_listen_timeout>

000d76f0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d76f0:	2200      	movs	r2, #0
   d76f2:	f081 0101 	eor.w	r1, r1, #1
   d76f6:	6840      	ldr	r0, [r0, #4]
   d76f8:	f7ff bf6c 	b.w	d75d4 <network_listen>

000d76fc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d76fc:	2300      	movs	r3, #0
   d76fe:	461a      	mov	r2, r3
   d7700:	4619      	mov	r1, r3
   d7702:	6840      	ldr	r0, [r0, #4]
   d7704:	f7ff bf5e 	b.w	d75c4 <network_off>

000d7708 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7708:	2300      	movs	r3, #0
   d770a:	461a      	mov	r2, r3
   d770c:	4619      	mov	r1, r3
   d770e:	6840      	ldr	r0, [r0, #4]
   d7710:	f7ff bf50 	b.w	d75b4 <network_on>

000d7714 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7714:	2200      	movs	r2, #0
   d7716:	4611      	mov	r1, r2
   d7718:	6840      	ldr	r0, [r0, #4]
   d771a:	f7ff bf43 	b.w	d75a4 <network_ready>

000d771e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d771e:	2200      	movs	r2, #0
   d7720:	4611      	mov	r1, r2
   d7722:	6840      	ldr	r0, [r0, #4]
   d7724:	f7ff bf2e 	b.w	d7584 <network_connecting>

000d7728 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7728:	2200      	movs	r2, #0
   d772a:	2102      	movs	r1, #2
   d772c:	6840      	ldr	r0, [r0, #4]
   d772e:	f7ff bf31 	b.w	d7594 <network_disconnect>

000d7732 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7732:	2300      	movs	r3, #0
   d7734:	461a      	mov	r2, r3
   d7736:	6840      	ldr	r0, [r0, #4]
   d7738:	f7ff bf1c 	b.w	d7574 <network_connect>

000d773c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d773c:	4b02      	ldr	r3, [pc, #8]	; (d7748 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d773e:	2203      	movs	r2, #3
   d7740:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7742:	4a02      	ldr	r2, [pc, #8]	; (d774c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7744:	601a      	str	r2, [r3, #0]
   d7746:	4770      	bx	lr
   d7748:	2003e348 	.word	0x2003e348
   d774c:	000dbdb0 	.word	0x000dbdb0

000d7750 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7750:	b510      	push	{r4, lr}
   d7752:	4604      	mov	r4, r0
{
    _spi = spi;
   d7754:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d7756:	4608      	mov	r0, r1
   d7758:	f7ff fd60 	bl	d721c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d775c:	2300      	movs	r3, #0
   d775e:	6063      	str	r3, [r4, #4]
}
   d7760:	4620      	mov	r0, r4
   d7762:	bd10      	pop	{r4, pc}

000d7764 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7764:	7800      	ldrb	r0, [r0, #0]
   d7766:	f7ff bd61 	b.w	d722c <HAL_SPI_Is_Enabled>
	...

000d776c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d776c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d776e:	4c09      	ldr	r4, [pc, #36]	; (d7794 <_GLOBAL__sub_I_System+0x28>)
   d7770:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7772:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7776:	6020      	str	r0, [r4, #0]
   d7778:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d777a:	71a0      	strb	r0, [r4, #6]
   d777c:	8120      	strh	r0, [r4, #8]
   d777e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7780:	f7ff feb4 	bl	d74ec <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7784:	4620      	mov	r0, r4
   d7786:	4a04      	ldr	r2, [pc, #16]	; (d7798 <_GLOBAL__sub_I_System+0x2c>)
   d7788:	4904      	ldr	r1, [pc, #16]	; (d779c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d778a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d778e:	f001 b941 	b.w	d8a14 <__aeabi_atexit>
   d7792:	bf00      	nop
   d7794:	2003e350 	.word	0x2003e350
   d7798:	2003dac8 	.word	0x2003dac8
   d779c:	000d424d 	.word	0x000d424d

000d77a0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d77a0:	b510      	push	{r4, lr}
   d77a2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d77a4:	6800      	ldr	r0, [r0, #0]
   d77a6:	b108      	cbz	r0, d77ac <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d77a8:	f7ff fdb8 	bl	d731c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d77ac:	4620      	mov	r0, r4
   d77ae:	bd10      	pop	{r4, pc}

000d77b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d77b0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d77b2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d77b4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d77b6:	689b      	ldr	r3, [r3, #8]
   d77b8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d77ba:	68a3      	ldr	r3, [r4, #8]
   d77bc:	3b01      	subs	r3, #1
   d77be:	60a3      	str	r3, [r4, #8]
   d77c0:	b92b      	cbnz	r3, d77ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d77c2:	6823      	ldr	r3, [r4, #0]
   d77c4:	4620      	mov	r0, r4
   d77c6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d77c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d77cc:	4718      	bx	r3
   d77ce:	bd10      	pop	{r4, pc}

000d77d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d77d0:	680b      	ldr	r3, [r1, #0]
   d77d2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d77d4:	b113      	cbz	r3, d77dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d77d6:	685a      	ldr	r2, [r3, #4]
   d77d8:	3201      	adds	r2, #1
   d77da:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d77dc:	4770      	bx	lr

000d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d77de:	b510      	push	{r4, lr}
   d77e0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d77e2:	6800      	ldr	r0, [r0, #0]
   d77e4:	b128      	cbz	r0, d77f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d77e6:	6843      	ldr	r3, [r0, #4]
   d77e8:	3b01      	subs	r3, #1
   d77ea:	6043      	str	r3, [r0, #4]
   d77ec:	b90b      	cbnz	r3, d77f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d77ee:	f7ff ffdf 	bl	d77b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d77f2:	4620      	mov	r0, r4
   d77f4:	bd10      	pop	{r4, pc}
	...

000d77f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d77f8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d77fa:	4c06      	ldr	r4, [pc, #24]	; (d7814 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d77fc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d77fe:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7800:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7802:	f7ff fd83 	bl	d730c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7806:	4620      	mov	r0, r4
   d7808:	4a03      	ldr	r2, [pc, #12]	; (d7818 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d780a:	4904      	ldr	r1, [pc, #16]	; (d781c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7810:	f001 b900 	b.w	d8a14 <__aeabi_atexit>
   d7814:	2003e35c 	.word	0x2003e35c
   d7818:	2003dac8 	.word	0x2003dac8
   d781c:	000d77a1 	.word	0x000d77a1

000d7820 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7822:	4606      	mov	r6, r0
   d7824:	460d      	mov	r5, r1
   d7826:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7828:	2400      	movs	r4, #0
  while (size--) {
   d782a:	42bd      	cmp	r5, r7
   d782c:	d00c      	beq.n	d7848 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d782e:	6833      	ldr	r3, [r6, #0]
   d7830:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7834:	689b      	ldr	r3, [r3, #8]
   d7836:	4630      	mov	r0, r6
   d7838:	4798      	blx	r3
     if (chunk>=0)
   d783a:	2800      	cmp	r0, #0
   d783c:	db01      	blt.n	d7842 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d783e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7840:	e7f3      	b.n	d782a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7842:	2c00      	cmp	r4, #0
   d7844:	bf08      	it	eq
   d7846:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7848:	4620      	mov	r0, r4
   d784a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d784c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d784c:	b570      	push	{r4, r5, r6, lr}
   d784e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7850:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7852:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7854:	b149      	cbz	r1, d786a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7856:	f002 f902 	bl	d9a5e <strlen>
   d785a:	682b      	ldr	r3, [r5, #0]
   d785c:	4602      	mov	r2, r0
   d785e:	4621      	mov	r1, r4
   d7860:	4628      	mov	r0, r5
   d7862:	68db      	ldr	r3, [r3, #12]
    }
   d7864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7868:	4718      	bx	r3
    }
   d786a:	bd70      	pop	{r4, r5, r6, pc}

000d786c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d786c:	6803      	ldr	r3, [r0, #0]
   d786e:	689b      	ldr	r3, [r3, #8]
   d7870:	4718      	bx	r3

000d7872 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7872:	b530      	push	{r4, r5, lr}
   d7874:	b08b      	sub	sp, #44	; 0x2c
   d7876:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7878:	2100      	movs	r1, #0
   d787a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d787e:	2a01      	cmp	r2, #1
   d7880:	bf98      	it	ls
   d7882:	220a      	movls	r2, #10
   d7884:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7888:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d788c:	fb05 3312 	mls	r3, r5, r2, r3
   d7890:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7894:	2b09      	cmp	r3, #9
   d7896:	bf94      	ite	ls
   d7898:	3330      	addls	r3, #48	; 0x30
   d789a:	3337      	addhi	r3, #55	; 0x37
   d789c:	b2db      	uxtb	r3, r3
   d789e:	4621      	mov	r1, r4
   d78a0:	f804 3901 	strb.w	r3, [r4], #-1
   d78a4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d78a6:	2d00      	cmp	r5, #0
   d78a8:	d1ee      	bne.n	d7888 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d78aa:	f7ff ffcf 	bl	d784c <_ZN5Print5writeEPKc>
}
   d78ae:	b00b      	add	sp, #44	; 0x2c
   d78b0:	bd30      	pop	{r4, r5, pc}
	...

000d78b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d78b4:	4b01      	ldr	r3, [pc, #4]	; (d78bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d78b6:	4a02      	ldr	r2, [pc, #8]	; (d78c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d78b8:	601a      	str	r2, [r3, #0]
   d78ba:	4770      	bx	lr
   d78bc:	2003e360 	.word	0x2003e360
   d78c0:	000dbe4f 	.word	0x000dbe4f

000d78c4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d78c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d78c6:	4b14      	ldr	r3, [pc, #80]	; (d7918 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d78c8:	4f14      	ldr	r7, [pc, #80]	; (d791c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d78ca:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d78cc:	4b14      	ldr	r3, [pc, #80]	; (d7920 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d78ce:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d78d0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d78d2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d78d4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d78d6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d78d8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d78da:	d01b      	beq.n	d7914 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d78dc:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d78de:	ad01      	add	r5, sp, #4
   d78e0:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d78e4:	f001 ff56 	bl	d9794 <localtime>
	calendar_time->tm_year += 1900;
   d78e8:	6943      	ldr	r3, [r0, #20]
   d78ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d78ee:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d78f0:	4604      	mov	r4, r0
   d78f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d78f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d78f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d78f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d78fa:	f8d4 e000 	ldr.w	lr, [r4]
   d78fe:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7902:	ad01      	add	r5, sp, #4
   d7904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7906:	4c07      	ldr	r4, [pc, #28]	; (d7924 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d790a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d790c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d790e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7910:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7914:	b00b      	add	sp, #44	; 0x2c
   d7916:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7918:	2003e394 	.word	0x2003e394
   d791c:	2003e390 	.word	0x2003e390
   d7920:	2003e38c 	.word	0x2003e38c
   d7924:	2003e364 	.word	0x2003e364

000d7928 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7928:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d792a:	2000      	movs	r0, #0
   d792c:	f7ff fe9a 	bl	d7664 <spark_sync_time_pending>
   d7930:	b128      	cbz	r0, d793e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7932:	f7ff fe7f 	bl	d7634 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7936:	f080 0001 	eor.w	r0, r0, #1
   d793a:	b2c0      	uxtb	r0, r0
   d793c:	bd08      	pop	{r3, pc}
   d793e:	2001      	movs	r0, #1
    }
   d7940:	bd08      	pop	{r3, pc}
	...

000d7944 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   d7944:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d7946:	f7ff ffbd 	bl	d78c4 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   d794a:	4b04      	ldr	r3, [pc, #16]	; (d795c <_ZN9TimeClass12hourFormat12El+0x18>)
   d794c:	6898      	ldr	r0, [r3, #8]
   d794e:	b118      	cbz	r0, d7958 <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   d7950:	280c      	cmp	r0, #12
   d7952:	dd02      	ble.n	d795a <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   d7954:	380c      	subs	r0, #12
   d7956:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   d7958:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   d795a:	bd08      	pop	{r3, pc}
   d795c:	2003e364 	.word	0x2003e364

000d7960 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7960:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7964:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d796c:	d40f      	bmi.n	d798e <_ZN9TimeClass4zoneEf+0x2e>
   d796e:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7972:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d797a:	dc08      	bgt.n	d798e <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d797c:	eddf 7a04 	vldr	s15, [pc, #16]	; d7990 <_ZN9TimeClass4zoneEf+0x30>
   d7980:	4b04      	ldr	r3, [pc, #16]	; (d7994 <_ZN9TimeClass4zoneEf+0x34>)
   d7982:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7986:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d798a:	ed83 0a00 	vstr	s0, [r3]
   d798e:	4770      	bx	lr
   d7990:	45610000 	.word	0x45610000
   d7994:	2003e394 	.word	0x2003e394

000d7998 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7998:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d799a:	2000      	movs	r0, #0
   d799c:	f7ff fc8e 	bl	d72bc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d79a0:	4604      	mov	r4, r0
   d79a2:	b968      	cbnz	r0, d79c0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d79a4:	f7ff fd9a 	bl	d74dc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d79a8:	2801      	cmp	r0, #1
   d79aa:	d10b      	bne.n	d79c4 <_ZN9TimeClass7isValidEv+0x2c>
   d79ac:	4620      	mov	r0, r4
   d79ae:	f7ff fdc5 	bl	d753c <system_thread_get_state>
   d79b2:	b938      	cbnz	r0, d79c4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d79b4:	f7ff ffb8 	bl	d7928 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d79b8:	b930      	cbnz	r0, d79c8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d79ba:	f7ff fe33 	bl	d7624 <spark_process>
   d79be:	e7f9      	b.n	d79b4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d79c0:	2001      	movs	r0, #1
   d79c2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d79c4:	2000      	movs	r0, #0
   d79c6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d79c8:	f7ff ffae 	bl	d7928 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d79cc:	2000      	movs	r0, #0
   d79ce:	f7ff fc75 	bl	d72bc <HAL_RTC_Time_Is_Valid>
   d79d2:	3000      	adds	r0, #0
   d79d4:	bf18      	it	ne
   d79d6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d79d8:	bd10      	pop	{r4, pc}

000d79da <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d79da:	b508      	push	{r3, lr}
    (void)isValid();
   d79dc:	f7ff ffdc 	bl	d7998 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d79e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d79e4:	f7ff bc4a 	b.w	d727c <HAL_RTC_Get_UnixTime>

000d79e8 <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   d79e8:	b508      	push	{r3, lr}
	return hourFormat12(now());
   d79ea:	f7ff fff6 	bl	d79da <_ZN9TimeClass3nowEv>
}
   d79ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   d79f2:	f7ff bfa7 	b.w	d7944 <_ZN9TimeClass12hourFormat12El>
	...

000d79f8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d79f8:	b508      	push	{r3, lr}
	return minute(now());
   d79fa:	f7ff ffee 	bl	d79da <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d79fe:	f7ff ff61 	bl	d78c4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d7a02:	4b01      	ldr	r3, [pc, #4]	; (d7a08 <_ZN9TimeClass6minuteEv+0x10>)
   d7a04:	6858      	ldr	r0, [r3, #4]
   d7a06:	bd08      	pop	{r3, pc}
   d7a08:	2003e364 	.word	0x2003e364

000d7a0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7a0c:	4b02      	ldr	r3, [pc, #8]	; (d7a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7a0e:	681a      	ldr	r2, [r3, #0]
   d7a10:	4b02      	ldr	r3, [pc, #8]	; (d7a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7a12:	601a      	str	r2, [r3, #0]
   d7a14:	4770      	bx	lr
   d7a16:	bf00      	nop
   d7a18:	2003d9d8 	.word	0x2003d9d8
   d7a1c:	2003e388 	.word	0x2003e388

000d7a20 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7a20:	2100      	movs	r1, #0
   d7a22:	f7ff bd6b 	b.w	d74fc <system_delay_ms>

000d7a26 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7a26:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7a28:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7a2a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7a2c:	b113      	cbz	r3, d7a34 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7a2e:	2203      	movs	r2, #3
   d7a30:	4601      	mov	r1, r0
   d7a32:	4798      	blx	r3
    }
   d7a34:	4620      	mov	r0, r4
   d7a36:	bd10      	pop	{r4, pc}

000d7a38 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7a38:	b510      	push	{r4, lr}
   d7a3a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7a3c:	f7ff fff3 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>
   d7a40:	4620      	mov	r0, r4
   d7a42:	bd10      	pop	{r4, pc}

000d7a44 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d7a44:	b510      	push	{r4, lr}
   d7a46:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7a48:	f7ff fd38 	bl	d74bc <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d7a4c:	4284      	cmp	r4, r0
   d7a4e:	d008      	beq.n	d7a62 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7a50:	b11c      	cbz	r4, d7a5a <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d7a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d7a56:	f7ff bd21 	b.w	d749c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d7a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d7a5e:	f7ff bd25 	b.w	d74ac <LED_Signaling_Stop>
   d7a62:	bd10      	pop	{r4, pc}

000d7a64 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d7a64:	b570      	push	{r4, r5, r6, lr}
   d7a66:	4605      	mov	r5, r0
   d7a68:	460e      	mov	r6, r1
   d7a6a:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7a6c:	f7ff fd26 	bl	d74bc <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d7a70:	b150      	cbz	r0, d7a88 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d7a72:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d7a76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d7a7a:	f7ff fd07 	bl	d748c <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d7a7e:	20e7      	movs	r0, #231	; 0xe7
}
   d7a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d7a84:	f7ff bd22 	b.w	d74cc <LED_On>
   d7a88:	bd70      	pop	{r4, r5, r6, pc}

000d7a8a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7a8a:	b513      	push	{r0, r1, r4, lr}
   d7a8c:	460b      	mov	r3, r1
   d7a8e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a90:	c803      	ldmia	r0, {r0, r1}
   d7a92:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a96:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7a9a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7a9e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7aa2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7aa6:	b002      	add	sp, #8
   d7aa8:	bd10      	pop	{r4, pc}
	...

000d7aac <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7aac:	4803      	ldr	r0, [pc, #12]	; (d7abc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7aae:	4a04      	ldr	r2, [pc, #16]	; (d7ac0 <_GLOBAL__sub_I_RGB+0x14>)
   d7ab0:	4904      	ldr	r1, [pc, #16]	; (d7ac4 <_GLOBAL__sub_I_RGB+0x18>)
   d7ab2:	2300      	movs	r3, #0
   d7ab4:	6083      	str	r3, [r0, #8]
   d7ab6:	f000 bfad 	b.w	d8a14 <__aeabi_atexit>
   d7aba:	bf00      	nop
   d7abc:	2003e398 	.word	0x2003e398
   d7ac0:	2003dac8 	.word	0x2003dac8
   d7ac4:	000d7a39 	.word	0x000d7a39

000d7ac8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7ac8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7aca:	4b0c      	ldr	r3, [pc, #48]	; (d7afc <serialEventRun+0x34>)
   d7acc:	b133      	cbz	r3, d7adc <serialEventRun+0x14>
   d7ace:	f000 fc17 	bl	d8300 <_Z16_fetch_usbserialv>
   d7ad2:	6803      	ldr	r3, [r0, #0]
   d7ad4:	691b      	ldr	r3, [r3, #16]
   d7ad6:	4798      	blx	r3
   d7ad8:	2800      	cmp	r0, #0
   d7ada:	dc09      	bgt.n	d7af0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7adc:	4b08      	ldr	r3, [pc, #32]	; (d7b00 <serialEventRun+0x38>)
   d7ade:	b163      	cbz	r3, d7afa <serialEventRun+0x32>
   d7ae0:	f000 fcdc 	bl	d849c <_Z22__fetch_global_Serial1v>
   d7ae4:	6803      	ldr	r3, [r0, #0]
   d7ae6:	691b      	ldr	r3, [r3, #16]
   d7ae8:	4798      	blx	r3
   d7aea:	2800      	cmp	r0, #0
   d7aec:	dc03      	bgt.n	d7af6 <serialEventRun+0x2e>
   d7aee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7af0:	f3af 8000 	nop.w
   d7af4:	e7f2      	b.n	d7adc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7af6:	f3af 8000 	nop.w
   d7afa:	bd08      	pop	{r3, pc}
	...

000d7b04 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7b04:	b508      	push	{r3, lr}
	serialEventRun();
   d7b06:	f7ff ffdf 	bl	d7ac8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7b0a:	f7ff fbaf 	bl	d726c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7b0e:	4b01      	ldr	r3, [pc, #4]	; (d7b14 <_post_loop+0x10>)
   d7b10:	6018      	str	r0, [r3, #0]
   d7b12:	bd08      	pop	{r3, pc}
   d7b14:	2003e700 	.word	0x2003e700

000d7b18 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7b18:	4802      	ldr	r0, [pc, #8]	; (d7b24 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7b1a:	4a03      	ldr	r2, [pc, #12]	; (d7b28 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7b1c:	4903      	ldr	r1, [pc, #12]	; (d7b2c <_Z33system_initialize_user_backup_ramv+0x14>)
   d7b1e:	1a12      	subs	r2, r2, r0
   d7b20:	f001 bf34 	b.w	d998c <memcpy>
   d7b24:	2003f400 	.word	0x2003f400
   d7b28:	2003f404 	.word	0x2003f404
   d7b2c:	000dc3e0 	.word	0x000dc3e0

000d7b30 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7b30:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7b32:	2300      	movs	r3, #0
   d7b34:	9300      	str	r3, [sp, #0]
   d7b36:	461a      	mov	r2, r3
   d7b38:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7b3c:	f7ff fd10 	bl	d7560 <system_ctrl_set_result>
}
   d7b40:	b003      	add	sp, #12
   d7b42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7b48 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7b48:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7b4a:	8843      	ldrh	r3, [r0, #2]
   d7b4c:	2b0a      	cmp	r3, #10
   d7b4e:	d008      	beq.n	d7b62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7b50:	2b50      	cmp	r3, #80	; 0x50
   d7b52:	d109      	bne.n	d7b68 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7b54:	4b09      	ldr	r3, [pc, #36]	; (d7b7c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7b56:	681b      	ldr	r3, [r3, #0]
   d7b58:	b13b      	cbz	r3, d7b6a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7b5a:	b003      	add	sp, #12
   d7b5c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7b60:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7b62:	f7ff ffe5 	bl	d7b30 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7b66:	e006      	b.n	d7b76 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7b68:	2300      	movs	r3, #0
   d7b6a:	9300      	str	r3, [sp, #0]
   d7b6c:	461a      	mov	r2, r3
   d7b6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7b72:	f7ff fcf5 	bl	d7560 <system_ctrl_set_result>
        break;
    }
}
   d7b76:	b003      	add	sp, #12
   d7b78:	f85d fb04 	ldr.w	pc, [sp], #4
   d7b7c:	2003e3a8 	.word	0x2003e3a8

000d7b80 <module_user_init_hook>:

void module_user_init_hook()
{
   d7b80:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7b82:	4c10      	ldr	r4, [pc, #64]	; (d7bc4 <module_user_init_hook+0x44>)
   d7b84:	4d10      	ldr	r5, [pc, #64]	; (d7bc8 <module_user_init_hook+0x48>)
   d7b86:	6823      	ldr	r3, [r4, #0]
   d7b88:	42ab      	cmp	r3, r5
   d7b8a:	4b10      	ldr	r3, [pc, #64]	; (d7bcc <module_user_init_hook+0x4c>)
   d7b8c:	bf0c      	ite	eq
   d7b8e:	2201      	moveq	r2, #1
   d7b90:	2200      	movne	r2, #0
   d7b92:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7b94:	d002      	beq.n	d7b9c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7b96:	f7ff ffbf 	bl	d7b18 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7b9a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7b9c:	f7ff fb4e 	bl	d723c <HAL_RNG_GetRandomNumber>
   d7ba0:	4604      	mov	r4, r0
    srand(seed);
   d7ba2:	f001 ff07 	bl	d99b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7ba6:	4b0a      	ldr	r3, [pc, #40]	; (d7bd0 <module_user_init_hook+0x50>)
   d7ba8:	b113      	cbz	r3, d7bb0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7baa:	4620      	mov	r0, r4
   d7bac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7bb0:	2100      	movs	r1, #0
   d7bb2:	4807      	ldr	r0, [pc, #28]	; (d7bd0 <module_user_init_hook+0x50>)
   d7bb4:	f7ff fd5e 	bl	d7674 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7bb8:	2100      	movs	r1, #0
   d7bba:	4806      	ldr	r0, [pc, #24]	; (d7bd4 <module_user_init_hook+0x54>)
}
   d7bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7bc0:	f7ff bcc4 	b.w	d754c <system_ctrl_set_app_request_handler>
   d7bc4:	2003f400 	.word	0x2003f400
   d7bc8:	9a271c1e 	.word	0x9a271c1e
   d7bcc:	2003e3ac 	.word	0x2003e3ac
   d7bd0:	00000000 	.word	0x00000000
   d7bd4:	000d7b49 	.word	0x000d7b49

000d7bd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7bd8:	4770      	bx	lr

000d7bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7bda:	2000      	movs	r0, #0
   d7bdc:	4770      	bx	lr

000d7bde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7bde:	b510      	push	{r4, lr}
   d7be0:	2110      	movs	r1, #16
   d7be2:	4604      	mov	r4, r0
   d7be4:	f000 ff24 	bl	d8a30 <_ZdlPvj>
   d7be8:	4620      	mov	r0, r4
   d7bea:	bd10      	pop	{r4, pc}

000d7bec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7bec:	b508      	push	{r3, lr}
      { delete this; }
   d7bee:	b108      	cbz	r0, d7bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7bf0:	f7ff fff5 	bl	d7bde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7bf4:	bd08      	pop	{r3, pc}

000d7bf6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7bf6:	2200      	movs	r2, #0
   d7bf8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7bfa:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7bfc:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7c00:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7c02:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7c06:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c08:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c0a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7c0c:	680c      	ldr	r4, [r1, #0]
   d7c0e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c10:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7c12:	bd10      	pop	{r4, pc}

000d7c14 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7c14:	b510      	push	{r4, lr}
   d7c16:	4604      	mov	r4, r0
    free((void*)msg_);
   d7c18:	6800      	ldr	r0, [r0, #0]
   d7c1a:	f7ff fd3b 	bl	d7694 <free>
}
   d7c1e:	4620      	mov	r0, r4
   d7c20:	bd10      	pop	{r4, pc}

000d7c22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7c22:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7c24:	68c4      	ldr	r4, [r0, #12]
   d7c26:	b1f4      	cbz	r4, d7c66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7c28:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7c2a:	2b02      	cmp	r3, #2
   d7c2c:	d103      	bne.n	d7c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7c2e:	f104 000c 	add.w	r0, r4, #12
   d7c32:	f7ff ffef 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7c36:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7c38:	b135      	cbz	r5, d7c48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7c3a:	4628      	mov	r0, r5
   d7c3c:	f7ff fef3 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>
   d7c40:	2110      	movs	r1, #16
   d7c42:	4628      	mov	r0, r5
   d7c44:	f000 fef4 	bl	d8a30 <_ZdlPvj>
   d7c48:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7c4a:	b135      	cbz	r5, d7c5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7c4c:	4628      	mov	r0, r5
   d7c4e:	f7ff feea 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>
   d7c52:	2110      	movs	r1, #16
   d7c54:	4628      	mov	r0, r5
   d7c56:	f000 feeb 	bl	d8a30 <_ZdlPvj>
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	2114      	movs	r1, #20
   d7c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7c62:	f000 bee5 	b.w	d8a30 <_ZdlPvj>
   d7c66:	bd38      	pop	{r3, r4, r5, pc}

000d7c68 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7c68:	b513      	push	{r0, r1, r4, lr}
   d7c6a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7c6c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7c70:	2300      	movs	r3, #0
   d7c72:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7c74:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7c76:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7c78:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7c7a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7c7c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7c7e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7c80:	f7ff fdad 	bl	d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c84:	4620      	mov	r0, r4
   d7c86:	b002      	add	sp, #8
   d7c88:	bd10      	pop	{r4, pc}

000d7c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7c8c:	460c      	mov	r4, r1
   d7c8e:	ad02      	add	r5, sp, #8
   d7c90:	f854 3b04 	ldr.w	r3, [r4], #4
   d7c94:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7c98:	4606      	mov	r6, r0
   d7c9a:	460f      	mov	r7, r1
   d7c9c:	a801      	add	r0, sp, #4
   d7c9e:	4621      	mov	r1, r4
   d7ca0:	f7ff fd96 	bl	d77d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7ca4:	4629      	mov	r1, r5
   d7ca6:	4630      	mov	r0, r6
   d7ca8:	f7ff ffde 	bl	d7c68 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7cac:	a801      	add	r0, sp, #4
   d7cae:	f7ff fd96 	bl	d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	f7ff fd93 	bl	d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7cb8:	4638      	mov	r0, r7
   d7cba:	2108      	movs	r1, #8
   d7cbc:	f000 feb8 	bl	d8a30 <_ZdlPvj>
        return p;
    }
   d7cc0:	4630      	mov	r0, r6
   d7cc2:	b003      	add	sp, #12
   d7cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7cc8:	b538      	push	{r3, r4, r5, lr}
   d7cca:	2300      	movs	r3, #0
   d7ccc:	4604      	mov	r4, r0
   d7cce:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7cd0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7cd2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7cd4:	f7fc f9e1 	bl	d409a <_Znwj>
   d7cd8:	b128      	cbz	r0, d7ce6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7cda:	2301      	movs	r3, #1
   d7cdc:	6043      	str	r3, [r0, #4]
   d7cde:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7ce0:	4b02      	ldr	r3, [pc, #8]	; (d7cec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7ce2:	6003      	str	r3, [r0, #0]
   d7ce4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ce6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7ce8:	4620      	mov	r0, r4
   d7cea:	bd38      	pop	{r3, r4, r5, pc}
   d7cec:	000dbeec 	.word	0x000dbeec

000d7cf0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7cf0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7cf2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7cf4:	b90a      	cbnz	r2, d7cfa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7cf6:	f000 feae 	bl	d8a56 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7cfa:	68c3      	ldr	r3, [r0, #12]
    }
   d7cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7d00:	4718      	bx	r3

000d7d02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7d02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7d04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7d06:	f100 0110 	add.w	r1, r0, #16
   d7d0a:	f7ff fff1 	bl	d7cf0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7d0e:	bd08      	pop	{r3, pc}

000d7d10 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7d10:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7d12:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7d14:	b90a      	cbnz	r2, d7d1a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7d16:	f000 fe9e 	bl	d8a56 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7d1a:	68c3      	ldr	r3, [r0, #12]
    }
   d7d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7d20:	4718      	bx	r3

000d7d22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7d22:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7d24:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7d26:	f100 0110 	add.w	r1, r0, #16
   d7d2a:	f7ff fff1 	bl	d7d10 <_ZNKSt8functionIFvRKbEEclES1_>
   d7d2e:	bd08      	pop	{r3, pc}

000d7d30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7d30:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7d32:	2300      	movs	r3, #0
   d7d34:	6083      	str	r3, [r0, #8]
   d7d36:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7d38:	4604      	mov	r4, r0
   d7d3a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7d3c:	b12b      	cbz	r3, d7d4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7d3e:	2202      	movs	r2, #2
   d7d40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7d42:	68eb      	ldr	r3, [r5, #12]
   d7d44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7d46:	68ab      	ldr	r3, [r5, #8]
   d7d48:	60a3      	str	r3, [r4, #8]
	}
    }
   d7d4a:	4620      	mov	r0, r4
   d7d4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d52:	b089      	sub	sp, #36	; 0x24
   d7d54:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7d56:	4668      	mov	r0, sp
   d7d58:	f7ff ff4d 	bl	d7bf6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7d5c:	2300      	movs	r3, #0
   d7d5e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7d62:	f04f 0202 	mov.w	r2, #2
   d7d66:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7d6a:	2b00      	cmp	r3, #0
   d7d6c:	d103      	bne.n	d7d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7d6e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d7d72:	2900      	cmp	r1, #0
   d7d74:	d1f7      	bne.n	d7d66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7d76:	d002      	beq.n	d7d7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7d78:	f88d 3008 	strb.w	r3, [sp, #8]
   d7d7c:	e063      	b.n	d7e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7d7e:	f114 050c 	adds.w	r5, r4, #12
   d7d82:	d003      	beq.n	d7d8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7d84:	4669      	mov	r1, sp
   d7d86:	4628      	mov	r0, r5
   d7d88:	f7ff ff35 	bl	d7bf6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7d8c:	f3bf 8f5f 	dmb	sy
   d7d90:	2301      	movs	r3, #1
   d7d92:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7d94:	2000      	movs	r0, #0
   d7d96:	f104 0308 	add.w	r3, r4, #8
   d7d9a:	f3bf 8f5f 	dmb	sy
   d7d9e:	e853 6f00 	ldrex	r6, [r3]
   d7da2:	e843 0200 	strex	r2, r0, [r3]
   d7da6:	2a00      	cmp	r2, #0
   d7da8:	d1f9      	bne.n	d7d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7daa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7dae:	2e00      	cmp	r6, #0
   d7db0:	d049      	beq.n	d7e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7db2:	f7ff fbb3 	bl	d751c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7db6:	b120      	cbz	r0, d7dc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7db8:	4629      	mov	r1, r5
   d7dba:	4630      	mov	r0, r6
   d7dbc:	f7ff ff98 	bl	d7cf0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7dc0:	e03a      	b.n	d7e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7dc2:	4631      	mov	r1, r6
   d7dc4:	a802      	add	r0, sp, #8
   d7dc6:	f7ff ffb3 	bl	d7d30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7dca:	68e0      	ldr	r0, [r4, #12]
   d7dcc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7dd0:	b108      	cbz	r0, d7dd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7dd2:	f001 fe29 	bl	d9a28 <strdup>
   d7dd6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7dd8:	2010      	movs	r0, #16
   d7dda:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7dde:	f7fc f95c 	bl	d409a <_Znwj>
   d7de2:	4605      	mov	r5, r0
   d7de4:	b1e8      	cbz	r0, d7e22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7de6:	2700      	movs	r7, #0
   d7de8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7dea:	2018      	movs	r0, #24
   d7dec:	f7fc f955 	bl	d409a <_Znwj>
   d7df0:	4604      	mov	r4, r0
   d7df2:	b188      	cbz	r0, d7e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7df4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7df6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7df8:	a802      	add	r0, sp, #8
   d7dfa:	f7ff fe46 	bl	d7a8a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7dfe:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e00:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e02:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e04:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7e06:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7e08:	a906      	add	r1, sp, #24
   d7e0a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e0c:	60e3      	str	r3, [r4, #12]
   d7e0e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7e12:	9205      	str	r2, [sp, #20]
   d7e14:	f7ff feef 	bl	d7bf6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7e18:	4b0d      	ldr	r3, [pc, #52]	; (d7e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d7e1a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7e1c:	4b0d      	ldr	r3, [pc, #52]	; (d7e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7e1e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7e20:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d7e22:	a806      	add	r0, sp, #24
   d7e24:	f7ff fef6 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7e28:	a802      	add	r0, sp, #8
   d7e2a:	f7ff fdfc 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7e2e:	2200      	movs	r2, #0
   d7e30:	4629      	mov	r1, r5
   d7e32:	4809      	ldr	r0, [pc, #36]	; (d7e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7e34:	f7ff fb7a 	bl	d752c <application_thread_invoke>
   d7e38:	4630      	mov	r0, r6
   d7e3a:	f7ff fdf4 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7e3e:	2110      	movs	r1, #16
   d7e40:	4630      	mov	r0, r6
   d7e42:	f000 fdf5 	bl	d8a30 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7e46:	4668      	mov	r0, sp
   d7e48:	f7ff fee4 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
    }
   d7e4c:	b009      	add	sp, #36	; 0x24
   d7e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e50:	000d7d03 	.word	0x000d7d03
   d7e54:	000d7f79 	.word	0x000d7f79
   d7e58:	000d84e9 	.word	0x000d84e9

000d7e5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e60:	b08b      	sub	sp, #44	; 0x2c
   d7e62:	4606      	mov	r6, r0
   d7e64:	460f      	mov	r7, r1
   d7e66:	4690      	mov	r8, r2
   d7e68:	4699      	mov	r9, r3
   d7e6a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7e6e:	f7ff fbe1 	bl	d7634 <spark_cloud_flag_connected>
   d7e72:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7e74:	4683      	mov	fp, r0
   d7e76:	bb30      	cbnz	r0, d7ec6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7e78:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7e7c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7e7e:	a905      	add	r1, sp, #20
   d7e80:	4628      	mov	r0, r5
   d7e82:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7e86:	f7ff feb6 	bl	d7bf6 <_ZN8particle5ErrorC1EOS0_>
   d7e8a:	2014      	movs	r0, #20
   d7e8c:	f7fc f905 	bl	d409a <_Znwj>
   d7e90:	4604      	mov	r4, r0
   d7e92:	b158      	cbz	r0, d7eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7e94:	2302      	movs	r3, #2
   d7e96:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e98:	2301      	movs	r3, #1
   d7e9a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7e9c:	f8c0 b004 	str.w	fp, [r0, #4]
   d7ea0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7ea4:	4629      	mov	r1, r5
   d7ea6:	300c      	adds	r0, #12
   d7ea8:	f7ff fea5 	bl	d7bf6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7eac:	4630      	mov	r0, r6
   d7eae:	4621      	mov	r1, r4
   d7eb0:	f840 4b04 	str.w	r4, [r0], #4
   d7eb4:	f7ff ff08 	bl	d7cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7eb8:	4628      	mov	r0, r5
   d7eba:	f7ff feab 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7ebe:	a805      	add	r0, sp, #20
   d7ec0:	f7ff fea8 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
   d7ec4:	e052      	b.n	d7f6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7ec6:	2400      	movs	r4, #0
   d7ec8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7eca:	2014      	movs	r0, #20
   d7ecc:	606c      	str	r4, [r5, #4]
   d7ece:	60ac      	str	r4, [r5, #8]
   d7ed0:	9307      	str	r3, [sp, #28]
   d7ed2:	f7fc f8e2 	bl	d409a <_Znwj>
   d7ed6:	4601      	mov	r1, r0
   d7ed8:	b118      	cbz	r0, d7ee2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7eda:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7edc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7ede:	6044      	str	r4, [r0, #4]
   d7ee0:	6084      	str	r4, [r0, #8]
   d7ee2:	a804      	add	r0, sp, #16
   d7ee4:	9103      	str	r1, [sp, #12]
   d7ee6:	f7ff feef 	bl	d7cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7eea:	4b22      	ldr	r3, [pc, #136]	; (d7f74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7eec:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7eee:	2008      	movs	r0, #8
   d7ef0:	f7fc f8d3 	bl	d409a <_Znwj>
   d7ef4:	4604      	mov	r4, r0
   d7ef6:	b128      	cbz	r0, d7f04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7ef8:	9b03      	ldr	r3, [sp, #12]
   d7efa:	f840 3b04 	str.w	r3, [r0], #4
   d7efe:	a904      	add	r1, sp, #16
   d7f00:	f7ff fc66 	bl	d77d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7f04:	9500      	str	r5, [sp, #0]
   d7f06:	fa5f f38a 	uxtb.w	r3, sl
   d7f0a:	464a      	mov	r2, r9
   d7f0c:	4641      	mov	r1, r8
   d7f0e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7f10:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7f12:	f7ff fb97 	bl	d7644 <spark_send_event>
   d7f16:	b920      	cbnz	r0, d7f22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7f18:	9b03      	ldr	r3, [sp, #12]
   d7f1a:	785b      	ldrb	r3, [r3, #1]
   d7f1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7f20:	b183      	cbz	r3, d7f44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7f22:	9b03      	ldr	r3, [sp, #12]
   d7f24:	9305      	str	r3, [sp, #20]
   d7f26:	a904      	add	r1, sp, #16
   d7f28:	a806      	add	r0, sp, #24
   d7f2a:	f7ff fc51 	bl	d77d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7f2e:	a905      	add	r1, sp, #20
   d7f30:	4630      	mov	r0, r6
   d7f32:	f7ff fe99 	bl	d7c68 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f36:	a806      	add	r0, sp, #24
   d7f38:	f7ff fc51 	bl	d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f3c:	a804      	add	r0, sp, #16
   d7f3e:	f7ff fc4e 	bl	d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f42:	e013      	b.n	d7f6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7f44:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7f48:	a905      	add	r1, sp, #20
   d7f4a:	a803      	add	r0, sp, #12
   d7f4c:	9205      	str	r2, [sp, #20]
   d7f4e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7f52:	f7ff fefd 	bl	d7d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7f56:	a805      	add	r0, sp, #20
   d7f58:	f7ff fe5c 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7f5c:	a805      	add	r0, sp, #20
   d7f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7f60:	f7ff fe93 	bl	d7c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7f64:	a806      	add	r0, sp, #24
   d7f66:	f7ff fc3a 	bl	d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f6a:	e7da      	b.n	d7f22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7f6c:	4630      	mov	r0, r6
   d7f6e:	b00b      	add	sp, #44	; 0x2c
   d7f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f74:	000d80e9 	.word	0x000d80e9

000d7f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7f78:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f7c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7f7e:	d006      	beq.n	d7f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7f80:	2a03      	cmp	r2, #3
   d7f82:	d017      	beq.n	d7fb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7f84:	2a01      	cmp	r2, #1
   d7f86:	d122      	bne.n	d7fce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7f88:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7f8a:	6003      	str	r3, [r0, #0]
	      break;
   d7f8c:	e01f      	b.n	d7fce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7f8e:	2018      	movs	r0, #24
   d7f90:	680e      	ldr	r6, [r1, #0]
   d7f92:	f7fc f882 	bl	d409a <_Znwj>
   d7f96:	4605      	mov	r5, r0
   d7f98:	b150      	cbz	r0, d7fb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7f9a:	4631      	mov	r1, r6
   d7f9c:	f7ff fec8 	bl	d7d30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7fa0:	6930      	ldr	r0, [r6, #16]
   d7fa2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7fa6:	b108      	cbz	r0, d7fac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7fa8:	f001 fd3e 	bl	d9a28 <strdup>
   d7fac:	6128      	str	r0, [r5, #16]
   d7fae:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7fb0:	6025      	str	r5, [r4, #0]
   d7fb2:	e00c      	b.n	d7fce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7fb4:	6804      	ldr	r4, [r0, #0]
   d7fb6:	b154      	cbz	r4, d7fce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7fb8:	f104 0010 	add.w	r0, r4, #16
   d7fbc:	f7ff fe2a 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7fc0:	4620      	mov	r0, r4
   d7fc2:	f7ff fd30 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7fc6:	2118      	movs	r1, #24
   d7fc8:	4620      	mov	r0, r4
   d7fca:	f000 fd31 	bl	d8a30 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7fce:	2000      	movs	r0, #0
   d7fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7fd2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7fd2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7fd4:	2300      	movs	r3, #0
   d7fd6:	6083      	str	r3, [r0, #8]
   d7fd8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7fda:	4604      	mov	r4, r0
   d7fdc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7fde:	b12b      	cbz	r3, d7fec <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7fe0:	2202      	movs	r2, #2
   d7fe2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7fe4:	68eb      	ldr	r3, [r5, #12]
   d7fe6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7fe8:	68ab      	ldr	r3, [r5, #8]
   d7fea:	60a3      	str	r3, [r4, #8]
	}
    }
   d7fec:	4620      	mov	r0, r4
   d7fee:	bd38      	pop	{r3, r4, r5, pc}

000d7ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7ff0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7ff2:	b570      	push	{r4, r5, r6, lr}
   d7ff4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7ff6:	d006      	beq.n	d8006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7ff8:	2a03      	cmp	r2, #3
   d7ffa:	d011      	beq.n	d8020 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7ffc:	2a01      	cmp	r2, #1
   d7ffe:	d118      	bne.n	d8032 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8000:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8002:	6003      	str	r3, [r0, #0]
	      break;
   d8004:	e015      	b.n	d8032 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8006:	2014      	movs	r0, #20
   d8008:	680e      	ldr	r6, [r1, #0]
   d800a:	f7fc f846 	bl	d409a <_Znwj>
   d800e:	4605      	mov	r5, r0
   d8010:	b120      	cbz	r0, d801c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8012:	4631      	mov	r1, r6
   d8014:	f7ff ffdd 	bl	d7fd2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8018:	7c33      	ldrb	r3, [r6, #16]
   d801a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d801c:	6025      	str	r5, [r4, #0]
   d801e:	e008      	b.n	d8032 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8020:	6804      	ldr	r4, [r0, #0]
   d8022:	b134      	cbz	r4, d8032 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8024:	4620      	mov	r0, r4
   d8026:	f7ff fcfe 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d802a:	2114      	movs	r1, #20
   d802c:	4620      	mov	r0, r4
   d802e:	f000 fcff 	bl	d8a30 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8032:	2000      	movs	r0, #0
   d8034:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8038 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8038:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d803a:	2300      	movs	r3, #0
   d803c:	b087      	sub	sp, #28
   d803e:	460c      	mov	r4, r1
   d8040:	f3bf 8f5f 	dmb	sy
   d8044:	e850 6f00 	ldrex	r6, [r0]
   d8048:	e840 3200 	strex	r2, r3, [r0]
   d804c:	2a00      	cmp	r2, #0
   d804e:	d1f9      	bne.n	d8044 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d8050:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8054:	2e00      	cmp	r6, #0
   d8056:	d03f      	beq.n	d80d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8058:	4618      	mov	r0, r3
   d805a:	f7ff fa5f 	bl	d751c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d805e:	4607      	mov	r7, r0
   d8060:	b120      	cbz	r0, d806c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8062:	4621      	mov	r1, r4
   d8064:	4630      	mov	r0, r6
   d8066:	f7ff fe53 	bl	d7d10 <_ZNKSt8functionIFvRKbEEclES1_>
   d806a:	e02e      	b.n	d80ca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d806c:	4631      	mov	r1, r6
   d806e:	a801      	add	r0, sp, #4
   d8070:	f7ff ffaf 	bl	d7fd2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8074:	7823      	ldrb	r3, [r4, #0]
   d8076:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d807a:	2010      	movs	r0, #16
   d807c:	f7fc f80d 	bl	d409a <_Znwj>
   d8080:	4605      	mov	r5, r0
   d8082:	b1d0      	cbz	r0, d80ba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8084:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8086:	2014      	movs	r0, #20
   d8088:	f7fc f807 	bl	d409a <_Znwj>
   d808c:	4604      	mov	r4, r0
   d808e:	b178      	cbz	r0, d80b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8090:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8092:	4601      	mov	r1, r0
   d8094:	a801      	add	r0, sp, #4
   d8096:	f7ff fcf8 	bl	d7a8a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d809a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d809c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d809e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d80a0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d80a2:	9203      	str	r2, [sp, #12]
   d80a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d80a6:	60e3      	str	r3, [r4, #12]
   d80a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d80ac:	9204      	str	r2, [sp, #16]
   d80ae:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d80b0:	4b0a      	ldr	r3, [pc, #40]	; (d80dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d80b2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d80b4:	4b0a      	ldr	r3, [pc, #40]	; (d80e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d80b6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d80b8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d80ba:	a801      	add	r0, sp, #4
   d80bc:	f7ff fcb3 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d80c0:	2200      	movs	r2, #0
   d80c2:	4629      	mov	r1, r5
   d80c4:	4807      	ldr	r0, [pc, #28]	; (d80e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d80c6:	f7ff fa31 	bl	d752c <application_thread_invoke>
   d80ca:	4630      	mov	r0, r6
   d80cc:	f7ff fcab 	bl	d7a26 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d80d0:	2110      	movs	r1, #16
   d80d2:	4630      	mov	r0, r6
   d80d4:	f000 fcac 	bl	d8a30 <_ZdlPvj>
        }
    }
   d80d8:	b007      	add	sp, #28
   d80da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d80dc:	000d7d23 	.word	0x000d7d23
   d80e0:	000d7ff1 	.word	0x000d7ff1
   d80e4:	000d84e9 	.word	0x000d84e9

000d80e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d80e8:	b530      	push	{r4, r5, lr}
   d80ea:	b085      	sub	sp, #20
   d80ec:	4604      	mov	r4, r0
   d80ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d80f0:	4668      	mov	r0, sp
   d80f2:	4611      	mov	r1, r2
   d80f4:	f7ff fdc9 	bl	d7c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d80f8:	b17c      	cbz	r4, d811a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d80fa:	b224      	sxth	r4, r4
   d80fc:	4628      	mov	r0, r5
   d80fe:	b10d      	cbz	r5, d8104 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8100:	f001 fc92 	bl	d9a28 <strdup>
   d8104:	9002      	str	r0, [sp, #8]
   d8106:	a902      	add	r1, sp, #8
   d8108:	4668      	mov	r0, sp
   d810a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d810e:	f7ff fe1f 	bl	d7d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8112:	a802      	add	r0, sp, #8
   d8114:	f7ff fd7e 	bl	d7c14 <_ZN8particle5ErrorD1Ev>
   d8118:	e01d      	b.n	d8156 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d811a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d811c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8120:	f04f 0201 	mov.w	r2, #1
   d8124:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8128:	42a3      	cmp	r3, r4
   d812a:	d103      	bne.n	d8134 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d812c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8130:	2900      	cmp	r1, #0
   d8132:	d1f7      	bne.n	d8124 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8134:	d002      	beq.n	d813c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8136:	f88d 3008 	strb.w	r3, [sp, #8]
   d813a:	e00c      	b.n	d8156 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d813c:	f110 010c 	adds.w	r1, r0, #12
   d8140:	f04f 0301 	mov.w	r3, #1
   d8144:	bf18      	it	ne
   d8146:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8148:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d814c:	3004      	adds	r0, #4
   d814e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d8152:	f7ff ff71 	bl	d8038 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8156:	a801      	add	r0, sp, #4
   d8158:	f7ff fb41 	bl	d77de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d815c:	b005      	add	sp, #20
   d815e:	bd30      	pop	{r4, r5, pc}

000d8160 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8160:	4770      	bx	lr

000d8162 <_ZN9IPAddressD0Ev>:
   d8162:	b510      	push	{r4, lr}
   d8164:	2118      	movs	r1, #24
   d8166:	4604      	mov	r4, r0
   d8168:	f000 fc62 	bl	d8a30 <_ZdlPvj>
   d816c:	4620      	mov	r0, r4
   d816e:	bd10      	pop	{r4, pc}

000d8170 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8170:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8172:	7d03      	ldrb	r3, [r0, #20]
   d8174:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8176:	b08d      	sub	sp, #52	; 0x34
   d8178:	460e      	mov	r6, r1
   d817a:	f100 0704 	add.w	r7, r0, #4
   d817e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8182:	d002      	beq.n	d818a <_ZNK9IPAddress7printToER5Print+0x1a>
   d8184:	f100 0508 	add.w	r5, r0, #8
   d8188:	e018      	b.n	d81bc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d818a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d818c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d818e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8192:	232f      	movs	r3, #47	; 0x2f
   d8194:	462a      	mov	r2, r5
   d8196:	200a      	movs	r0, #10
   d8198:	f7ff f8c8 	bl	d732c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d819c:	4628      	mov	r0, r5
   d819e:	f001 fc5e 	bl	d9a5e <strlen>
   d81a2:	6833      	ldr	r3, [r6, #0]
   d81a4:	4602      	mov	r2, r0
   d81a6:	68db      	ldr	r3, [r3, #12]
   d81a8:	4629      	mov	r1, r5
   d81aa:	4630      	mov	r0, r6
   d81ac:	4798      	blx	r3
   d81ae:	e00f      	b.n	d81d0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d81b0:	b124      	cbz	r4, d81bc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d81b2:	212e      	movs	r1, #46	; 0x2e
   d81b4:	4630      	mov	r0, r6
   d81b6:	f7ff fb59 	bl	d786c <_ZN5Print5printEc>
   d81ba:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d81bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d81c0:	220a      	movs	r2, #10
   d81c2:	4630      	mov	r0, r6
   d81c4:	f7ff fb55 	bl	d7872 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d81c8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d81ca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d81cc:	d1f0      	bne.n	d81b0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d81ce:	4620      	mov	r0, r4
    }
    return n;
}
   d81d0:	b00d      	add	sp, #52	; 0x34
   d81d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d81d4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d81d4:	b510      	push	{r4, lr}
   d81d6:	4b05      	ldr	r3, [pc, #20]	; (d81ec <_ZN9IPAddressC1Ev+0x18>)
   d81d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d81da:	2211      	movs	r2, #17
   d81dc:	f840 3b04 	str.w	r3, [r0], #4
   d81e0:	2100      	movs	r1, #0
   d81e2:	f001 fbde 	bl	d99a2 <memset>
{
    clear();
}
   d81e6:	4620      	mov	r0, r4
   d81e8:	bd10      	pop	{r4, pc}
   d81ea:	bf00      	nop
   d81ec:	000dbf08 	.word	0x000dbf08

000d81f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d81f0:	4603      	mov	r3, r0
   d81f2:	4a07      	ldr	r2, [pc, #28]	; (d8210 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d81f4:	b510      	push	{r4, lr}
   d81f6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d81fa:	f101 0210 	add.w	r2, r1, #16
   d81fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d8202:	f843 4b04 	str.w	r4, [r3], #4
   d8206:	4291      	cmp	r1, r2
   d8208:	d1f9      	bne.n	d81fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d820a:	780a      	ldrb	r2, [r1, #0]
   d820c:	701a      	strb	r2, [r3, #0]
}
   d820e:	bd10      	pop	{r4, pc}
   d8210:	000dbf08 	.word	0x000dbf08

000d8214 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8214:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8216:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d821a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d821e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8222:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8226:	2304      	movs	r3, #4
   d8228:	6041      	str	r1, [r0, #4]
   d822a:	7503      	strb	r3, [r0, #20]
   d822c:	bd10      	pop	{r4, pc}

000d822e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d822e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8230:	780d      	ldrb	r5, [r1, #0]
   d8232:	788b      	ldrb	r3, [r1, #2]
   d8234:	784a      	ldrb	r2, [r1, #1]
   d8236:	78c9      	ldrb	r1, [r1, #3]
   d8238:	9100      	str	r1, [sp, #0]
   d823a:	4629      	mov	r1, r5
   d823c:	f7ff ffea 	bl	d8214 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8240:	b003      	add	sp, #12
   d8242:	bd30      	pop	{r4, r5, pc}

000d8244 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8244:	7441      	strb	r1, [r0, #17]
   d8246:	4770      	bx	lr

000d8248 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8248:	4770      	bx	lr

000d824a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d824a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d824c:	2100      	movs	r1, #0
   d824e:	7c00      	ldrb	r0, [r0, #16]
   d8250:	f7ff f904 	bl	d745c <HAL_USB_USART_Receive_Data>
}
   d8254:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8258:	bf28      	it	cs
   d825a:	f04f 30ff 	movcs.w	r0, #4294967295
   d825e:	bd08      	pop	{r3, pc}

000d8260 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8260:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8262:	2101      	movs	r1, #1
   d8264:	7c00      	ldrb	r0, [r0, #16]
   d8266:	f7ff f8f9 	bl	d745c <HAL_USB_USART_Receive_Data>
}
   d826a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d826e:	bf28      	it	cs
   d8270:	f04f 30ff 	movcs.w	r0, #4294967295
   d8274:	bd08      	pop	{r3, pc}

000d8276 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8276:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8278:	7c00      	ldrb	r0, [r0, #16]
   d827a:	f7ff f8e7 	bl	d744c <HAL_USB_USART_Available_Data_For_Write>
}
   d827e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8282:	bd08      	pop	{r3, pc}

000d8284 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8284:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8286:	7c00      	ldrb	r0, [r0, #16]
   d8288:	f7ff f8d8 	bl	d743c <HAL_USB_USART_Available_Data>
}
   d828c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8290:	bd08      	pop	{r3, pc}

000d8292 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8292:	7c00      	ldrb	r0, [r0, #16]
   d8294:	f7ff b8f2 	b.w	d747c <HAL_USB_USART_Flush_Data>

000d8298 <_ZN9USBSerialD0Ev>:
   d8298:	b510      	push	{r4, lr}
   d829a:	2114      	movs	r1, #20
   d829c:	4604      	mov	r4, r0
   d829e:	f000 fbc7 	bl	d8a30 <_ZdlPvj>
   d82a2:	4620      	mov	r0, r4
   d82a4:	bd10      	pop	{r4, pc}

000d82a6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d82a6:	b538      	push	{r3, r4, r5, lr}
   d82a8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d82aa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d82ac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d82ae:	f7ff f8cd 	bl	d744c <HAL_USB_USART_Available_Data_For_Write>
   d82b2:	2800      	cmp	r0, #0
   d82b4:	dc01      	bgt.n	d82ba <_ZN9USBSerial5writeEh+0x14>
   d82b6:	7c60      	ldrb	r0, [r4, #17]
   d82b8:	b128      	cbz	r0, d82c6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d82ba:	4629      	mov	r1, r5
   d82bc:	7c20      	ldrb	r0, [r4, #16]
   d82be:	f7ff f8d5 	bl	d746c <HAL_USB_USART_Send_Data>
   d82c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d82c6:	bd38      	pop	{r3, r4, r5, pc}

000d82c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d82c8:	b510      	push	{r4, lr}
   d82ca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d82cc:	2300      	movs	r3, #0
   d82ce:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d82d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d82d4:	60a3      	str	r3, [r4, #8]
   d82d6:	4b05      	ldr	r3, [pc, #20]	; (d82ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d82d8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d82da:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d82dc:	4608      	mov	r0, r1
{
  _serial = serial;
   d82de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d82e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d82e2:	4611      	mov	r1, r2
   d82e4:	f7ff f8a2 	bl	d742c <HAL_USB_USART_Init>
}
   d82e8:	4620      	mov	r0, r4
   d82ea:	bd10      	pop	{r4, pc}
   d82ec:	000dbf1c 	.word	0x000dbf1c

000d82f0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d82f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d82f2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d82f4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d82f6:	2100      	movs	r1, #0
   d82f8:	f001 fb53 	bl	d99a2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d82fc:	4620      	mov	r0, r4
   d82fe:	bd10      	pop	{r4, pc}

000d8300 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8300:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8302:	4d0e      	ldr	r5, [pc, #56]	; (d833c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8304:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8306:	a801      	add	r0, sp, #4
   d8308:	f7ff fff2 	bl	d82f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d830c:	6829      	ldr	r1, [r5, #0]
   d830e:	f011 0401 	ands.w	r4, r1, #1
   d8312:	d110      	bne.n	d8336 <_Z16_fetch_usbserialv+0x36>
   d8314:	4628      	mov	r0, r5
   d8316:	f7fb fec6 	bl	d40a6 <__cxa_guard_acquire>
   d831a:	b160      	cbz	r0, d8336 <_Z16_fetch_usbserialv+0x36>
   d831c:	aa01      	add	r2, sp, #4
   d831e:	4621      	mov	r1, r4
   d8320:	4807      	ldr	r0, [pc, #28]	; (d8340 <_Z16_fetch_usbserialv+0x40>)
   d8322:	f7ff ffd1 	bl	d82c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8326:	4628      	mov	r0, r5
   d8328:	f7fb fec2 	bl	d40b0 <__cxa_guard_release>
   d832c:	4a05      	ldr	r2, [pc, #20]	; (d8344 <_Z16_fetch_usbserialv+0x44>)
   d832e:	4906      	ldr	r1, [pc, #24]	; (d8348 <_Z16_fetch_usbserialv+0x48>)
   d8330:	4803      	ldr	r0, [pc, #12]	; (d8340 <_Z16_fetch_usbserialv+0x40>)
   d8332:	f000 fb6f 	bl	d8a14 <__aeabi_atexit>
	return _usbserial;
}
   d8336:	4802      	ldr	r0, [pc, #8]	; (d8340 <_Z16_fetch_usbserialv+0x40>)
   d8338:	b007      	add	sp, #28
   d833a:	bd30      	pop	{r4, r5, pc}
   d833c:	2003e3b0 	.word	0x2003e3b0
   d8340:	2003e3b4 	.word	0x2003e3b4
   d8344:	2003dac8 	.word	0x2003dac8
   d8348:	000d8249 	.word	0x000d8249

000d834c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d834c:	2200      	movs	r2, #0
   d834e:	4611      	mov	r1, r2
   d8350:	6840      	ldr	r0, [r0, #4]
   d8352:	f7ff b927 	b.w	d75a4 <network_ready>

000d8356 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8356:	2200      	movs	r2, #0
   d8358:	4611      	mov	r1, r2
   d835a:	6840      	ldr	r0, [r0, #4]
   d835c:	f7ff b942 	b.w	d75e4 <network_listening>

000d8360 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8360:	2200      	movs	r2, #0
   d8362:	4611      	mov	r1, r2
   d8364:	6840      	ldr	r0, [r0, #4]
   d8366:	f7ff b94d 	b.w	d7604 <network_get_listen_timeout>

000d836a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d836a:	2200      	movs	r2, #0
   d836c:	6840      	ldr	r0, [r0, #4]
   d836e:	f7ff b941 	b.w	d75f4 <network_set_listen_timeout>

000d8372 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8372:	2200      	movs	r2, #0
   d8374:	f081 0101 	eor.w	r1, r1, #1
   d8378:	6840      	ldr	r0, [r0, #4]
   d837a:	f7ff b92b 	b.w	d75d4 <network_listen>

000d837e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d837e:	2300      	movs	r3, #0
   d8380:	461a      	mov	r2, r3
   d8382:	4619      	mov	r1, r3
   d8384:	6840      	ldr	r0, [r0, #4]
   d8386:	f7ff b91d 	b.w	d75c4 <network_off>

000d838a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d838a:	2300      	movs	r3, #0
   d838c:	461a      	mov	r2, r3
   d838e:	4619      	mov	r1, r3
   d8390:	6840      	ldr	r0, [r0, #4]
   d8392:	f7ff b90f 	b.w	d75b4 <network_on>

000d8396 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8396:	2200      	movs	r2, #0
   d8398:	4611      	mov	r1, r2
   d839a:	6840      	ldr	r0, [r0, #4]
   d839c:	f7ff b8f2 	b.w	d7584 <network_connecting>

000d83a0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83a0:	2200      	movs	r2, #0
   d83a2:	2102      	movs	r1, #2
   d83a4:	6840      	ldr	r0, [r0, #4]
   d83a6:	f7ff b8f5 	b.w	d7594 <network_disconnect>

000d83aa <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d83aa:	2300      	movs	r3, #0
   d83ac:	461a      	mov	r2, r3
   d83ae:	6840      	ldr	r0, [r0, #4]
   d83b0:	f7ff b8e0 	b.w	d7574 <network_connect>

000d83b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d83b4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d83b6:	4c08      	ldr	r4, [pc, #32]	; (d83d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d83b8:	2528      	movs	r5, #40	; 0x28
   d83ba:	462a      	mov	r2, r5
   d83bc:	2100      	movs	r1, #0
   d83be:	4620      	mov	r0, r4
   d83c0:	f001 faef 	bl	d99a2 <memset>
        cid = -1;
   d83c4:	f04f 33ff 	mov.w	r3, #4294967295
   d83c8:	6063      	str	r3, [r4, #4]
   d83ca:	4b04      	ldr	r3, [pc, #16]	; (d83dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d83cc:	8025      	strh	r5, [r4, #0]
   d83ce:	2204      	movs	r2, #4
   d83d0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d83d2:	4a03      	ldr	r2, [pc, #12]	; (d83e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d83d4:	601a      	str	r2, [r3, #0]
   d83d6:	bd38      	pop	{r3, r4, r5, pc}
   d83d8:	2003e3d0 	.word	0x2003e3d0
   d83dc:	2003e3c8 	.word	0x2003e3c8
   d83e0:	000dbf4c 	.word	0x000dbf4c

000d83e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d83e4:	4770      	bx	lr

000d83e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83e6:	7441      	strb	r1, [r0, #17]
   d83e8:	4770      	bx	lr

000d83ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d83ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d83ec:	7c00      	ldrb	r0, [r0, #16]
   d83ee:	f7fe ffdd 	bl	d73ac <HAL_USART_Available_Data_For_Write>
}
   d83f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83f6:	bd08      	pop	{r3, pc}

000d83f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d83f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d83fa:	7c00      	ldrb	r0, [r0, #16]
   d83fc:	f7fe ffae 	bl	d735c <HAL_USART_Available_Data>
}
   d8400:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8404:	bd08      	pop	{r3, pc}

000d8406 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8406:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8408:	7c00      	ldrb	r0, [r0, #16]
   d840a:	f7fe ffb7 	bl	d737c <HAL_USART_Peek_Data>
}
   d840e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8412:	bf28      	it	cs
   d8414:	f04f 30ff 	movcs.w	r0, #4294967295
   d8418:	bd08      	pop	{r3, pc}

000d841a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d841a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d841c:	7c00      	ldrb	r0, [r0, #16]
   d841e:	f7fe ffa5 	bl	d736c <HAL_USART_Read_Data>
}
   d8422:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8426:	bf28      	it	cs
   d8428:	f04f 30ff 	movcs.w	r0, #4294967295
   d842c:	bd08      	pop	{r3, pc}

000d842e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d842e:	7c00      	ldrb	r0, [r0, #16]
   d8430:	f7fe bfac 	b.w	d738c <HAL_USART_Flush_Data>

000d8434 <_ZN11USARTSerialD0Ev>:
   d8434:	b510      	push	{r4, lr}
   d8436:	2114      	movs	r1, #20
   d8438:	4604      	mov	r4, r0
   d843a:	f000 faf9 	bl	d8a30 <_ZdlPvj>
   d843e:	4620      	mov	r0, r4
   d8440:	bd10      	pop	{r4, pc}

000d8442 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8442:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8444:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8446:	4604      	mov	r4, r0
   d8448:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d844a:	b925      	cbnz	r5, d8456 <_ZN11USARTSerial5writeEh+0x14>
   d844c:	7c00      	ldrb	r0, [r0, #16]
   d844e:	f7fe ffad 	bl	d73ac <HAL_USART_Available_Data_For_Write>
   d8452:	2800      	cmp	r0, #0
   d8454:	dd05      	ble.n	d8462 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8456:	4631      	mov	r1, r6
   d8458:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d845a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d845e:	f7fe bf75 	b.w	d734c <HAL_USART_Write_Data>
  }
  return 0;
}
   d8462:	4628      	mov	r0, r5
   d8464:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8468 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8468:	b510      	push	{r4, lr}
   d846a:	4604      	mov	r4, r0
   d846c:	4608      	mov	r0, r1
   d846e:	4611      	mov	r1, r2
   d8470:	2200      	movs	r2, #0
   d8472:	6062      	str	r2, [r4, #4]
   d8474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8478:	60a2      	str	r2, [r4, #8]
   d847a:	4a05      	ldr	r2, [pc, #20]	; (d8490 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d847c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d847e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8480:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8482:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8484:	461a      	mov	r2, r3
   d8486:	f7fe ff59 	bl	d733c <HAL_USART_Init>
}
   d848a:	4620      	mov	r0, r4
   d848c:	bd10      	pop	{r4, pc}
   d848e:	bf00      	nop
   d8490:	000dbf80 	.word	0x000dbf80

000d8494 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8494:	7c00      	ldrb	r0, [r0, #16]
   d8496:	f7fe bf81 	b.w	d739c <HAL_USART_Is_Enabled>
	...

000d849c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d849c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d849e:	4d0c      	ldr	r5, [pc, #48]	; (d84d0 <_Z22__fetch_global_Serial1v+0x34>)
   d84a0:	6829      	ldr	r1, [r5, #0]
   d84a2:	f011 0401 	ands.w	r4, r1, #1
   d84a6:	d111      	bne.n	d84cc <_Z22__fetch_global_Serial1v+0x30>
   d84a8:	4628      	mov	r0, r5
   d84aa:	f7fb fdfc 	bl	d40a6 <__cxa_guard_acquire>
   d84ae:	b168      	cbz	r0, d84cc <_Z22__fetch_global_Serial1v+0x30>
   d84b0:	4a08      	ldr	r2, [pc, #32]	; (d84d4 <_Z22__fetch_global_Serial1v+0x38>)
   d84b2:	4b09      	ldr	r3, [pc, #36]	; (d84d8 <_Z22__fetch_global_Serial1v+0x3c>)
   d84b4:	4809      	ldr	r0, [pc, #36]	; (d84dc <_Z22__fetch_global_Serial1v+0x40>)
   d84b6:	4621      	mov	r1, r4
   d84b8:	f7ff ffd6 	bl	d8468 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d84bc:	4628      	mov	r0, r5
   d84be:	f7fb fdf7 	bl	d40b0 <__cxa_guard_release>
   d84c2:	4a07      	ldr	r2, [pc, #28]	; (d84e0 <_Z22__fetch_global_Serial1v+0x44>)
   d84c4:	4907      	ldr	r1, [pc, #28]	; (d84e4 <_Z22__fetch_global_Serial1v+0x48>)
   d84c6:	4805      	ldr	r0, [pc, #20]	; (d84dc <_Z22__fetch_global_Serial1v+0x40>)
   d84c8:	f000 faa4 	bl	d8a14 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d84cc:	4803      	ldr	r0, [pc, #12]	; (d84dc <_Z22__fetch_global_Serial1v+0x40>)
   d84ce:	bd38      	pop	{r3, r4, r5, pc}
   d84d0:	2003e490 	.word	0x2003e490
   d84d4:	2003e494 	.word	0x2003e494
   d84d8:	2003e40c 	.word	0x2003e40c
   d84dc:	2003e3f8 	.word	0x2003e3f8
   d84e0:	2003dac8 	.word	0x2003dac8
   d84e4:	000d83e5 	.word	0x000d83e5

000d84e8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d84e8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d84ea:	6883      	ldr	r3, [r0, #8]
   d84ec:	4604      	mov	r4, r0
   d84ee:	b90b      	cbnz	r3, d84f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d84f0:	f000 fab1 	bl	d8a56 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d84f4:	68c3      	ldr	r3, [r0, #12]
   d84f6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d84f8:	68a3      	ldr	r3, [r4, #8]
   d84fa:	b11b      	cbz	r3, d8504 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d84fc:	2203      	movs	r2, #3
   d84fe:	4621      	mov	r1, r4
   d8500:	4620      	mov	r0, r4
   d8502:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8504:	4620      	mov	r0, r4
   d8506:	2110      	movs	r1, #16
}
   d8508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d850c:	f000 ba90 	b.w	d8a30 <_ZdlPvj>

000d8510 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8510:	4770      	bx	lr

000d8512 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8514:	4606      	mov	r6, r0
   d8516:	4615      	mov	r5, r2
   d8518:	460c      	mov	r4, r1
   d851a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d851c:	42bc      	cmp	r4, r7
   d851e:	d006      	beq.n	d852e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8520:	6833      	ldr	r3, [r6, #0]
   d8522:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8526:	689b      	ldr	r3, [r3, #8]
   d8528:	4630      	mov	r0, r6
   d852a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d852c:	e7f6      	b.n	d851c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d852e:	4628      	mov	r0, r5
   d8530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8532 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8532:	2200      	movs	r2, #0
   d8534:	7c00      	ldrb	r0, [r0, #16]
   d8536:	f7fe bf41 	b.w	d73bc <HAL_I2C_Write_Data>

000d853a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d853a:	2100      	movs	r1, #0
   d853c:	7c00      	ldrb	r0, [r0, #16]
   d853e:	f7fe bf45 	b.w	d73cc <HAL_I2C_Available_Data>

000d8542 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8542:	2100      	movs	r1, #0
   d8544:	7c00      	ldrb	r0, [r0, #16]
   d8546:	f7fe bf49 	b.w	d73dc <HAL_I2C_Read_Data>

000d854a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d854a:	2100      	movs	r1, #0
   d854c:	7c00      	ldrb	r0, [r0, #16]
   d854e:	f7fe bf4d 	b.w	d73ec <HAL_I2C_Peek_Data>

000d8552 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8552:	2100      	movs	r1, #0
   d8554:	7c00      	ldrb	r0, [r0, #16]
   d8556:	f7fe bf51 	b.w	d73fc <HAL_I2C_Flush_Data>

000d855a <_ZN7TwoWireD0Ev>:
   d855a:	b510      	push	{r4, lr}
   d855c:	2114      	movs	r1, #20
   d855e:	4604      	mov	r4, r0
   d8560:	f000 fa66 	bl	d8a30 <_ZdlPvj>
   d8564:	4620      	mov	r0, r4
   d8566:	bd10      	pop	{r4, pc}

000d8568 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8568:	b510      	push	{r4, lr}
   d856a:	4604      	mov	r4, r0
   d856c:	2300      	movs	r3, #0
   d856e:	6063      	str	r3, [r4, #4]
   d8570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8574:	60a3      	str	r3, [r4, #8]
   d8576:	4b04      	ldr	r3, [pc, #16]	; (d8588 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8578:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d857a:	4608      	mov	r0, r1
   d857c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d857e:	4611      	mov	r1, r2
   d8580:	f7fe ff4c 	bl	d741c <HAL_I2C_Init>
}
   d8584:	4620      	mov	r0, r4
   d8586:	bd10      	pop	{r4, pc}
   d8588:	000dbfb0 	.word	0x000dbfb0

000d858c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d858c:	2100      	movs	r1, #0
   d858e:	7c00      	ldrb	r0, [r0, #16]
   d8590:	f7fe bf3c 	b.w	d740c <HAL_I2C_Is_Enabled>

000d8594 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8594:	2200      	movs	r2, #0
   d8596:	4611      	mov	r1, r2
   d8598:	6840      	ldr	r0, [r0, #4]
   d859a:	f7ff b823 	b.w	d75e4 <network_listening>

000d859e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d859e:	2200      	movs	r2, #0
   d85a0:	4611      	mov	r1, r2
   d85a2:	6840      	ldr	r0, [r0, #4]
   d85a4:	f7ff b82e 	b.w	d7604 <network_get_listen_timeout>

000d85a8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d85a8:	2200      	movs	r2, #0
   d85aa:	6840      	ldr	r0, [r0, #4]
   d85ac:	f7ff b822 	b.w	d75f4 <network_set_listen_timeout>

000d85b0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d85b0:	2200      	movs	r2, #0
   d85b2:	f081 0101 	eor.w	r1, r1, #1
   d85b6:	6840      	ldr	r0, [r0, #4]
   d85b8:	f7ff b80c 	b.w	d75d4 <network_listen>

000d85bc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d85bc:	2300      	movs	r3, #0
   d85be:	461a      	mov	r2, r3
   d85c0:	2101      	movs	r1, #1
   d85c2:	6840      	ldr	r0, [r0, #4]
   d85c4:	f7fe bffe 	b.w	d75c4 <network_off>

000d85c8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d85c8:	2300      	movs	r3, #0
   d85ca:	461a      	mov	r2, r3
   d85cc:	4619      	mov	r1, r3
   d85ce:	6840      	ldr	r0, [r0, #4]
   d85d0:	f7fe bff0 	b.w	d75b4 <network_on>

000d85d4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d85d4:	2200      	movs	r2, #0
   d85d6:	4611      	mov	r1, r2
   d85d8:	6840      	ldr	r0, [r0, #4]
   d85da:	f7fe bfe3 	b.w	d75a4 <network_ready>

000d85de <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d85de:	2200      	movs	r2, #0
   d85e0:	4611      	mov	r1, r2
   d85e2:	6840      	ldr	r0, [r0, #4]
   d85e4:	f7fe bfce 	b.w	d7584 <network_connecting>

000d85e8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d85e8:	2200      	movs	r2, #0
   d85ea:	2102      	movs	r1, #2
   d85ec:	6840      	ldr	r0, [r0, #4]
   d85ee:	f7fe bfd1 	b.w	d7594 <network_disconnect>

000d85f2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d85f2:	2300      	movs	r3, #0
   d85f4:	461a      	mov	r2, r3
   d85f6:	6840      	ldr	r0, [r0, #4]
   d85f8:	f7fe bfbc 	b.w	d7574 <network_connect>

000d85fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d85fc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d85fe:	4605      	mov	r5, r0
   d8600:	b188      	cbz	r0, d8626 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8602:	6804      	ldr	r4, [r0, #0]
   d8604:	b14c      	cbz	r4, d861a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8606:	68a3      	ldr	r3, [r4, #8]
   d8608:	b11b      	cbz	r3, d8612 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d860a:	2203      	movs	r2, #3
   d860c:	4621      	mov	r1, r4
   d860e:	4620      	mov	r0, r4
   d8610:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8612:	2110      	movs	r1, #16
   d8614:	4620      	mov	r0, r4
   d8616:	f000 fa0b 	bl	d8a30 <_ZdlPvj>
   d861a:	4628      	mov	r0, r5
   d861c:	2114      	movs	r1, #20
      }
   d861e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8622:	f000 ba05 	b.w	d8a30 <_ZdlPvj>
   d8626:	bd38      	pop	{r3, r4, r5, pc}

000d8628 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8628:	b110      	cbz	r0, d8630 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d862a:	6803      	ldr	r3, [r0, #0]
   d862c:	685b      	ldr	r3, [r3, #4]
   d862e:	4718      	bx	r3
   d8630:	4770      	bx	lr

000d8632 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8632:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8634:	6803      	ldr	r3, [r0, #0]
   d8636:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8638:	b1bb      	cbz	r3, d866a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d863a:	6858      	ldr	r0, [r3, #4]
   d863c:	f7fe fe4e 	bl	d72dc <os_thread_is_current>
   d8640:	b978      	cbnz	r0, d8662 <_ZN6ThreadD1Ev+0x30>
   d8642:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8644:	7c5a      	ldrb	r2, [r3, #17]
   d8646:	b912      	cbnz	r2, d864e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8648:	6858      	ldr	r0, [r3, #4]
   d864a:	f7fe fe4f 	bl	d72ec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d864e:	6823      	ldr	r3, [r4, #0]
   d8650:	6858      	ldr	r0, [r3, #4]
   d8652:	f7fe fe53 	bl	d72fc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8656:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8658:	2300      	movs	r3, #0
   d865a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d865c:	b128      	cbz	r0, d866a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d865e:	f7ff ffcd 	bl	d85fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8662:	6820      	ldr	r0, [r4, #0]
   d8664:	b108      	cbz	r0, d866a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8666:	f7ff ffc9 	bl	d85fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d866a:	4620      	mov	r0, r4
   d866c:	bd10      	pop	{r4, pc}

000d866e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d866e:	b538      	push	{r3, r4, r5, lr}
   d8670:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8672:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8676:	b108      	cbz	r0, d867c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8678:	f7fb fd13 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d867c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8680:	b108      	cbz	r0, d8686 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8682:	f7fe fe4b 	bl	d731c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8686:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d868a:	b135      	cbz	r5, d869a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d868c:	4628      	mov	r0, r5
   d868e:	f7ff ffd0 	bl	d8632 <_ZN6ThreadD1Ev>
   d8692:	2104      	movs	r1, #4
   d8694:	4628      	mov	r0, r5
   d8696:	f000 f9cb 	bl	d8a30 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d869a:	6820      	ldr	r0, [r4, #0]
   d869c:	b108      	cbz	r0, d86a2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d869e:	f7ff ffc3 	bl	d8628 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d86a2:	4620      	mov	r0, r4
   d86a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d86a8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d86a8:	b510      	push	{r4, lr}
   d86aa:	4b04      	ldr	r3, [pc, #16]	; (d86bc <_ZN5spark9MeshClassD1Ev+0x14>)
   d86ac:	4604      	mov	r4, r0
   d86ae:	f840 3b08 	str.w	r3, [r0], #8
   d86b2:	f7ff ffdc 	bl	d866e <_ZN5spark11MeshPublishD1Ev>
   d86b6:	4620      	mov	r0, r4
   d86b8:	bd10      	pop	{r4, pc}
   d86ba:	bf00      	nop
   d86bc:	000dbfd8 	.word	0x000dbfd8

000d86c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d86c0:	b538      	push	{r3, r4, r5, lr}
   d86c2:	4c0e      	ldr	r4, [pc, #56]	; (d86fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d86c4:	4b0e      	ldr	r3, [pc, #56]	; (d8700 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d86c6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d86c8:	2500      	movs	r5, #0
   d86ca:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d86cc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d86d0:	6063      	str	r3, [r4, #4]
   d86d2:	60a5      	str	r5, [r4, #8]
   d86d4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d86d8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d86dc:	f7fe fe16 	bl	d730c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d86e0:	4b08      	ldr	r3, [pc, #32]	; (d8704 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d86e2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d86e6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d86ea:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d86ec:	4620      	mov	r0, r4
   d86ee:	4a06      	ldr	r2, [pc, #24]	; (d8708 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d86f0:	4906      	ldr	r1, [pc, #24]	; (d870c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d86f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d86f6:	f000 b98d 	b.w	d8a14 <__aeabi_atexit>
   d86fa:	bf00      	nop
   d86fc:	2003e518 	.word	0x2003e518
   d8700:	000dc00c 	.word	0x000dc00c
   d8704:	000dbfd8 	.word	0x000dbfd8
   d8708:	2003dac8 	.word	0x2003dac8
   d870c:	000d86a9 	.word	0x000d86a9

000d8710 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8710:	2300      	movs	r3, #0
   d8712:	461a      	mov	r2, r3
   d8714:	6840      	ldr	r0, [r0, #4]
   d8716:	f7fe bf2d 	b.w	d7574 <network_connect>

000d871a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d871a:	2200      	movs	r2, #0
   d871c:	2102      	movs	r1, #2
   d871e:	6840      	ldr	r0, [r0, #4]
   d8720:	f7fe bf38 	b.w	d7594 <network_disconnect>

000d8724 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8724:	2200      	movs	r2, #0
   d8726:	4611      	mov	r1, r2
   d8728:	6840      	ldr	r0, [r0, #4]
   d872a:	f7fe bf2b 	b.w	d7584 <network_connecting>

000d872e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d872e:	2200      	movs	r2, #0
   d8730:	4611      	mov	r1, r2
   d8732:	6840      	ldr	r0, [r0, #4]
   d8734:	f7fe bf36 	b.w	d75a4 <network_ready>

000d8738 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8738:	2300      	movs	r3, #0
   d873a:	461a      	mov	r2, r3
   d873c:	4619      	mov	r1, r3
   d873e:	6840      	ldr	r0, [r0, #4]
   d8740:	f7fe bf38 	b.w	d75b4 <network_on>

000d8744 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8744:	2300      	movs	r3, #0
   d8746:	461a      	mov	r2, r3
   d8748:	4619      	mov	r1, r3
   d874a:	6840      	ldr	r0, [r0, #4]
   d874c:	f7fe bf3a 	b.w	d75c4 <network_off>

000d8750 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8750:	2200      	movs	r2, #0
   d8752:	f081 0101 	eor.w	r1, r1, #1
   d8756:	6840      	ldr	r0, [r0, #4]
   d8758:	f7fe bf3c 	b.w	d75d4 <network_listen>

000d875c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d875c:	2200      	movs	r2, #0
   d875e:	6840      	ldr	r0, [r0, #4]
   d8760:	f7fe bf48 	b.w	d75f4 <network_set_listen_timeout>

000d8764 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8764:	2200      	movs	r2, #0
   d8766:	4611      	mov	r1, r2
   d8768:	6840      	ldr	r0, [r0, #4]
   d876a:	f7fe bf4b 	b.w	d7604 <network_get_listen_timeout>

000d876e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d876e:	2200      	movs	r2, #0
   d8770:	4611      	mov	r1, r2
   d8772:	6840      	ldr	r0, [r0, #4]
   d8774:	f7fe bf36 	b.w	d75e4 <network_listening>

000d8778 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d877c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d877e:	b095      	sub	sp, #84	; 0x54
   d8780:	4616      	mov	r6, r2
   d8782:	460d      	mov	r5, r1
   d8784:	4607      	mov	r7, r0
    IPAddress addr;
   d8786:	f7ff fd25 	bl	d81d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d878a:	4621      	mov	r1, r4
   d878c:	2220      	movs	r2, #32
   d878e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8790:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8792:	f001 f906 	bl	d99a2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8796:	2340      	movs	r3, #64	; 0x40
   d8798:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d879a:	4621      	mov	r1, r4
   d879c:	466b      	mov	r3, sp
   d879e:	aa0c      	add	r2, sp, #48	; 0x30
   d87a0:	4630      	mov	r0, r6
   d87a2:	f7fe fcfb 	bl	d719c <netdb_getaddrinfo>
    if (!r) {
   d87a6:	4604      	mov	r4, r0
   d87a8:	2800      	cmp	r0, #0
   d87aa:	d144      	bne.n	d8836 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d87ac:	4602      	mov	r2, r0
   d87ae:	2101      	movs	r1, #1
   d87b0:	6868      	ldr	r0, [r5, #4]
   d87b2:	f7fe fef7 	bl	d75a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d87b6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d87b8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d87ba:	4622      	mov	r2, r4
   d87bc:	6868      	ldr	r0, [r5, #4]
   d87be:	f7fe fef1 	bl	d75a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d87c2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d87c4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d87c6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d87c8:	2e00      	cmp	r6, #0
   d87ca:	d034      	beq.n	d8836 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d87cc:	2900      	cmp	r1, #0
   d87ce:	d132      	bne.n	d8836 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d87d0:	6873      	ldr	r3, [r6, #4]
   d87d2:	2b02      	cmp	r3, #2
   d87d4:	d002      	beq.n	d87dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d87d6:	2b0a      	cmp	r3, #10
   d87d8:	d009      	beq.n	d87ee <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d87da:	e02a      	b.n	d8832 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d87dc:	f1b8 0f00 	cmp.w	r8, #0
   d87e0:	d027      	beq.n	d8832 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d87e2:	6971      	ldr	r1, [r6, #20]
   d87e4:	4638      	mov	r0, r7
   d87e6:	3104      	adds	r1, #4
   d87e8:	f7ff fd21 	bl	d822e <_ZN9IPAddressaSEPKh>
   d87ec:	e020      	b.n	d8830 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d87ee:	f1b9 0f00 	cmp.w	r9, #0
   d87f2:	d01e      	beq.n	d8832 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d87f4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d87f6:	2211      	movs	r2, #17
   d87f8:	a801      	add	r0, sp, #4
   d87fa:	f001 f8d2 	bl	d99a2 <memset>
                    a.v = 6;
   d87fe:	2306      	movs	r3, #6
   d8800:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8804:	ad01      	add	r5, sp, #4
   d8806:	f104 0308 	add.w	r3, r4, #8
   d880a:	3418      	adds	r4, #24
   d880c:	6818      	ldr	r0, [r3, #0]
   d880e:	6859      	ldr	r1, [r3, #4]
   d8810:	462a      	mov	r2, r5
   d8812:	c203      	stmia	r2!, {r0, r1}
   d8814:	3308      	adds	r3, #8
   d8816:	42a3      	cmp	r3, r4
   d8818:	4615      	mov	r5, r2
   d881a:	d1f7      	bne.n	d880c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d881c:	a901      	add	r1, sp, #4
   d881e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8820:	ad07      	add	r5, sp, #28
   d8822:	f7ff fce5 	bl	d81f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8828:	1d3c      	adds	r4, r7, #4
   d882a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d882c:	682b      	ldr	r3, [r5, #0]
   d882e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8830:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8832:	69f6      	ldr	r6, [r6, #28]
   d8834:	e7c8      	b.n	d87c8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8836:	9800      	ldr	r0, [sp, #0]
   d8838:	f7fe fca8 	bl	d718c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d883c:	4638      	mov	r0, r7
   d883e:	b015      	add	sp, #84	; 0x54
   d8840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8844 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8844:	4b02      	ldr	r3, [pc, #8]	; (d8850 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8846:	4a03      	ldr	r2, [pc, #12]	; (d8854 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8848:	601a      	str	r2, [r3, #0]
   d884a:	2200      	movs	r2, #0
   d884c:	605a      	str	r2, [r3, #4]
   d884e:	4770      	bx	lr
   d8850:	2003e6ec 	.word	0x2003e6ec
   d8854:	000dc00c 	.word	0x000dc00c

000d8858 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8858:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d885a:	4e18      	ldr	r6, [pc, #96]	; (d88bc <pinAvailable+0x64>)
   d885c:	6831      	ldr	r1, [r6, #0]
   d885e:	f011 0501 	ands.w	r5, r1, #1
   d8862:	4604      	mov	r4, r0
   d8864:	d10a      	bne.n	d887c <pinAvailable+0x24>
   d8866:	4630      	mov	r0, r6
   d8868:	f7fb fc1d 	bl	d40a6 <__cxa_guard_acquire>
   d886c:	b130      	cbz	r0, d887c <pinAvailable+0x24>
   d886e:	4629      	mov	r1, r5
   d8870:	4813      	ldr	r0, [pc, #76]	; (d88c0 <pinAvailable+0x68>)
   d8872:	f7fe ff6d 	bl	d7750 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8876:	4630      	mov	r0, r6
   d8878:	f7fb fc1a 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d887c:	4810      	ldr	r0, [pc, #64]	; (d88c0 <pinAvailable+0x68>)
   d887e:	f7fe ff71 	bl	d7764 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8882:	b128      	cbz	r0, d8890 <pinAvailable+0x38>
   d8884:	f1a4 030b 	sub.w	r3, r4, #11
   d8888:	2b02      	cmp	r3, #2
   d888a:	d801      	bhi.n	d8890 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d888c:	2000      	movs	r0, #0
   d888e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8890:	f000 f89a 	bl	d89c8 <_Z19__fetch_global_Wirev>
   d8894:	f7ff fe7a 	bl	d858c <_ZN7TwoWire9isEnabledEv>
   d8898:	b108      	cbz	r0, d889e <pinAvailable+0x46>
   d889a:	2c01      	cmp	r4, #1
   d889c:	d9f6      	bls.n	d888c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d889e:	f7ff fdfd 	bl	d849c <_Z22__fetch_global_Serial1v>
   d88a2:	f7ff fdf7 	bl	d8494 <_ZN11USARTSerial9isEnabledEv>
   d88a6:	b118      	cbz	r0, d88b0 <pinAvailable+0x58>
   d88a8:	f1a4 0309 	sub.w	r3, r4, #9
   d88ac:	2b01      	cmp	r3, #1
   d88ae:	d9ed      	bls.n	d888c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d88b0:	2c23      	cmp	r4, #35	; 0x23
   d88b2:	bf8c      	ite	hi
   d88b4:	2000      	movhi	r0, #0
   d88b6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d88b8:	bd70      	pop	{r4, r5, r6, pc}
   d88ba:	bf00      	nop
   d88bc:	2003e6f4 	.word	0x2003e6f4
   d88c0:	2003e6f8 	.word	0x2003e6f8

000d88c4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d88c4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d88c6:	b538      	push	{r3, r4, r5, lr}
   d88c8:	4604      	mov	r4, r0
   d88ca:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d88cc:	d80a      	bhi.n	d88e4 <pinMode+0x20>
   d88ce:	29ff      	cmp	r1, #255	; 0xff
   d88d0:	d008      	beq.n	d88e4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d88d2:	f7ff ffc1 	bl	d8858 <pinAvailable>
   d88d6:	b128      	cbz	r0, d88e4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d88d8:	4629      	mov	r1, r5
   d88da:	4620      	mov	r0, r4
}
   d88dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d88e0:	f7fe bc74 	b.w	d71cc <HAL_Pin_Mode>
   d88e4:	bd38      	pop	{r3, r4, r5, pc}

000d88e6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d88e6:	b538      	push	{r3, r4, r5, lr}
   d88e8:	4604      	mov	r4, r0
   d88ea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d88ec:	f7fe fc76 	bl	d71dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d88f0:	28ff      	cmp	r0, #255	; 0xff
   d88f2:	d010      	beq.n	d8916 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d88f4:	2806      	cmp	r0, #6
   d88f6:	d804      	bhi.n	d8902 <digitalWrite+0x1c>
   d88f8:	234d      	movs	r3, #77	; 0x4d
   d88fa:	fa23 f000 	lsr.w	r0, r3, r0
   d88fe:	07c3      	lsls	r3, r0, #31
   d8900:	d409      	bmi.n	d8916 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8902:	4620      	mov	r0, r4
   d8904:	f7ff ffa8 	bl	d8858 <pinAvailable>
   d8908:	b128      	cbz	r0, d8916 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d890a:	4629      	mov	r1, r5
   d890c:	4620      	mov	r0, r4
}
   d890e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8912:	f7fe bc6b 	b.w	d71ec <HAL_GPIO_Write>
   d8916:	bd38      	pop	{r3, r4, r5, pc}

000d8918 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8918:	b510      	push	{r4, lr}
   d891a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d891c:	f7fe fc5e 	bl	d71dc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8920:	3804      	subs	r0, #4
   d8922:	b2c0      	uxtb	r0, r0
   d8924:	2801      	cmp	r0, #1
   d8926:	d908      	bls.n	d893a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8928:	4620      	mov	r0, r4
   d892a:	f7ff ff95 	bl	d8858 <pinAvailable>
   d892e:	b120      	cbz	r0, d893a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8930:	4620      	mov	r0, r4
}
   d8932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8936:	f7fe bc61 	b.w	d71fc <HAL_GPIO_Read>
}
   d893a:	2000      	movs	r0, #0
   d893c:	bd10      	pop	{r4, pc}

000d893e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d893e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8940:	b510      	push	{r4, lr}
   d8942:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8944:	bf9c      	itt	ls
   d8946:	340e      	addls	r4, #14
   d8948:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d894a:	4620      	mov	r0, r4
   d894c:	f7ff ff84 	bl	d8858 <pinAvailable>
   d8950:	b150      	cbz	r0, d8968 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8952:	2103      	movs	r1, #3
   d8954:	4620      	mov	r0, r4
   d8956:	f7fe fc31 	bl	d71bc <HAL_Validate_Pin_Function>
   d895a:	2803      	cmp	r0, #3
   d895c:	d104      	bne.n	d8968 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d895e:	4620      	mov	r0, r4
}
   d8960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8964:	f7fe bc52 	b.w	d720c <HAL_ADC_Read>
}
   d8968:	2000      	movs	r0, #0
   d896a:	bd10      	pop	{r4, pc}

000d896c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d896c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d896e:	4c07      	ldr	r4, [pc, #28]	; (d898c <_Z21__fetch_global_EEPROMv+0x20>)
   d8970:	6823      	ldr	r3, [r4, #0]
   d8972:	07db      	lsls	r3, r3, #31
   d8974:	d408      	bmi.n	d8988 <_Z21__fetch_global_EEPROMv+0x1c>
   d8976:	4620      	mov	r0, r4
   d8978:	f7fb fb95 	bl	d40a6 <__cxa_guard_acquire>
   d897c:	b120      	cbz	r0, d8988 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d897e:	f7fe fc85 	bl	d728c <HAL_EEPROM_Init>
   d8982:	4620      	mov	r0, r4
   d8984:	f7fb fb94 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d8988:	4801      	ldr	r0, [pc, #4]	; (d8990 <_Z21__fetch_global_EEPROMv+0x24>)
   d898a:	bd10      	pop	{r4, pc}
   d898c:	2003e704 	.word	0x2003e704
   d8990:	2003e708 	.word	0x2003e708

000d8994 <_Z17acquireWireBufferv>:
   d8994:	b570      	push	{r4, r5, r6, lr}
   d8996:	4604      	mov	r4, r0
   d8998:	2514      	movs	r5, #20
   d899a:	462a      	mov	r2, r5
   d899c:	4e09      	ldr	r6, [pc, #36]	; (d89c4 <_Z17acquireWireBufferv+0x30>)
   d899e:	2100      	movs	r1, #0
   d89a0:	f000 ffff 	bl	d99a2 <memset>
   d89a4:	8025      	strh	r5, [r4, #0]
   d89a6:	2520      	movs	r5, #32
   d89a8:	4631      	mov	r1, r6
   d89aa:	60a5      	str	r5, [r4, #8]
   d89ac:	6125      	str	r5, [r4, #16]
   d89ae:	4628      	mov	r0, r5
   d89b0:	f000 f840 	bl	d8a34 <_ZnajRKSt9nothrow_t>
   d89b4:	4631      	mov	r1, r6
   d89b6:	6060      	str	r0, [r4, #4]
   d89b8:	4628      	mov	r0, r5
   d89ba:	f000 f83b 	bl	d8a34 <_ZnajRKSt9nothrow_t>
   d89be:	60e0      	str	r0, [r4, #12]
   d89c0:	4620      	mov	r0, r4
   d89c2:	bd70      	pop	{r4, r5, r6, pc}
   d89c4:	000dc038 	.word	0x000dc038

000d89c8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d89c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d89ca:	4d0e      	ldr	r5, [pc, #56]	; (d8a04 <_Z19__fetch_global_Wirev+0x3c>)
   d89cc:	6829      	ldr	r1, [r5, #0]
   d89ce:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d89d2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d89d4:	d113      	bne.n	d89fe <_Z19__fetch_global_Wirev+0x36>
   d89d6:	4628      	mov	r0, r5
   d89d8:	f7fb fb65 	bl	d40a6 <__cxa_guard_acquire>
   d89dc:	b178      	cbz	r0, d89fe <_Z19__fetch_global_Wirev+0x36>
   d89de:	a801      	add	r0, sp, #4
   d89e0:	f7ff ffd8 	bl	d8994 <_Z17acquireWireBufferv>
   d89e4:	aa01      	add	r2, sp, #4
   d89e6:	4621      	mov	r1, r4
   d89e8:	4807      	ldr	r0, [pc, #28]	; (d8a08 <_Z19__fetch_global_Wirev+0x40>)
   d89ea:	f7ff fdbd 	bl	d8568 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d89ee:	4628      	mov	r0, r5
   d89f0:	f7fb fb5e 	bl	d40b0 <__cxa_guard_release>
   d89f4:	4a05      	ldr	r2, [pc, #20]	; (d8a0c <_Z19__fetch_global_Wirev+0x44>)
   d89f6:	4906      	ldr	r1, [pc, #24]	; (d8a10 <_Z19__fetch_global_Wirev+0x48>)
   d89f8:	4803      	ldr	r0, [pc, #12]	; (d8a08 <_Z19__fetch_global_Wirev+0x40>)
   d89fa:	f000 f80b 	bl	d8a14 <__aeabi_atexit>
	return wire;
}
   d89fe:	4802      	ldr	r0, [pc, #8]	; (d8a08 <_Z19__fetch_global_Wirev+0x40>)
   d8a00:	b007      	add	sp, #28
   d8a02:	bd30      	pop	{r4, r5, pc}
   d8a04:	2003e70c 	.word	0x2003e70c
   d8a08:	2003e710 	.word	0x2003e710
   d8a0c:	2003dac8 	.word	0x2003dac8
   d8a10:	000d8511 	.word	0x000d8511

000d8a14 <__aeabi_atexit>:
   d8a14:	460b      	mov	r3, r1
   d8a16:	4601      	mov	r1, r0
   d8a18:	4618      	mov	r0, r3
   d8a1a:	f000 bead 	b.w	d9778 <__cxa_atexit>
	...

000d8a20 <_ZSt15get_new_handlerv>:
   d8a20:	4b02      	ldr	r3, [pc, #8]	; (d8a2c <_ZSt15get_new_handlerv+0xc>)
   d8a22:	6818      	ldr	r0, [r3, #0]
   d8a24:	f3bf 8f5f 	dmb	sy
   d8a28:	4770      	bx	lr
   d8a2a:	bf00      	nop
   d8a2c:	2003e724 	.word	0x2003e724

000d8a30 <_ZdlPvj>:
   d8a30:	f7fb bb35 	b.w	d409e <_ZdlPv>

000d8a34 <_ZnajRKSt9nothrow_t>:
   d8a34:	f000 b800 	b.w	d8a38 <_ZnwjRKSt9nothrow_t>

000d8a38 <_ZnwjRKSt9nothrow_t>:
   d8a38:	b510      	push	{r4, lr}
   d8a3a:	2800      	cmp	r0, #0
   d8a3c:	bf14      	ite	ne
   d8a3e:	4604      	movne	r4, r0
   d8a40:	2401      	moveq	r4, #1
   d8a42:	4620      	mov	r0, r4
   d8a44:	f7fe fe1e 	bl	d7684 <malloc>
   d8a48:	b920      	cbnz	r0, d8a54 <_ZnwjRKSt9nothrow_t+0x1c>
   d8a4a:	f7ff ffe9 	bl	d8a20 <_ZSt15get_new_handlerv>
   d8a4e:	b108      	cbz	r0, d8a54 <_ZnwjRKSt9nothrow_t+0x1c>
   d8a50:	4780      	blx	r0
   d8a52:	e7f6      	b.n	d8a42 <_ZnwjRKSt9nothrow_t+0xa>
   d8a54:	bd10      	pop	{r4, pc}

000d8a56 <_ZSt25__throw_bad_function_callv>:
   d8a56:	b508      	push	{r3, lr}
   d8a58:	f7fe fe2c 	bl	d76b4 <abort>

000d8a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8a5c:	4b18      	ldr	r3, [pc, #96]	; (d8ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8a5e:	681a      	ldr	r2, [r3, #0]
   d8a60:	07d1      	lsls	r1, r2, #31
   d8a62:	bf5c      	itt	pl
   d8a64:	2201      	movpl	r2, #1
   d8a66:	601a      	strpl	r2, [r3, #0]
   d8a68:	4b16      	ldr	r3, [pc, #88]	; (d8ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8a6a:	681a      	ldr	r2, [r3, #0]
   d8a6c:	07d2      	lsls	r2, r2, #31
   d8a6e:	bf5c      	itt	pl
   d8a70:	2201      	movpl	r2, #1
   d8a72:	601a      	strpl	r2, [r3, #0]
   d8a74:	4b14      	ldr	r3, [pc, #80]	; (d8ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8a76:	681a      	ldr	r2, [r3, #0]
   d8a78:	07d0      	lsls	r0, r2, #31
   d8a7a:	bf5c      	itt	pl
   d8a7c:	2201      	movpl	r2, #1
   d8a7e:	601a      	strpl	r2, [r3, #0]
   d8a80:	4b12      	ldr	r3, [pc, #72]	; (d8acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8a82:	681a      	ldr	r2, [r3, #0]
   d8a84:	07d1      	lsls	r1, r2, #31
   d8a86:	bf5c      	itt	pl
   d8a88:	2201      	movpl	r2, #1
   d8a8a:	601a      	strpl	r2, [r3, #0]
   d8a8c:	4b10      	ldr	r3, [pc, #64]	; (d8ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8a8e:	681a      	ldr	r2, [r3, #0]
   d8a90:	07d2      	lsls	r2, r2, #31
   d8a92:	bf5c      	itt	pl
   d8a94:	2201      	movpl	r2, #1
   d8a96:	601a      	strpl	r2, [r3, #0]
   d8a98:	4b0e      	ldr	r3, [pc, #56]	; (d8ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8a9a:	681a      	ldr	r2, [r3, #0]
   d8a9c:	07d0      	lsls	r0, r2, #31
   d8a9e:	bf5c      	itt	pl
   d8aa0:	2201      	movpl	r2, #1
   d8aa2:	601a      	strpl	r2, [r3, #0]
   d8aa4:	4b0c      	ldr	r3, [pc, #48]	; (d8ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8aa6:	681a      	ldr	r2, [r3, #0]
   d8aa8:	07d1      	lsls	r1, r2, #31
   d8aaa:	bf5c      	itt	pl
   d8aac:	2201      	movpl	r2, #1
   d8aae:	601a      	strpl	r2, [r3, #0]
   d8ab0:	4b0a      	ldr	r3, [pc, #40]	; (d8adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8ab2:	681a      	ldr	r2, [r3, #0]
   d8ab4:	07d2      	lsls	r2, r2, #31
   d8ab6:	bf5c      	itt	pl
   d8ab8:	2201      	movpl	r2, #1
   d8aba:	601a      	strpl	r2, [r3, #0]
   d8abc:	4770      	bx	lr
   d8abe:	bf00      	nop
   d8ac0:	2003e744 	.word	0x2003e744
   d8ac4:	2003e740 	.word	0x2003e740
   d8ac8:	2003e73c 	.word	0x2003e73c
   d8acc:	2003e738 	.word	0x2003e738
   d8ad0:	2003e734 	.word	0x2003e734
   d8ad4:	2003e730 	.word	0x2003e730
   d8ad8:	2003e72c 	.word	0x2003e72c
   d8adc:	2003e728 	.word	0x2003e728

000d8ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8ae0:	4b24      	ldr	r3, [pc, #144]	; (d8b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8ae2:	681a      	ldr	r2, [r3, #0]
   d8ae4:	07d0      	lsls	r0, r2, #31
   d8ae6:	bf5c      	itt	pl
   d8ae8:	2201      	movpl	r2, #1
   d8aea:	601a      	strpl	r2, [r3, #0]
   d8aec:	4b22      	ldr	r3, [pc, #136]	; (d8b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8aee:	681a      	ldr	r2, [r3, #0]
   d8af0:	07d1      	lsls	r1, r2, #31
   d8af2:	bf5c      	itt	pl
   d8af4:	2201      	movpl	r2, #1
   d8af6:	601a      	strpl	r2, [r3, #0]
   d8af8:	4b20      	ldr	r3, [pc, #128]	; (d8b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8afa:	681a      	ldr	r2, [r3, #0]
   d8afc:	07d2      	lsls	r2, r2, #31
   d8afe:	bf5c      	itt	pl
   d8b00:	2201      	movpl	r2, #1
   d8b02:	601a      	strpl	r2, [r3, #0]
   d8b04:	4b1e      	ldr	r3, [pc, #120]	; (d8b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8b06:	681a      	ldr	r2, [r3, #0]
   d8b08:	07d0      	lsls	r0, r2, #31
   d8b0a:	bf5c      	itt	pl
   d8b0c:	2201      	movpl	r2, #1
   d8b0e:	601a      	strpl	r2, [r3, #0]
   d8b10:	4b1c      	ldr	r3, [pc, #112]	; (d8b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8b12:	681a      	ldr	r2, [r3, #0]
   d8b14:	07d1      	lsls	r1, r2, #31
   d8b16:	bf5c      	itt	pl
   d8b18:	2201      	movpl	r2, #1
   d8b1a:	601a      	strpl	r2, [r3, #0]
   d8b1c:	4b1a      	ldr	r3, [pc, #104]	; (d8b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8b1e:	681a      	ldr	r2, [r3, #0]
   d8b20:	07d2      	lsls	r2, r2, #31
   d8b22:	bf5c      	itt	pl
   d8b24:	2201      	movpl	r2, #1
   d8b26:	601a      	strpl	r2, [r3, #0]
   d8b28:	4b18      	ldr	r3, [pc, #96]	; (d8b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8b2a:	681a      	ldr	r2, [r3, #0]
   d8b2c:	07d0      	lsls	r0, r2, #31
   d8b2e:	bf5c      	itt	pl
   d8b30:	2201      	movpl	r2, #1
   d8b32:	601a      	strpl	r2, [r3, #0]
   d8b34:	4b16      	ldr	r3, [pc, #88]	; (d8b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8b36:	681a      	ldr	r2, [r3, #0]
   d8b38:	07d1      	lsls	r1, r2, #31
   d8b3a:	bf5c      	itt	pl
   d8b3c:	2201      	movpl	r2, #1
   d8b3e:	601a      	strpl	r2, [r3, #0]
   d8b40:	4b14      	ldr	r3, [pc, #80]	; (d8b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8b42:	681a      	ldr	r2, [r3, #0]
   d8b44:	07d2      	lsls	r2, r2, #31
   d8b46:	bf5c      	itt	pl
   d8b48:	2201      	movpl	r2, #1
   d8b4a:	601a      	strpl	r2, [r3, #0]
   d8b4c:	4b12      	ldr	r3, [pc, #72]	; (d8b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8b4e:	681a      	ldr	r2, [r3, #0]
   d8b50:	07d0      	lsls	r0, r2, #31
   d8b52:	bf5c      	itt	pl
   d8b54:	2201      	movpl	r2, #1
   d8b56:	601a      	strpl	r2, [r3, #0]
   d8b58:	4b10      	ldr	r3, [pc, #64]	; (d8b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8b5a:	681a      	ldr	r2, [r3, #0]
   d8b5c:	07d1      	lsls	r1, r2, #31
   d8b5e:	bf5c      	itt	pl
   d8b60:	2201      	movpl	r2, #1
   d8b62:	601a      	strpl	r2, [r3, #0]
   d8b64:	4b0e      	ldr	r3, [pc, #56]	; (d8ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8b66:	681a      	ldr	r2, [r3, #0]
   d8b68:	07d2      	lsls	r2, r2, #31
   d8b6a:	bf5c      	itt	pl
   d8b6c:	2201      	movpl	r2, #1
   d8b6e:	601a      	strpl	r2, [r3, #0]
   d8b70:	4770      	bx	lr
   d8b72:	bf00      	nop
   d8b74:	2003e774 	.word	0x2003e774
   d8b78:	2003e770 	.word	0x2003e770
   d8b7c:	2003e76c 	.word	0x2003e76c
   d8b80:	2003e768 	.word	0x2003e768
   d8b84:	2003e764 	.word	0x2003e764
   d8b88:	2003e760 	.word	0x2003e760
   d8b8c:	2003e75c 	.word	0x2003e75c
   d8b90:	2003e758 	.word	0x2003e758
   d8b94:	2003e754 	.word	0x2003e754
   d8b98:	2003e750 	.word	0x2003e750
   d8b9c:	2003e74c 	.word	0x2003e74c
   d8ba0:	2003e748 	.word	0x2003e748

000d8ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8ba4:	4b24      	ldr	r3, [pc, #144]	; (d8c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8ba6:	681a      	ldr	r2, [r3, #0]
   d8ba8:	07d0      	lsls	r0, r2, #31
   d8baa:	bf5c      	itt	pl
   d8bac:	2201      	movpl	r2, #1
   d8bae:	601a      	strpl	r2, [r3, #0]
   d8bb0:	4b22      	ldr	r3, [pc, #136]	; (d8c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8bb2:	681a      	ldr	r2, [r3, #0]
   d8bb4:	07d1      	lsls	r1, r2, #31
   d8bb6:	bf5c      	itt	pl
   d8bb8:	2201      	movpl	r2, #1
   d8bba:	601a      	strpl	r2, [r3, #0]
   d8bbc:	4b20      	ldr	r3, [pc, #128]	; (d8c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8bbe:	681a      	ldr	r2, [r3, #0]
   d8bc0:	07d2      	lsls	r2, r2, #31
   d8bc2:	bf5c      	itt	pl
   d8bc4:	2201      	movpl	r2, #1
   d8bc6:	601a      	strpl	r2, [r3, #0]
   d8bc8:	4b1e      	ldr	r3, [pc, #120]	; (d8c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8bca:	681a      	ldr	r2, [r3, #0]
   d8bcc:	07d0      	lsls	r0, r2, #31
   d8bce:	bf5c      	itt	pl
   d8bd0:	2201      	movpl	r2, #1
   d8bd2:	601a      	strpl	r2, [r3, #0]
   d8bd4:	4b1c      	ldr	r3, [pc, #112]	; (d8c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8bd6:	681a      	ldr	r2, [r3, #0]
   d8bd8:	07d1      	lsls	r1, r2, #31
   d8bda:	bf5c      	itt	pl
   d8bdc:	2201      	movpl	r2, #1
   d8bde:	601a      	strpl	r2, [r3, #0]
   d8be0:	4b1a      	ldr	r3, [pc, #104]	; (d8c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8be2:	681a      	ldr	r2, [r3, #0]
   d8be4:	07d2      	lsls	r2, r2, #31
   d8be6:	bf5c      	itt	pl
   d8be8:	2201      	movpl	r2, #1
   d8bea:	601a      	strpl	r2, [r3, #0]
   d8bec:	4b18      	ldr	r3, [pc, #96]	; (d8c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8bee:	681a      	ldr	r2, [r3, #0]
   d8bf0:	07d0      	lsls	r0, r2, #31
   d8bf2:	bf5c      	itt	pl
   d8bf4:	2201      	movpl	r2, #1
   d8bf6:	601a      	strpl	r2, [r3, #0]
   d8bf8:	4b16      	ldr	r3, [pc, #88]	; (d8c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8bfa:	681a      	ldr	r2, [r3, #0]
   d8bfc:	07d1      	lsls	r1, r2, #31
   d8bfe:	bf5c      	itt	pl
   d8c00:	2201      	movpl	r2, #1
   d8c02:	601a      	strpl	r2, [r3, #0]
   d8c04:	4b14      	ldr	r3, [pc, #80]	; (d8c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8c06:	681a      	ldr	r2, [r3, #0]
   d8c08:	07d2      	lsls	r2, r2, #31
   d8c0a:	bf5c      	itt	pl
   d8c0c:	2201      	movpl	r2, #1
   d8c0e:	601a      	strpl	r2, [r3, #0]
   d8c10:	4b12      	ldr	r3, [pc, #72]	; (d8c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8c12:	681a      	ldr	r2, [r3, #0]
   d8c14:	07d0      	lsls	r0, r2, #31
   d8c16:	bf5c      	itt	pl
   d8c18:	2201      	movpl	r2, #1
   d8c1a:	601a      	strpl	r2, [r3, #0]
   d8c1c:	4b10      	ldr	r3, [pc, #64]	; (d8c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8c1e:	681a      	ldr	r2, [r3, #0]
   d8c20:	07d1      	lsls	r1, r2, #31
   d8c22:	bf5c      	itt	pl
   d8c24:	2201      	movpl	r2, #1
   d8c26:	601a      	strpl	r2, [r3, #0]
   d8c28:	4b0e      	ldr	r3, [pc, #56]	; (d8c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8c2a:	681a      	ldr	r2, [r3, #0]
   d8c2c:	07d2      	lsls	r2, r2, #31
   d8c2e:	bf5c      	itt	pl
   d8c30:	2201      	movpl	r2, #1
   d8c32:	601a      	strpl	r2, [r3, #0]
   d8c34:	4770      	bx	lr
   d8c36:	bf00      	nop
   d8c38:	2003e7a4 	.word	0x2003e7a4
   d8c3c:	2003e7a0 	.word	0x2003e7a0
   d8c40:	2003e79c 	.word	0x2003e79c
   d8c44:	2003e798 	.word	0x2003e798
   d8c48:	2003e794 	.word	0x2003e794
   d8c4c:	2003e790 	.word	0x2003e790
   d8c50:	2003e78c 	.word	0x2003e78c
   d8c54:	2003e788 	.word	0x2003e788
   d8c58:	2003e784 	.word	0x2003e784
   d8c5c:	2003e780 	.word	0x2003e780
   d8c60:	2003e77c 	.word	0x2003e77c
   d8c64:	2003e778 	.word	0x2003e778

000d8c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8c68:	4b18      	ldr	r3, [pc, #96]	; (d8ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8c6a:	681a      	ldr	r2, [r3, #0]
   d8c6c:	07d1      	lsls	r1, r2, #31
   d8c6e:	bf5c      	itt	pl
   d8c70:	2201      	movpl	r2, #1
   d8c72:	601a      	strpl	r2, [r3, #0]
   d8c74:	4b16      	ldr	r3, [pc, #88]	; (d8cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8c76:	681a      	ldr	r2, [r3, #0]
   d8c78:	07d2      	lsls	r2, r2, #31
   d8c7a:	bf5c      	itt	pl
   d8c7c:	2201      	movpl	r2, #1
   d8c7e:	601a      	strpl	r2, [r3, #0]
   d8c80:	4b14      	ldr	r3, [pc, #80]	; (d8cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8c82:	681a      	ldr	r2, [r3, #0]
   d8c84:	07d0      	lsls	r0, r2, #31
   d8c86:	bf5c      	itt	pl
   d8c88:	2201      	movpl	r2, #1
   d8c8a:	601a      	strpl	r2, [r3, #0]
   d8c8c:	4b12      	ldr	r3, [pc, #72]	; (d8cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8c8e:	681a      	ldr	r2, [r3, #0]
   d8c90:	07d1      	lsls	r1, r2, #31
   d8c92:	bf5c      	itt	pl
   d8c94:	2201      	movpl	r2, #1
   d8c96:	601a      	strpl	r2, [r3, #0]
   d8c98:	4b10      	ldr	r3, [pc, #64]	; (d8cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8c9a:	681a      	ldr	r2, [r3, #0]
   d8c9c:	07d2      	lsls	r2, r2, #31
   d8c9e:	bf5c      	itt	pl
   d8ca0:	2201      	movpl	r2, #1
   d8ca2:	601a      	strpl	r2, [r3, #0]
   d8ca4:	4b0e      	ldr	r3, [pc, #56]	; (d8ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8ca6:	681a      	ldr	r2, [r3, #0]
   d8ca8:	07d0      	lsls	r0, r2, #31
   d8caa:	bf5c      	itt	pl
   d8cac:	2201      	movpl	r2, #1
   d8cae:	601a      	strpl	r2, [r3, #0]
   d8cb0:	4b0c      	ldr	r3, [pc, #48]	; (d8ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8cb2:	681a      	ldr	r2, [r3, #0]
   d8cb4:	07d1      	lsls	r1, r2, #31
   d8cb6:	bf5c      	itt	pl
   d8cb8:	2201      	movpl	r2, #1
   d8cba:	601a      	strpl	r2, [r3, #0]
   d8cbc:	4b0a      	ldr	r3, [pc, #40]	; (d8ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8cbe:	681a      	ldr	r2, [r3, #0]
   d8cc0:	07d2      	lsls	r2, r2, #31
   d8cc2:	bf5c      	itt	pl
   d8cc4:	2201      	movpl	r2, #1
   d8cc6:	601a      	strpl	r2, [r3, #0]
   d8cc8:	4770      	bx	lr
   d8cca:	bf00      	nop
   d8ccc:	2003e7c4 	.word	0x2003e7c4
   d8cd0:	2003e7c0 	.word	0x2003e7c0
   d8cd4:	2003e7bc 	.word	0x2003e7bc
   d8cd8:	2003e7b8 	.word	0x2003e7b8
   d8cdc:	2003e7b4 	.word	0x2003e7b4
   d8ce0:	2003e7b0 	.word	0x2003e7b0
   d8ce4:	2003e7ac 	.word	0x2003e7ac
   d8ce8:	2003e7a8 	.word	0x2003e7a8

000d8cec <round>:
   d8cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8cee:	ec53 2b10 	vmov	r2, r3, d0
   d8cf2:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d8cf6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
   d8cfa:	2813      	cmp	r0, #19
   d8cfc:	4619      	mov	r1, r3
   d8cfe:	ee10 7a10 	vmov	r7, s0
   d8d02:	dc12      	bgt.n	d8d2a <round+0x3e>
   d8d04:	2800      	cmp	r0, #0
   d8d06:	db32      	blt.n	d8d6e <round+0x82>
   d8d08:	4e23      	ldr	r6, [pc, #140]	; (d8d98 <round+0xac>)
   d8d0a:	4106      	asrs	r6, r0
   d8d0c:	4233      	tst	r3, r6
   d8d0e:	461d      	mov	r5, r3
   d8d10:	d02a      	beq.n	d8d68 <round+0x7c>
   d8d12:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d8d16:	4101      	asrs	r1, r0
   d8d18:	4429      	add	r1, r5
   d8d1a:	ea21 0106 	bic.w	r1, r1, r6
   d8d1e:	2400      	movs	r4, #0
   d8d20:	460b      	mov	r3, r1
   d8d22:	4622      	mov	r2, r4
   d8d24:	ec43 2b10 	vmov	d0, r2, r3
   d8d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8d2a:	2833      	cmp	r0, #51	; 0x33
   d8d2c:	dd05      	ble.n	d8d3a <round+0x4e>
   d8d2e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8d32:	d022      	beq.n	d8d7a <round+0x8e>
   d8d34:	ec43 2b10 	vmov	d0, r2, r3
   d8d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8d3a:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
   d8d3e:	f04f 35ff 	mov.w	r5, #4294967295
   d8d42:	fa25 f404 	lsr.w	r4, r5, r4
   d8d46:	4222      	tst	r2, r4
   d8d48:	d0f4      	beq.n	d8d34 <round+0x48>
   d8d4a:	2301      	movs	r3, #1
   d8d4c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
   d8d50:	fa03 f000 	lsl.w	r0, r3, r0
   d8d54:	19c0      	adds	r0, r0, r7
   d8d56:	bf28      	it	cs
   d8d58:	18c9      	addcs	r1, r1, r3
   d8d5a:	ea20 0404 	bic.w	r4, r0, r4
   d8d5e:	460b      	mov	r3, r1
   d8d60:	4622      	mov	r2, r4
   d8d62:	ec43 2b10 	vmov	d0, r2, r3
   d8d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8d68:	2a00      	cmp	r2, #0
   d8d6a:	d1d2      	bne.n	d8d12 <round+0x26>
   d8d6c:	e7e2      	b.n	d8d34 <round+0x48>
   d8d6e:	3001      	adds	r0, #1
   d8d70:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
   d8d74:	d009      	beq.n	d8d8a <round+0x9e>
   d8d76:	2400      	movs	r4, #0
   d8d78:	e7d2      	b.n	d8d20 <round+0x34>
   d8d7a:	ee10 0a10 	vmov	r0, s0
   d8d7e:	4619      	mov	r1, r3
   d8d80:	f000 f812 	bl	d8da8 <__adddf3>
   d8d84:	ec41 0b10 	vmov	d0, r0, r1
   d8d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8d8a:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
   d8d8e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   d8d92:	2400      	movs	r4, #0
   d8d94:	e7c4      	b.n	d8d20 <round+0x34>
   d8d96:	bf00      	nop
   d8d98:	000fffff 	.word	0x000fffff

000d8d9c <__aeabi_drsub>:
   d8d9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8da0:	e002      	b.n	d8da8 <__adddf3>
   d8da2:	bf00      	nop

000d8da4 <__aeabi_dsub>:
   d8da4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8da8 <__adddf3>:
   d8da8:	b530      	push	{r4, r5, lr}
   d8daa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8dae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8db2:	ea94 0f05 	teq	r4, r5
   d8db6:	bf08      	it	eq
   d8db8:	ea90 0f02 	teqeq	r0, r2
   d8dbc:	bf1f      	itttt	ne
   d8dbe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8dc2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8dc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8dca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8dce:	f000 80e2 	beq.w	d8f96 <__adddf3+0x1ee>
   d8dd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8dd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8dda:	bfb8      	it	lt
   d8ddc:	426d      	neglt	r5, r5
   d8dde:	dd0c      	ble.n	d8dfa <__adddf3+0x52>
   d8de0:	442c      	add	r4, r5
   d8de2:	ea80 0202 	eor.w	r2, r0, r2
   d8de6:	ea81 0303 	eor.w	r3, r1, r3
   d8dea:	ea82 0000 	eor.w	r0, r2, r0
   d8dee:	ea83 0101 	eor.w	r1, r3, r1
   d8df2:	ea80 0202 	eor.w	r2, r0, r2
   d8df6:	ea81 0303 	eor.w	r3, r1, r3
   d8dfa:	2d36      	cmp	r5, #54	; 0x36
   d8dfc:	bf88      	it	hi
   d8dfe:	bd30      	pophi	{r4, r5, pc}
   d8e00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8e04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8e08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8e0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8e10:	d002      	beq.n	d8e18 <__adddf3+0x70>
   d8e12:	4240      	negs	r0, r0
   d8e14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8e18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8e20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8e24:	d002      	beq.n	d8e2c <__adddf3+0x84>
   d8e26:	4252      	negs	r2, r2
   d8e28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8e2c:	ea94 0f05 	teq	r4, r5
   d8e30:	f000 80a7 	beq.w	d8f82 <__adddf3+0x1da>
   d8e34:	f1a4 0401 	sub.w	r4, r4, #1
   d8e38:	f1d5 0e20 	rsbs	lr, r5, #32
   d8e3c:	db0d      	blt.n	d8e5a <__adddf3+0xb2>
   d8e3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8e42:	fa22 f205 	lsr.w	r2, r2, r5
   d8e46:	1880      	adds	r0, r0, r2
   d8e48:	f141 0100 	adc.w	r1, r1, #0
   d8e4c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8e50:	1880      	adds	r0, r0, r2
   d8e52:	fa43 f305 	asr.w	r3, r3, r5
   d8e56:	4159      	adcs	r1, r3
   d8e58:	e00e      	b.n	d8e78 <__adddf3+0xd0>
   d8e5a:	f1a5 0520 	sub.w	r5, r5, #32
   d8e5e:	f10e 0e20 	add.w	lr, lr, #32
   d8e62:	2a01      	cmp	r2, #1
   d8e64:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8e68:	bf28      	it	cs
   d8e6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8e6e:	fa43 f305 	asr.w	r3, r3, r5
   d8e72:	18c0      	adds	r0, r0, r3
   d8e74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8e78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8e7c:	d507      	bpl.n	d8e8e <__adddf3+0xe6>
   d8e7e:	f04f 0e00 	mov.w	lr, #0
   d8e82:	f1dc 0c00 	rsbs	ip, ip, #0
   d8e86:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8e8a:	eb6e 0101 	sbc.w	r1, lr, r1
   d8e8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8e92:	d31b      	bcc.n	d8ecc <__adddf3+0x124>
   d8e94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8e98:	d30c      	bcc.n	d8eb4 <__adddf3+0x10c>
   d8e9a:	0849      	lsrs	r1, r1, #1
   d8e9c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8ea0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8ea4:	f104 0401 	add.w	r4, r4, #1
   d8ea8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8eac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8eb0:	f080 809a 	bcs.w	d8fe8 <__adddf3+0x240>
   d8eb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8eb8:	bf08      	it	eq
   d8eba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8ebe:	f150 0000 	adcs.w	r0, r0, #0
   d8ec2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ec6:	ea41 0105 	orr.w	r1, r1, r5
   d8eca:	bd30      	pop	{r4, r5, pc}
   d8ecc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8ed0:	4140      	adcs	r0, r0
   d8ed2:	eb41 0101 	adc.w	r1, r1, r1
   d8ed6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8eda:	f1a4 0401 	sub.w	r4, r4, #1
   d8ede:	d1e9      	bne.n	d8eb4 <__adddf3+0x10c>
   d8ee0:	f091 0f00 	teq	r1, #0
   d8ee4:	bf04      	itt	eq
   d8ee6:	4601      	moveq	r1, r0
   d8ee8:	2000      	moveq	r0, #0
   d8eea:	fab1 f381 	clz	r3, r1
   d8eee:	bf08      	it	eq
   d8ef0:	3320      	addeq	r3, #32
   d8ef2:	f1a3 030b 	sub.w	r3, r3, #11
   d8ef6:	f1b3 0220 	subs.w	r2, r3, #32
   d8efa:	da0c      	bge.n	d8f16 <__adddf3+0x16e>
   d8efc:	320c      	adds	r2, #12
   d8efe:	dd08      	ble.n	d8f12 <__adddf3+0x16a>
   d8f00:	f102 0c14 	add.w	ip, r2, #20
   d8f04:	f1c2 020c 	rsb	r2, r2, #12
   d8f08:	fa01 f00c 	lsl.w	r0, r1, ip
   d8f0c:	fa21 f102 	lsr.w	r1, r1, r2
   d8f10:	e00c      	b.n	d8f2c <__adddf3+0x184>
   d8f12:	f102 0214 	add.w	r2, r2, #20
   d8f16:	bfd8      	it	le
   d8f18:	f1c2 0c20 	rsble	ip, r2, #32
   d8f1c:	fa01 f102 	lsl.w	r1, r1, r2
   d8f20:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8f24:	bfdc      	itt	le
   d8f26:	ea41 010c 	orrle.w	r1, r1, ip
   d8f2a:	4090      	lslle	r0, r2
   d8f2c:	1ae4      	subs	r4, r4, r3
   d8f2e:	bfa2      	ittt	ge
   d8f30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8f34:	4329      	orrge	r1, r5
   d8f36:	bd30      	popge	{r4, r5, pc}
   d8f38:	ea6f 0404 	mvn.w	r4, r4
   d8f3c:	3c1f      	subs	r4, #31
   d8f3e:	da1c      	bge.n	d8f7a <__adddf3+0x1d2>
   d8f40:	340c      	adds	r4, #12
   d8f42:	dc0e      	bgt.n	d8f62 <__adddf3+0x1ba>
   d8f44:	f104 0414 	add.w	r4, r4, #20
   d8f48:	f1c4 0220 	rsb	r2, r4, #32
   d8f4c:	fa20 f004 	lsr.w	r0, r0, r4
   d8f50:	fa01 f302 	lsl.w	r3, r1, r2
   d8f54:	ea40 0003 	orr.w	r0, r0, r3
   d8f58:	fa21 f304 	lsr.w	r3, r1, r4
   d8f5c:	ea45 0103 	orr.w	r1, r5, r3
   d8f60:	bd30      	pop	{r4, r5, pc}
   d8f62:	f1c4 040c 	rsb	r4, r4, #12
   d8f66:	f1c4 0220 	rsb	r2, r4, #32
   d8f6a:	fa20 f002 	lsr.w	r0, r0, r2
   d8f6e:	fa01 f304 	lsl.w	r3, r1, r4
   d8f72:	ea40 0003 	orr.w	r0, r0, r3
   d8f76:	4629      	mov	r1, r5
   d8f78:	bd30      	pop	{r4, r5, pc}
   d8f7a:	fa21 f004 	lsr.w	r0, r1, r4
   d8f7e:	4629      	mov	r1, r5
   d8f80:	bd30      	pop	{r4, r5, pc}
   d8f82:	f094 0f00 	teq	r4, #0
   d8f86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8f8a:	bf06      	itte	eq
   d8f8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8f90:	3401      	addeq	r4, #1
   d8f92:	3d01      	subne	r5, #1
   d8f94:	e74e      	b.n	d8e34 <__adddf3+0x8c>
   d8f96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8f9a:	bf18      	it	ne
   d8f9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8fa0:	d029      	beq.n	d8ff6 <__adddf3+0x24e>
   d8fa2:	ea94 0f05 	teq	r4, r5
   d8fa6:	bf08      	it	eq
   d8fa8:	ea90 0f02 	teqeq	r0, r2
   d8fac:	d005      	beq.n	d8fba <__adddf3+0x212>
   d8fae:	ea54 0c00 	orrs.w	ip, r4, r0
   d8fb2:	bf04      	itt	eq
   d8fb4:	4619      	moveq	r1, r3
   d8fb6:	4610      	moveq	r0, r2
   d8fb8:	bd30      	pop	{r4, r5, pc}
   d8fba:	ea91 0f03 	teq	r1, r3
   d8fbe:	bf1e      	ittt	ne
   d8fc0:	2100      	movne	r1, #0
   d8fc2:	2000      	movne	r0, #0
   d8fc4:	bd30      	popne	{r4, r5, pc}
   d8fc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8fca:	d105      	bne.n	d8fd8 <__adddf3+0x230>
   d8fcc:	0040      	lsls	r0, r0, #1
   d8fce:	4149      	adcs	r1, r1
   d8fd0:	bf28      	it	cs
   d8fd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8fd6:	bd30      	pop	{r4, r5, pc}
   d8fd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8fdc:	bf3c      	itt	cc
   d8fde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8fe2:	bd30      	popcc	{r4, r5, pc}
   d8fe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8fe8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8fec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ff0:	f04f 0000 	mov.w	r0, #0
   d8ff4:	bd30      	pop	{r4, r5, pc}
   d8ff6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8ffa:	bf1a      	itte	ne
   d8ffc:	4619      	movne	r1, r3
   d8ffe:	4610      	movne	r0, r2
   d9000:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9004:	bf1c      	itt	ne
   d9006:	460b      	movne	r3, r1
   d9008:	4602      	movne	r2, r0
   d900a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d900e:	bf06      	itte	eq
   d9010:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9014:	ea91 0f03 	teqeq	r1, r3
   d9018:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d901c:	bd30      	pop	{r4, r5, pc}
   d901e:	bf00      	nop

000d9020 <__aeabi_ui2d>:
   d9020:	f090 0f00 	teq	r0, #0
   d9024:	bf04      	itt	eq
   d9026:	2100      	moveq	r1, #0
   d9028:	4770      	bxeq	lr
   d902a:	b530      	push	{r4, r5, lr}
   d902c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9030:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9034:	f04f 0500 	mov.w	r5, #0
   d9038:	f04f 0100 	mov.w	r1, #0
   d903c:	e750      	b.n	d8ee0 <__adddf3+0x138>
   d903e:	bf00      	nop

000d9040 <__aeabi_i2d>:
   d9040:	f090 0f00 	teq	r0, #0
   d9044:	bf04      	itt	eq
   d9046:	2100      	moveq	r1, #0
   d9048:	4770      	bxeq	lr
   d904a:	b530      	push	{r4, r5, lr}
   d904c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9050:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9054:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9058:	bf48      	it	mi
   d905a:	4240      	negmi	r0, r0
   d905c:	f04f 0100 	mov.w	r1, #0
   d9060:	e73e      	b.n	d8ee0 <__adddf3+0x138>
   d9062:	bf00      	nop

000d9064 <__aeabi_f2d>:
   d9064:	0042      	lsls	r2, r0, #1
   d9066:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d906a:	ea4f 0131 	mov.w	r1, r1, rrx
   d906e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9072:	bf1f      	itttt	ne
   d9074:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9078:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d907c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9080:	4770      	bxne	lr
   d9082:	f092 0f00 	teq	r2, #0
   d9086:	bf14      	ite	ne
   d9088:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d908c:	4770      	bxeq	lr
   d908e:	b530      	push	{r4, r5, lr}
   d9090:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9094:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d909c:	e720      	b.n	d8ee0 <__adddf3+0x138>
   d909e:	bf00      	nop

000d90a0 <__aeabi_ul2d>:
   d90a0:	ea50 0201 	orrs.w	r2, r0, r1
   d90a4:	bf08      	it	eq
   d90a6:	4770      	bxeq	lr
   d90a8:	b530      	push	{r4, r5, lr}
   d90aa:	f04f 0500 	mov.w	r5, #0
   d90ae:	e00a      	b.n	d90c6 <__aeabi_l2d+0x16>

000d90b0 <__aeabi_l2d>:
   d90b0:	ea50 0201 	orrs.w	r2, r0, r1
   d90b4:	bf08      	it	eq
   d90b6:	4770      	bxeq	lr
   d90b8:	b530      	push	{r4, r5, lr}
   d90ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d90be:	d502      	bpl.n	d90c6 <__aeabi_l2d+0x16>
   d90c0:	4240      	negs	r0, r0
   d90c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d90c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d90ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d90ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d90d2:	f43f aedc 	beq.w	d8e8e <__adddf3+0xe6>
   d90d6:	f04f 0203 	mov.w	r2, #3
   d90da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d90de:	bf18      	it	ne
   d90e0:	3203      	addne	r2, #3
   d90e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d90e6:	bf18      	it	ne
   d90e8:	3203      	addne	r2, #3
   d90ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d90ee:	f1c2 0320 	rsb	r3, r2, #32
   d90f2:	fa00 fc03 	lsl.w	ip, r0, r3
   d90f6:	fa20 f002 	lsr.w	r0, r0, r2
   d90fa:	fa01 fe03 	lsl.w	lr, r1, r3
   d90fe:	ea40 000e 	orr.w	r0, r0, lr
   d9102:	fa21 f102 	lsr.w	r1, r1, r2
   d9106:	4414      	add	r4, r2
   d9108:	e6c1      	b.n	d8e8e <__adddf3+0xe6>
   d910a:	bf00      	nop

000d910c <__aeabi_dmul>:
   d910c:	b570      	push	{r4, r5, r6, lr}
   d910e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9112:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9116:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d911a:	bf1d      	ittte	ne
   d911c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9120:	ea94 0f0c 	teqne	r4, ip
   d9124:	ea95 0f0c 	teqne	r5, ip
   d9128:	f000 f8de 	bleq	d92e8 <__aeabi_dmul+0x1dc>
   d912c:	442c      	add	r4, r5
   d912e:	ea81 0603 	eor.w	r6, r1, r3
   d9132:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9136:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d913a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d913e:	bf18      	it	ne
   d9140:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d914c:	d038      	beq.n	d91c0 <__aeabi_dmul+0xb4>
   d914e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9152:	f04f 0500 	mov.w	r5, #0
   d9156:	fbe1 e502 	umlal	lr, r5, r1, r2
   d915a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d915e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9162:	f04f 0600 	mov.w	r6, #0
   d9166:	fbe1 5603 	umlal	r5, r6, r1, r3
   d916a:	f09c 0f00 	teq	ip, #0
   d916e:	bf18      	it	ne
   d9170:	f04e 0e01 	orrne.w	lr, lr, #1
   d9174:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9178:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d917c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9180:	d204      	bcs.n	d918c <__aeabi_dmul+0x80>
   d9182:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9186:	416d      	adcs	r5, r5
   d9188:	eb46 0606 	adc.w	r6, r6, r6
   d918c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9190:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9194:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9198:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d919c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d91a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d91a4:	bf88      	it	hi
   d91a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d91aa:	d81e      	bhi.n	d91ea <__aeabi_dmul+0xde>
   d91ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d91b0:	bf08      	it	eq
   d91b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d91b6:	f150 0000 	adcs.w	r0, r0, #0
   d91ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d91be:	bd70      	pop	{r4, r5, r6, pc}
   d91c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d91c4:	ea46 0101 	orr.w	r1, r6, r1
   d91c8:	ea40 0002 	orr.w	r0, r0, r2
   d91cc:	ea81 0103 	eor.w	r1, r1, r3
   d91d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d91d4:	bfc2      	ittt	gt
   d91d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d91da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d91de:	bd70      	popgt	{r4, r5, r6, pc}
   d91e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d91e4:	f04f 0e00 	mov.w	lr, #0
   d91e8:	3c01      	subs	r4, #1
   d91ea:	f300 80ab 	bgt.w	d9344 <__aeabi_dmul+0x238>
   d91ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d91f2:	bfde      	ittt	le
   d91f4:	2000      	movle	r0, #0
   d91f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d91fa:	bd70      	pople	{r4, r5, r6, pc}
   d91fc:	f1c4 0400 	rsb	r4, r4, #0
   d9200:	3c20      	subs	r4, #32
   d9202:	da35      	bge.n	d9270 <__aeabi_dmul+0x164>
   d9204:	340c      	adds	r4, #12
   d9206:	dc1b      	bgt.n	d9240 <__aeabi_dmul+0x134>
   d9208:	f104 0414 	add.w	r4, r4, #20
   d920c:	f1c4 0520 	rsb	r5, r4, #32
   d9210:	fa00 f305 	lsl.w	r3, r0, r5
   d9214:	fa20 f004 	lsr.w	r0, r0, r4
   d9218:	fa01 f205 	lsl.w	r2, r1, r5
   d921c:	ea40 0002 	orr.w	r0, r0, r2
   d9220:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9224:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9228:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d922c:	fa21 f604 	lsr.w	r6, r1, r4
   d9230:	eb42 0106 	adc.w	r1, r2, r6
   d9234:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9238:	bf08      	it	eq
   d923a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d923e:	bd70      	pop	{r4, r5, r6, pc}
   d9240:	f1c4 040c 	rsb	r4, r4, #12
   d9244:	f1c4 0520 	rsb	r5, r4, #32
   d9248:	fa00 f304 	lsl.w	r3, r0, r4
   d924c:	fa20 f005 	lsr.w	r0, r0, r5
   d9250:	fa01 f204 	lsl.w	r2, r1, r4
   d9254:	ea40 0002 	orr.w	r0, r0, r2
   d9258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d925c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9260:	f141 0100 	adc.w	r1, r1, #0
   d9264:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9268:	bf08      	it	eq
   d926a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d926e:	bd70      	pop	{r4, r5, r6, pc}
   d9270:	f1c4 0520 	rsb	r5, r4, #32
   d9274:	fa00 f205 	lsl.w	r2, r0, r5
   d9278:	ea4e 0e02 	orr.w	lr, lr, r2
   d927c:	fa20 f304 	lsr.w	r3, r0, r4
   d9280:	fa01 f205 	lsl.w	r2, r1, r5
   d9284:	ea43 0302 	orr.w	r3, r3, r2
   d9288:	fa21 f004 	lsr.w	r0, r1, r4
   d928c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9290:	fa21 f204 	lsr.w	r2, r1, r4
   d9294:	ea20 0002 	bic.w	r0, r0, r2
   d9298:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d929c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d92a0:	bf08      	it	eq
   d92a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d92a6:	bd70      	pop	{r4, r5, r6, pc}
   d92a8:	f094 0f00 	teq	r4, #0
   d92ac:	d10f      	bne.n	d92ce <__aeabi_dmul+0x1c2>
   d92ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d92b2:	0040      	lsls	r0, r0, #1
   d92b4:	eb41 0101 	adc.w	r1, r1, r1
   d92b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d92bc:	bf08      	it	eq
   d92be:	3c01      	subeq	r4, #1
   d92c0:	d0f7      	beq.n	d92b2 <__aeabi_dmul+0x1a6>
   d92c2:	ea41 0106 	orr.w	r1, r1, r6
   d92c6:	f095 0f00 	teq	r5, #0
   d92ca:	bf18      	it	ne
   d92cc:	4770      	bxne	lr
   d92ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d92d2:	0052      	lsls	r2, r2, #1
   d92d4:	eb43 0303 	adc.w	r3, r3, r3
   d92d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d92dc:	bf08      	it	eq
   d92de:	3d01      	subeq	r5, #1
   d92e0:	d0f7      	beq.n	d92d2 <__aeabi_dmul+0x1c6>
   d92e2:	ea43 0306 	orr.w	r3, r3, r6
   d92e6:	4770      	bx	lr
   d92e8:	ea94 0f0c 	teq	r4, ip
   d92ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d92f0:	bf18      	it	ne
   d92f2:	ea95 0f0c 	teqne	r5, ip
   d92f6:	d00c      	beq.n	d9312 <__aeabi_dmul+0x206>
   d92f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d92fc:	bf18      	it	ne
   d92fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9302:	d1d1      	bne.n	d92a8 <__aeabi_dmul+0x19c>
   d9304:	ea81 0103 	eor.w	r1, r1, r3
   d9308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d930c:	f04f 0000 	mov.w	r0, #0
   d9310:	bd70      	pop	{r4, r5, r6, pc}
   d9312:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9316:	bf06      	itte	eq
   d9318:	4610      	moveq	r0, r2
   d931a:	4619      	moveq	r1, r3
   d931c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9320:	d019      	beq.n	d9356 <__aeabi_dmul+0x24a>
   d9322:	ea94 0f0c 	teq	r4, ip
   d9326:	d102      	bne.n	d932e <__aeabi_dmul+0x222>
   d9328:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d932c:	d113      	bne.n	d9356 <__aeabi_dmul+0x24a>
   d932e:	ea95 0f0c 	teq	r5, ip
   d9332:	d105      	bne.n	d9340 <__aeabi_dmul+0x234>
   d9334:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9338:	bf1c      	itt	ne
   d933a:	4610      	movne	r0, r2
   d933c:	4619      	movne	r1, r3
   d933e:	d10a      	bne.n	d9356 <__aeabi_dmul+0x24a>
   d9340:	ea81 0103 	eor.w	r1, r1, r3
   d9344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9348:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d934c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9350:	f04f 0000 	mov.w	r0, #0
   d9354:	bd70      	pop	{r4, r5, r6, pc}
   d9356:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d935a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d935e:	bd70      	pop	{r4, r5, r6, pc}

000d9360 <__aeabi_ddiv>:
   d9360:	b570      	push	{r4, r5, r6, lr}
   d9362:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9366:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d936a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d936e:	bf1d      	ittte	ne
   d9370:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9374:	ea94 0f0c 	teqne	r4, ip
   d9378:	ea95 0f0c 	teqne	r5, ip
   d937c:	f000 f8a7 	bleq	d94ce <__aeabi_ddiv+0x16e>
   d9380:	eba4 0405 	sub.w	r4, r4, r5
   d9384:	ea81 0e03 	eor.w	lr, r1, r3
   d9388:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d938c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9390:	f000 8088 	beq.w	d94a4 <__aeabi_ddiv+0x144>
   d9394:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9398:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d939c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d93a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d93a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d93a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d93ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d93b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d93b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d93b8:	429d      	cmp	r5, r3
   d93ba:	bf08      	it	eq
   d93bc:	4296      	cmpeq	r6, r2
   d93be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d93c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d93c6:	d202      	bcs.n	d93ce <__aeabi_ddiv+0x6e>
   d93c8:	085b      	lsrs	r3, r3, #1
   d93ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d93ce:	1ab6      	subs	r6, r6, r2
   d93d0:	eb65 0503 	sbc.w	r5, r5, r3
   d93d4:	085b      	lsrs	r3, r3, #1
   d93d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d93da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d93de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d93e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d93e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d93ea:	bf22      	ittt	cs
   d93ec:	1ab6      	subcs	r6, r6, r2
   d93ee:	4675      	movcs	r5, lr
   d93f0:	ea40 000c 	orrcs.w	r0, r0, ip
   d93f4:	085b      	lsrs	r3, r3, #1
   d93f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d93fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d93fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9402:	bf22      	ittt	cs
   d9404:	1ab6      	subcs	r6, r6, r2
   d9406:	4675      	movcs	r5, lr
   d9408:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d940c:	085b      	lsrs	r3, r3, #1
   d940e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9412:	ebb6 0e02 	subs.w	lr, r6, r2
   d9416:	eb75 0e03 	sbcs.w	lr, r5, r3
   d941a:	bf22      	ittt	cs
   d941c:	1ab6      	subcs	r6, r6, r2
   d941e:	4675      	movcs	r5, lr
   d9420:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9424:	085b      	lsrs	r3, r3, #1
   d9426:	ea4f 0232 	mov.w	r2, r2, rrx
   d942a:	ebb6 0e02 	subs.w	lr, r6, r2
   d942e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9432:	bf22      	ittt	cs
   d9434:	1ab6      	subcs	r6, r6, r2
   d9436:	4675      	movcs	r5, lr
   d9438:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d943c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9440:	d018      	beq.n	d9474 <__aeabi_ddiv+0x114>
   d9442:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9446:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d944a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d944e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9452:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9456:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d945a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d945e:	d1c0      	bne.n	d93e2 <__aeabi_ddiv+0x82>
   d9460:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9464:	d10b      	bne.n	d947e <__aeabi_ddiv+0x11e>
   d9466:	ea41 0100 	orr.w	r1, r1, r0
   d946a:	f04f 0000 	mov.w	r0, #0
   d946e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9472:	e7b6      	b.n	d93e2 <__aeabi_ddiv+0x82>
   d9474:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9478:	bf04      	itt	eq
   d947a:	4301      	orreq	r1, r0
   d947c:	2000      	moveq	r0, #0
   d947e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9482:	bf88      	it	hi
   d9484:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9488:	f63f aeaf 	bhi.w	d91ea <__aeabi_dmul+0xde>
   d948c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9490:	bf04      	itt	eq
   d9492:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9496:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d949a:	f150 0000 	adcs.w	r0, r0, #0
   d949e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d94a2:	bd70      	pop	{r4, r5, r6, pc}
   d94a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d94a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d94ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d94b0:	bfc2      	ittt	gt
   d94b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d94b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d94ba:	bd70      	popgt	{r4, r5, r6, pc}
   d94bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d94c0:	f04f 0e00 	mov.w	lr, #0
   d94c4:	3c01      	subs	r4, #1
   d94c6:	e690      	b.n	d91ea <__aeabi_dmul+0xde>
   d94c8:	ea45 0e06 	orr.w	lr, r5, r6
   d94cc:	e68d      	b.n	d91ea <__aeabi_dmul+0xde>
   d94ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d94d2:	ea94 0f0c 	teq	r4, ip
   d94d6:	bf08      	it	eq
   d94d8:	ea95 0f0c 	teqeq	r5, ip
   d94dc:	f43f af3b 	beq.w	d9356 <__aeabi_dmul+0x24a>
   d94e0:	ea94 0f0c 	teq	r4, ip
   d94e4:	d10a      	bne.n	d94fc <__aeabi_ddiv+0x19c>
   d94e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d94ea:	f47f af34 	bne.w	d9356 <__aeabi_dmul+0x24a>
   d94ee:	ea95 0f0c 	teq	r5, ip
   d94f2:	f47f af25 	bne.w	d9340 <__aeabi_dmul+0x234>
   d94f6:	4610      	mov	r0, r2
   d94f8:	4619      	mov	r1, r3
   d94fa:	e72c      	b.n	d9356 <__aeabi_dmul+0x24a>
   d94fc:	ea95 0f0c 	teq	r5, ip
   d9500:	d106      	bne.n	d9510 <__aeabi_ddiv+0x1b0>
   d9502:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9506:	f43f aefd 	beq.w	d9304 <__aeabi_dmul+0x1f8>
   d950a:	4610      	mov	r0, r2
   d950c:	4619      	mov	r1, r3
   d950e:	e722      	b.n	d9356 <__aeabi_dmul+0x24a>
   d9510:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9514:	bf18      	it	ne
   d9516:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d951a:	f47f aec5 	bne.w	d92a8 <__aeabi_dmul+0x19c>
   d951e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9522:	f47f af0d 	bne.w	d9340 <__aeabi_dmul+0x234>
   d9526:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d952a:	f47f aeeb 	bne.w	d9304 <__aeabi_dmul+0x1f8>
   d952e:	e712      	b.n	d9356 <__aeabi_dmul+0x24a>

000d9530 <__gedf2>:
   d9530:	f04f 3cff 	mov.w	ip, #4294967295
   d9534:	e006      	b.n	d9544 <__cmpdf2+0x4>
   d9536:	bf00      	nop

000d9538 <__ledf2>:
   d9538:	f04f 0c01 	mov.w	ip, #1
   d953c:	e002      	b.n	d9544 <__cmpdf2+0x4>
   d953e:	bf00      	nop

000d9540 <__cmpdf2>:
   d9540:	f04f 0c01 	mov.w	ip, #1
   d9544:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9548:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d954c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9554:	bf18      	it	ne
   d9556:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d955a:	d01b      	beq.n	d9594 <__cmpdf2+0x54>
   d955c:	b001      	add	sp, #4
   d955e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9562:	bf0c      	ite	eq
   d9564:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9568:	ea91 0f03 	teqne	r1, r3
   d956c:	bf02      	ittt	eq
   d956e:	ea90 0f02 	teqeq	r0, r2
   d9572:	2000      	moveq	r0, #0
   d9574:	4770      	bxeq	lr
   d9576:	f110 0f00 	cmn.w	r0, #0
   d957a:	ea91 0f03 	teq	r1, r3
   d957e:	bf58      	it	pl
   d9580:	4299      	cmppl	r1, r3
   d9582:	bf08      	it	eq
   d9584:	4290      	cmpeq	r0, r2
   d9586:	bf2c      	ite	cs
   d9588:	17d8      	asrcs	r0, r3, #31
   d958a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d958e:	f040 0001 	orr.w	r0, r0, #1
   d9592:	4770      	bx	lr
   d9594:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d959c:	d102      	bne.n	d95a4 <__cmpdf2+0x64>
   d959e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d95a2:	d107      	bne.n	d95b4 <__cmpdf2+0x74>
   d95a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d95a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d95ac:	d1d6      	bne.n	d955c <__cmpdf2+0x1c>
   d95ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d95b2:	d0d3      	beq.n	d955c <__cmpdf2+0x1c>
   d95b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d95b8:	4770      	bx	lr
   d95ba:	bf00      	nop

000d95bc <__aeabi_cdrcmple>:
   d95bc:	4684      	mov	ip, r0
   d95be:	4610      	mov	r0, r2
   d95c0:	4662      	mov	r2, ip
   d95c2:	468c      	mov	ip, r1
   d95c4:	4619      	mov	r1, r3
   d95c6:	4663      	mov	r3, ip
   d95c8:	e000      	b.n	d95cc <__aeabi_cdcmpeq>
   d95ca:	bf00      	nop

000d95cc <__aeabi_cdcmpeq>:
   d95cc:	b501      	push	{r0, lr}
   d95ce:	f7ff ffb7 	bl	d9540 <__cmpdf2>
   d95d2:	2800      	cmp	r0, #0
   d95d4:	bf48      	it	mi
   d95d6:	f110 0f00 	cmnmi.w	r0, #0
   d95da:	bd01      	pop	{r0, pc}

000d95dc <__aeabi_dcmpeq>:
   d95dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95e0:	f7ff fff4 	bl	d95cc <__aeabi_cdcmpeq>
   d95e4:	bf0c      	ite	eq
   d95e6:	2001      	moveq	r0, #1
   d95e8:	2000      	movne	r0, #0
   d95ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d95ee:	bf00      	nop

000d95f0 <__aeabi_dcmplt>:
   d95f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d95f4:	f7ff ffea 	bl	d95cc <__aeabi_cdcmpeq>
   d95f8:	bf34      	ite	cc
   d95fa:	2001      	movcc	r0, #1
   d95fc:	2000      	movcs	r0, #0
   d95fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d9602:	bf00      	nop

000d9604 <__aeabi_dcmple>:
   d9604:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9608:	f7ff ffe0 	bl	d95cc <__aeabi_cdcmpeq>
   d960c:	bf94      	ite	ls
   d960e:	2001      	movls	r0, #1
   d9610:	2000      	movhi	r0, #0
   d9612:	f85d fb08 	ldr.w	pc, [sp], #8
   d9616:	bf00      	nop

000d9618 <__aeabi_dcmpge>:
   d9618:	f84d ed08 	str.w	lr, [sp, #-8]!
   d961c:	f7ff ffce 	bl	d95bc <__aeabi_cdrcmple>
   d9620:	bf94      	ite	ls
   d9622:	2001      	movls	r0, #1
   d9624:	2000      	movhi	r0, #0
   d9626:	f85d fb08 	ldr.w	pc, [sp], #8
   d962a:	bf00      	nop

000d962c <__aeabi_dcmpgt>:
   d962c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9630:	f7ff ffc4 	bl	d95bc <__aeabi_cdrcmple>
   d9634:	bf34      	ite	cc
   d9636:	2001      	movcc	r0, #1
   d9638:	2000      	movcs	r0, #0
   d963a:	f85d fb08 	ldr.w	pc, [sp], #8
   d963e:	bf00      	nop

000d9640 <__aeabi_d2iz>:
   d9640:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9644:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9648:	d215      	bcs.n	d9676 <__aeabi_d2iz+0x36>
   d964a:	d511      	bpl.n	d9670 <__aeabi_d2iz+0x30>
   d964c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9650:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9654:	d912      	bls.n	d967c <__aeabi_d2iz+0x3c>
   d9656:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d965a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d965e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9662:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9666:	fa23 f002 	lsr.w	r0, r3, r2
   d966a:	bf18      	it	ne
   d966c:	4240      	negne	r0, r0
   d966e:	4770      	bx	lr
   d9670:	f04f 0000 	mov.w	r0, #0
   d9674:	4770      	bx	lr
   d9676:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d967a:	d105      	bne.n	d9688 <__aeabi_d2iz+0x48>
   d967c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9680:	bf08      	it	eq
   d9682:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9686:	4770      	bx	lr
   d9688:	f04f 0000 	mov.w	r0, #0
   d968c:	4770      	bx	lr
   d968e:	bf00      	nop

000d9690 <__aeabi_d2uiz>:
   d9690:	004a      	lsls	r2, r1, #1
   d9692:	d211      	bcs.n	d96b8 <__aeabi_d2uiz+0x28>
   d9694:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9698:	d211      	bcs.n	d96be <__aeabi_d2uiz+0x2e>
   d969a:	d50d      	bpl.n	d96b8 <__aeabi_d2uiz+0x28>
   d969c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d96a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d96a4:	d40e      	bmi.n	d96c4 <__aeabi_d2uiz+0x34>
   d96a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d96aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d96ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d96b2:	fa23 f002 	lsr.w	r0, r3, r2
   d96b6:	4770      	bx	lr
   d96b8:	f04f 0000 	mov.w	r0, #0
   d96bc:	4770      	bx	lr
   d96be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d96c2:	d102      	bne.n	d96ca <__aeabi_d2uiz+0x3a>
   d96c4:	f04f 30ff 	mov.w	r0, #4294967295
   d96c8:	4770      	bx	lr
   d96ca:	f04f 0000 	mov.w	r0, #0
   d96ce:	4770      	bx	lr

000d96d0 <__aeabi_d2f>:
   d96d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d96d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d96d8:	bf24      	itt	cs
   d96da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d96de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d96e2:	d90d      	bls.n	d9700 <__aeabi_d2f+0x30>
   d96e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d96e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d96ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d96f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d96f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d96f8:	bf08      	it	eq
   d96fa:	f020 0001 	biceq.w	r0, r0, #1
   d96fe:	4770      	bx	lr
   d9700:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9704:	d121      	bne.n	d974a <__aeabi_d2f+0x7a>
   d9706:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d970a:	bfbc      	itt	lt
   d970c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9710:	4770      	bxlt	lr
   d9712:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9716:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d971a:	f1c2 0218 	rsb	r2, r2, #24
   d971e:	f1c2 0c20 	rsb	ip, r2, #32
   d9722:	fa10 f30c 	lsls.w	r3, r0, ip
   d9726:	fa20 f002 	lsr.w	r0, r0, r2
   d972a:	bf18      	it	ne
   d972c:	f040 0001 	orrne.w	r0, r0, #1
   d9730:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9734:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9738:	fa03 fc0c 	lsl.w	ip, r3, ip
   d973c:	ea40 000c 	orr.w	r0, r0, ip
   d9740:	fa23 f302 	lsr.w	r3, r3, r2
   d9744:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9748:	e7cc      	b.n	d96e4 <__aeabi_d2f+0x14>
   d974a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d974e:	d107      	bne.n	d9760 <__aeabi_d2f+0x90>
   d9750:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9754:	bf1e      	ittt	ne
   d9756:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d975a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d975e:	4770      	bxne	lr
   d9760:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9764:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d976c:	4770      	bx	lr
   d976e:	bf00      	nop

000d9770 <atof>:
   d9770:	2100      	movs	r1, #0
   d9772:	f000 bfad 	b.w	da6d0 <strtod>
	...

000d9778 <__cxa_atexit>:
   d9778:	b510      	push	{r4, lr}
   d977a:	4c05      	ldr	r4, [pc, #20]	; (d9790 <__cxa_atexit+0x18>)
   d977c:	4613      	mov	r3, r2
   d977e:	b12c      	cbz	r4, d978c <__cxa_atexit+0x14>
   d9780:	460a      	mov	r2, r1
   d9782:	4601      	mov	r1, r0
   d9784:	2002      	movs	r0, #2
   d9786:	f3af 8000 	nop.w
   d978a:	bd10      	pop	{r4, pc}
   d978c:	4620      	mov	r0, r4
   d978e:	bd10      	pop	{r4, pc}
   d9790:	00000000 	.word	0x00000000

000d9794 <localtime>:
   d9794:	b538      	push	{r3, r4, r5, lr}
   d9796:	4b07      	ldr	r3, [pc, #28]	; (d97b4 <localtime+0x20>)
   d9798:	681c      	ldr	r4, [r3, #0]
   d979a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d979c:	4605      	mov	r5, r0
   d979e:	b91b      	cbnz	r3, d97a8 <localtime+0x14>
   d97a0:	2024      	movs	r0, #36	; 0x24
   d97a2:	f7fd ff6f 	bl	d7684 <malloc>
   d97a6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d97a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d97aa:	4628      	mov	r0, r5
   d97ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d97b0:	f000 b802 	b.w	d97b8 <localtime_r>
   d97b4:	2003da40 	.word	0x2003da40

000d97b8 <localtime_r>:
   d97b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d97bc:	460c      	mov	r4, r1
   d97be:	4680      	mov	r8, r0
   d97c0:	f001 fda8 	bl	db314 <__gettzinfo>
   d97c4:	4621      	mov	r1, r4
   d97c6:	4607      	mov	r7, r0
   d97c8:	4640      	mov	r0, r8
   d97ca:	f001 fda7 	bl	db31c <gmtime_r>
   d97ce:	6946      	ldr	r6, [r0, #20]
   d97d0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d97d4:	07b3      	lsls	r3, r6, #30
   d97d6:	4604      	mov	r4, r0
   d97d8:	d105      	bne.n	d97e6 <localtime_r+0x2e>
   d97da:	2264      	movs	r2, #100	; 0x64
   d97dc:	fb96 f3f2 	sdiv	r3, r6, r2
   d97e0:	fb02 6313 	mls	r3, r2, r3, r6
   d97e4:	b94b      	cbnz	r3, d97fa <localtime_r+0x42>
   d97e6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d97ea:	fb96 f3f5 	sdiv	r3, r6, r5
   d97ee:	fb05 6513 	mls	r5, r5, r3, r6
   d97f2:	fab5 f385 	clz	r3, r5
   d97f6:	095b      	lsrs	r3, r3, #5
   d97f8:	e000      	b.n	d97fc <localtime_r+0x44>
   d97fa:	2301      	movs	r3, #1
   d97fc:	4a5f      	ldr	r2, [pc, #380]	; (d997c <localtime_r+0x1c4>)
   d97fe:	2530      	movs	r5, #48	; 0x30
   d9800:	fb05 2503 	mla	r5, r5, r3, r2
   d9804:	f001 f89c 	bl	da940 <__tz_lock>
   d9808:	f001 f89c 	bl	da944 <_tzset_unlocked>
   d980c:	4b5c      	ldr	r3, [pc, #368]	; (d9980 <localtime_r+0x1c8>)
   d980e:	681b      	ldr	r3, [r3, #0]
   d9810:	b1f3      	cbz	r3, d9850 <localtime_r+0x98>
   d9812:	687b      	ldr	r3, [r7, #4]
   d9814:	429e      	cmp	r6, r3
   d9816:	d105      	bne.n	d9824 <localtime_r+0x6c>
   d9818:	6839      	ldr	r1, [r7, #0]
   d981a:	f8d8 3000 	ldr.w	r3, [r8]
   d981e:	69fa      	ldr	r2, [r7, #28]
   d9820:	b941      	cbnz	r1, d9834 <localtime_r+0x7c>
   d9822:	e00a      	b.n	d983a <localtime_r+0x82>
   d9824:	4630      	mov	r0, r6
   d9826:	f000 ffe3 	bl	da7f0 <__tzcalc_limits>
   d982a:	2800      	cmp	r0, #0
   d982c:	d1f4      	bne.n	d9818 <localtime_r+0x60>
   d982e:	f04f 33ff 	mov.w	r3, #4294967295
   d9832:	e00d      	b.n	d9850 <localtime_r+0x98>
   d9834:	4293      	cmp	r3, r2
   d9836:	db08      	blt.n	d984a <localtime_r+0x92>
   d9838:	e001      	b.n	d983e <localtime_r+0x86>
   d983a:	4293      	cmp	r3, r2
   d983c:	da07      	bge.n	d984e <localtime_r+0x96>
   d983e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9840:	4293      	cmp	r3, r2
   d9842:	bfac      	ite	ge
   d9844:	2300      	movge	r3, #0
   d9846:	2301      	movlt	r3, #1
   d9848:	e002      	b.n	d9850 <localtime_r+0x98>
   d984a:	2300      	movs	r3, #0
   d984c:	e000      	b.n	d9850 <localtime_r+0x98>
   d984e:	2301      	movs	r3, #1
   d9850:	6223      	str	r3, [r4, #32]
   d9852:	6a23      	ldr	r3, [r4, #32]
   d9854:	2b01      	cmp	r3, #1
   d9856:	bf0c      	ite	eq
   d9858:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d985a:	6a39      	ldrne	r1, [r7, #32]
   d985c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9860:	203c      	movs	r0, #60	; 0x3c
   d9862:	fb91 f6f3 	sdiv	r6, r1, r3
   d9866:	fb03 1316 	mls	r3, r3, r6, r1
   d986a:	6861      	ldr	r1, [r4, #4]
   d986c:	fb93 f2f0 	sdiv	r2, r3, r0
   d9870:	fb00 3012 	mls	r0, r0, r2, r3
   d9874:	6823      	ldr	r3, [r4, #0]
   d9876:	1a89      	subs	r1, r1, r2
   d9878:	68a2      	ldr	r2, [r4, #8]
   d987a:	6061      	str	r1, [r4, #4]
   d987c:	1a1b      	subs	r3, r3, r0
   d987e:	1b92      	subs	r2, r2, r6
   d9880:	2b3b      	cmp	r3, #59	; 0x3b
   d9882:	6023      	str	r3, [r4, #0]
   d9884:	60a2      	str	r2, [r4, #8]
   d9886:	dd03      	ble.n	d9890 <localtime_r+0xd8>
   d9888:	3101      	adds	r1, #1
   d988a:	6061      	str	r1, [r4, #4]
   d988c:	3b3c      	subs	r3, #60	; 0x3c
   d988e:	e004      	b.n	d989a <localtime_r+0xe2>
   d9890:	2b00      	cmp	r3, #0
   d9892:	da03      	bge.n	d989c <localtime_r+0xe4>
   d9894:	3901      	subs	r1, #1
   d9896:	6061      	str	r1, [r4, #4]
   d9898:	333c      	adds	r3, #60	; 0x3c
   d989a:	6023      	str	r3, [r4, #0]
   d989c:	6863      	ldr	r3, [r4, #4]
   d989e:	2b3b      	cmp	r3, #59	; 0x3b
   d98a0:	dd03      	ble.n	d98aa <localtime_r+0xf2>
   d98a2:	3201      	adds	r2, #1
   d98a4:	60a2      	str	r2, [r4, #8]
   d98a6:	3b3c      	subs	r3, #60	; 0x3c
   d98a8:	e004      	b.n	d98b4 <localtime_r+0xfc>
   d98aa:	2b00      	cmp	r3, #0
   d98ac:	da03      	bge.n	d98b6 <localtime_r+0xfe>
   d98ae:	3a01      	subs	r2, #1
   d98b0:	60a2      	str	r2, [r4, #8]
   d98b2:	333c      	adds	r3, #60	; 0x3c
   d98b4:	6063      	str	r3, [r4, #4]
   d98b6:	68a3      	ldr	r3, [r4, #8]
   d98b8:	2b17      	cmp	r3, #23
   d98ba:	dd22      	ble.n	d9902 <localtime_r+0x14a>
   d98bc:	69e2      	ldr	r2, [r4, #28]
   d98be:	3201      	adds	r2, #1
   d98c0:	61e2      	str	r2, [r4, #28]
   d98c2:	69a2      	ldr	r2, [r4, #24]
   d98c4:	3201      	adds	r2, #1
   d98c6:	2a06      	cmp	r2, #6
   d98c8:	bfc8      	it	gt
   d98ca:	2200      	movgt	r2, #0
   d98cc:	61a2      	str	r2, [r4, #24]
   d98ce:	68e2      	ldr	r2, [r4, #12]
   d98d0:	3b18      	subs	r3, #24
   d98d2:	3201      	adds	r2, #1
   d98d4:	60a3      	str	r3, [r4, #8]
   d98d6:	6923      	ldr	r3, [r4, #16]
   d98d8:	60e2      	str	r2, [r4, #12]
   d98da:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d98de:	428a      	cmp	r2, r1
   d98e0:	dd46      	ble.n	d9970 <localtime_r+0x1b8>
   d98e2:	3301      	adds	r3, #1
   d98e4:	2b0c      	cmp	r3, #12
   d98e6:	bf0c      	ite	eq
   d98e8:	6963      	ldreq	r3, [r4, #20]
   d98ea:	6123      	strne	r3, [r4, #16]
   d98ec:	eba2 0201 	sub.w	r2, r2, r1
   d98f0:	60e2      	str	r2, [r4, #12]
   d98f2:	bf01      	itttt	eq
   d98f4:	3301      	addeq	r3, #1
   d98f6:	2200      	moveq	r2, #0
   d98f8:	6122      	streq	r2, [r4, #16]
   d98fa:	6163      	streq	r3, [r4, #20]
   d98fc:	bf08      	it	eq
   d98fe:	61e2      	streq	r2, [r4, #28]
   d9900:	e036      	b.n	d9970 <localtime_r+0x1b8>
   d9902:	2b00      	cmp	r3, #0
   d9904:	da34      	bge.n	d9970 <localtime_r+0x1b8>
   d9906:	69e2      	ldr	r2, [r4, #28]
   d9908:	3a01      	subs	r2, #1
   d990a:	61e2      	str	r2, [r4, #28]
   d990c:	69a2      	ldr	r2, [r4, #24]
   d990e:	3a01      	subs	r2, #1
   d9910:	bf48      	it	mi
   d9912:	2206      	movmi	r2, #6
   d9914:	61a2      	str	r2, [r4, #24]
   d9916:	68e2      	ldr	r2, [r4, #12]
   d9918:	3318      	adds	r3, #24
   d991a:	3a01      	subs	r2, #1
   d991c:	60e2      	str	r2, [r4, #12]
   d991e:	60a3      	str	r3, [r4, #8]
   d9920:	bb32      	cbnz	r2, d9970 <localtime_r+0x1b8>
   d9922:	6923      	ldr	r3, [r4, #16]
   d9924:	3b01      	subs	r3, #1
   d9926:	d401      	bmi.n	d992c <localtime_r+0x174>
   d9928:	6123      	str	r3, [r4, #16]
   d992a:	e01d      	b.n	d9968 <localtime_r+0x1b0>
   d992c:	230b      	movs	r3, #11
   d992e:	6123      	str	r3, [r4, #16]
   d9930:	6963      	ldr	r3, [r4, #20]
   d9932:	1e5a      	subs	r2, r3, #1
   d9934:	f012 0f03 	tst.w	r2, #3
   d9938:	6162      	str	r2, [r4, #20]
   d993a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d993e:	d105      	bne.n	d994c <localtime_r+0x194>
   d9940:	2164      	movs	r1, #100	; 0x64
   d9942:	fb93 f2f1 	sdiv	r2, r3, r1
   d9946:	fb01 3212 	mls	r2, r1, r2, r3
   d994a:	b94a      	cbnz	r2, d9960 <localtime_r+0x1a8>
   d994c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9950:	fb93 f2f1 	sdiv	r2, r3, r1
   d9954:	fb01 3312 	mls	r3, r1, r2, r3
   d9958:	fab3 f383 	clz	r3, r3
   d995c:	095b      	lsrs	r3, r3, #5
   d995e:	e000      	b.n	d9962 <localtime_r+0x1aa>
   d9960:	2301      	movs	r3, #1
   d9962:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9966:	61e3      	str	r3, [r4, #28]
   d9968:	6923      	ldr	r3, [r4, #16]
   d996a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d996e:	60e3      	str	r3, [r4, #12]
   d9970:	f000 ffe7 	bl	da942 <__tz_unlock>
   d9974:	4620      	mov	r0, r4
   d9976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d997a:	bf00      	nop
   d997c:	000dc1a8 	.word	0x000dc1a8
   d9980:	2003e7e4 	.word	0x2003e7e4

000d9984 <_localeconv_r>:
   d9984:	4800      	ldr	r0, [pc, #0]	; (d9988 <_localeconv_r+0x4>)
   d9986:	4770      	bx	lr
   d9988:	2003da44 	.word	0x2003da44

000d998c <memcpy>:
   d998c:	b510      	push	{r4, lr}
   d998e:	1e43      	subs	r3, r0, #1
   d9990:	440a      	add	r2, r1
   d9992:	4291      	cmp	r1, r2
   d9994:	d004      	beq.n	d99a0 <memcpy+0x14>
   d9996:	f811 4b01 	ldrb.w	r4, [r1], #1
   d999a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d999e:	e7f8      	b.n	d9992 <memcpy+0x6>
   d99a0:	bd10      	pop	{r4, pc}

000d99a2 <memset>:
   d99a2:	4402      	add	r2, r0
   d99a4:	4603      	mov	r3, r0
   d99a6:	4293      	cmp	r3, r2
   d99a8:	d002      	beq.n	d99b0 <memset+0xe>
   d99aa:	f803 1b01 	strb.w	r1, [r3], #1
   d99ae:	e7fa      	b.n	d99a6 <memset+0x4>
   d99b0:	4770      	bx	lr
	...

000d99b4 <srand>:
   d99b4:	b538      	push	{r3, r4, r5, lr}
   d99b6:	4b12      	ldr	r3, [pc, #72]	; (d9a00 <srand+0x4c>)
   d99b8:	681c      	ldr	r4, [r3, #0]
   d99ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d99bc:	4605      	mov	r5, r0
   d99be:	b9d3      	cbnz	r3, d99f6 <srand+0x42>
   d99c0:	2018      	movs	r0, #24
   d99c2:	f7fd fe5f 	bl	d7684 <malloc>
   d99c6:	f243 330e 	movw	r3, #13070	; 0x330e
   d99ca:	63a0      	str	r0, [r4, #56]	; 0x38
   d99cc:	8003      	strh	r3, [r0, #0]
   d99ce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d99d2:	8043      	strh	r3, [r0, #2]
   d99d4:	f241 2334 	movw	r3, #4660	; 0x1234
   d99d8:	8083      	strh	r3, [r0, #4]
   d99da:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d99de:	80c3      	strh	r3, [r0, #6]
   d99e0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d99e4:	8103      	strh	r3, [r0, #8]
   d99e6:	2305      	movs	r3, #5
   d99e8:	8143      	strh	r3, [r0, #10]
   d99ea:	230b      	movs	r3, #11
   d99ec:	8183      	strh	r3, [r0, #12]
   d99ee:	2201      	movs	r2, #1
   d99f0:	2300      	movs	r3, #0
   d99f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d99f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d99f8:	2200      	movs	r2, #0
   d99fa:	611d      	str	r5, [r3, #16]
   d99fc:	615a      	str	r2, [r3, #20]
   d99fe:	bd38      	pop	{r3, r4, r5, pc}
   d9a00:	2003da40 	.word	0x2003da40

000d9a04 <strcmp>:
   d9a04:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9a08:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9a0c:	2a01      	cmp	r2, #1
   d9a0e:	bf28      	it	cs
   d9a10:	429a      	cmpcs	r2, r3
   d9a12:	d0f7      	beq.n	d9a04 <strcmp>
   d9a14:	1ad0      	subs	r0, r2, r3
   d9a16:	4770      	bx	lr

000d9a18 <strcpy>:
   d9a18:	4603      	mov	r3, r0
   d9a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9a1e:	f803 2b01 	strb.w	r2, [r3], #1
   d9a22:	2a00      	cmp	r2, #0
   d9a24:	d1f9      	bne.n	d9a1a <strcpy+0x2>
   d9a26:	4770      	bx	lr

000d9a28 <strdup>:
   d9a28:	4b02      	ldr	r3, [pc, #8]	; (d9a34 <strdup+0xc>)
   d9a2a:	4601      	mov	r1, r0
   d9a2c:	6818      	ldr	r0, [r3, #0]
   d9a2e:	f000 b803 	b.w	d9a38 <_strdup_r>
   d9a32:	bf00      	nop
   d9a34:	2003da40 	.word	0x2003da40

000d9a38 <_strdup_r>:
   d9a38:	b570      	push	{r4, r5, r6, lr}
   d9a3a:	4606      	mov	r6, r0
   d9a3c:	4608      	mov	r0, r1
   d9a3e:	460c      	mov	r4, r1
   d9a40:	f000 f80d 	bl	d9a5e <strlen>
   d9a44:	1c45      	adds	r5, r0, #1
   d9a46:	4629      	mov	r1, r5
   d9a48:	4630      	mov	r0, r6
   d9a4a:	f7fd fe3b 	bl	d76c4 <_malloc_r>
   d9a4e:	4606      	mov	r6, r0
   d9a50:	b118      	cbz	r0, d9a5a <_strdup_r+0x22>
   d9a52:	462a      	mov	r2, r5
   d9a54:	4621      	mov	r1, r4
   d9a56:	f7ff ff99 	bl	d998c <memcpy>
   d9a5a:	4630      	mov	r0, r6
   d9a5c:	bd70      	pop	{r4, r5, r6, pc}

000d9a5e <strlen>:
   d9a5e:	4603      	mov	r3, r0
   d9a60:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9a64:	2a00      	cmp	r2, #0
   d9a66:	d1fb      	bne.n	d9a60 <strlen+0x2>
   d9a68:	1a18      	subs	r0, r3, r0
   d9a6a:	3801      	subs	r0, #1
   d9a6c:	4770      	bx	lr

000d9a6e <strncmp>:
   d9a6e:	b530      	push	{r4, r5, lr}
   d9a70:	b182      	cbz	r2, d9a94 <strncmp+0x26>
   d9a72:	1e45      	subs	r5, r0, #1
   d9a74:	3901      	subs	r1, #1
   d9a76:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9a7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9a7e:	42a3      	cmp	r3, r4
   d9a80:	d106      	bne.n	d9a90 <strncmp+0x22>
   d9a82:	43ec      	mvns	r4, r5
   d9a84:	4414      	add	r4, r2
   d9a86:	42e0      	cmn	r0, r4
   d9a88:	d001      	beq.n	d9a8e <strncmp+0x20>
   d9a8a:	2b00      	cmp	r3, #0
   d9a8c:	d1f3      	bne.n	d9a76 <strncmp+0x8>
   d9a8e:	461c      	mov	r4, r3
   d9a90:	1b18      	subs	r0, r3, r4
   d9a92:	bd30      	pop	{r4, r5, pc}
   d9a94:	4610      	mov	r0, r2
   d9a96:	bd30      	pop	{r4, r5, pc}

000d9a98 <sulp>:
   d9a98:	b570      	push	{r4, r5, r6, lr}
   d9a9a:	4604      	mov	r4, r0
   d9a9c:	460d      	mov	r5, r1
   d9a9e:	ec45 4b10 	vmov	d0, r4, r5
   d9aa2:	4616      	mov	r6, r2
   d9aa4:	f001 ff98 	bl	db9d8 <__ulp>
   d9aa8:	ec51 0b10 	vmov	r0, r1, d0
   d9aac:	b17e      	cbz	r6, d9ace <sulp+0x36>
   d9aae:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9ab2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9ab6:	2b00      	cmp	r3, #0
   d9ab8:	dd09      	ble.n	d9ace <sulp+0x36>
   d9aba:	051b      	lsls	r3, r3, #20
   d9abc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9ac0:	2400      	movs	r4, #0
   d9ac2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9ac6:	4622      	mov	r2, r4
   d9ac8:	462b      	mov	r3, r5
   d9aca:	f7ff fb1f 	bl	d910c <__aeabi_dmul>
   d9ace:	bd70      	pop	{r4, r5, r6, pc}

000d9ad0 <_strtod_r>:
   d9ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ad4:	b09d      	sub	sp, #116	; 0x74
   d9ad6:	2300      	movs	r3, #0
   d9ad8:	9002      	str	r0, [sp, #8]
   d9ada:	460c      	mov	r4, r1
   d9adc:	9213      	str	r2, [sp, #76]	; 0x4c
   d9ade:	9318      	str	r3, [sp, #96]	; 0x60
   d9ae0:	f04f 0a00 	mov.w	sl, #0
   d9ae4:	f04f 0b00 	mov.w	fp, #0
   d9ae8:	9117      	str	r1, [sp, #92]	; 0x5c
   d9aea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9aec:	781a      	ldrb	r2, [r3, #0]
   d9aee:	2a0d      	cmp	r2, #13
   d9af0:	d805      	bhi.n	d9afe <_strtod_r+0x2e>
   d9af2:	2a09      	cmp	r2, #9
   d9af4:	d213      	bcs.n	d9b1e <_strtod_r+0x4e>
   d9af6:	2a00      	cmp	r2, #0
   d9af8:	f000 81ac 	beq.w	d9e54 <_strtod_r+0x384>
   d9afc:	e012      	b.n	d9b24 <_strtod_r+0x54>
   d9afe:	2a2b      	cmp	r2, #43	; 0x2b
   d9b00:	d004      	beq.n	d9b0c <_strtod_r+0x3c>
   d9b02:	2a2d      	cmp	r2, #45	; 0x2d
   d9b04:	d004      	beq.n	d9b10 <_strtod_r+0x40>
   d9b06:	2a20      	cmp	r2, #32
   d9b08:	d10c      	bne.n	d9b24 <_strtod_r+0x54>
   d9b0a:	e008      	b.n	d9b1e <_strtod_r+0x4e>
   d9b0c:	2200      	movs	r2, #0
   d9b0e:	e000      	b.n	d9b12 <_strtod_r+0x42>
   d9b10:	2201      	movs	r2, #1
   d9b12:	920c      	str	r2, [sp, #48]	; 0x30
   d9b14:	1c5a      	adds	r2, r3, #1
   d9b16:	9217      	str	r2, [sp, #92]	; 0x5c
   d9b18:	785b      	ldrb	r3, [r3, #1]
   d9b1a:	b92b      	cbnz	r3, d9b28 <_strtod_r+0x58>
   d9b1c:	e19a      	b.n	d9e54 <_strtod_r+0x384>
   d9b1e:	3301      	adds	r3, #1
   d9b20:	9317      	str	r3, [sp, #92]	; 0x5c
   d9b22:	e7e2      	b.n	d9aea <_strtod_r+0x1a>
   d9b24:	2300      	movs	r3, #0
   d9b26:	930c      	str	r3, [sp, #48]	; 0x30
   d9b28:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9b2a:	782b      	ldrb	r3, [r5, #0]
   d9b2c:	2b30      	cmp	r3, #48	; 0x30
   d9b2e:	d15c      	bne.n	d9bea <_strtod_r+0x11a>
   d9b30:	786b      	ldrb	r3, [r5, #1]
   d9b32:	2b58      	cmp	r3, #88	; 0x58
   d9b34:	d001      	beq.n	d9b3a <_strtod_r+0x6a>
   d9b36:	2b78      	cmp	r3, #120	; 0x78
   d9b38:	d14c      	bne.n	d9bd4 <_strtod_r+0x104>
   d9b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9b3c:	9301      	str	r3, [sp, #4]
   d9b3e:	ab18      	add	r3, sp, #96	; 0x60
   d9b40:	9300      	str	r3, [sp, #0]
   d9b42:	4aa9      	ldr	r2, [pc, #676]	; (d9de8 <_strtod_r+0x318>)
   d9b44:	9802      	ldr	r0, [sp, #8]
   d9b46:	ab19      	add	r3, sp, #100	; 0x64
   d9b48:	a917      	add	r1, sp, #92	; 0x5c
   d9b4a:	f001 f8cc 	bl	dace6 <__gethex>
   d9b4e:	f010 0607 	ands.w	r6, r0, #7
   d9b52:	4604      	mov	r4, r0
   d9b54:	f000 8587 	beq.w	da666 <_strtod_r+0xb96>
   d9b58:	2e06      	cmp	r6, #6
   d9b5a:	d105      	bne.n	d9b68 <_strtod_r+0x98>
   d9b5c:	3501      	adds	r5, #1
   d9b5e:	2300      	movs	r3, #0
   d9b60:	9517      	str	r5, [sp, #92]	; 0x5c
   d9b62:	930c      	str	r3, [sp, #48]	; 0x30
   d9b64:	f000 bd7f 	b.w	da666 <_strtod_r+0xb96>
   d9b68:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9b6a:	b13a      	cbz	r2, d9b7c <_strtod_r+0xac>
   d9b6c:	2135      	movs	r1, #53	; 0x35
   d9b6e:	a81a      	add	r0, sp, #104	; 0x68
   d9b70:	f002 f81f 	bl	dbbb2 <__copybits>
   d9b74:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9b76:	9802      	ldr	r0, [sp, #8]
   d9b78:	f001 fc9d 	bl	db4b6 <_Bfree>
   d9b7c:	2e06      	cmp	r6, #6
   d9b7e:	d822      	bhi.n	d9bc6 <_strtod_r+0xf6>
   d9b80:	e8df f006 	tbb	[pc, r6]
   d9b84:	18080d04 	.word	0x18080d04
   d9b88:	0d1d      	.short	0x0d1d
   d9b8a:	04          	.byte	0x04
   d9b8b:	00          	.byte	0x00
   d9b8c:	f04f 0b00 	mov.w	fp, #0
   d9b90:	46da      	mov	sl, fp
   d9b92:	e018      	b.n	d9bc6 <_strtod_r+0xf6>
   d9b94:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9b98:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d9b9c:	e013      	b.n	d9bc6 <_strtod_r+0xf6>
   d9b9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9ba0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9ba2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9ba6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9baa:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9bae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9bb2:	e008      	b.n	d9bc6 <_strtod_r+0xf6>
   d9bb4:	f8df b234 	ldr.w	fp, [pc, #564]	; d9dec <_strtod_r+0x31c>
   d9bb8:	f04f 0a00 	mov.w	sl, #0
   d9bbc:	e003      	b.n	d9bc6 <_strtod_r+0xf6>
   d9bbe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9bc2:	f04f 3aff 	mov.w	sl, #4294967295
   d9bc6:	0721      	lsls	r1, r4, #28
   d9bc8:	f140 854d 	bpl.w	da666 <_strtod_r+0xb96>
   d9bcc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9bd0:	f000 bd49 	b.w	da666 <_strtod_r+0xb96>
   d9bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9bd6:	1c5a      	adds	r2, r3, #1
   d9bd8:	9217      	str	r2, [sp, #92]	; 0x5c
   d9bda:	785b      	ldrb	r3, [r3, #1]
   d9bdc:	2b30      	cmp	r3, #48	; 0x30
   d9bde:	d0f9      	beq.n	d9bd4 <_strtod_r+0x104>
   d9be0:	2b00      	cmp	r3, #0
   d9be2:	f000 8540 	beq.w	da666 <_strtod_r+0xb96>
   d9be6:	2301      	movs	r3, #1
   d9be8:	e000      	b.n	d9bec <_strtod_r+0x11c>
   d9bea:	2300      	movs	r3, #0
   d9bec:	f04f 0800 	mov.w	r8, #0
   d9bf0:	9306      	str	r3, [sp, #24]
   d9bf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9bf4:	9307      	str	r3, [sp, #28]
   d9bf6:	f8cd 8014 	str.w	r8, [sp, #20]
   d9bfa:	f8cd 8010 	str.w	r8, [sp, #16]
   d9bfe:	220a      	movs	r2, #10
   d9c00:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9c02:	782e      	ldrb	r6, [r5, #0]
   d9c04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9c08:	b2d9      	uxtb	r1, r3
   d9c0a:	2909      	cmp	r1, #9
   d9c0c:	d80e      	bhi.n	d9c2c <_strtod_r+0x15c>
   d9c0e:	9904      	ldr	r1, [sp, #16]
   d9c10:	2908      	cmp	r1, #8
   d9c12:	bfdd      	ittte	le
   d9c14:	9905      	ldrle	r1, [sp, #20]
   d9c16:	fb02 3301 	mlale	r3, r2, r1, r3
   d9c1a:	9305      	strle	r3, [sp, #20]
   d9c1c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9c20:	9b04      	ldr	r3, [sp, #16]
   d9c22:	3501      	adds	r5, #1
   d9c24:	3301      	adds	r3, #1
   d9c26:	9304      	str	r3, [sp, #16]
   d9c28:	9517      	str	r5, [sp, #92]	; 0x5c
   d9c2a:	e7e9      	b.n	d9c00 <_strtod_r+0x130>
   d9c2c:	9802      	ldr	r0, [sp, #8]
   d9c2e:	f7ff fea9 	bl	d9984 <_localeconv_r>
   d9c32:	6807      	ldr	r7, [r0, #0]
   d9c34:	9802      	ldr	r0, [sp, #8]
   d9c36:	f7ff fea5 	bl	d9984 <_localeconv_r>
   d9c3a:	6800      	ldr	r0, [r0, #0]
   d9c3c:	f7ff ff0f 	bl	d9a5e <strlen>
   d9c40:	4639      	mov	r1, r7
   d9c42:	4602      	mov	r2, r0
   d9c44:	4628      	mov	r0, r5
   d9c46:	f7ff ff12 	bl	d9a6e <strncmp>
   d9c4a:	4607      	mov	r7, r0
   d9c4c:	b128      	cbz	r0, d9c5a <_strtod_r+0x18a>
   d9c4e:	2000      	movs	r0, #0
   d9c50:	4633      	mov	r3, r6
   d9c52:	9d04      	ldr	r5, [sp, #16]
   d9c54:	4602      	mov	r2, r0
   d9c56:	4601      	mov	r1, r0
   d9c58:	e057      	b.n	d9d0a <_strtod_r+0x23a>
   d9c5a:	9802      	ldr	r0, [sp, #8]
   d9c5c:	f7ff fe92 	bl	d9984 <_localeconv_r>
   d9c60:	6800      	ldr	r0, [r0, #0]
   d9c62:	f7ff fefc 	bl	d9a5e <strlen>
   d9c66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9c68:	181a      	adds	r2, r3, r0
   d9c6a:	9217      	str	r2, [sp, #92]	; 0x5c
   d9c6c:	9a04      	ldr	r2, [sp, #16]
   d9c6e:	5c1b      	ldrb	r3, [r3, r0]
   d9c70:	2a00      	cmp	r2, #0
   d9c72:	d142      	bne.n	d9cfa <_strtod_r+0x22a>
   d9c74:	4610      	mov	r0, r2
   d9c76:	2b30      	cmp	r3, #48	; 0x30
   d9c78:	d105      	bne.n	d9c86 <_strtod_r+0x1b6>
   d9c7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9c7c:	1c5a      	adds	r2, r3, #1
   d9c7e:	9217      	str	r2, [sp, #92]	; 0x5c
   d9c80:	3001      	adds	r0, #1
   d9c82:	785b      	ldrb	r3, [r3, #1]
   d9c84:	e7f7      	b.n	d9c76 <_strtod_r+0x1a6>
   d9c86:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9c8a:	2a08      	cmp	r2, #8
   d9c8c:	d843      	bhi.n	d9d16 <_strtod_r+0x246>
   d9c8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d9c90:	9207      	str	r2, [sp, #28]
   d9c92:	4602      	mov	r2, r0
   d9c94:	2000      	movs	r0, #0
   d9c96:	4605      	mov	r5, r0
   d9c98:	3b30      	subs	r3, #48	; 0x30
   d9c9a:	f100 0101 	add.w	r1, r0, #1
   d9c9e:	d026      	beq.n	d9cee <_strtod_r+0x21e>
   d9ca0:	440a      	add	r2, r1
   d9ca2:	eb05 0c00 	add.w	ip, r5, r0
   d9ca6:	4629      	mov	r1, r5
   d9ca8:	260a      	movs	r6, #10
   d9caa:	4561      	cmp	r1, ip
   d9cac:	d00e      	beq.n	d9ccc <_strtod_r+0x1fc>
   d9cae:	3101      	adds	r1, #1
   d9cb0:	f101 3eff 	add.w	lr, r1, #4294967295
   d9cb4:	f1be 0f08 	cmp.w	lr, #8
   d9cb8:	dc03      	bgt.n	d9cc2 <_strtod_r+0x1f2>
   d9cba:	9f05      	ldr	r7, [sp, #20]
   d9cbc:	4377      	muls	r7, r6
   d9cbe:	9705      	str	r7, [sp, #20]
   d9cc0:	e7f3      	b.n	d9caa <_strtod_r+0x1da>
   d9cc2:	2910      	cmp	r1, #16
   d9cc4:	bfd8      	it	le
   d9cc6:	fb06 f808 	mulle.w	r8, r6, r8
   d9cca:	e7ee      	b.n	d9caa <_strtod_r+0x1da>
   d9ccc:	4428      	add	r0, r5
   d9cce:	2808      	cmp	r0, #8
   d9cd0:	f100 0501 	add.w	r5, r0, #1
   d9cd4:	dc05      	bgt.n	d9ce2 <_strtod_r+0x212>
   d9cd6:	9805      	ldr	r0, [sp, #20]
   d9cd8:	210a      	movs	r1, #10
   d9cda:	fb01 3300 	mla	r3, r1, r0, r3
   d9cde:	9305      	str	r3, [sp, #20]
   d9ce0:	e004      	b.n	d9cec <_strtod_r+0x21c>
   d9ce2:	2d10      	cmp	r5, #16
   d9ce4:	bfdc      	itt	le
   d9ce6:	210a      	movle	r1, #10
   d9ce8:	fb01 3808 	mlale	r8, r1, r8, r3
   d9cec:	2100      	movs	r1, #0
   d9cee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9cf0:	1c58      	adds	r0, r3, #1
   d9cf2:	9017      	str	r0, [sp, #92]	; 0x5c
   d9cf4:	785b      	ldrb	r3, [r3, #1]
   d9cf6:	4608      	mov	r0, r1
   d9cf8:	e002      	b.n	d9d00 <_strtod_r+0x230>
   d9cfa:	9d04      	ldr	r5, [sp, #16]
   d9cfc:	4638      	mov	r0, r7
   d9cfe:	463a      	mov	r2, r7
   d9d00:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9d04:	2909      	cmp	r1, #9
   d9d06:	d9c7      	bls.n	d9c98 <_strtod_r+0x1c8>
   d9d08:	2101      	movs	r1, #1
   d9d0a:	2b65      	cmp	r3, #101	; 0x65
   d9d0c:	d001      	beq.n	d9d12 <_strtod_r+0x242>
   d9d0e:	2b45      	cmp	r3, #69	; 0x45
   d9d10:	d151      	bne.n	d9db6 <_strtod_r+0x2e6>
   d9d12:	b96d      	cbnz	r5, d9d30 <_strtod_r+0x260>
   d9d14:	e004      	b.n	d9d20 <_strtod_r+0x250>
   d9d16:	2b65      	cmp	r3, #101	; 0x65
   d9d18:	f040 84b3 	bne.w	da682 <_strtod_r+0xbb2>
   d9d1c:	2200      	movs	r2, #0
   d9d1e:	2101      	movs	r1, #1
   d9d20:	b928      	cbnz	r0, d9d2e <_strtod_r+0x25e>
   d9d22:	9b06      	ldr	r3, [sp, #24]
   d9d24:	2b00      	cmp	r3, #0
   d9d26:	f000 8095 	beq.w	d9e54 <_strtod_r+0x384>
   d9d2a:	4605      	mov	r5, r0
   d9d2c:	e000      	b.n	d9d30 <_strtod_r+0x260>
   d9d2e:	2500      	movs	r5, #0
   d9d30:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d9d32:	1c63      	adds	r3, r4, #1
   d9d34:	9317      	str	r3, [sp, #92]	; 0x5c
   d9d36:	7863      	ldrb	r3, [r4, #1]
   d9d38:	2b2b      	cmp	r3, #43	; 0x2b
   d9d3a:	d006      	beq.n	d9d4a <_strtod_r+0x27a>
   d9d3c:	2b2d      	cmp	r3, #45	; 0x2d
   d9d3e:	d002      	beq.n	d9d46 <_strtod_r+0x276>
   d9d40:	2600      	movs	r6, #0
   d9d42:	9603      	str	r6, [sp, #12]
   d9d44:	e006      	b.n	d9d54 <_strtod_r+0x284>
   d9d46:	2301      	movs	r3, #1
   d9d48:	e000      	b.n	d9d4c <_strtod_r+0x27c>
   d9d4a:	2300      	movs	r3, #0
   d9d4c:	9303      	str	r3, [sp, #12]
   d9d4e:	1ca3      	adds	r3, r4, #2
   d9d50:	9317      	str	r3, [sp, #92]	; 0x5c
   d9d52:	78a3      	ldrb	r3, [r4, #2]
   d9d54:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9d58:	2e09      	cmp	r6, #9
   d9d5a:	d82b      	bhi.n	d9db4 <_strtod_r+0x2e4>
   d9d5c:	2b30      	cmp	r3, #48	; 0x30
   d9d5e:	d104      	bne.n	d9d6a <_strtod_r+0x29a>
   d9d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9d62:	1c5e      	adds	r6, r3, #1
   d9d64:	9617      	str	r6, [sp, #92]	; 0x5c
   d9d66:	785b      	ldrb	r3, [r3, #1]
   d9d68:	e7f8      	b.n	d9d5c <_strtod_r+0x28c>
   d9d6a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d9d6e:	2e08      	cmp	r6, #8
   d9d70:	d821      	bhi.n	d9db6 <_strtod_r+0x2e6>
   d9d72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9d76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9d78:	f04f 0c0a 	mov.w	ip, #10
   d9d7c:	461f      	mov	r7, r3
   d9d7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9d80:	1c5e      	adds	r6, r3, #1
   d9d82:	9617      	str	r6, [sp, #92]	; 0x5c
   d9d84:	785b      	ldrb	r3, [r3, #1]
   d9d86:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d9d8a:	f1b9 0f09 	cmp.w	r9, #9
   d9d8e:	d804      	bhi.n	d9d9a <_strtod_r+0x2ca>
   d9d90:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d9d94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9d98:	e7f1      	b.n	d9d7e <_strtod_r+0x2ae>
   d9d9a:	1bf6      	subs	r6, r6, r7
   d9d9c:	2e08      	cmp	r6, #8
   d9d9e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d9da2:	dc02      	bgt.n	d9daa <_strtod_r+0x2da>
   d9da4:	45f1      	cmp	r9, lr
   d9da6:	bfa8      	it	ge
   d9da8:	46f1      	movge	r9, lr
   d9daa:	9e03      	ldr	r6, [sp, #12]
   d9dac:	b12e      	cbz	r6, d9dba <_strtod_r+0x2ea>
   d9dae:	f1c9 0900 	rsb	r9, r9, #0
   d9db2:	e002      	b.n	d9dba <_strtod_r+0x2ea>
   d9db4:	9417      	str	r4, [sp, #92]	; 0x5c
   d9db6:	f04f 0900 	mov.w	r9, #0
   d9dba:	2d00      	cmp	r5, #0
   d9dbc:	d153      	bne.n	d9e66 <_strtod_r+0x396>
   d9dbe:	2800      	cmp	r0, #0
   d9dc0:	f040 8451 	bne.w	da666 <_strtod_r+0xb96>
   d9dc4:	9a06      	ldr	r2, [sp, #24]
   d9dc6:	2a00      	cmp	r2, #0
   d9dc8:	f040 844d 	bne.w	da666 <_strtod_r+0xb96>
   d9dcc:	2900      	cmp	r1, #0
   d9dce:	d141      	bne.n	d9e54 <_strtod_r+0x384>
   d9dd0:	2b4e      	cmp	r3, #78	; 0x4e
   d9dd2:	d020      	beq.n	d9e16 <_strtod_r+0x346>
   d9dd4:	dc02      	bgt.n	d9ddc <_strtod_r+0x30c>
   d9dd6:	2b49      	cmp	r3, #73	; 0x49
   d9dd8:	d00a      	beq.n	d9df0 <_strtod_r+0x320>
   d9dda:	e03b      	b.n	d9e54 <_strtod_r+0x384>
   d9ddc:	2b69      	cmp	r3, #105	; 0x69
   d9dde:	d007      	beq.n	d9df0 <_strtod_r+0x320>
   d9de0:	2b6e      	cmp	r3, #110	; 0x6e
   d9de2:	d018      	beq.n	d9e16 <_strtod_r+0x346>
   d9de4:	e036      	b.n	d9e54 <_strtod_r+0x384>
   d9de6:	bf00      	nop
   d9de8:	000dc208 	.word	0x000dc208
   d9dec:	7ff00000 	.word	0x7ff00000
   d9df0:	49a8      	ldr	r1, [pc, #672]	; (da094 <_strtod_r+0x5c4>)
   d9df2:	a817      	add	r0, sp, #92	; 0x5c
   d9df4:	f001 f9a8 	bl	db148 <__match>
   d9df8:	b360      	cbz	r0, d9e54 <_strtod_r+0x384>
   d9dfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9dfc:	49a6      	ldr	r1, [pc, #664]	; (da098 <_strtod_r+0x5c8>)
   d9dfe:	3b01      	subs	r3, #1
   d9e00:	a817      	add	r0, sp, #92	; 0x5c
   d9e02:	9317      	str	r3, [sp, #92]	; 0x5c
   d9e04:	f001 f9a0 	bl	db148 <__match>
   d9e08:	b910      	cbnz	r0, d9e10 <_strtod_r+0x340>
   d9e0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9e0c:	3301      	adds	r3, #1
   d9e0e:	9317      	str	r3, [sp, #92]	; 0x5c
   d9e10:	f8df b2a0 	ldr.w	fp, [pc, #672]	; da0b4 <_strtod_r+0x5e4>
   d9e14:	e01a      	b.n	d9e4c <_strtod_r+0x37c>
   d9e16:	49a1      	ldr	r1, [pc, #644]	; (da09c <_strtod_r+0x5cc>)
   d9e18:	a817      	add	r0, sp, #92	; 0x5c
   d9e1a:	f001 f995 	bl	db148 <__match>
   d9e1e:	b1c8      	cbz	r0, d9e54 <_strtod_r+0x384>
   d9e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9e22:	781b      	ldrb	r3, [r3, #0]
   d9e24:	2b28      	cmp	r3, #40	; 0x28
   d9e26:	d10f      	bne.n	d9e48 <_strtod_r+0x378>
   d9e28:	aa1a      	add	r2, sp, #104	; 0x68
   d9e2a:	499d      	ldr	r1, [pc, #628]	; (da0a0 <_strtod_r+0x5d0>)
   d9e2c:	a817      	add	r0, sp, #92	; 0x5c
   d9e2e:	f001 f99e 	bl	db16e <__hexnan>
   d9e32:	2805      	cmp	r0, #5
   d9e34:	d108      	bne.n	d9e48 <_strtod_r+0x378>
   d9e36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9e38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9e3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9e40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9e44:	f000 bc0f 	b.w	da666 <_strtod_r+0xb96>
   d9e48:	f8df b26c 	ldr.w	fp, [pc, #620]	; da0b8 <_strtod_r+0x5e8>
   d9e4c:	f04f 0a00 	mov.w	sl, #0
   d9e50:	f000 bc09 	b.w	da666 <_strtod_r+0xb96>
   d9e54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9e56:	9417      	str	r4, [sp, #92]	; 0x5c
   d9e58:	2b00      	cmp	r3, #0
   d9e5a:	f000 840f 	beq.w	da67c <_strtod_r+0xbac>
   d9e5e:	2300      	movs	r3, #0
   d9e60:	930c      	str	r3, [sp, #48]	; 0x30
   d9e62:	f000 bc02 	b.w	da66a <_strtod_r+0xb9a>
   d9e66:	9b04      	ldr	r3, [sp, #16]
   d9e68:	9805      	ldr	r0, [sp, #20]
   d9e6a:	2b00      	cmp	r3, #0
   d9e6c:	bf08      	it	eq
   d9e6e:	462b      	moveq	r3, r5
   d9e70:	2d10      	cmp	r5, #16
   d9e72:	462c      	mov	r4, r5
   d9e74:	ebc2 0909 	rsb	r9, r2, r9
   d9e78:	bfa8      	it	ge
   d9e7a:	2410      	movge	r4, #16
   d9e7c:	9304      	str	r3, [sp, #16]
   d9e7e:	f7ff f8cf 	bl	d9020 <__aeabi_ui2d>
   d9e82:	2c09      	cmp	r4, #9
   d9e84:	4682      	mov	sl, r0
   d9e86:	468b      	mov	fp, r1
   d9e88:	dd13      	ble.n	d9eb2 <_strtod_r+0x3e2>
   d9e8a:	4b86      	ldr	r3, [pc, #536]	; (da0a4 <_strtod_r+0x5d4>)
   d9e8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d9e90:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9e94:	f7ff f93a 	bl	d910c <__aeabi_dmul>
   d9e98:	4606      	mov	r6, r0
   d9e9a:	4640      	mov	r0, r8
   d9e9c:	460f      	mov	r7, r1
   d9e9e:	f7ff f8bf 	bl	d9020 <__aeabi_ui2d>
   d9ea2:	4602      	mov	r2, r0
   d9ea4:	460b      	mov	r3, r1
   d9ea6:	4630      	mov	r0, r6
   d9ea8:	4639      	mov	r1, r7
   d9eaa:	f7fe ff7d 	bl	d8da8 <__adddf3>
   d9eae:	4682      	mov	sl, r0
   d9eb0:	468b      	mov	fp, r1
   d9eb2:	2d0f      	cmp	r5, #15
   d9eb4:	dc36      	bgt.n	d9f24 <_strtod_r+0x454>
   d9eb6:	f1b9 0f00 	cmp.w	r9, #0
   d9eba:	f000 83d4 	beq.w	da666 <_strtod_r+0xb96>
   d9ebe:	dd24      	ble.n	d9f0a <_strtod_r+0x43a>
   d9ec0:	f1b9 0f16 	cmp.w	r9, #22
   d9ec4:	dc07      	bgt.n	d9ed6 <_strtod_r+0x406>
   d9ec6:	4d77      	ldr	r5, [pc, #476]	; (da0a4 <_strtod_r+0x5d4>)
   d9ec8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d9ecc:	4652      	mov	r2, sl
   d9ece:	465b      	mov	r3, fp
   d9ed0:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9ed4:	e014      	b.n	d9f00 <_strtod_r+0x430>
   d9ed6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9eda:	4599      	cmp	r9, r3
   d9edc:	dc22      	bgt.n	d9f24 <_strtod_r+0x454>
   d9ede:	4c71      	ldr	r4, [pc, #452]	; (da0a4 <_strtod_r+0x5d4>)
   d9ee0:	f1c5 050f 	rsb	r5, r5, #15
   d9ee4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9ee8:	ebc5 0509 	rsb	r5, r5, r9
   d9eec:	4652      	mov	r2, sl
   d9eee:	465b      	mov	r3, fp
   d9ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9ef4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9ef8:	f7ff f908 	bl	d910c <__aeabi_dmul>
   d9efc:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9f00:	f7ff f904 	bl	d910c <__aeabi_dmul>
   d9f04:	4682      	mov	sl, r0
   d9f06:	468b      	mov	fp, r1
   d9f08:	e3ad      	b.n	da666 <_strtod_r+0xb96>
   d9f0a:	f119 0f16 	cmn.w	r9, #22
   d9f0e:	db09      	blt.n	d9f24 <_strtod_r+0x454>
   d9f10:	4d64      	ldr	r5, [pc, #400]	; (da0a4 <_strtod_r+0x5d4>)
   d9f12:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d9f16:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9f1a:	4650      	mov	r0, sl
   d9f1c:	4659      	mov	r1, fp
   d9f1e:	f7ff fa1f 	bl	d9360 <__aeabi_ddiv>
   d9f22:	e7ef      	b.n	d9f04 <_strtod_r+0x434>
   d9f24:	1b2c      	subs	r4, r5, r4
   d9f26:	444c      	add	r4, r9
   d9f28:	2c00      	cmp	r4, #0
   d9f2a:	dd57      	ble.n	d9fdc <_strtod_r+0x50c>
   d9f2c:	f014 010f 	ands.w	r1, r4, #15
   d9f30:	d00a      	beq.n	d9f48 <_strtod_r+0x478>
   d9f32:	4b5c      	ldr	r3, [pc, #368]	; (da0a4 <_strtod_r+0x5d4>)
   d9f34:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d9f38:	4652      	mov	r2, sl
   d9f3a:	465b      	mov	r3, fp
   d9f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9f40:	f7ff f8e4 	bl	d910c <__aeabi_dmul>
   d9f44:	4682      	mov	sl, r0
   d9f46:	468b      	mov	fp, r1
   d9f48:	f034 040f 	bics.w	r4, r4, #15
   d9f4c:	f000 80b8 	beq.w	da0c0 <_strtod_r+0x5f0>
   d9f50:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d9f54:	dd0b      	ble.n	d9f6e <_strtod_r+0x49e>
   d9f56:	2400      	movs	r4, #0
   d9f58:	4625      	mov	r5, r4
   d9f5a:	9405      	str	r4, [sp, #20]
   d9f5c:	9404      	str	r4, [sp, #16]
   d9f5e:	9a02      	ldr	r2, [sp, #8]
   d9f60:	f8df b150 	ldr.w	fp, [pc, #336]	; da0b4 <_strtod_r+0x5e4>
   d9f64:	2322      	movs	r3, #34	; 0x22
   d9f66:	6013      	str	r3, [r2, #0]
   d9f68:	f04f 0a00 	mov.w	sl, #0
   d9f6c:	e187      	b.n	da27e <_strtod_r+0x7ae>
   d9f6e:	4e4e      	ldr	r6, [pc, #312]	; (da0a8 <_strtod_r+0x5d8>)
   d9f70:	2300      	movs	r3, #0
   d9f72:	1124      	asrs	r4, r4, #4
   d9f74:	4650      	mov	r0, sl
   d9f76:	4659      	mov	r1, fp
   d9f78:	4698      	mov	r8, r3
   d9f7a:	4637      	mov	r7, r6
   d9f7c:	2c01      	cmp	r4, #1
   d9f7e:	dd0b      	ble.n	d9f98 <_strtod_r+0x4c8>
   d9f80:	07e2      	lsls	r2, r4, #31
   d9f82:	d504      	bpl.n	d9f8e <_strtod_r+0x4be>
   d9f84:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9f88:	f7ff f8c0 	bl	d910c <__aeabi_dmul>
   d9f8c:	2301      	movs	r3, #1
   d9f8e:	f108 0801 	add.w	r8, r8, #1
   d9f92:	1064      	asrs	r4, r4, #1
   d9f94:	3608      	adds	r6, #8
   d9f96:	e7f1      	b.n	d9f7c <_strtod_r+0x4ac>
   d9f98:	b10b      	cbz	r3, d9f9e <_strtod_r+0x4ce>
   d9f9a:	4682      	mov	sl, r0
   d9f9c:	468b      	mov	fp, r1
   d9f9e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9fa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d9fa6:	4652      	mov	r2, sl
   d9fa8:	465b      	mov	r3, fp
   d9faa:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9fae:	f7ff f8ad 	bl	d910c <__aeabi_dmul>
   d9fb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9fb6:	468b      	mov	fp, r1
   d9fb8:	460a      	mov	r2, r1
   d9fba:	0d1b      	lsrs	r3, r3, #20
   d9fbc:	493b      	ldr	r1, [pc, #236]	; (da0ac <_strtod_r+0x5dc>)
   d9fbe:	051b      	lsls	r3, r3, #20
   d9fc0:	428b      	cmp	r3, r1
   d9fc2:	4682      	mov	sl, r0
   d9fc4:	d8c7      	bhi.n	d9f56 <_strtod_r+0x486>
   d9fc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9fca:	428b      	cmp	r3, r1
   d9fcc:	bf86      	itte	hi
   d9fce:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; da0bc <_strtod_r+0x5ec>
   d9fd2:	f04f 3aff 	movhi.w	sl, #4294967295
   d9fd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9fda:	e071      	b.n	da0c0 <_strtod_r+0x5f0>
   d9fdc:	d070      	beq.n	da0c0 <_strtod_r+0x5f0>
   d9fde:	4264      	negs	r4, r4
   d9fe0:	f014 020f 	ands.w	r2, r4, #15
   d9fe4:	d00a      	beq.n	d9ffc <_strtod_r+0x52c>
   d9fe6:	4b2f      	ldr	r3, [pc, #188]	; (da0a4 <_strtod_r+0x5d4>)
   d9fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9fec:	4650      	mov	r0, sl
   d9fee:	4659      	mov	r1, fp
   d9ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ff4:	f7ff f9b4 	bl	d9360 <__aeabi_ddiv>
   d9ff8:	4682      	mov	sl, r0
   d9ffa:	468b      	mov	fp, r1
   d9ffc:	1124      	asrs	r4, r4, #4
   d9ffe:	d05f      	beq.n	da0c0 <_strtod_r+0x5f0>
   da000:	2c1f      	cmp	r4, #31
   da002:	dd04      	ble.n	da00e <_strtod_r+0x53e>
   da004:	2400      	movs	r4, #0
   da006:	4625      	mov	r5, r4
   da008:	9405      	str	r4, [sp, #20]
   da00a:	9404      	str	r4, [sp, #16]
   da00c:	e130      	b.n	da270 <_strtod_r+0x7a0>
   da00e:	f014 0f10 	tst.w	r4, #16
   da012:	bf0c      	ite	eq
   da014:	2300      	moveq	r3, #0
   da016:	236a      	movne	r3, #106	; 0x6a
   da018:	4e25      	ldr	r6, [pc, #148]	; (da0b0 <_strtod_r+0x5e0>)
   da01a:	9303      	str	r3, [sp, #12]
   da01c:	4650      	mov	r0, sl
   da01e:	4659      	mov	r1, fp
   da020:	2300      	movs	r3, #0
   da022:	2c00      	cmp	r4, #0
   da024:	dd09      	ble.n	da03a <_strtod_r+0x56a>
   da026:	07e2      	lsls	r2, r4, #31
   da028:	d504      	bpl.n	da034 <_strtod_r+0x564>
   da02a:	e9d6 2300 	ldrd	r2, r3, [r6]
   da02e:	f7ff f86d 	bl	d910c <__aeabi_dmul>
   da032:	2301      	movs	r3, #1
   da034:	1064      	asrs	r4, r4, #1
   da036:	3608      	adds	r6, #8
   da038:	e7f3      	b.n	da022 <_strtod_r+0x552>
   da03a:	b10b      	cbz	r3, da040 <_strtod_r+0x570>
   da03c:	4682      	mov	sl, r0
   da03e:	468b      	mov	fp, r1
   da040:	9b03      	ldr	r3, [sp, #12]
   da042:	b1eb      	cbz	r3, da080 <_strtod_r+0x5b0>
   da044:	f3cb 530a 	ubfx	r3, fp, #20, #11
   da048:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da04c:	2b00      	cmp	r3, #0
   da04e:	4659      	mov	r1, fp
   da050:	dd16      	ble.n	da080 <_strtod_r+0x5b0>
   da052:	2b1f      	cmp	r3, #31
   da054:	dd0e      	ble.n	da074 <_strtod_r+0x5a4>
   da056:	2b34      	cmp	r3, #52	; 0x34
   da058:	bfde      	ittt	le
   da05a:	3b20      	suble	r3, #32
   da05c:	f04f 32ff 	movle.w	r2, #4294967295
   da060:	fa02 f303 	lslle.w	r3, r2, r3
   da064:	f04f 0a00 	mov.w	sl, #0
   da068:	bfcc      	ite	gt
   da06a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   da06e:	ea03 0b01 	andle.w	fp, r3, r1
   da072:	e005      	b.n	da080 <_strtod_r+0x5b0>
   da074:	f04f 32ff 	mov.w	r2, #4294967295
   da078:	fa02 f303 	lsl.w	r3, r2, r3
   da07c:	ea03 0a0a 	and.w	sl, r3, sl
   da080:	2200      	movs	r2, #0
   da082:	2300      	movs	r3, #0
   da084:	4650      	mov	r0, sl
   da086:	4659      	mov	r1, fp
   da088:	f7ff faa8 	bl	d95dc <__aeabi_dcmpeq>
   da08c:	2800      	cmp	r0, #0
   da08e:	d1b9      	bne.n	da004 <_strtod_r+0x534>
   da090:	e018      	b.n	da0c4 <_strtod_r+0x5f4>
   da092:	bf00      	nop
   da094:	000dc230 	.word	0x000dc230
   da098:	000dc233 	.word	0x000dc233
   da09c:	000dc239 	.word	0x000dc239
   da0a0:	000dc21c 	.word	0x000dc21c
   da0a4:	000dc2a8 	.word	0x000dc2a8
   da0a8:	000dc370 	.word	0x000dc370
   da0ac:	7ca00000 	.word	0x7ca00000
   da0b0:	000dc240 	.word	0x000dc240
   da0b4:	7ff00000 	.word	0x7ff00000
   da0b8:	fff80000 	.word	0xfff80000
   da0bc:	7fefffff 	.word	0x7fefffff
   da0c0:	2300      	movs	r3, #0
   da0c2:	9303      	str	r3, [sp, #12]
   da0c4:	9b05      	ldr	r3, [sp, #20]
   da0c6:	9300      	str	r3, [sp, #0]
   da0c8:	9a04      	ldr	r2, [sp, #16]
   da0ca:	9907      	ldr	r1, [sp, #28]
   da0cc:	9802      	ldr	r0, [sp, #8]
   da0ce:	462b      	mov	r3, r5
   da0d0:	f001 fa43 	bl	db55a <__s2b>
   da0d4:	9005      	str	r0, [sp, #20]
   da0d6:	2800      	cmp	r0, #0
   da0d8:	f43f af3d 	beq.w	d9f56 <_strtod_r+0x486>
   da0dc:	f1b9 0f00 	cmp.w	r9, #0
   da0e0:	f1c9 0300 	rsb	r3, r9, #0
   da0e4:	bfa8      	it	ge
   da0e6:	2300      	movge	r3, #0
   da0e8:	930d      	str	r3, [sp, #52]	; 0x34
   da0ea:	2400      	movs	r4, #0
   da0ec:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   da0f0:	9312      	str	r3, [sp, #72]	; 0x48
   da0f2:	4625      	mov	r5, r4
   da0f4:	9b05      	ldr	r3, [sp, #20]
   da0f6:	9802      	ldr	r0, [sp, #8]
   da0f8:	6859      	ldr	r1, [r3, #4]
   da0fa:	f001 f9a7 	bl	db44c <_Balloc>
   da0fe:	9004      	str	r0, [sp, #16]
   da100:	2800      	cmp	r0, #0
   da102:	f43f af2c 	beq.w	d9f5e <_strtod_r+0x48e>
   da106:	9b05      	ldr	r3, [sp, #20]
   da108:	691a      	ldr	r2, [r3, #16]
   da10a:	3202      	adds	r2, #2
   da10c:	f103 010c 	add.w	r1, r3, #12
   da110:	0092      	lsls	r2, r2, #2
   da112:	300c      	adds	r0, #12
   da114:	f7ff fc3a 	bl	d998c <memcpy>
   da118:	aa1a      	add	r2, sp, #104	; 0x68
   da11a:	a919      	add	r1, sp, #100	; 0x64
   da11c:	ec4b ab10 	vmov	d0, sl, fp
   da120:	9802      	ldr	r0, [sp, #8]
   da122:	e9cd ab08 	strd	sl, fp, [sp, #32]
   da126:	f001 fccc 	bl	dbac2 <__d2b>
   da12a:	9018      	str	r0, [sp, #96]	; 0x60
   da12c:	2800      	cmp	r0, #0
   da12e:	f43f af16 	beq.w	d9f5e <_strtod_r+0x48e>
   da132:	2101      	movs	r1, #1
   da134:	9802      	ldr	r0, [sp, #8]
   da136:	f001 fa9b 	bl	db670 <__i2b>
   da13a:	4605      	mov	r5, r0
   da13c:	2800      	cmp	r0, #0
   da13e:	f43f af0e 	beq.w	d9f5e <_strtod_r+0x48e>
   da142:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da144:	9903      	ldr	r1, [sp, #12]
   da146:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   da148:	2b00      	cmp	r3, #0
   da14a:	bfad      	iteet	ge
   da14c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   da14e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   da150:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   da154:	eb02 0803 	addge.w	r8, r2, r3
   da158:	bfb8      	it	lt
   da15a:	1ad2      	sublt	r2, r2, r3
   da15c:	eba3 0301 	sub.w	r3, r3, r1
   da160:	4433      	add	r3, r6
   da162:	49b5      	ldr	r1, [pc, #724]	; (da438 <_strtod_r+0x968>)
   da164:	bfa8      	it	ge
   da166:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   da168:	3b01      	subs	r3, #1
   da16a:	428b      	cmp	r3, r1
   da16c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   da170:	f280 808a 	bge.w	da288 <_strtod_r+0x7b8>
   da174:	1ac9      	subs	r1, r1, r3
   da176:	291f      	cmp	r1, #31
   da178:	bfc8      	it	gt
   da17a:	4fb0      	ldrgt	r7, [pc, #704]	; (da43c <_strtod_r+0x96c>)
   da17c:	f04f 0901 	mov.w	r9, #1
   da180:	bfd4      	ite	le
   da182:	fa09 f301 	lslle.w	r3, r9, r1
   da186:	1aff      	subgt	r7, r7, r3
   da188:	eba6 0601 	sub.w	r6, r6, r1
   da18c:	bfd9      	ittee	le
   da18e:	9306      	strle	r3, [sp, #24]
   da190:	2700      	movle	r7, #0
   da192:	fa09 f707 	lslgt.w	r7, r9, r7
   da196:	f8cd 9018 	strgt.w	r9, [sp, #24]
   da19a:	eb08 0906 	add.w	r9, r8, r6
   da19e:	9b03      	ldr	r3, [sp, #12]
   da1a0:	45c8      	cmp	r8, r9
   da1a2:	4416      	add	r6, r2
   da1a4:	441e      	add	r6, r3
   da1a6:	4643      	mov	r3, r8
   da1a8:	bfa8      	it	ge
   da1aa:	464b      	movge	r3, r9
   da1ac:	42b3      	cmp	r3, r6
   da1ae:	bfa8      	it	ge
   da1b0:	4633      	movge	r3, r6
   da1b2:	2b00      	cmp	r3, #0
   da1b4:	bfc2      	ittt	gt
   da1b6:	ebc3 0909 	rsbgt	r9, r3, r9
   da1ba:	1af6      	subgt	r6, r6, r3
   da1bc:	ebc3 0808 	rsbgt	r8, r3, r8
   da1c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da1c2:	2b00      	cmp	r3, #0
   da1c4:	d164      	bne.n	da290 <_strtod_r+0x7c0>
   da1c6:	f1b9 0f00 	cmp.w	r9, #0
   da1ca:	dc7a      	bgt.n	da2c2 <_strtod_r+0x7f2>
   da1cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   da1ce:	2b00      	cmp	r3, #0
   da1d0:	f040 8081 	bne.w	da2d6 <_strtod_r+0x806>
   da1d4:	2e00      	cmp	r6, #0
   da1d6:	f300 8088 	bgt.w	da2ea <_strtod_r+0x81a>
   da1da:	f1b8 0f00 	cmp.w	r8, #0
   da1de:	f300 808e 	bgt.w	da2fe <_strtod_r+0x82e>
   da1e2:	9a04      	ldr	r2, [sp, #16]
   da1e4:	9918      	ldr	r1, [sp, #96]	; 0x60
   da1e6:	9802      	ldr	r0, [sp, #8]
   da1e8:	f001 fb97 	bl	db91a <__mdiff>
   da1ec:	4604      	mov	r4, r0
   da1ee:	2800      	cmp	r0, #0
   da1f0:	f43f aeb5 	beq.w	d9f5e <_strtod_r+0x48e>
   da1f4:	68c3      	ldr	r3, [r0, #12]
   da1f6:	9307      	str	r3, [sp, #28]
   da1f8:	2300      	movs	r3, #0
   da1fa:	60c3      	str	r3, [r0, #12]
   da1fc:	4629      	mov	r1, r5
   da1fe:	f001 fb70 	bl	db8e2 <__mcmp>
   da202:	2800      	cmp	r0, #0
   da204:	f280 8089 	bge.w	da31a <_strtod_r+0x84a>
   da208:	9b07      	ldr	r3, [sp, #28]
   da20a:	2b00      	cmp	r3, #0
   da20c:	f040 8204 	bne.w	da618 <_strtod_r+0xb48>
   da210:	f1ba 0f00 	cmp.w	sl, #0
   da214:	f040 8200 	bne.w	da618 <_strtod_r+0xb48>
   da218:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da21c:	2b00      	cmp	r3, #0
   da21e:	f040 81fb 	bne.w	da618 <_strtod_r+0xb48>
   da222:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da226:	0d1b      	lsrs	r3, r3, #20
   da228:	051b      	lsls	r3, r3, #20
   da22a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da22e:	f240 81f3 	bls.w	da618 <_strtod_r+0xb48>
   da232:	6963      	ldr	r3, [r4, #20]
   da234:	2b00      	cmp	r3, #0
   da236:	d06c      	beq.n	da312 <_strtod_r+0x842>
   da238:	4621      	mov	r1, r4
   da23a:	2201      	movs	r2, #1
   da23c:	9802      	ldr	r0, [sp, #8]
   da23e:	f001 faff 	bl	db840 <__lshift>
   da242:	4629      	mov	r1, r5
   da244:	4604      	mov	r4, r0
   da246:	f001 fb4c 	bl	db8e2 <__mcmp>
   da24a:	2800      	cmp	r0, #0
   da24c:	f340 81e4 	ble.w	da618 <_strtod_r+0xb48>
   da250:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da254:	9a03      	ldr	r2, [sp, #12]
   da256:	0d1b      	lsrs	r3, r3, #20
   da258:	051b      	lsls	r3, r3, #20
   da25a:	2a00      	cmp	r2, #0
   da25c:	f000 808c 	beq.w	da378 <_strtod_r+0x8a8>
   da260:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   da264:	f300 8088 	bgt.w	da378 <_strtod_r+0x8a8>
   da268:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   da26c:	f300 81d6 	bgt.w	da61c <_strtod_r+0xb4c>
   da270:	9a02      	ldr	r2, [sp, #8]
   da272:	2322      	movs	r3, #34	; 0x22
   da274:	f04f 0a00 	mov.w	sl, #0
   da278:	f04f 0b00 	mov.w	fp, #0
   da27c:	6013      	str	r3, [r2, #0]
   da27e:	9b05      	ldr	r3, [sp, #20]
   da280:	2b00      	cmp	r3, #0
   da282:	f040 81dc 	bne.w	da63e <_strtod_r+0xb6e>
   da286:	e1ee      	b.n	da666 <_strtod_r+0xb96>
   da288:	2301      	movs	r3, #1
   da28a:	2700      	movs	r7, #0
   da28c:	9306      	str	r3, [sp, #24]
   da28e:	e784      	b.n	da19a <_strtod_r+0x6ca>
   da290:	4629      	mov	r1, r5
   da292:	461a      	mov	r2, r3
   da294:	9802      	ldr	r0, [sp, #8]
   da296:	f001 fa85 	bl	db7a4 <__pow5mult>
   da29a:	4605      	mov	r5, r0
   da29c:	2800      	cmp	r0, #0
   da29e:	f43f ae5e 	beq.w	d9f5e <_strtod_r+0x48e>
   da2a2:	4601      	mov	r1, r0
   da2a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   da2a6:	9802      	ldr	r0, [sp, #8]
   da2a8:	f001 f9eb 	bl	db682 <__multiply>
   da2ac:	9007      	str	r0, [sp, #28]
   da2ae:	2800      	cmp	r0, #0
   da2b0:	f43f ae55 	beq.w	d9f5e <_strtod_r+0x48e>
   da2b4:	9918      	ldr	r1, [sp, #96]	; 0x60
   da2b6:	9802      	ldr	r0, [sp, #8]
   da2b8:	f001 f8fd 	bl	db4b6 <_Bfree>
   da2bc:	9b07      	ldr	r3, [sp, #28]
   da2be:	9318      	str	r3, [sp, #96]	; 0x60
   da2c0:	e781      	b.n	da1c6 <_strtod_r+0x6f6>
   da2c2:	464a      	mov	r2, r9
   da2c4:	9918      	ldr	r1, [sp, #96]	; 0x60
   da2c6:	9802      	ldr	r0, [sp, #8]
   da2c8:	f001 faba 	bl	db840 <__lshift>
   da2cc:	9018      	str	r0, [sp, #96]	; 0x60
   da2ce:	2800      	cmp	r0, #0
   da2d0:	f47f af7c 	bne.w	da1cc <_strtod_r+0x6fc>
   da2d4:	e643      	b.n	d9f5e <_strtod_r+0x48e>
   da2d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da2d8:	9904      	ldr	r1, [sp, #16]
   da2da:	9802      	ldr	r0, [sp, #8]
   da2dc:	f001 fa62 	bl	db7a4 <__pow5mult>
   da2e0:	9004      	str	r0, [sp, #16]
   da2e2:	2800      	cmp	r0, #0
   da2e4:	f47f af76 	bne.w	da1d4 <_strtod_r+0x704>
   da2e8:	e639      	b.n	d9f5e <_strtod_r+0x48e>
   da2ea:	4632      	mov	r2, r6
   da2ec:	9904      	ldr	r1, [sp, #16]
   da2ee:	9802      	ldr	r0, [sp, #8]
   da2f0:	f001 faa6 	bl	db840 <__lshift>
   da2f4:	9004      	str	r0, [sp, #16]
   da2f6:	2800      	cmp	r0, #0
   da2f8:	f47f af6f 	bne.w	da1da <_strtod_r+0x70a>
   da2fc:	e62f      	b.n	d9f5e <_strtod_r+0x48e>
   da2fe:	4629      	mov	r1, r5
   da300:	4642      	mov	r2, r8
   da302:	9802      	ldr	r0, [sp, #8]
   da304:	f001 fa9c 	bl	db840 <__lshift>
   da308:	4605      	mov	r5, r0
   da30a:	2800      	cmp	r0, #0
   da30c:	f47f af69 	bne.w	da1e2 <_strtod_r+0x712>
   da310:	e625      	b.n	d9f5e <_strtod_r+0x48e>
   da312:	6923      	ldr	r3, [r4, #16]
   da314:	2b01      	cmp	r3, #1
   da316:	dc8f      	bgt.n	da238 <_strtod_r+0x768>
   da318:	e17e      	b.n	da618 <_strtod_r+0xb48>
   da31a:	d161      	bne.n	da3e0 <_strtod_r+0x910>
   da31c:	9a07      	ldr	r2, [sp, #28]
   da31e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da322:	b322      	cbz	r2, da36e <_strtod_r+0x89e>
   da324:	4946      	ldr	r1, [pc, #280]	; (da440 <_strtod_r+0x970>)
   da326:	428b      	cmp	r3, r1
   da328:	465a      	mov	r2, fp
   da32a:	d12e      	bne.n	da38a <_strtod_r+0x8ba>
   da32c:	9b03      	ldr	r3, [sp, #12]
   da32e:	4651      	mov	r1, sl
   da330:	b163      	cbz	r3, da34c <_strtod_r+0x87c>
   da332:	4b44      	ldr	r3, [pc, #272]	; (da444 <_strtod_r+0x974>)
   da334:	4013      	ands	r3, r2
   da336:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da33a:	d807      	bhi.n	da34c <_strtod_r+0x87c>
   da33c:	0d1b      	lsrs	r3, r3, #20
   da33e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da342:	f04f 30ff 	mov.w	r0, #4294967295
   da346:	fa00 f303 	lsl.w	r3, r0, r3
   da34a:	e001      	b.n	da350 <_strtod_r+0x880>
   da34c:	f04f 33ff 	mov.w	r3, #4294967295
   da350:	428b      	cmp	r3, r1
   da352:	d11a      	bne.n	da38a <_strtod_r+0x8ba>
   da354:	493c      	ldr	r1, [pc, #240]	; (da448 <_strtod_r+0x978>)
   da356:	428a      	cmp	r2, r1
   da358:	d102      	bne.n	da360 <_strtod_r+0x890>
   da35a:	3301      	adds	r3, #1
   da35c:	f43f adff 	beq.w	d9f5e <_strtod_r+0x48e>
   da360:	4b38      	ldr	r3, [pc, #224]	; (da444 <_strtod_r+0x974>)
   da362:	4013      	ands	r3, r2
   da364:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da368:	f04f 0a00 	mov.w	sl, #0
   da36c:	e154      	b.n	da618 <_strtod_r+0xb48>
   da36e:	b963      	cbnz	r3, da38a <_strtod_r+0x8ba>
   da370:	f1ba 0f00 	cmp.w	sl, #0
   da374:	d109      	bne.n	da38a <_strtod_r+0x8ba>
   da376:	e76b      	b.n	da250 <_strtod_r+0x780>
   da378:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da37c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da380:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da384:	f04f 3aff 	mov.w	sl, #4294967295
   da388:	e146      	b.n	da618 <_strtod_r+0xb48>
   da38a:	b117      	cbz	r7, da392 <_strtod_r+0x8c2>
   da38c:	ea17 0f0b 	tst.w	r7, fp
   da390:	e002      	b.n	da398 <_strtod_r+0x8c8>
   da392:	9b06      	ldr	r3, [sp, #24]
   da394:	ea13 0f0a 	tst.w	r3, sl
   da398:	f000 813e 	beq.w	da618 <_strtod_r+0xb48>
   da39c:	9b07      	ldr	r3, [sp, #28]
   da39e:	9a03      	ldr	r2, [sp, #12]
   da3a0:	4650      	mov	r0, sl
   da3a2:	4659      	mov	r1, fp
   da3a4:	b153      	cbz	r3, da3bc <_strtod_r+0x8ec>
   da3a6:	f7ff fb77 	bl	d9a98 <sulp>
   da3aa:	4602      	mov	r2, r0
   da3ac:	460b      	mov	r3, r1
   da3ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da3b2:	f7fe fcf9 	bl	d8da8 <__adddf3>
   da3b6:	4682      	mov	sl, r0
   da3b8:	468b      	mov	fp, r1
   da3ba:	e12d      	b.n	da618 <_strtod_r+0xb48>
   da3bc:	f7ff fb6c 	bl	d9a98 <sulp>
   da3c0:	4602      	mov	r2, r0
   da3c2:	460b      	mov	r3, r1
   da3c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   da3c8:	f7fe fcec 	bl	d8da4 <__aeabi_dsub>
   da3cc:	2200      	movs	r2, #0
   da3ce:	2300      	movs	r3, #0
   da3d0:	4682      	mov	sl, r0
   da3d2:	468b      	mov	fp, r1
   da3d4:	f7ff f902 	bl	d95dc <__aeabi_dcmpeq>
   da3d8:	2800      	cmp	r0, #0
   da3da:	f47f af49 	bne.w	da270 <_strtod_r+0x7a0>
   da3de:	e11b      	b.n	da618 <_strtod_r+0xb48>
   da3e0:	4629      	mov	r1, r5
   da3e2:	4620      	mov	r0, r4
   da3e4:	f001 fbbb 	bl	dbb5e <__ratio>
   da3e8:	ec57 6b10 	vmov	r6, r7, d0
   da3ec:	2200      	movs	r2, #0
   da3ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da3f2:	ee10 0a10 	vmov	r0, s0
   da3f6:	4639      	mov	r1, r7
   da3f8:	f7ff f904 	bl	d9604 <__aeabi_dcmple>
   da3fc:	2800      	cmp	r0, #0
   da3fe:	d042      	beq.n	da486 <_strtod_r+0x9b6>
   da400:	9b07      	ldr	r3, [sp, #28]
   da402:	b123      	cbz	r3, da40e <_strtod_r+0x93e>
   da404:	f04f 0800 	mov.w	r8, #0
   da408:	f8df 9040 	ldr.w	r9, [pc, #64]	; da44c <_strtod_r+0x97c>
   da40c:	e011      	b.n	da432 <_strtod_r+0x962>
   da40e:	f1ba 0f00 	cmp.w	sl, #0
   da412:	d103      	bne.n	da41c <_strtod_r+0x94c>
   da414:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da418:	b93b      	cbnz	r3, da42a <_strtod_r+0x95a>
   da41a:	e01b      	b.n	da454 <_strtod_r+0x984>
   da41c:	f1ba 0f01 	cmp.w	sl, #1
   da420:	d103      	bne.n	da42a <_strtod_r+0x95a>
   da422:	f1bb 0f00 	cmp.w	fp, #0
   da426:	f43f af23 	beq.w	da270 <_strtod_r+0x7a0>
   da42a:	f8df 9024 	ldr.w	r9, [pc, #36]	; da450 <_strtod_r+0x980>
   da42e:	f04f 0800 	mov.w	r8, #0
   da432:	2600      	movs	r6, #0
   da434:	4f05      	ldr	r7, [pc, #20]	; (da44c <_strtod_r+0x97c>)
   da436:	e039      	b.n	da4ac <_strtod_r+0x9dc>
   da438:	fffffc02 	.word	0xfffffc02
   da43c:	fffffbe2 	.word	0xfffffbe2
   da440:	000fffff 	.word	0x000fffff
   da444:	7ff00000 	.word	0x7ff00000
   da448:	7fefffff 	.word	0x7fefffff
   da44c:	3ff00000 	.word	0x3ff00000
   da450:	bff00000 	.word	0xbff00000
   da454:	2200      	movs	r2, #0
   da456:	4b98      	ldr	r3, [pc, #608]	; (da6b8 <_strtod_r+0xbe8>)
   da458:	4630      	mov	r0, r6
   da45a:	4639      	mov	r1, r7
   da45c:	f7ff f8c8 	bl	d95f0 <__aeabi_dcmplt>
   da460:	b940      	cbnz	r0, da474 <_strtod_r+0x9a4>
   da462:	4630      	mov	r0, r6
   da464:	4639      	mov	r1, r7
   da466:	2200      	movs	r2, #0
   da468:	4b94      	ldr	r3, [pc, #592]	; (da6bc <_strtod_r+0xbec>)
   da46a:	f7fe fe4f 	bl	d910c <__aeabi_dmul>
   da46e:	4606      	mov	r6, r0
   da470:	460f      	mov	r7, r1
   da472:	e001      	b.n	da478 <_strtod_r+0x9a8>
   da474:	4f91      	ldr	r7, [pc, #580]	; (da6bc <_strtod_r+0xbec>)
   da476:	2600      	movs	r6, #0
   da478:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   da47c:	9614      	str	r6, [sp, #80]	; 0x50
   da47e:	9315      	str	r3, [sp, #84]	; 0x54
   da480:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   da484:	e012      	b.n	da4ac <_strtod_r+0x9dc>
   da486:	4b8d      	ldr	r3, [pc, #564]	; (da6bc <_strtod_r+0xbec>)
   da488:	4630      	mov	r0, r6
   da48a:	4639      	mov	r1, r7
   da48c:	2200      	movs	r2, #0
   da48e:	f7fe fe3d 	bl	d910c <__aeabi_dmul>
   da492:	9b07      	ldr	r3, [sp, #28]
   da494:	4606      	mov	r6, r0
   da496:	460f      	mov	r7, r1
   da498:	b923      	cbnz	r3, da4a4 <_strtod_r+0x9d4>
   da49a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da49e:	900e      	str	r0, [sp, #56]	; 0x38
   da4a0:	930f      	str	r3, [sp, #60]	; 0x3c
   da4a2:	e001      	b.n	da4a8 <_strtod_r+0x9d8>
   da4a4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   da4a8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   da4ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da4b0:	0d1b      	lsrs	r3, r3, #20
   da4b2:	051b      	lsls	r3, r3, #20
   da4b4:	9306      	str	r3, [sp, #24]
   da4b6:	9a06      	ldr	r2, [sp, #24]
   da4b8:	4b81      	ldr	r3, [pc, #516]	; (da6c0 <_strtod_r+0xbf0>)
   da4ba:	429a      	cmp	r2, r3
   da4bc:	d12b      	bne.n	da516 <_strtod_r+0xa46>
   da4be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da4c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da4c6:	ec4b ab10 	vmov	d0, sl, fp
   da4ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   da4ce:	f001 fa83 	bl	db9d8 <__ulp>
   da4d2:	4640      	mov	r0, r8
   da4d4:	ec53 2b10 	vmov	r2, r3, d0
   da4d8:	4649      	mov	r1, r9
   da4da:	f7fe fe17 	bl	d910c <__aeabi_dmul>
   da4de:	4652      	mov	r2, sl
   da4e0:	465b      	mov	r3, fp
   da4e2:	f7fe fc61 	bl	d8da8 <__adddf3>
   da4e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da4ea:	0d1b      	lsrs	r3, r3, #20
   da4ec:	4a75      	ldr	r2, [pc, #468]	; (da6c4 <_strtod_r+0xbf4>)
   da4ee:	051b      	lsls	r3, r3, #20
   da4f0:	4293      	cmp	r3, r2
   da4f2:	4682      	mov	sl, r0
   da4f4:	d90c      	bls.n	da510 <_strtod_r+0xa40>
   da4f6:	4b74      	ldr	r3, [pc, #464]	; (da6c8 <_strtod_r+0xbf8>)
   da4f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da4fa:	429a      	cmp	r2, r3
   da4fc:	d103      	bne.n	da506 <_strtod_r+0xa36>
   da4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da500:	3301      	adds	r3, #1
   da502:	f43f ad2c 	beq.w	d9f5e <_strtod_r+0x48e>
   da506:	f8df b1c0 	ldr.w	fp, [pc, #448]	; da6c8 <_strtod_r+0xbf8>
   da50a:	f04f 3aff 	mov.w	sl, #4294967295
   da50e:	e072      	b.n	da5f6 <_strtod_r+0xb26>
   da510:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   da514:	e038      	b.n	da588 <_strtod_r+0xab8>
   da516:	9b03      	ldr	r3, [sp, #12]
   da518:	b333      	cbz	r3, da568 <_strtod_r+0xa98>
   da51a:	9b06      	ldr	r3, [sp, #24]
   da51c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da520:	d822      	bhi.n	da568 <_strtod_r+0xa98>
   da522:	a35d      	add	r3, pc, #372	; (adr r3, da698 <_strtod_r+0xbc8>)
   da524:	e9d3 2300 	ldrd	r2, r3, [r3]
   da528:	4630      	mov	r0, r6
   da52a:	4639      	mov	r1, r7
   da52c:	f7ff f86a 	bl	d9604 <__aeabi_dcmple>
   da530:	b1a8      	cbz	r0, da55e <_strtod_r+0xa8e>
   da532:	4639      	mov	r1, r7
   da534:	4630      	mov	r0, r6
   da536:	f7ff f8ab 	bl	d9690 <__aeabi_d2uiz>
   da53a:	2800      	cmp	r0, #0
   da53c:	bf08      	it	eq
   da53e:	2001      	moveq	r0, #1
   da540:	f7fe fd6e 	bl	d9020 <__aeabi_ui2d>
   da544:	9b07      	ldr	r3, [sp, #28]
   da546:	4606      	mov	r6, r0
   da548:	460f      	mov	r7, r1
   da54a:	b923      	cbnz	r3, da556 <_strtod_r+0xa86>
   da54c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da550:	9010      	str	r0, [sp, #64]	; 0x40
   da552:	9311      	str	r3, [sp, #68]	; 0x44
   da554:	e001      	b.n	da55a <_strtod_r+0xa8a>
   da556:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   da55a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   da55e:	9a06      	ldr	r2, [sp, #24]
   da560:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   da564:	ebc2 0903 	rsb	r9, r2, r3
   da568:	ed9d 0b08 	vldr	d0, [sp, #32]
   da56c:	f001 fa34 	bl	db9d8 <__ulp>
   da570:	4640      	mov	r0, r8
   da572:	ec53 2b10 	vmov	r2, r3, d0
   da576:	4649      	mov	r1, r9
   da578:	f7fe fdc8 	bl	d910c <__aeabi_dmul>
   da57c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da580:	f7fe fc12 	bl	d8da8 <__adddf3>
   da584:	4682      	mov	sl, r0
   da586:	468b      	mov	fp, r1
   da588:	9b03      	ldr	r3, [sp, #12]
   da58a:	bba3      	cbnz	r3, da5f6 <_strtod_r+0xb26>
   da58c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da590:	0d1b      	lsrs	r3, r3, #20
   da592:	9a06      	ldr	r2, [sp, #24]
   da594:	051b      	lsls	r3, r3, #20
   da596:	429a      	cmp	r2, r3
   da598:	46d8      	mov	r8, fp
   da59a:	d12c      	bne.n	da5f6 <_strtod_r+0xb26>
   da59c:	4639      	mov	r1, r7
   da59e:	4630      	mov	r0, r6
   da5a0:	f7ff f84e 	bl	d9640 <__aeabi_d2iz>
   da5a4:	f7fe fd4c 	bl	d9040 <__aeabi_i2d>
   da5a8:	460b      	mov	r3, r1
   da5aa:	4602      	mov	r2, r0
   da5ac:	4639      	mov	r1, r7
   da5ae:	4630      	mov	r0, r6
   da5b0:	f7fe fbf8 	bl	d8da4 <__aeabi_dsub>
   da5b4:	9b07      	ldr	r3, [sp, #28]
   da5b6:	4606      	mov	r6, r0
   da5b8:	460f      	mov	r7, r1
   da5ba:	b92b      	cbnz	r3, da5c8 <_strtod_r+0xaf8>
   da5bc:	f1ba 0f00 	cmp.w	sl, #0
   da5c0:	d102      	bne.n	da5c8 <_strtod_r+0xaf8>
   da5c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da5c6:	b183      	cbz	r3, da5ea <_strtod_r+0xb1a>
   da5c8:	a335      	add	r3, pc, #212	; (adr r3, da6a0 <_strtod_r+0xbd0>)
   da5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   da5ce:	4630      	mov	r0, r6
   da5d0:	4639      	mov	r1, r7
   da5d2:	f7ff f80d 	bl	d95f0 <__aeabi_dcmplt>
   da5d6:	2800      	cmp	r0, #0
   da5d8:	d131      	bne.n	da63e <_strtod_r+0xb6e>
   da5da:	a333      	add	r3, pc, #204	; (adr r3, da6a8 <_strtod_r+0xbd8>)
   da5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   da5e0:	4630      	mov	r0, r6
   da5e2:	4639      	mov	r1, r7
   da5e4:	f7ff f822 	bl	d962c <__aeabi_dcmpgt>
   da5e8:	e004      	b.n	da5f4 <_strtod_r+0xb24>
   da5ea:	a331      	add	r3, pc, #196	; (adr r3, da6b0 <_strtod_r+0xbe0>)
   da5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   da5f0:	f7fe fffe 	bl	d95f0 <__aeabi_dcmplt>
   da5f4:	bb18      	cbnz	r0, da63e <_strtod_r+0xb6e>
   da5f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   da5f8:	9802      	ldr	r0, [sp, #8]
   da5fa:	f000 ff5c 	bl	db4b6 <_Bfree>
   da5fe:	9904      	ldr	r1, [sp, #16]
   da600:	9802      	ldr	r0, [sp, #8]
   da602:	f000 ff58 	bl	db4b6 <_Bfree>
   da606:	4629      	mov	r1, r5
   da608:	9802      	ldr	r0, [sp, #8]
   da60a:	f000 ff54 	bl	db4b6 <_Bfree>
   da60e:	4621      	mov	r1, r4
   da610:	9802      	ldr	r0, [sp, #8]
   da612:	f000 ff50 	bl	db4b6 <_Bfree>
   da616:	e56d      	b.n	da0f4 <_strtod_r+0x624>
   da618:	9b03      	ldr	r3, [sp, #12]
   da61a:	b183      	cbz	r3, da63e <_strtod_r+0xb6e>
   da61c:	4b2b      	ldr	r3, [pc, #172]	; (da6cc <_strtod_r+0xbfc>)
   da61e:	930b      	str	r3, [sp, #44]	; 0x2c
   da620:	2300      	movs	r3, #0
   da622:	930a      	str	r3, [sp, #40]	; 0x28
   da624:	4650      	mov	r0, sl
   da626:	4659      	mov	r1, fp
   da628:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da62c:	f7fe fd6e 	bl	d910c <__aeabi_dmul>
   da630:	4682      	mov	sl, r0
   da632:	468b      	mov	fp, r1
   da634:	b919      	cbnz	r1, da63e <_strtod_r+0xb6e>
   da636:	b910      	cbnz	r0, da63e <_strtod_r+0xb6e>
   da638:	9a02      	ldr	r2, [sp, #8]
   da63a:	2322      	movs	r3, #34	; 0x22
   da63c:	6013      	str	r3, [r2, #0]
   da63e:	9918      	ldr	r1, [sp, #96]	; 0x60
   da640:	9802      	ldr	r0, [sp, #8]
   da642:	f000 ff38 	bl	db4b6 <_Bfree>
   da646:	9904      	ldr	r1, [sp, #16]
   da648:	9802      	ldr	r0, [sp, #8]
   da64a:	f000 ff34 	bl	db4b6 <_Bfree>
   da64e:	4629      	mov	r1, r5
   da650:	9802      	ldr	r0, [sp, #8]
   da652:	f000 ff30 	bl	db4b6 <_Bfree>
   da656:	9905      	ldr	r1, [sp, #20]
   da658:	9802      	ldr	r0, [sp, #8]
   da65a:	f000 ff2c 	bl	db4b6 <_Bfree>
   da65e:	4621      	mov	r1, r4
   da660:	9802      	ldr	r0, [sp, #8]
   da662:	f000 ff28 	bl	db4b6 <_Bfree>
   da666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da668:	b113      	cbz	r3, da670 <_strtod_r+0xba0>
   da66a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   da66c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da66e:	6013      	str	r3, [r2, #0]
   da670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da672:	b11b      	cbz	r3, da67c <_strtod_r+0xbac>
   da674:	4652      	mov	r2, sl
   da676:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da67a:	e007      	b.n	da68c <_strtod_r+0xbbc>
   da67c:	4652      	mov	r2, sl
   da67e:	465b      	mov	r3, fp
   da680:	e004      	b.n	da68c <_strtod_r+0xbbc>
   da682:	2500      	movs	r5, #0
   da684:	462a      	mov	r2, r5
   da686:	2101      	movs	r1, #1
   da688:	f7ff bb41 	b.w	d9d0e <_strtod_r+0x23e>
   da68c:	ec43 2b10 	vmov	d0, r2, r3
   da690:	b01d      	add	sp, #116	; 0x74
   da692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da696:	bf00      	nop
   da698:	ffc00000 	.word	0xffc00000
   da69c:	41dfffff 	.word	0x41dfffff
   da6a0:	94a03595 	.word	0x94a03595
   da6a4:	3fdfffff 	.word	0x3fdfffff
   da6a8:	35afe535 	.word	0x35afe535
   da6ac:	3fe00000 	.word	0x3fe00000
   da6b0:	94a03595 	.word	0x94a03595
   da6b4:	3fcfffff 	.word	0x3fcfffff
   da6b8:	3ff00000 	.word	0x3ff00000
   da6bc:	3fe00000 	.word	0x3fe00000
   da6c0:	7fe00000 	.word	0x7fe00000
   da6c4:	7c9fffff 	.word	0x7c9fffff
   da6c8:	7fefffff 	.word	0x7fefffff
   da6cc:	39500000 	.word	0x39500000

000da6d0 <strtod>:
   da6d0:	4b02      	ldr	r3, [pc, #8]	; (da6dc <strtod+0xc>)
   da6d2:	460a      	mov	r2, r1
   da6d4:	4601      	mov	r1, r0
   da6d6:	6818      	ldr	r0, [r3, #0]
   da6d8:	f7ff b9fa 	b.w	d9ad0 <_strtod_r>
   da6dc:	2003da40 	.word	0x2003da40

000da6e0 <_strtoul_r>:
   da6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da6e4:	4680      	mov	r8, r0
   da6e6:	483c      	ldr	r0, [pc, #240]	; (da7d8 <_strtoul_r+0xf8>)
   da6e8:	f8d0 9000 	ldr.w	r9, [r0]
   da6ec:	460e      	mov	r6, r1
   da6ee:	4635      	mov	r5, r6
   da6f0:	f815 4b01 	ldrb.w	r4, [r5], #1
   da6f4:	eb09 0004 	add.w	r0, r9, r4
   da6f8:	7840      	ldrb	r0, [r0, #1]
   da6fa:	f000 0008 	and.w	r0, r0, #8
   da6fe:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da702:	b108      	cbz	r0, da708 <_strtoul_r+0x28>
   da704:	462e      	mov	r6, r5
   da706:	e7f2      	b.n	da6ee <_strtoul_r+0xe>
   da708:	2c2d      	cmp	r4, #45	; 0x2d
   da70a:	d103      	bne.n	da714 <_strtoul_r+0x34>
   da70c:	1cb5      	adds	r5, r6, #2
   da70e:	7874      	ldrb	r4, [r6, #1]
   da710:	2701      	movs	r7, #1
   da712:	e003      	b.n	da71c <_strtoul_r+0x3c>
   da714:	2c2b      	cmp	r4, #43	; 0x2b
   da716:	bf04      	itt	eq
   da718:	7874      	ldrbeq	r4, [r6, #1]
   da71a:	1cb5      	addeq	r5, r6, #2
   da71c:	b113      	cbz	r3, da724 <_strtoul_r+0x44>
   da71e:	2b10      	cmp	r3, #16
   da720:	d10a      	bne.n	da738 <_strtoul_r+0x58>
   da722:	e053      	b.n	da7cc <_strtoul_r+0xec>
   da724:	2c30      	cmp	r4, #48	; 0x30
   da726:	d14f      	bne.n	da7c8 <_strtoul_r+0xe8>
   da728:	7828      	ldrb	r0, [r5, #0]
   da72a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da72e:	2858      	cmp	r0, #88	; 0x58
   da730:	d145      	bne.n	da7be <_strtoul_r+0xde>
   da732:	786c      	ldrb	r4, [r5, #1]
   da734:	2310      	movs	r3, #16
   da736:	3502      	adds	r5, #2
   da738:	f04f 3cff 	mov.w	ip, #4294967295
   da73c:	2600      	movs	r6, #0
   da73e:	fbbc fcf3 	udiv	ip, ip, r3
   da742:	fb03 fa0c 	mul.w	sl, r3, ip
   da746:	ea6f 0a0a 	mvn.w	sl, sl
   da74a:	4630      	mov	r0, r6
   da74c:	eb09 0e04 	add.w	lr, r9, r4
   da750:	f89e e001 	ldrb.w	lr, [lr, #1]
   da754:	f01e 0f04 	tst.w	lr, #4
   da758:	d001      	beq.n	da75e <_strtoul_r+0x7e>
   da75a:	3c30      	subs	r4, #48	; 0x30
   da75c:	e00b      	b.n	da776 <_strtoul_r+0x96>
   da75e:	f01e 0e03 	ands.w	lr, lr, #3
   da762:	d01a      	beq.n	da79a <_strtoul_r+0xba>
   da764:	f1be 0f01 	cmp.w	lr, #1
   da768:	bf0c      	ite	eq
   da76a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da76e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da772:	ebce 0404 	rsb	r4, lr, r4
   da776:	42a3      	cmp	r3, r4
   da778:	dd0f      	ble.n	da79a <_strtoul_r+0xba>
   da77a:	2e00      	cmp	r6, #0
   da77c:	db08      	blt.n	da790 <_strtoul_r+0xb0>
   da77e:	4560      	cmp	r0, ip
   da780:	d806      	bhi.n	da790 <_strtoul_r+0xb0>
   da782:	d101      	bne.n	da788 <_strtoul_r+0xa8>
   da784:	4554      	cmp	r4, sl
   da786:	dc03      	bgt.n	da790 <_strtoul_r+0xb0>
   da788:	fb03 4000 	mla	r0, r3, r0, r4
   da78c:	2601      	movs	r6, #1
   da78e:	e001      	b.n	da794 <_strtoul_r+0xb4>
   da790:	f04f 36ff 	mov.w	r6, #4294967295
   da794:	f815 4b01 	ldrb.w	r4, [r5], #1
   da798:	e7d8      	b.n	da74c <_strtoul_r+0x6c>
   da79a:	2e00      	cmp	r6, #0
   da79c:	da07      	bge.n	da7ae <_strtoul_r+0xce>
   da79e:	2322      	movs	r3, #34	; 0x22
   da7a0:	f8c8 3000 	str.w	r3, [r8]
   da7a4:	f04f 30ff 	mov.w	r0, #4294967295
   da7a8:	b92a      	cbnz	r2, da7b6 <_strtoul_r+0xd6>
   da7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7ae:	b107      	cbz	r7, da7b2 <_strtoul_r+0xd2>
   da7b0:	4240      	negs	r0, r0
   da7b2:	b172      	cbz	r2, da7d2 <_strtoul_r+0xf2>
   da7b4:	b106      	cbz	r6, da7b8 <_strtoul_r+0xd8>
   da7b6:	1e69      	subs	r1, r5, #1
   da7b8:	6011      	str	r1, [r2, #0]
   da7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7be:	2430      	movs	r4, #48	; 0x30
   da7c0:	2b00      	cmp	r3, #0
   da7c2:	d1b9      	bne.n	da738 <_strtoul_r+0x58>
   da7c4:	2308      	movs	r3, #8
   da7c6:	e7b7      	b.n	da738 <_strtoul_r+0x58>
   da7c8:	230a      	movs	r3, #10
   da7ca:	e7b5      	b.n	da738 <_strtoul_r+0x58>
   da7cc:	2c30      	cmp	r4, #48	; 0x30
   da7ce:	d0ab      	beq.n	da728 <_strtoul_r+0x48>
   da7d0:	e7b2      	b.n	da738 <_strtoul_r+0x58>
   da7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da7d6:	bf00      	nop
   da7d8:	2003d9dc 	.word	0x2003d9dc

000da7dc <strtoul>:
   da7dc:	4613      	mov	r3, r2
   da7de:	460a      	mov	r2, r1
   da7e0:	4601      	mov	r1, r0
   da7e2:	4802      	ldr	r0, [pc, #8]	; (da7ec <strtoul+0x10>)
   da7e4:	6800      	ldr	r0, [r0, #0]
   da7e6:	f7ff bf7b 	b.w	da6e0 <_strtoul_r>
   da7ea:	bf00      	nop
   da7ec:	2003da40 	.word	0x2003da40

000da7f0 <__tzcalc_limits>:
   da7f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7f4:	4604      	mov	r4, r0
   da7f6:	f000 fd8d 	bl	db314 <__gettzinfo>
   da7fa:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da7fe:	429c      	cmp	r4, r3
   da800:	f340 8096 	ble.w	da930 <__tzcalc_limits+0x140>
   da804:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da808:	18e3      	adds	r3, r4, r3
   da80a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da80e:	109b      	asrs	r3, r3, #2
   da810:	f240 156d 	movw	r5, #365	; 0x16d
   da814:	fb05 3502 	mla	r5, r5, r2, r3
   da818:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da81c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da820:	fb92 f3f3 	sdiv	r3, r2, r3
   da824:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da828:	442b      	add	r3, r5
   da82a:	18a5      	adds	r5, r4, r2
   da82c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da830:	fb95 f5f2 	sdiv	r5, r5, r2
   da834:	441d      	add	r5, r3
   da836:	2364      	movs	r3, #100	; 0x64
   da838:	fb94 f7f2 	sdiv	r7, r4, r2
   da83c:	fb94 f6f3 	sdiv	r6, r4, r3
   da840:	fb02 4717 	mls	r7, r2, r7, r4
   da844:	fb03 4616 	mls	r6, r3, r6, r4
   da848:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da84c:	fab7 fe87 	clz	lr, r7
   da850:	9301      	str	r3, [sp, #4]
   da852:	f004 0303 	and.w	r3, r4, #3
   da856:	6044      	str	r4, [r0, #4]
   da858:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da85c:	4601      	mov	r1, r0
   da85e:	9300      	str	r3, [sp, #0]
   da860:	f04f 0c07 	mov.w	ip, #7
   da864:	7a0b      	ldrb	r3, [r1, #8]
   da866:	2b4a      	cmp	r3, #74	; 0x4a
   da868:	d10e      	bne.n	da888 <__tzcalc_limits+0x98>
   da86a:	694b      	ldr	r3, [r1, #20]
   da86c:	9a00      	ldr	r2, [sp, #0]
   da86e:	18ec      	adds	r4, r5, r3
   da870:	b902      	cbnz	r2, da874 <__tzcalc_limits+0x84>
   da872:	b906      	cbnz	r6, da876 <__tzcalc_limits+0x86>
   da874:	b927      	cbnz	r7, da880 <__tzcalc_limits+0x90>
   da876:	2b3b      	cmp	r3, #59	; 0x3b
   da878:	bfd4      	ite	le
   da87a:	2300      	movle	r3, #0
   da87c:	2301      	movgt	r3, #1
   da87e:	e000      	b.n	da882 <__tzcalc_limits+0x92>
   da880:	2300      	movs	r3, #0
   da882:	4423      	add	r3, r4
   da884:	3b01      	subs	r3, #1
   da886:	e03f      	b.n	da908 <__tzcalc_limits+0x118>
   da888:	2b44      	cmp	r3, #68	; 0x44
   da88a:	d102      	bne.n	da892 <__tzcalc_limits+0xa2>
   da88c:	694b      	ldr	r3, [r1, #20]
   da88e:	442b      	add	r3, r5
   da890:	e03a      	b.n	da908 <__tzcalc_limits+0x118>
   da892:	9b00      	ldr	r3, [sp, #0]
   da894:	b92b      	cbnz	r3, da8a2 <__tzcalc_limits+0xb2>
   da896:	2e00      	cmp	r6, #0
   da898:	bf0c      	ite	eq
   da89a:	46f0      	moveq	r8, lr
   da89c:	f04f 0801 	movne.w	r8, #1
   da8a0:	e000      	b.n	da8a4 <__tzcalc_limits+0xb4>
   da8a2:	46f0      	mov	r8, lr
   da8a4:	4b24      	ldr	r3, [pc, #144]	; (da938 <__tzcalc_limits+0x148>)
   da8a6:	68cc      	ldr	r4, [r1, #12]
   da8a8:	2230      	movs	r2, #48	; 0x30
   da8aa:	fb02 3808 	mla	r8, r2, r8, r3
   da8ae:	f1a8 0a04 	sub.w	sl, r8, #4
   da8b2:	46a9      	mov	r9, r5
   da8b4:	2301      	movs	r3, #1
   da8b6:	42a3      	cmp	r3, r4
   da8b8:	da04      	bge.n	da8c4 <__tzcalc_limits+0xd4>
   da8ba:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da8be:	3301      	adds	r3, #1
   da8c0:	44d9      	add	r9, fp
   da8c2:	e7f8      	b.n	da8b6 <__tzcalc_limits+0xc6>
   da8c4:	f109 0304 	add.w	r3, r9, #4
   da8c8:	fb93 fbfc 	sdiv	fp, r3, ip
   da8cc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da8d0:	2c01      	cmp	r4, #1
   da8d2:	ebca 0a03 	rsb	sl, sl, r3
   da8d6:	694b      	ldr	r3, [r1, #20]
   da8d8:	bfb8      	it	lt
   da8da:	2401      	movlt	r4, #1
   da8dc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da8e0:	ebb3 0a0a 	subs.w	sl, r3, sl
   da8e4:	690b      	ldr	r3, [r1, #16]
   da8e6:	f104 34ff 	add.w	r4, r4, #4294967295
   da8ea:	f103 33ff 	add.w	r3, r3, #4294967295
   da8ee:	bf48      	it	mi
   da8f0:	f10a 0a07 	addmi.w	sl, sl, #7
   da8f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da8f8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da8fc:	4453      	add	r3, sl
   da8fe:	42a3      	cmp	r3, r4
   da900:	db01      	blt.n	da906 <__tzcalc_limits+0x116>
   da902:	3b07      	subs	r3, #7
   da904:	e7fb      	b.n	da8fe <__tzcalc_limits+0x10e>
   da906:	444b      	add	r3, r9
   da908:	698c      	ldr	r4, [r1, #24]
   da90a:	4a0c      	ldr	r2, [pc, #48]	; (da93c <__tzcalc_limits+0x14c>)
   da90c:	fb02 4303 	mla	r3, r2, r3, r4
   da910:	6a0c      	ldr	r4, [r1, #32]
   da912:	4423      	add	r3, r4
   da914:	f841 3f1c 	str.w	r3, [r1, #28]!
   da918:	9b01      	ldr	r3, [sp, #4]
   da91a:	4299      	cmp	r1, r3
   da91c:	d1a2      	bne.n	da864 <__tzcalc_limits+0x74>
   da91e:	69c3      	ldr	r3, [r0, #28]
   da920:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da922:	4293      	cmp	r3, r2
   da924:	bfac      	ite	ge
   da926:	2300      	movge	r3, #0
   da928:	2301      	movlt	r3, #1
   da92a:	6003      	str	r3, [r0, #0]
   da92c:	2001      	movs	r0, #1
   da92e:	e000      	b.n	da932 <__tzcalc_limits+0x142>
   da930:	2000      	movs	r0, #0
   da932:	b003      	add	sp, #12
   da934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da938:	000dc1a8 	.word	0x000dc1a8
   da93c:	00015180 	.word	0x00015180

000da940 <__tz_lock>:
   da940:	4770      	bx	lr

000da942 <__tz_unlock>:
   da942:	4770      	bx	lr

000da944 <_tzset_unlocked>:
   da944:	4b01      	ldr	r3, [pc, #4]	; (da94c <_tzset_unlocked+0x8>)
   da946:	6818      	ldr	r0, [r3, #0]
   da948:	f000 b802 	b.w	da950 <_tzset_unlocked_r>
   da94c:	2003da40 	.word	0x2003da40

000da950 <_tzset_unlocked_r>:
   da950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da954:	b08d      	sub	sp, #52	; 0x34
   da956:	4607      	mov	r7, r0
   da958:	f000 fcdc 	bl	db314 <__gettzinfo>
   da95c:	49b0      	ldr	r1, [pc, #704]	; (dac20 <_tzset_unlocked_r+0x2d0>)
   da95e:	4eb1      	ldr	r6, [pc, #708]	; (dac24 <_tzset_unlocked_r+0x2d4>)
   da960:	4604      	mov	r4, r0
   da962:	4638      	mov	r0, r7
   da964:	f000 fcce 	bl	db304 <_getenv_r>
   da968:	4605      	mov	r5, r0
   da96a:	b960      	cbnz	r0, da986 <_tzset_unlocked_r+0x36>
   da96c:	4bae      	ldr	r3, [pc, #696]	; (dac28 <_tzset_unlocked_r+0x2d8>)
   da96e:	4aaf      	ldr	r2, [pc, #700]	; (dac2c <_tzset_unlocked_r+0x2dc>)
   da970:	6018      	str	r0, [r3, #0]
   da972:	4baf      	ldr	r3, [pc, #700]	; (dac30 <_tzset_unlocked_r+0x2e0>)
   da974:	6018      	str	r0, [r3, #0]
   da976:	4baf      	ldr	r3, [pc, #700]	; (dac34 <_tzset_unlocked_r+0x2e4>)
   da978:	6830      	ldr	r0, [r6, #0]
   da97a:	601a      	str	r2, [r3, #0]
   da97c:	605a      	str	r2, [r3, #4]
   da97e:	f7fc fe89 	bl	d7694 <free>
   da982:	6035      	str	r5, [r6, #0]
   da984:	e148      	b.n	dac18 <_tzset_unlocked_r+0x2c8>
   da986:	6831      	ldr	r1, [r6, #0]
   da988:	b979      	cbnz	r1, da9aa <_tzset_unlocked_r+0x5a>
   da98a:	6830      	ldr	r0, [r6, #0]
   da98c:	f7fc fe82 	bl	d7694 <free>
   da990:	4628      	mov	r0, r5
   da992:	f7ff f864 	bl	d9a5e <strlen>
   da996:	1c41      	adds	r1, r0, #1
   da998:	4638      	mov	r0, r7
   da99a:	f7fc fe93 	bl	d76c4 <_malloc_r>
   da99e:	6030      	str	r0, [r6, #0]
   da9a0:	b148      	cbz	r0, da9b6 <_tzset_unlocked_r+0x66>
   da9a2:	4629      	mov	r1, r5
   da9a4:	f7ff f838 	bl	d9a18 <strcpy>
   da9a8:	e005      	b.n	da9b6 <_tzset_unlocked_r+0x66>
   da9aa:	f7ff f82b 	bl	d9a04 <strcmp>
   da9ae:	2800      	cmp	r0, #0
   da9b0:	f000 8132 	beq.w	dac18 <_tzset_unlocked_r+0x2c8>
   da9b4:	e7e9      	b.n	da98a <_tzset_unlocked_r+0x3a>
   da9b6:	782b      	ldrb	r3, [r5, #0]
   da9b8:	4a9f      	ldr	r2, [pc, #636]	; (dac38 <_tzset_unlocked_r+0x2e8>)
   da9ba:	49a0      	ldr	r1, [pc, #640]	; (dac3c <_tzset_unlocked_r+0x2ec>)
   da9bc:	2b3a      	cmp	r3, #58	; 0x3a
   da9be:	bf08      	it	eq
   da9c0:	3501      	addeq	r5, #1
   da9c2:	ae0a      	add	r6, sp, #40	; 0x28
   da9c4:	4633      	mov	r3, r6
   da9c6:	4628      	mov	r0, r5
   da9c8:	f7fc fe6c 	bl	d76a4 <siscanf>
   da9cc:	2800      	cmp	r0, #0
   da9ce:	f340 8123 	ble.w	dac18 <_tzset_unlocked_r+0x2c8>
   da9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da9d4:	18ef      	adds	r7, r5, r3
   da9d6:	5ceb      	ldrb	r3, [r5, r3]
   da9d8:	2b2d      	cmp	r3, #45	; 0x2d
   da9da:	d103      	bne.n	da9e4 <_tzset_unlocked_r+0x94>
   da9dc:	3701      	adds	r7, #1
   da9de:	f04f 35ff 	mov.w	r5, #4294967295
   da9e2:	e003      	b.n	da9ec <_tzset_unlocked_r+0x9c>
   da9e4:	2b2b      	cmp	r3, #43	; 0x2b
   da9e6:	bf08      	it	eq
   da9e8:	3701      	addeq	r7, #1
   da9ea:	2501      	movs	r5, #1
   da9ec:	f10d 0a20 	add.w	sl, sp, #32
   da9f0:	f10d 0b1e 	add.w	fp, sp, #30
   da9f4:	f04f 0800 	mov.w	r8, #0
   da9f8:	9603      	str	r6, [sp, #12]
   da9fa:	f8cd a008 	str.w	sl, [sp, #8]
   da9fe:	9601      	str	r6, [sp, #4]
   daa00:	f8cd b000 	str.w	fp, [sp]
   daa04:	4633      	mov	r3, r6
   daa06:	aa07      	add	r2, sp, #28
   daa08:	498d      	ldr	r1, [pc, #564]	; (dac40 <_tzset_unlocked_r+0x2f0>)
   daa0a:	f8ad 801e 	strh.w	r8, [sp, #30]
   daa0e:	4638      	mov	r0, r7
   daa10:	f8ad 8020 	strh.w	r8, [sp, #32]
   daa14:	f7fc fe46 	bl	d76a4 <siscanf>
   daa18:	4540      	cmp	r0, r8
   daa1a:	f340 80fd 	ble.w	dac18 <_tzset_unlocked_r+0x2c8>
   daa1e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   daa22:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   daa26:	f8df 9224 	ldr.w	r9, [pc, #548]	; dac4c <_tzset_unlocked_r+0x2fc>
   daa2a:	213c      	movs	r1, #60	; 0x3c
   daa2c:	fb01 3302 	mla	r3, r1, r2, r3
   daa30:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   daa34:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   daa38:	fb01 3302 	mla	r3, r1, r2, r3
   daa3c:	435d      	muls	r5, r3
   daa3e:	6225      	str	r5, [r4, #32]
   daa40:	4d7c      	ldr	r5, [pc, #496]	; (dac34 <_tzset_unlocked_r+0x2e4>)
   daa42:	4b7d      	ldr	r3, [pc, #500]	; (dac38 <_tzset_unlocked_r+0x2e8>)
   daa44:	602b      	str	r3, [r5, #0]
   daa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daa48:	497c      	ldr	r1, [pc, #496]	; (dac3c <_tzset_unlocked_r+0x2ec>)
   daa4a:	441f      	add	r7, r3
   daa4c:	464a      	mov	r2, r9
   daa4e:	4633      	mov	r3, r6
   daa50:	4638      	mov	r0, r7
   daa52:	f7fc fe27 	bl	d76a4 <siscanf>
   daa56:	4540      	cmp	r0, r8
   daa58:	dc08      	bgt.n	daa6c <_tzset_unlocked_r+0x11c>
   daa5a:	682b      	ldr	r3, [r5, #0]
   daa5c:	606b      	str	r3, [r5, #4]
   daa5e:	4b72      	ldr	r3, [pc, #456]	; (dac28 <_tzset_unlocked_r+0x2d8>)
   daa60:	6a22      	ldr	r2, [r4, #32]
   daa62:	601a      	str	r2, [r3, #0]
   daa64:	4b72      	ldr	r3, [pc, #456]	; (dac30 <_tzset_unlocked_r+0x2e0>)
   daa66:	f8c3 8000 	str.w	r8, [r3]
   daa6a:	e0d5      	b.n	dac18 <_tzset_unlocked_r+0x2c8>
   daa6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daa6e:	f8c5 9004 	str.w	r9, [r5, #4]
   daa72:	18fd      	adds	r5, r7, r3
   daa74:	5cfb      	ldrb	r3, [r7, r3]
   daa76:	2b2d      	cmp	r3, #45	; 0x2d
   daa78:	d103      	bne.n	daa82 <_tzset_unlocked_r+0x132>
   daa7a:	3501      	adds	r5, #1
   daa7c:	f04f 37ff 	mov.w	r7, #4294967295
   daa80:	e003      	b.n	daa8a <_tzset_unlocked_r+0x13a>
   daa82:	2b2b      	cmp	r3, #43	; 0x2b
   daa84:	bf08      	it	eq
   daa86:	3501      	addeq	r5, #1
   daa88:	2701      	movs	r7, #1
   daa8a:	2300      	movs	r3, #0
   daa8c:	f8ad 301c 	strh.w	r3, [sp, #28]
   daa90:	f8ad 301e 	strh.w	r3, [sp, #30]
   daa94:	f8ad 3020 	strh.w	r3, [sp, #32]
   daa98:	930a      	str	r3, [sp, #40]	; 0x28
   daa9a:	9603      	str	r6, [sp, #12]
   daa9c:	f8cd a008 	str.w	sl, [sp, #8]
   daaa0:	9601      	str	r6, [sp, #4]
   daaa2:	f8cd b000 	str.w	fp, [sp]
   daaa6:	4633      	mov	r3, r6
   daaa8:	aa07      	add	r2, sp, #28
   daaaa:	4965      	ldr	r1, [pc, #404]	; (dac40 <_tzset_unlocked_r+0x2f0>)
   daaac:	4628      	mov	r0, r5
   daaae:	f7fc fdf9 	bl	d76a4 <siscanf>
   daab2:	2800      	cmp	r0, #0
   daab4:	dc04      	bgt.n	daac0 <_tzset_unlocked_r+0x170>
   daab6:	6a23      	ldr	r3, [r4, #32]
   daab8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   daabc:	63e3      	str	r3, [r4, #60]	; 0x3c
   daabe:	e00e      	b.n	daade <_tzset_unlocked_r+0x18e>
   daac0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   daac4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   daac8:	213c      	movs	r1, #60	; 0x3c
   daaca:	fb01 3302 	mla	r3, r1, r2, r3
   daace:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   daad2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   daad6:	fb01 3302 	mla	r3, r1, r2, r3
   daada:	435f      	muls	r7, r3
   daadc:	63e7      	str	r7, [r4, #60]	; 0x3c
   daade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   daae0:	4627      	mov	r7, r4
   daae2:	441d      	add	r5, r3
   daae4:	f04f 0900 	mov.w	r9, #0
   daae8:	782b      	ldrb	r3, [r5, #0]
   daaea:	2b2c      	cmp	r3, #44	; 0x2c
   daaec:	bf08      	it	eq
   daaee:	3501      	addeq	r5, #1
   daaf0:	f895 8000 	ldrb.w	r8, [r5]
   daaf4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   daaf8:	d126      	bne.n	dab48 <_tzset_unlocked_r+0x1f8>
   daafa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   daafe:	9302      	str	r3, [sp, #8]
   dab00:	ab09      	add	r3, sp, #36	; 0x24
   dab02:	9300      	str	r3, [sp, #0]
   dab04:	9603      	str	r6, [sp, #12]
   dab06:	9601      	str	r6, [sp, #4]
   dab08:	4633      	mov	r3, r6
   dab0a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dab0e:	494d      	ldr	r1, [pc, #308]	; (dac44 <_tzset_unlocked_r+0x2f4>)
   dab10:	4628      	mov	r0, r5
   dab12:	f7fc fdc7 	bl	d76a4 <siscanf>
   dab16:	2803      	cmp	r0, #3
   dab18:	d17e      	bne.n	dac18 <_tzset_unlocked_r+0x2c8>
   dab1a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dab1e:	1e4b      	subs	r3, r1, #1
   dab20:	2b0b      	cmp	r3, #11
   dab22:	d879      	bhi.n	dac18 <_tzset_unlocked_r+0x2c8>
   dab24:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dab28:	1e53      	subs	r3, r2, #1
   dab2a:	2b04      	cmp	r3, #4
   dab2c:	d874      	bhi.n	dac18 <_tzset_unlocked_r+0x2c8>
   dab2e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dab32:	2b06      	cmp	r3, #6
   dab34:	d870      	bhi.n	dac18 <_tzset_unlocked_r+0x2c8>
   dab36:	f887 8008 	strb.w	r8, [r7, #8]
   dab3a:	60f9      	str	r1, [r7, #12]
   dab3c:	613a      	str	r2, [r7, #16]
   dab3e:	617b      	str	r3, [r7, #20]
   dab40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dab42:	eb05 0803 	add.w	r8, r5, r3
   dab46:	e02a      	b.n	dab9e <_tzset_unlocked_r+0x24e>
   dab48:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dab4c:	bf06      	itte	eq
   dab4e:	3501      	addeq	r5, #1
   dab50:	4643      	moveq	r3, r8
   dab52:	2344      	movne	r3, #68	; 0x44
   dab54:	220a      	movs	r2, #10
   dab56:	a90b      	add	r1, sp, #44	; 0x2c
   dab58:	4628      	mov	r0, r5
   dab5a:	9305      	str	r3, [sp, #20]
   dab5c:	f7ff fe3e 	bl	da7dc <strtoul>
   dab60:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dab64:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dab68:	4545      	cmp	r5, r8
   dab6a:	9b05      	ldr	r3, [sp, #20]
   dab6c:	d114      	bne.n	dab98 <_tzset_unlocked_r+0x248>
   dab6e:	234d      	movs	r3, #77	; 0x4d
   dab70:	f1b9 0f00 	cmp.w	r9, #0
   dab74:	d107      	bne.n	dab86 <_tzset_unlocked_r+0x236>
   dab76:	7223      	strb	r3, [r4, #8]
   dab78:	2303      	movs	r3, #3
   dab7a:	60e3      	str	r3, [r4, #12]
   dab7c:	2302      	movs	r3, #2
   dab7e:	6123      	str	r3, [r4, #16]
   dab80:	f8c4 9014 	str.w	r9, [r4, #20]
   dab84:	e00b      	b.n	dab9e <_tzset_unlocked_r+0x24e>
   dab86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dab8a:	230b      	movs	r3, #11
   dab8c:	62a3      	str	r3, [r4, #40]	; 0x28
   dab8e:	2301      	movs	r3, #1
   dab90:	62e3      	str	r3, [r4, #44]	; 0x2c
   dab92:	2300      	movs	r3, #0
   dab94:	6323      	str	r3, [r4, #48]	; 0x30
   dab96:	e002      	b.n	dab9e <_tzset_unlocked_r+0x24e>
   dab98:	b280      	uxth	r0, r0
   dab9a:	723b      	strb	r3, [r7, #8]
   dab9c:	6178      	str	r0, [r7, #20]
   dab9e:	2302      	movs	r3, #2
   daba0:	f8ad 301c 	strh.w	r3, [sp, #28]
   daba4:	2300      	movs	r3, #0
   daba6:	f8ad 301e 	strh.w	r3, [sp, #30]
   dabaa:	f8ad 3020 	strh.w	r3, [sp, #32]
   dabae:	930a      	str	r3, [sp, #40]	; 0x28
   dabb0:	f898 3000 	ldrb.w	r3, [r8]
   dabb4:	2b2f      	cmp	r3, #47	; 0x2f
   dabb6:	d10b      	bne.n	dabd0 <_tzset_unlocked_r+0x280>
   dabb8:	9603      	str	r6, [sp, #12]
   dabba:	f8cd a008 	str.w	sl, [sp, #8]
   dabbe:	9601      	str	r6, [sp, #4]
   dabc0:	f8cd b000 	str.w	fp, [sp]
   dabc4:	4633      	mov	r3, r6
   dabc6:	aa07      	add	r2, sp, #28
   dabc8:	491f      	ldr	r1, [pc, #124]	; (dac48 <_tzset_unlocked_r+0x2f8>)
   dabca:	4640      	mov	r0, r8
   dabcc:	f7fc fd6a 	bl	d76a4 <siscanf>
   dabd0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dabd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dabd8:	213c      	movs	r1, #60	; 0x3c
   dabda:	fb01 3302 	mla	r3, r1, r2, r3
   dabde:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dabe2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dabe6:	fb01 3302 	mla	r3, r1, r2, r3
   dabea:	61bb      	str	r3, [r7, #24]
   dabec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dabee:	f109 0901 	add.w	r9, r9, #1
   dabf2:	f1b9 0f02 	cmp.w	r9, #2
   dabf6:	4445      	add	r5, r8
   dabf8:	f107 071c 	add.w	r7, r7, #28
   dabfc:	f47f af74 	bne.w	daae8 <_tzset_unlocked_r+0x198>
   dac00:	6860      	ldr	r0, [r4, #4]
   dac02:	f7ff fdf5 	bl	da7f0 <__tzcalc_limits>
   dac06:	4b08      	ldr	r3, [pc, #32]	; (dac28 <_tzset_unlocked_r+0x2d8>)
   dac08:	6a22      	ldr	r2, [r4, #32]
   dac0a:	601a      	str	r2, [r3, #0]
   dac0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dac0e:	1a9b      	subs	r3, r3, r2
   dac10:	4a07      	ldr	r2, [pc, #28]	; (dac30 <_tzset_unlocked_r+0x2e0>)
   dac12:	bf18      	it	ne
   dac14:	2301      	movne	r3, #1
   dac16:	6013      	str	r3, [r2, #0]
   dac18:	b00d      	add	sp, #52	; 0x34
   dac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dac1e:	bf00      	nop
   dac20:	000dc268 	.word	0x000dc268
   dac24:	2003e7e0 	.word	0x2003e7e0
   dac28:	2003e7e8 	.word	0x2003e7e8
   dac2c:	000dc26b 	.word	0x000dc26b
   dac30:	2003e7e4 	.word	0x2003e7e4
   dac34:	2003da7c 	.word	0x2003da7c
   dac38:	2003e7d3 	.word	0x2003e7d3
   dac3c:	000dc26f 	.word	0x000dc26f
   dac40:	000dc292 	.word	0x000dc292
   dac44:	000dc27e 	.word	0x000dc27e
   dac48:	000dc291 	.word	0x000dc291
   dac4c:	2003e7c8 	.word	0x2003e7c8

000dac50 <rshift>:
   dac50:	b5f0      	push	{r4, r5, r6, r7, lr}
   dac52:	6906      	ldr	r6, [r0, #16]
   dac54:	114b      	asrs	r3, r1, #5
   dac56:	42b3      	cmp	r3, r6
   dac58:	f100 0514 	add.w	r5, r0, #20
   dac5c:	da27      	bge.n	dacae <rshift+0x5e>
   dac5e:	f011 011f 	ands.w	r1, r1, #31
   dac62:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dac66:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dac6a:	d101      	bne.n	dac70 <rshift+0x20>
   dac6c:	4629      	mov	r1, r5
   dac6e:	e016      	b.n	dac9e <rshift+0x4e>
   dac70:	1d14      	adds	r4, r2, #4
   dac72:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dac76:	f1c1 0e20 	rsb	lr, r1, #32
   dac7a:	40ca      	lsrs	r2, r1
   dac7c:	462b      	mov	r3, r5
   dac7e:	42b4      	cmp	r4, r6
   dac80:	d209      	bcs.n	dac96 <rshift+0x46>
   dac82:	6827      	ldr	r7, [r4, #0]
   dac84:	fa07 f70e 	lsl.w	r7, r7, lr
   dac88:	433a      	orrs	r2, r7
   dac8a:	f843 2b04 	str.w	r2, [r3], #4
   dac8e:	f854 2b04 	ldr.w	r2, [r4], #4
   dac92:	40ca      	lsrs	r2, r1
   dac94:	e7f3      	b.n	dac7e <rshift+0x2e>
   dac96:	601a      	str	r2, [r3, #0]
   dac98:	b152      	cbz	r2, dacb0 <rshift+0x60>
   dac9a:	3304      	adds	r3, #4
   dac9c:	e008      	b.n	dacb0 <rshift+0x60>
   dac9e:	42b2      	cmp	r2, r6
   daca0:	460b      	mov	r3, r1
   daca2:	d205      	bcs.n	dacb0 <rshift+0x60>
   daca4:	f852 3b04 	ldr.w	r3, [r2], #4
   daca8:	f841 3b04 	str.w	r3, [r1], #4
   dacac:	e7f7      	b.n	dac9e <rshift+0x4e>
   dacae:	462b      	mov	r3, r5
   dacb0:	1b5b      	subs	r3, r3, r5
   dacb2:	109b      	asrs	r3, r3, #2
   dacb4:	6103      	str	r3, [r0, #16]
   dacb6:	b903      	cbnz	r3, dacba <rshift+0x6a>
   dacb8:	6143      	str	r3, [r0, #20]
   dacba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dacbc <__hexdig_fun>:
   dacbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dacc0:	2b09      	cmp	r3, #9
   dacc2:	d801      	bhi.n	dacc8 <__hexdig_fun+0xc>
   dacc4:	3820      	subs	r0, #32
   dacc6:	e00a      	b.n	dacde <__hexdig_fun+0x22>
   dacc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   daccc:	2b05      	cmp	r3, #5
   dacce:	d801      	bhi.n	dacd4 <__hexdig_fun+0x18>
   dacd0:	3847      	subs	r0, #71	; 0x47
   dacd2:	e004      	b.n	dacde <__hexdig_fun+0x22>
   dacd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dacd8:	2b05      	cmp	r3, #5
   dacda:	d802      	bhi.n	dace2 <__hexdig_fun+0x26>
   dacdc:	3827      	subs	r0, #39	; 0x27
   dacde:	b2c0      	uxtb	r0, r0
   dace0:	4770      	bx	lr
   dace2:	2000      	movs	r0, #0
   dace4:	4770      	bx	lr

000dace6 <__gethex>:
   dace6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dacea:	b08b      	sub	sp, #44	; 0x2c
   dacec:	468a      	mov	sl, r1
   dacee:	4690      	mov	r8, r2
   dacf0:	9306      	str	r3, [sp, #24]
   dacf2:	9002      	str	r0, [sp, #8]
   dacf4:	f7fe fe46 	bl	d9984 <_localeconv_r>
   dacf8:	6803      	ldr	r3, [r0, #0]
   dacfa:	9303      	str	r3, [sp, #12]
   dacfc:	4618      	mov	r0, r3
   dacfe:	f7fe feae 	bl	d9a5e <strlen>
   dad02:	9b03      	ldr	r3, [sp, #12]
   dad04:	9001      	str	r0, [sp, #4]
   dad06:	4403      	add	r3, r0
   dad08:	f04f 0b00 	mov.w	fp, #0
   dad0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dad10:	9307      	str	r3, [sp, #28]
   dad12:	f8da 3000 	ldr.w	r3, [sl]
   dad16:	3302      	adds	r3, #2
   dad18:	461f      	mov	r7, r3
   dad1a:	f813 0b01 	ldrb.w	r0, [r3], #1
   dad1e:	2830      	cmp	r0, #48	; 0x30
   dad20:	d102      	bne.n	dad28 <__gethex+0x42>
   dad22:	f10b 0b01 	add.w	fp, fp, #1
   dad26:	e7f7      	b.n	dad18 <__gethex+0x32>
   dad28:	f7ff ffc8 	bl	dacbc <__hexdig_fun>
   dad2c:	4604      	mov	r4, r0
   dad2e:	b9e0      	cbnz	r0, dad6a <__gethex+0x84>
   dad30:	9a01      	ldr	r2, [sp, #4]
   dad32:	9903      	ldr	r1, [sp, #12]
   dad34:	4638      	mov	r0, r7
   dad36:	f7fe fe9a 	bl	d9a6e <strncmp>
   dad3a:	2800      	cmp	r0, #0
   dad3c:	d134      	bne.n	dada8 <__gethex+0xc2>
   dad3e:	9b01      	ldr	r3, [sp, #4]
   dad40:	5cf8      	ldrb	r0, [r7, r3]
   dad42:	18fe      	adds	r6, r7, r3
   dad44:	f7ff ffba 	bl	dacbc <__hexdig_fun>
   dad48:	b380      	cbz	r0, dadac <__gethex+0xc6>
   dad4a:	4633      	mov	r3, r6
   dad4c:	7818      	ldrb	r0, [r3, #0]
   dad4e:	2830      	cmp	r0, #48	; 0x30
   dad50:	461f      	mov	r7, r3
   dad52:	f103 0301 	add.w	r3, r3, #1
   dad56:	d0f9      	beq.n	dad4c <__gethex+0x66>
   dad58:	f7ff ffb0 	bl	dacbc <__hexdig_fun>
   dad5c:	fab0 f580 	clz	r5, r0
   dad60:	096d      	lsrs	r5, r5, #5
   dad62:	4634      	mov	r4, r6
   dad64:	f04f 0b01 	mov.w	fp, #1
   dad68:	e001      	b.n	dad6e <__gethex+0x88>
   dad6a:	2500      	movs	r5, #0
   dad6c:	462c      	mov	r4, r5
   dad6e:	463a      	mov	r2, r7
   dad70:	4616      	mov	r6, r2
   dad72:	3201      	adds	r2, #1
   dad74:	7830      	ldrb	r0, [r6, #0]
   dad76:	f7ff ffa1 	bl	dacbc <__hexdig_fun>
   dad7a:	2800      	cmp	r0, #0
   dad7c:	d1f8      	bne.n	dad70 <__gethex+0x8a>
   dad7e:	9a01      	ldr	r2, [sp, #4]
   dad80:	9903      	ldr	r1, [sp, #12]
   dad82:	4630      	mov	r0, r6
   dad84:	f7fe fe73 	bl	d9a6e <strncmp>
   dad88:	b950      	cbnz	r0, dada0 <__gethex+0xba>
   dad8a:	b954      	cbnz	r4, dada2 <__gethex+0xbc>
   dad8c:	9b01      	ldr	r3, [sp, #4]
   dad8e:	18f4      	adds	r4, r6, r3
   dad90:	4622      	mov	r2, r4
   dad92:	4616      	mov	r6, r2
   dad94:	3201      	adds	r2, #1
   dad96:	7830      	ldrb	r0, [r6, #0]
   dad98:	f7ff ff90 	bl	dacbc <__hexdig_fun>
   dad9c:	2800      	cmp	r0, #0
   dad9e:	d1f8      	bne.n	dad92 <__gethex+0xac>
   dada0:	b134      	cbz	r4, dadb0 <__gethex+0xca>
   dada2:	1ba4      	subs	r4, r4, r6
   dada4:	00a4      	lsls	r4, r4, #2
   dada6:	e003      	b.n	dadb0 <__gethex+0xca>
   dada8:	463e      	mov	r6, r7
   dadaa:	e000      	b.n	dadae <__gethex+0xc8>
   dadac:	4604      	mov	r4, r0
   dadae:	2501      	movs	r5, #1
   dadb0:	7833      	ldrb	r3, [r6, #0]
   dadb2:	2b50      	cmp	r3, #80	; 0x50
   dadb4:	d001      	beq.n	dadba <__gethex+0xd4>
   dadb6:	2b70      	cmp	r3, #112	; 0x70
   dadb8:	d12a      	bne.n	dae10 <__gethex+0x12a>
   dadba:	7873      	ldrb	r3, [r6, #1]
   dadbc:	2b2b      	cmp	r3, #43	; 0x2b
   dadbe:	d008      	beq.n	dadd2 <__gethex+0xec>
   dadc0:	2b2d      	cmp	r3, #45	; 0x2d
   dadc2:	d003      	beq.n	dadcc <__gethex+0xe6>
   dadc4:	1c71      	adds	r1, r6, #1
   dadc6:	f04f 0900 	mov.w	r9, #0
   dadca:	e005      	b.n	dadd8 <__gethex+0xf2>
   dadcc:	f04f 0901 	mov.w	r9, #1
   dadd0:	e001      	b.n	dadd6 <__gethex+0xf0>
   dadd2:	f04f 0900 	mov.w	r9, #0
   dadd6:	1cb1      	adds	r1, r6, #2
   dadd8:	7808      	ldrb	r0, [r1, #0]
   dadda:	f7ff ff6f 	bl	dacbc <__hexdig_fun>
   dadde:	1e43      	subs	r3, r0, #1
   dade0:	b2db      	uxtb	r3, r3
   dade2:	2b18      	cmp	r3, #24
   dade4:	d814      	bhi.n	dae10 <__gethex+0x12a>
   dade6:	f1a0 0210 	sub.w	r2, r0, #16
   dadea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dadee:	f7ff ff65 	bl	dacbc <__hexdig_fun>
   dadf2:	1e43      	subs	r3, r0, #1
   dadf4:	b2db      	uxtb	r3, r3
   dadf6:	2b18      	cmp	r3, #24
   dadf8:	d804      	bhi.n	dae04 <__gethex+0x11e>
   dadfa:	230a      	movs	r3, #10
   dadfc:	fb03 0202 	mla	r2, r3, r2, r0
   dae00:	3a10      	subs	r2, #16
   dae02:	e7f2      	b.n	dadea <__gethex+0x104>
   dae04:	f1b9 0f00 	cmp.w	r9, #0
   dae08:	d000      	beq.n	dae0c <__gethex+0x126>
   dae0a:	4252      	negs	r2, r2
   dae0c:	4414      	add	r4, r2
   dae0e:	e000      	b.n	dae12 <__gethex+0x12c>
   dae10:	4631      	mov	r1, r6
   dae12:	f8ca 1000 	str.w	r1, [sl]
   dae16:	b12d      	cbz	r5, dae24 <__gethex+0x13e>
   dae18:	f1bb 0f00 	cmp.w	fp, #0
   dae1c:	bf14      	ite	ne
   dae1e:	2000      	movne	r0, #0
   dae20:	2006      	moveq	r0, #6
   dae22:	e17c      	b.n	db11e <__gethex+0x438>
   dae24:	1bf3      	subs	r3, r6, r7
   dae26:	3b01      	subs	r3, #1
   dae28:	4629      	mov	r1, r5
   dae2a:	2b07      	cmp	r3, #7
   dae2c:	dd02      	ble.n	dae34 <__gethex+0x14e>
   dae2e:	3101      	adds	r1, #1
   dae30:	105b      	asrs	r3, r3, #1
   dae32:	e7fa      	b.n	dae2a <__gethex+0x144>
   dae34:	9802      	ldr	r0, [sp, #8]
   dae36:	f000 fb09 	bl	db44c <_Balloc>
   dae3a:	9b01      	ldr	r3, [sp, #4]
   dae3c:	f100 0a14 	add.w	sl, r0, #20
   dae40:	f04f 0900 	mov.w	r9, #0
   dae44:	f1c3 0301 	rsb	r3, r3, #1
   dae48:	4605      	mov	r5, r0
   dae4a:	f8cd a010 	str.w	sl, [sp, #16]
   dae4e:	46cb      	mov	fp, r9
   dae50:	9308      	str	r3, [sp, #32]
   dae52:	42b7      	cmp	r7, r6
   dae54:	d22f      	bcs.n	daeb6 <__gethex+0x1d0>
   dae56:	1e73      	subs	r3, r6, #1
   dae58:	9305      	str	r3, [sp, #20]
   dae5a:	9a07      	ldr	r2, [sp, #28]
   dae5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dae60:	4293      	cmp	r3, r2
   dae62:	d00b      	beq.n	dae7c <__gethex+0x196>
   dae64:	f1bb 0f20 	cmp.w	fp, #32
   dae68:	d116      	bne.n	dae98 <__gethex+0x1b2>
   dae6a:	9b04      	ldr	r3, [sp, #16]
   dae6c:	f8c3 9000 	str.w	r9, [r3]
   dae70:	3304      	adds	r3, #4
   dae72:	f04f 0900 	mov.w	r9, #0
   dae76:	9304      	str	r3, [sp, #16]
   dae78:	46cb      	mov	fp, r9
   dae7a:	e00d      	b.n	dae98 <__gethex+0x1b2>
   dae7c:	9b05      	ldr	r3, [sp, #20]
   dae7e:	9a08      	ldr	r2, [sp, #32]
   dae80:	4413      	add	r3, r2
   dae82:	429f      	cmp	r7, r3
   dae84:	d8ee      	bhi.n	dae64 <__gethex+0x17e>
   dae86:	4618      	mov	r0, r3
   dae88:	9a01      	ldr	r2, [sp, #4]
   dae8a:	9903      	ldr	r1, [sp, #12]
   dae8c:	9309      	str	r3, [sp, #36]	; 0x24
   dae8e:	f7fe fdee 	bl	d9a6e <strncmp>
   dae92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dae94:	b168      	cbz	r0, daeb2 <__gethex+0x1cc>
   dae96:	e7e5      	b.n	dae64 <__gethex+0x17e>
   dae98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dae9c:	f7ff ff0e 	bl	dacbc <__hexdig_fun>
   daea0:	f000 000f 	and.w	r0, r0, #15
   daea4:	fa00 f00b 	lsl.w	r0, r0, fp
   daea8:	9b05      	ldr	r3, [sp, #20]
   daeaa:	ea49 0900 	orr.w	r9, r9, r0
   daeae:	f10b 0b04 	add.w	fp, fp, #4
   daeb2:	461e      	mov	r6, r3
   daeb4:	e7cd      	b.n	dae52 <__gethex+0x16c>
   daeb6:	9804      	ldr	r0, [sp, #16]
   daeb8:	f840 9b04 	str.w	r9, [r0], #4
   daebc:	ebca 0000 	rsb	r0, sl, r0
   daec0:	1080      	asrs	r0, r0, #2
   daec2:	6128      	str	r0, [r5, #16]
   daec4:	0147      	lsls	r7, r0, #5
   daec6:	4648      	mov	r0, r9
   daec8:	f000 fb85 	bl	db5d6 <__hi0bits>
   daecc:	f8d8 6000 	ldr.w	r6, [r8]
   daed0:	1a38      	subs	r0, r7, r0
   daed2:	42b0      	cmp	r0, r6
   daed4:	dd26      	ble.n	daf24 <__gethex+0x23e>
   daed6:	1b87      	subs	r7, r0, r6
   daed8:	4639      	mov	r1, r7
   daeda:	4628      	mov	r0, r5
   daedc:	f000 fe83 	bl	dbbe6 <__any_on>
   daee0:	b1c8      	cbz	r0, daf16 <__gethex+0x230>
   daee2:	1e7b      	subs	r3, r7, #1
   daee4:	1159      	asrs	r1, r3, #5
   daee6:	f003 021f 	and.w	r2, r3, #31
   daeea:	f04f 0901 	mov.w	r9, #1
   daeee:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   daef2:	fa09 f202 	lsl.w	r2, r9, r2
   daef6:	420a      	tst	r2, r1
   daef8:	d00e      	beq.n	daf18 <__gethex+0x232>
   daefa:	454b      	cmp	r3, r9
   daefc:	dc02      	bgt.n	daf04 <__gethex+0x21e>
   daefe:	f04f 0902 	mov.w	r9, #2
   daf02:	e009      	b.n	daf18 <__gethex+0x232>
   daf04:	1eb9      	subs	r1, r7, #2
   daf06:	4628      	mov	r0, r5
   daf08:	f000 fe6d 	bl	dbbe6 <__any_on>
   daf0c:	2800      	cmp	r0, #0
   daf0e:	d0f6      	beq.n	daefe <__gethex+0x218>
   daf10:	f04f 0903 	mov.w	r9, #3
   daf14:	e000      	b.n	daf18 <__gethex+0x232>
   daf16:	4681      	mov	r9, r0
   daf18:	4639      	mov	r1, r7
   daf1a:	4628      	mov	r0, r5
   daf1c:	f7ff fe98 	bl	dac50 <rshift>
   daf20:	443c      	add	r4, r7
   daf22:	e00c      	b.n	daf3e <__gethex+0x258>
   daf24:	da09      	bge.n	daf3a <__gethex+0x254>
   daf26:	1a37      	subs	r7, r6, r0
   daf28:	4629      	mov	r1, r5
   daf2a:	463a      	mov	r2, r7
   daf2c:	9802      	ldr	r0, [sp, #8]
   daf2e:	f000 fc87 	bl	db840 <__lshift>
   daf32:	1be4      	subs	r4, r4, r7
   daf34:	4605      	mov	r5, r0
   daf36:	f100 0a14 	add.w	sl, r0, #20
   daf3a:	f04f 0900 	mov.w	r9, #0
   daf3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daf42:	429c      	cmp	r4, r3
   daf44:	dd08      	ble.n	daf58 <__gethex+0x272>
   daf46:	9802      	ldr	r0, [sp, #8]
   daf48:	4629      	mov	r1, r5
   daf4a:	f000 fab4 	bl	db4b6 <_Bfree>
   daf4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daf50:	2300      	movs	r3, #0
   daf52:	6013      	str	r3, [r2, #0]
   daf54:	20a3      	movs	r0, #163	; 0xa3
   daf56:	e0e2      	b.n	db11e <__gethex+0x438>
   daf58:	f8d8 0004 	ldr.w	r0, [r8, #4]
   daf5c:	4284      	cmp	r4, r0
   daf5e:	da53      	bge.n	db008 <__gethex+0x322>
   daf60:	1b04      	subs	r4, r0, r4
   daf62:	42a6      	cmp	r6, r4
   daf64:	dc2e      	bgt.n	dafc4 <__gethex+0x2de>
   daf66:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daf6a:	2b02      	cmp	r3, #2
   daf6c:	d01a      	beq.n	dafa4 <__gethex+0x2be>
   daf6e:	2b03      	cmp	r3, #3
   daf70:	d01c      	beq.n	dafac <__gethex+0x2c6>
   daf72:	2b01      	cmp	r3, #1
   daf74:	d11d      	bne.n	dafb2 <__gethex+0x2cc>
   daf76:	42a6      	cmp	r6, r4
   daf78:	d11b      	bne.n	dafb2 <__gethex+0x2cc>
   daf7a:	2e01      	cmp	r6, #1
   daf7c:	dc0b      	bgt.n	daf96 <__gethex+0x2b0>
   daf7e:	9a06      	ldr	r2, [sp, #24]
   daf80:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daf84:	6013      	str	r3, [r2, #0]
   daf86:	2301      	movs	r3, #1
   daf88:	612b      	str	r3, [r5, #16]
   daf8a:	f8ca 3000 	str.w	r3, [sl]
   daf8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daf90:	2062      	movs	r0, #98	; 0x62
   daf92:	601d      	str	r5, [r3, #0]
   daf94:	e0c3      	b.n	db11e <__gethex+0x438>
   daf96:	1e71      	subs	r1, r6, #1
   daf98:	4628      	mov	r0, r5
   daf9a:	f000 fe24 	bl	dbbe6 <__any_on>
   daf9e:	2800      	cmp	r0, #0
   dafa0:	d1ed      	bne.n	daf7e <__gethex+0x298>
   dafa2:	e006      	b.n	dafb2 <__gethex+0x2cc>
   dafa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dafa6:	2b00      	cmp	r3, #0
   dafa8:	d0e9      	beq.n	daf7e <__gethex+0x298>
   dafaa:	e002      	b.n	dafb2 <__gethex+0x2cc>
   dafac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dafae:	2b00      	cmp	r3, #0
   dafb0:	d1e5      	bne.n	daf7e <__gethex+0x298>
   dafb2:	9802      	ldr	r0, [sp, #8]
   dafb4:	4629      	mov	r1, r5
   dafb6:	f000 fa7e 	bl	db4b6 <_Bfree>
   dafba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dafbc:	2300      	movs	r3, #0
   dafbe:	6013      	str	r3, [r2, #0]
   dafc0:	2050      	movs	r0, #80	; 0x50
   dafc2:	e0ac      	b.n	db11e <__gethex+0x438>
   dafc4:	1e67      	subs	r7, r4, #1
   dafc6:	f1b9 0f00 	cmp.w	r9, #0
   dafca:	d106      	bne.n	dafda <__gethex+0x2f4>
   dafcc:	b13f      	cbz	r7, dafde <__gethex+0x2f8>
   dafce:	4639      	mov	r1, r7
   dafd0:	4628      	mov	r0, r5
   dafd2:	f000 fe08 	bl	dbbe6 <__any_on>
   dafd6:	4681      	mov	r9, r0
   dafd8:	e001      	b.n	dafde <__gethex+0x2f8>
   dafda:	f04f 0901 	mov.w	r9, #1
   dafde:	117a      	asrs	r2, r7, #5
   dafe0:	2301      	movs	r3, #1
   dafe2:	f007 071f 	and.w	r7, r7, #31
   dafe6:	fa03 f707 	lsl.w	r7, r3, r7
   dafea:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dafee:	4621      	mov	r1, r4
   daff0:	421f      	tst	r7, r3
   daff2:	4628      	mov	r0, r5
   daff4:	bf18      	it	ne
   daff6:	f049 0902 	orrne.w	r9, r9, #2
   daffa:	1b36      	subs	r6, r6, r4
   daffc:	f7ff fe28 	bl	dac50 <rshift>
   db000:	2702      	movs	r7, #2
   db002:	f8d8 4004 	ldr.w	r4, [r8, #4]
   db006:	e000      	b.n	db00a <__gethex+0x324>
   db008:	2701      	movs	r7, #1
   db00a:	f1b9 0f00 	cmp.w	r9, #0
   db00e:	f000 8081 	beq.w	db114 <__gethex+0x42e>
   db012:	f8d8 300c 	ldr.w	r3, [r8, #12]
   db016:	2b02      	cmp	r3, #2
   db018:	d00e      	beq.n	db038 <__gethex+0x352>
   db01a:	2b03      	cmp	r3, #3
   db01c:	d010      	beq.n	db040 <__gethex+0x35a>
   db01e:	2b01      	cmp	r3, #1
   db020:	d176      	bne.n	db110 <__gethex+0x42a>
   db022:	f019 0f02 	tst.w	r9, #2
   db026:	d073      	beq.n	db110 <__gethex+0x42a>
   db028:	f8da 0000 	ldr.w	r0, [sl]
   db02c:	ea49 0900 	orr.w	r9, r9, r0
   db030:	f019 0f01 	tst.w	r9, #1
   db034:	d107      	bne.n	db046 <__gethex+0x360>
   db036:	e06b      	b.n	db110 <__gethex+0x42a>
   db038:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db03a:	f1c3 0301 	rsb	r3, r3, #1
   db03e:	9315      	str	r3, [sp, #84]	; 0x54
   db040:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db042:	2b00      	cmp	r3, #0
   db044:	d064      	beq.n	db110 <__gethex+0x42a>
   db046:	f8d5 a010 	ldr.w	sl, [r5, #16]
   db04a:	f105 0314 	add.w	r3, r5, #20
   db04e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   db052:	eb03 0109 	add.w	r1, r3, r9
   db056:	2000      	movs	r0, #0
   db058:	681a      	ldr	r2, [r3, #0]
   db05a:	f1b2 3fff 	cmp.w	r2, #4294967295
   db05e:	d002      	beq.n	db066 <__gethex+0x380>
   db060:	3201      	adds	r2, #1
   db062:	601a      	str	r2, [r3, #0]
   db064:	e020      	b.n	db0a8 <__gethex+0x3c2>
   db066:	f843 0b04 	str.w	r0, [r3], #4
   db06a:	4299      	cmp	r1, r3
   db06c:	d8f4      	bhi.n	db058 <__gethex+0x372>
   db06e:	68ab      	ldr	r3, [r5, #8]
   db070:	459a      	cmp	sl, r3
   db072:	db12      	blt.n	db09a <__gethex+0x3b4>
   db074:	6869      	ldr	r1, [r5, #4]
   db076:	9802      	ldr	r0, [sp, #8]
   db078:	3101      	adds	r1, #1
   db07a:	f000 f9e7 	bl	db44c <_Balloc>
   db07e:	692a      	ldr	r2, [r5, #16]
   db080:	3202      	adds	r2, #2
   db082:	f105 010c 	add.w	r1, r5, #12
   db086:	4683      	mov	fp, r0
   db088:	0092      	lsls	r2, r2, #2
   db08a:	300c      	adds	r0, #12
   db08c:	f7fe fc7e 	bl	d998c <memcpy>
   db090:	4629      	mov	r1, r5
   db092:	9802      	ldr	r0, [sp, #8]
   db094:	f000 fa0f 	bl	db4b6 <_Bfree>
   db098:	465d      	mov	r5, fp
   db09a:	692b      	ldr	r3, [r5, #16]
   db09c:	1c5a      	adds	r2, r3, #1
   db09e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   db0a2:	612a      	str	r2, [r5, #16]
   db0a4:	2201      	movs	r2, #1
   db0a6:	615a      	str	r2, [r3, #20]
   db0a8:	2f02      	cmp	r7, #2
   db0aa:	f105 0214 	add.w	r2, r5, #20
   db0ae:	d111      	bne.n	db0d4 <__gethex+0x3ee>
   db0b0:	f8d8 3000 	ldr.w	r3, [r8]
   db0b4:	3b01      	subs	r3, #1
   db0b6:	429e      	cmp	r6, r3
   db0b8:	d127      	bne.n	db10a <__gethex+0x424>
   db0ba:	1171      	asrs	r1, r6, #5
   db0bc:	2301      	movs	r3, #1
   db0be:	f006 061f 	and.w	r6, r6, #31
   db0c2:	fa03 f606 	lsl.w	r6, r3, r6
   db0c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   db0ca:	421e      	tst	r6, r3
   db0cc:	bf0c      	ite	eq
   db0ce:	2702      	moveq	r7, #2
   db0d0:	2701      	movne	r7, #1
   db0d2:	e01a      	b.n	db10a <__gethex+0x424>
   db0d4:	692b      	ldr	r3, [r5, #16]
   db0d6:	459a      	cmp	sl, r3
   db0d8:	da0a      	bge.n	db0f0 <__gethex+0x40a>
   db0da:	2101      	movs	r1, #1
   db0dc:	4628      	mov	r0, r5
   db0de:	f7ff fdb7 	bl	dac50 <rshift>
   db0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db0e6:	3401      	adds	r4, #1
   db0e8:	429c      	cmp	r4, r3
   db0ea:	f73f af2c 	bgt.w	daf46 <__gethex+0x260>
   db0ee:	e00b      	b.n	db108 <__gethex+0x422>
   db0f0:	f016 061f 	ands.w	r6, r6, #31
   db0f4:	d008      	beq.n	db108 <__gethex+0x422>
   db0f6:	4491      	add	r9, r2
   db0f8:	f1c6 0620 	rsb	r6, r6, #32
   db0fc:	f859 0c04 	ldr.w	r0, [r9, #-4]
   db100:	f000 fa69 	bl	db5d6 <__hi0bits>
   db104:	42b0      	cmp	r0, r6
   db106:	dbe8      	blt.n	db0da <__gethex+0x3f4>
   db108:	2701      	movs	r7, #1
   db10a:	f047 0720 	orr.w	r7, r7, #32
   db10e:	e001      	b.n	db114 <__gethex+0x42e>
   db110:	f047 0710 	orr.w	r7, r7, #16
   db114:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db116:	601d      	str	r5, [r3, #0]
   db118:	9b06      	ldr	r3, [sp, #24]
   db11a:	4638      	mov	r0, r7
   db11c:	601c      	str	r4, [r3, #0]
   db11e:	b00b      	add	sp, #44	; 0x2c
   db120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db124 <L_shift>:
   db124:	f1c2 0208 	rsb	r2, r2, #8
   db128:	0092      	lsls	r2, r2, #2
   db12a:	b570      	push	{r4, r5, r6, lr}
   db12c:	f1c2 0620 	rsb	r6, r2, #32
   db130:	6843      	ldr	r3, [r0, #4]
   db132:	6805      	ldr	r5, [r0, #0]
   db134:	fa03 f406 	lsl.w	r4, r3, r6
   db138:	432c      	orrs	r4, r5
   db13a:	40d3      	lsrs	r3, r2
   db13c:	6004      	str	r4, [r0, #0]
   db13e:	f840 3f04 	str.w	r3, [r0, #4]!
   db142:	4288      	cmp	r0, r1
   db144:	d3f4      	bcc.n	db130 <L_shift+0xc>
   db146:	bd70      	pop	{r4, r5, r6, pc}

000db148 <__match>:
   db148:	b530      	push	{r4, r5, lr}
   db14a:	6803      	ldr	r3, [r0, #0]
   db14c:	f811 4b01 	ldrb.w	r4, [r1], #1
   db150:	3301      	adds	r3, #1
   db152:	b14c      	cbz	r4, db168 <__match+0x20>
   db154:	781a      	ldrb	r2, [r3, #0]
   db156:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   db15a:	2d19      	cmp	r5, #25
   db15c:	bf98      	it	ls
   db15e:	3220      	addls	r2, #32
   db160:	42a2      	cmp	r2, r4
   db162:	d0f3      	beq.n	db14c <__match+0x4>
   db164:	2000      	movs	r0, #0
   db166:	bd30      	pop	{r4, r5, pc}
   db168:	6003      	str	r3, [r0, #0]
   db16a:	2001      	movs	r0, #1
   db16c:	bd30      	pop	{r4, r5, pc}

000db16e <__hexnan>:
   db16e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db172:	680b      	ldr	r3, [r1, #0]
   db174:	f8d0 b000 	ldr.w	fp, [r0]
   db178:	115e      	asrs	r6, r3, #5
   db17a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   db17e:	f013 031f 	ands.w	r3, r3, #31
   db182:	b085      	sub	sp, #20
   db184:	bf18      	it	ne
   db186:	3604      	addne	r6, #4
   db188:	1f35      	subs	r5, r6, #4
   db18a:	4617      	mov	r7, r2
   db18c:	2200      	movs	r2, #0
   db18e:	4682      	mov	sl, r0
   db190:	9301      	str	r3, [sp, #4]
   db192:	f846 2c04 	str.w	r2, [r6, #-4]
   db196:	46a8      	mov	r8, r5
   db198:	462c      	mov	r4, r5
   db19a:	9200      	str	r2, [sp, #0]
   db19c:	4691      	mov	r9, r2
   db19e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   db1a2:	2900      	cmp	r1, #0
   db1a4:	d03c      	beq.n	db220 <__hexnan+0xb2>
   db1a6:	4608      	mov	r0, r1
   db1a8:	9203      	str	r2, [sp, #12]
   db1aa:	9102      	str	r1, [sp, #8]
   db1ac:	f7ff fd86 	bl	dacbc <__hexdig_fun>
   db1b0:	9a03      	ldr	r2, [sp, #12]
   db1b2:	bb00      	cbnz	r0, db1f6 <__hexnan+0x88>
   db1b4:	9902      	ldr	r1, [sp, #8]
   db1b6:	2920      	cmp	r1, #32
   db1b8:	d816      	bhi.n	db1e8 <__hexnan+0x7a>
   db1ba:	9b00      	ldr	r3, [sp, #0]
   db1bc:	4599      	cmp	r9, r3
   db1be:	ddee      	ble.n	db19e <__hexnan+0x30>
   db1c0:	4544      	cmp	r4, r8
   db1c2:	d205      	bcs.n	db1d0 <__hexnan+0x62>
   db1c4:	2a07      	cmp	r2, #7
   db1c6:	dc03      	bgt.n	db1d0 <__hexnan+0x62>
   db1c8:	4641      	mov	r1, r8
   db1ca:	4620      	mov	r0, r4
   db1cc:	f7ff ffaa 	bl	db124 <L_shift>
   db1d0:	42bc      	cmp	r4, r7
   db1d2:	d923      	bls.n	db21c <__hexnan+0xae>
   db1d4:	2300      	movs	r3, #0
   db1d6:	f1a4 0804 	sub.w	r8, r4, #4
   db1da:	f844 3c04 	str.w	r3, [r4, #-4]
   db1de:	f8cd 9000 	str.w	r9, [sp]
   db1e2:	4644      	mov	r4, r8
   db1e4:	461a      	mov	r2, r3
   db1e6:	e7da      	b.n	db19e <__hexnan+0x30>
   db1e8:	2929      	cmp	r1, #41	; 0x29
   db1ea:	d148      	bne.n	db27e <__hexnan+0x110>
   db1ec:	f10b 0301 	add.w	r3, fp, #1
   db1f0:	f8ca 3000 	str.w	r3, [sl]
   db1f4:	e014      	b.n	db220 <__hexnan+0xb2>
   db1f6:	3201      	adds	r2, #1
   db1f8:	2a08      	cmp	r2, #8
   db1fa:	f109 0901 	add.w	r9, r9, #1
   db1fe:	dd06      	ble.n	db20e <__hexnan+0xa0>
   db200:	42bc      	cmp	r4, r7
   db202:	d9cc      	bls.n	db19e <__hexnan+0x30>
   db204:	2300      	movs	r3, #0
   db206:	f844 3c04 	str.w	r3, [r4, #-4]
   db20a:	2201      	movs	r2, #1
   db20c:	3c04      	subs	r4, #4
   db20e:	6821      	ldr	r1, [r4, #0]
   db210:	f000 000f 	and.w	r0, r0, #15
   db214:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   db218:	6020      	str	r0, [r4, #0]
   db21a:	e7c0      	b.n	db19e <__hexnan+0x30>
   db21c:	2208      	movs	r2, #8
   db21e:	e7be      	b.n	db19e <__hexnan+0x30>
   db220:	f1b9 0f00 	cmp.w	r9, #0
   db224:	d02b      	beq.n	db27e <__hexnan+0x110>
   db226:	4544      	cmp	r4, r8
   db228:	d205      	bcs.n	db236 <__hexnan+0xc8>
   db22a:	2a07      	cmp	r2, #7
   db22c:	dc03      	bgt.n	db236 <__hexnan+0xc8>
   db22e:	4641      	mov	r1, r8
   db230:	4620      	mov	r0, r4
   db232:	f7ff ff77 	bl	db124 <L_shift>
   db236:	42bc      	cmp	r4, r7
   db238:	d90c      	bls.n	db254 <__hexnan+0xe6>
   db23a:	463b      	mov	r3, r7
   db23c:	f854 2b04 	ldr.w	r2, [r4], #4
   db240:	f843 2b04 	str.w	r2, [r3], #4
   db244:	42a5      	cmp	r5, r4
   db246:	d2f9      	bcs.n	db23c <__hexnan+0xce>
   db248:	2200      	movs	r2, #0
   db24a:	f843 2b04 	str.w	r2, [r3], #4
   db24e:	429d      	cmp	r5, r3
   db250:	d2fb      	bcs.n	db24a <__hexnan+0xdc>
   db252:	e00b      	b.n	db26c <__hexnan+0xfe>
   db254:	9b01      	ldr	r3, [sp, #4]
   db256:	b14b      	cbz	r3, db26c <__hexnan+0xfe>
   db258:	f1c3 0220 	rsb	r2, r3, #32
   db25c:	f04f 33ff 	mov.w	r3, #4294967295
   db260:	40d3      	lsrs	r3, r2
   db262:	f856 2c04 	ldr.w	r2, [r6, #-4]
   db266:	4013      	ands	r3, r2
   db268:	f846 3c04 	str.w	r3, [r6, #-4]
   db26c:	682b      	ldr	r3, [r5, #0]
   db26e:	b943      	cbnz	r3, db282 <__hexnan+0x114>
   db270:	42bd      	cmp	r5, r7
   db272:	d102      	bne.n	db27a <__hexnan+0x10c>
   db274:	2301      	movs	r3, #1
   db276:	602b      	str	r3, [r5, #0]
   db278:	e003      	b.n	db282 <__hexnan+0x114>
   db27a:	3d04      	subs	r5, #4
   db27c:	e7f6      	b.n	db26c <__hexnan+0xfe>
   db27e:	2004      	movs	r0, #4
   db280:	e000      	b.n	db284 <__hexnan+0x116>
   db282:	2005      	movs	r0, #5
   db284:	b005      	add	sp, #20
   db286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db28c <_findenv_r>:
   db28c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db290:	4607      	mov	r7, r0
   db292:	468b      	mov	fp, r1
   db294:	4690      	mov	r8, r2
   db296:	f000 fcd6 	bl	dbc46 <__env_lock>
   db29a:	4b19      	ldr	r3, [pc, #100]	; (db300 <_findenv_r+0x74>)
   db29c:	681d      	ldr	r5, [r3, #0]
   db29e:	469a      	mov	sl, r3
   db2a0:	b13d      	cbz	r5, db2b2 <_findenv_r+0x26>
   db2a2:	465c      	mov	r4, fp
   db2a4:	4623      	mov	r3, r4
   db2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   db2aa:	b142      	cbz	r2, db2be <_findenv_r+0x32>
   db2ac:	2a3d      	cmp	r2, #61	; 0x3d
   db2ae:	461c      	mov	r4, r3
   db2b0:	d1f8      	bne.n	db2a4 <_findenv_r+0x18>
   db2b2:	4638      	mov	r0, r7
   db2b4:	f000 fcc8 	bl	dbc48 <__env_unlock>
   db2b8:	2000      	movs	r0, #0
   db2ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db2be:	ebcb 0404 	rsb	r4, fp, r4
   db2c2:	46a9      	mov	r9, r5
   db2c4:	f859 0b04 	ldr.w	r0, [r9], #4
   db2c8:	2800      	cmp	r0, #0
   db2ca:	d0f2      	beq.n	db2b2 <_findenv_r+0x26>
   db2cc:	4622      	mov	r2, r4
   db2ce:	4659      	mov	r1, fp
   db2d0:	f7fe fbcd 	bl	d9a6e <strncmp>
   db2d4:	b988      	cbnz	r0, db2fa <_findenv_r+0x6e>
   db2d6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   db2da:	191e      	adds	r6, r3, r4
   db2dc:	5d1b      	ldrb	r3, [r3, r4]
   db2de:	2b3d      	cmp	r3, #61	; 0x3d
   db2e0:	d10b      	bne.n	db2fa <_findenv_r+0x6e>
   db2e2:	f8da 3000 	ldr.w	r3, [sl]
   db2e6:	1aed      	subs	r5, r5, r3
   db2e8:	10ad      	asrs	r5, r5, #2
   db2ea:	4638      	mov	r0, r7
   db2ec:	f8c8 5000 	str.w	r5, [r8]
   db2f0:	f000 fcaa 	bl	dbc48 <__env_unlock>
   db2f4:	1c70      	adds	r0, r6, #1
   db2f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db2fa:	464d      	mov	r5, r9
   db2fc:	e7e1      	b.n	db2c2 <_findenv_r+0x36>
   db2fe:	bf00      	nop
   db300:	2003dac4 	.word	0x2003dac4

000db304 <_getenv_r>:
   db304:	b507      	push	{r0, r1, r2, lr}
   db306:	aa01      	add	r2, sp, #4
   db308:	f7ff ffc0 	bl	db28c <_findenv_r>
   db30c:	b003      	add	sp, #12
   db30e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db314 <__gettzinfo>:
   db314:	4800      	ldr	r0, [pc, #0]	; (db318 <__gettzinfo+0x4>)
   db316:	4770      	bx	lr
   db318:	2003da84 	.word	0x2003da84

000db31c <gmtime_r>:
   db31c:	6802      	ldr	r2, [r0, #0]
   db31e:	4b47      	ldr	r3, [pc, #284]	; (db43c <gmtime_r+0x120>)
   db320:	b5f0      	push	{r4, r5, r6, r7, lr}
   db322:	fb92 f4f3 	sdiv	r4, r2, r3
   db326:	fb03 2214 	mls	r2, r3, r4, r2
   db32a:	2a00      	cmp	r2, #0
   db32c:	bfbc      	itt	lt
   db32e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   db332:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   db336:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   db33a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   db33e:	fb92 f3f0 	sdiv	r3, r2, r0
   db342:	fb00 2213 	mls	r2, r0, r3, r2
   db346:	f04f 003c 	mov.w	r0, #60	; 0x3c
   db34a:	bfac      	ite	ge
   db34c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   db350:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   db354:	608b      	str	r3, [r1, #8]
   db356:	fb92 f3f0 	sdiv	r3, r2, r0
   db35a:	fb00 2213 	mls	r2, r0, r3, r2
   db35e:	604b      	str	r3, [r1, #4]
   db360:	600a      	str	r2, [r1, #0]
   db362:	2307      	movs	r3, #7
   db364:	1ce2      	adds	r2, r4, #3
   db366:	fb92 f3f3 	sdiv	r3, r2, r3
   db36a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db36e:	1ad3      	subs	r3, r2, r3
   db370:	618b      	str	r3, [r1, #24]
   db372:	4b33      	ldr	r3, [pc, #204]	; (db440 <gmtime_r+0x124>)
   db374:	4d33      	ldr	r5, [pc, #204]	; (db444 <gmtime_r+0x128>)
   db376:	fb94 f5f5 	sdiv	r5, r4, r5
   db37a:	fb03 4405 	mla	r4, r3, r5, r4
   db37e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db382:	fbb4 f2f2 	udiv	r2, r4, r2
   db386:	4422      	add	r2, r4
   db388:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db38c:	fbb4 f3f7 	udiv	r3, r4, r7
   db390:	1ad2      	subs	r2, r2, r3
   db392:	482d      	ldr	r0, [pc, #180]	; (db448 <gmtime_r+0x12c>)
   db394:	fbb4 f0f0 	udiv	r0, r4, r0
   db398:	f648 6694 	movw	r6, #36500	; 0x8e94
   db39c:	1a13      	subs	r3, r2, r0
   db39e:	fbb3 f6f6 	udiv	r6, r3, r6
   db3a2:	4434      	add	r4, r6
   db3a4:	f240 126d 	movw	r2, #365	; 0x16d
   db3a8:	fbb3 f0f2 	udiv	r0, r3, r2
   db3ac:	fbb3 f3f7 	udiv	r3, r3, r7
   db3b0:	1ae3      	subs	r3, r4, r3
   db3b2:	fb02 3310 	mls	r3, r2, r0, r3
   db3b6:	2499      	movs	r4, #153	; 0x99
   db3b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db3bc:	3202      	adds	r2, #2
   db3be:	fbb2 f2f4 	udiv	r2, r2, r4
   db3c2:	2a0a      	cmp	r2, #10
   db3c4:	fb04 f402 	mul.w	r4, r4, r2
   db3c8:	f104 0602 	add.w	r6, r4, #2
   db3cc:	f04f 0405 	mov.w	r4, #5
   db3d0:	fbb6 f4f4 	udiv	r4, r6, r4
   db3d4:	bf34      	ite	cc
   db3d6:	2602      	movcc	r6, #2
   db3d8:	f06f 0609 	mvncs.w	r6, #9
   db3dc:	4416      	add	r6, r2
   db3de:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db3e2:	fb02 0505 	mla	r5, r2, r5, r0
   db3e6:	1c5f      	adds	r7, r3, #1
   db3e8:	2e01      	cmp	r6, #1
   db3ea:	bf98      	it	ls
   db3ec:	3501      	addls	r5, #1
   db3ee:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db3f2:	eba7 0704 	sub.w	r7, r7, r4
   db3f6:	d302      	bcc.n	db3fe <gmtime_r+0xe2>
   db3f8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db3fc:	e014      	b.n	db428 <gmtime_r+0x10c>
   db3fe:	0782      	lsls	r2, r0, #30
   db400:	d105      	bne.n	db40e <gmtime_r+0xf2>
   db402:	2464      	movs	r4, #100	; 0x64
   db404:	fbb0 f2f4 	udiv	r2, r0, r4
   db408:	fb04 0212 	mls	r2, r4, r2, r0
   db40c:	b94a      	cbnz	r2, db422 <gmtime_r+0x106>
   db40e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db412:	fbb0 f4f2 	udiv	r4, r0, r2
   db416:	fb02 0014 	mls	r0, r2, r4, r0
   db41a:	fab0 f280 	clz	r2, r0
   db41e:	0952      	lsrs	r2, r2, #5
   db420:	e000      	b.n	db424 <gmtime_r+0x108>
   db422:	2201      	movs	r2, #1
   db424:	333b      	adds	r3, #59	; 0x3b
   db426:	441a      	add	r2, r3
   db428:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db42c:	2300      	movs	r3, #0
   db42e:	61ca      	str	r2, [r1, #28]
   db430:	614d      	str	r5, [r1, #20]
   db432:	610e      	str	r6, [r1, #16]
   db434:	60cf      	str	r7, [r1, #12]
   db436:	620b      	str	r3, [r1, #32]
   db438:	4608      	mov	r0, r1
   db43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db43c:	00015180 	.word	0x00015180
   db440:	fffdc54f 	.word	0xfffdc54f
   db444:	00023ab1 	.word	0x00023ab1
   db448:	00023ab0 	.word	0x00023ab0

000db44c <_Balloc>:
   db44c:	b570      	push	{r4, r5, r6, lr}
   db44e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   db450:	4604      	mov	r4, r0
   db452:	460e      	mov	r6, r1
   db454:	b93d      	cbnz	r5, db466 <_Balloc+0x1a>
   db456:	2010      	movs	r0, #16
   db458:	f7fc f914 	bl	d7684 <malloc>
   db45c:	6260      	str	r0, [r4, #36]	; 0x24
   db45e:	6045      	str	r5, [r0, #4]
   db460:	6085      	str	r5, [r0, #8]
   db462:	6005      	str	r5, [r0, #0]
   db464:	60c5      	str	r5, [r0, #12]
   db466:	6a65      	ldr	r5, [r4, #36]	; 0x24
   db468:	68eb      	ldr	r3, [r5, #12]
   db46a:	b143      	cbz	r3, db47e <_Balloc+0x32>
   db46c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db46e:	68db      	ldr	r3, [r3, #12]
   db470:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   db474:	b178      	cbz	r0, db496 <_Balloc+0x4a>
   db476:	6802      	ldr	r2, [r0, #0]
   db478:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   db47c:	e017      	b.n	db4ae <_Balloc+0x62>
   db47e:	2221      	movs	r2, #33	; 0x21
   db480:	2104      	movs	r1, #4
   db482:	4620      	mov	r0, r4
   db484:	f000 fbd1 	bl	dbc2a <_calloc_r>
   db488:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db48a:	60e8      	str	r0, [r5, #12]
   db48c:	68db      	ldr	r3, [r3, #12]
   db48e:	2b00      	cmp	r3, #0
   db490:	d1ec      	bne.n	db46c <_Balloc+0x20>
   db492:	2000      	movs	r0, #0
   db494:	bd70      	pop	{r4, r5, r6, pc}
   db496:	2101      	movs	r1, #1
   db498:	fa01 f506 	lsl.w	r5, r1, r6
   db49c:	1d6a      	adds	r2, r5, #5
   db49e:	0092      	lsls	r2, r2, #2
   db4a0:	4620      	mov	r0, r4
   db4a2:	f000 fbc2 	bl	dbc2a <_calloc_r>
   db4a6:	2800      	cmp	r0, #0
   db4a8:	d0f3      	beq.n	db492 <_Balloc+0x46>
   db4aa:	6046      	str	r6, [r0, #4]
   db4ac:	6085      	str	r5, [r0, #8]
   db4ae:	2300      	movs	r3, #0
   db4b0:	6103      	str	r3, [r0, #16]
   db4b2:	60c3      	str	r3, [r0, #12]
   db4b4:	bd70      	pop	{r4, r5, r6, pc}

000db4b6 <_Bfree>:
   db4b6:	b570      	push	{r4, r5, r6, lr}
   db4b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   db4ba:	4606      	mov	r6, r0
   db4bc:	460d      	mov	r5, r1
   db4be:	b93c      	cbnz	r4, db4d0 <_Bfree+0x1a>
   db4c0:	2010      	movs	r0, #16
   db4c2:	f7fc f8df 	bl	d7684 <malloc>
   db4c6:	6270      	str	r0, [r6, #36]	; 0x24
   db4c8:	6044      	str	r4, [r0, #4]
   db4ca:	6084      	str	r4, [r0, #8]
   db4cc:	6004      	str	r4, [r0, #0]
   db4ce:	60c4      	str	r4, [r0, #12]
   db4d0:	b13d      	cbz	r5, db4e2 <_Bfree+0x2c>
   db4d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   db4d4:	686a      	ldr	r2, [r5, #4]
   db4d6:	68db      	ldr	r3, [r3, #12]
   db4d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db4dc:	6029      	str	r1, [r5, #0]
   db4de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   db4e2:	bd70      	pop	{r4, r5, r6, pc}

000db4e4 <__multadd>:
   db4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db4e8:	690d      	ldr	r5, [r1, #16]
   db4ea:	461f      	mov	r7, r3
   db4ec:	4606      	mov	r6, r0
   db4ee:	460c      	mov	r4, r1
   db4f0:	f101 0e14 	add.w	lr, r1, #20
   db4f4:	2300      	movs	r3, #0
   db4f6:	f8de 0000 	ldr.w	r0, [lr]
   db4fa:	b281      	uxth	r1, r0
   db4fc:	fb02 7101 	mla	r1, r2, r1, r7
   db500:	0c0f      	lsrs	r7, r1, #16
   db502:	0c00      	lsrs	r0, r0, #16
   db504:	fb02 7000 	mla	r0, r2, r0, r7
   db508:	b289      	uxth	r1, r1
   db50a:	3301      	adds	r3, #1
   db50c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   db510:	429d      	cmp	r5, r3
   db512:	ea4f 4710 	mov.w	r7, r0, lsr #16
   db516:	f84e 1b04 	str.w	r1, [lr], #4
   db51a:	dcec      	bgt.n	db4f6 <__multadd+0x12>
   db51c:	b1d7      	cbz	r7, db554 <__multadd+0x70>
   db51e:	68a3      	ldr	r3, [r4, #8]
   db520:	429d      	cmp	r5, r3
   db522:	db12      	blt.n	db54a <__multadd+0x66>
   db524:	6861      	ldr	r1, [r4, #4]
   db526:	4630      	mov	r0, r6
   db528:	3101      	adds	r1, #1
   db52a:	f7ff ff8f 	bl	db44c <_Balloc>
   db52e:	6922      	ldr	r2, [r4, #16]
   db530:	3202      	adds	r2, #2
   db532:	f104 010c 	add.w	r1, r4, #12
   db536:	4680      	mov	r8, r0
   db538:	0092      	lsls	r2, r2, #2
   db53a:	300c      	adds	r0, #12
   db53c:	f7fe fa26 	bl	d998c <memcpy>
   db540:	4621      	mov	r1, r4
   db542:	4630      	mov	r0, r6
   db544:	f7ff ffb7 	bl	db4b6 <_Bfree>
   db548:	4644      	mov	r4, r8
   db54a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db54e:	3501      	adds	r5, #1
   db550:	615f      	str	r7, [r3, #20]
   db552:	6125      	str	r5, [r4, #16]
   db554:	4620      	mov	r0, r4
   db556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db55a <__s2b>:
   db55a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db55e:	460c      	mov	r4, r1
   db560:	4615      	mov	r5, r2
   db562:	461f      	mov	r7, r3
   db564:	2209      	movs	r2, #9
   db566:	3308      	adds	r3, #8
   db568:	4606      	mov	r6, r0
   db56a:	fb93 f3f2 	sdiv	r3, r3, r2
   db56e:	2100      	movs	r1, #0
   db570:	2201      	movs	r2, #1
   db572:	429a      	cmp	r2, r3
   db574:	da02      	bge.n	db57c <__s2b+0x22>
   db576:	0052      	lsls	r2, r2, #1
   db578:	3101      	adds	r1, #1
   db57a:	e7fa      	b.n	db572 <__s2b+0x18>
   db57c:	4630      	mov	r0, r6
   db57e:	f7ff ff65 	bl	db44c <_Balloc>
   db582:	9b08      	ldr	r3, [sp, #32]
   db584:	6143      	str	r3, [r0, #20]
   db586:	2d09      	cmp	r5, #9
   db588:	f04f 0301 	mov.w	r3, #1
   db58c:	6103      	str	r3, [r0, #16]
   db58e:	dd11      	ble.n	db5b4 <__s2b+0x5a>
   db590:	f104 0809 	add.w	r8, r4, #9
   db594:	46c1      	mov	r9, r8
   db596:	442c      	add	r4, r5
   db598:	f819 3b01 	ldrb.w	r3, [r9], #1
   db59c:	4601      	mov	r1, r0
   db59e:	3b30      	subs	r3, #48	; 0x30
   db5a0:	220a      	movs	r2, #10
   db5a2:	4630      	mov	r0, r6
   db5a4:	f7ff ff9e 	bl	db4e4 <__multadd>
   db5a8:	45a1      	cmp	r9, r4
   db5aa:	d1f5      	bne.n	db598 <__s2b+0x3e>
   db5ac:	eb08 0405 	add.w	r4, r8, r5
   db5b0:	3c08      	subs	r4, #8
   db5b2:	e001      	b.n	db5b8 <__s2b+0x5e>
   db5b4:	340a      	adds	r4, #10
   db5b6:	2509      	movs	r5, #9
   db5b8:	1b2d      	subs	r5, r5, r4
   db5ba:	1963      	adds	r3, r4, r5
   db5bc:	429f      	cmp	r7, r3
   db5be:	dd08      	ble.n	db5d2 <__s2b+0x78>
   db5c0:	f814 3b01 	ldrb.w	r3, [r4], #1
   db5c4:	4601      	mov	r1, r0
   db5c6:	3b30      	subs	r3, #48	; 0x30
   db5c8:	220a      	movs	r2, #10
   db5ca:	4630      	mov	r0, r6
   db5cc:	f7ff ff8a 	bl	db4e4 <__multadd>
   db5d0:	e7f3      	b.n	db5ba <__s2b+0x60>
   db5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db5d6 <__hi0bits>:
   db5d6:	0c03      	lsrs	r3, r0, #16
   db5d8:	041b      	lsls	r3, r3, #16
   db5da:	b913      	cbnz	r3, db5e2 <__hi0bits+0xc>
   db5dc:	0400      	lsls	r0, r0, #16
   db5de:	2310      	movs	r3, #16
   db5e0:	e000      	b.n	db5e4 <__hi0bits+0xe>
   db5e2:	2300      	movs	r3, #0
   db5e4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db5e8:	bf04      	itt	eq
   db5ea:	0200      	lsleq	r0, r0, #8
   db5ec:	3308      	addeq	r3, #8
   db5ee:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db5f2:	bf04      	itt	eq
   db5f4:	0100      	lsleq	r0, r0, #4
   db5f6:	3304      	addeq	r3, #4
   db5f8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db5fc:	bf04      	itt	eq
   db5fe:	0080      	lsleq	r0, r0, #2
   db600:	3302      	addeq	r3, #2
   db602:	2800      	cmp	r0, #0
   db604:	db03      	blt.n	db60e <__hi0bits+0x38>
   db606:	0042      	lsls	r2, r0, #1
   db608:	d503      	bpl.n	db612 <__hi0bits+0x3c>
   db60a:	1c58      	adds	r0, r3, #1
   db60c:	4770      	bx	lr
   db60e:	4618      	mov	r0, r3
   db610:	4770      	bx	lr
   db612:	2020      	movs	r0, #32
   db614:	4770      	bx	lr

000db616 <__lo0bits>:
   db616:	6803      	ldr	r3, [r0, #0]
   db618:	f013 0207 	ands.w	r2, r3, #7
   db61c:	d00b      	beq.n	db636 <__lo0bits+0x20>
   db61e:	07d9      	lsls	r1, r3, #31
   db620:	d422      	bmi.n	db668 <__lo0bits+0x52>
   db622:	079a      	lsls	r2, r3, #30
   db624:	bf4b      	itete	mi
   db626:	085b      	lsrmi	r3, r3, #1
   db628:	089b      	lsrpl	r3, r3, #2
   db62a:	6003      	strmi	r3, [r0, #0]
   db62c:	6003      	strpl	r3, [r0, #0]
   db62e:	bf4c      	ite	mi
   db630:	2001      	movmi	r0, #1
   db632:	2002      	movpl	r0, #2
   db634:	4770      	bx	lr
   db636:	b299      	uxth	r1, r3
   db638:	b909      	cbnz	r1, db63e <__lo0bits+0x28>
   db63a:	0c1b      	lsrs	r3, r3, #16
   db63c:	2210      	movs	r2, #16
   db63e:	f013 0fff 	tst.w	r3, #255	; 0xff
   db642:	bf04      	itt	eq
   db644:	0a1b      	lsreq	r3, r3, #8
   db646:	3208      	addeq	r2, #8
   db648:	0719      	lsls	r1, r3, #28
   db64a:	bf04      	itt	eq
   db64c:	091b      	lsreq	r3, r3, #4
   db64e:	3204      	addeq	r2, #4
   db650:	0799      	lsls	r1, r3, #30
   db652:	bf04      	itt	eq
   db654:	089b      	lsreq	r3, r3, #2
   db656:	3202      	addeq	r2, #2
   db658:	07d9      	lsls	r1, r3, #31
   db65a:	d402      	bmi.n	db662 <__lo0bits+0x4c>
   db65c:	085b      	lsrs	r3, r3, #1
   db65e:	d005      	beq.n	db66c <__lo0bits+0x56>
   db660:	3201      	adds	r2, #1
   db662:	6003      	str	r3, [r0, #0]
   db664:	4610      	mov	r0, r2
   db666:	4770      	bx	lr
   db668:	2000      	movs	r0, #0
   db66a:	4770      	bx	lr
   db66c:	2020      	movs	r0, #32
   db66e:	4770      	bx	lr

000db670 <__i2b>:
   db670:	b510      	push	{r4, lr}
   db672:	460c      	mov	r4, r1
   db674:	2101      	movs	r1, #1
   db676:	f7ff fee9 	bl	db44c <_Balloc>
   db67a:	2201      	movs	r2, #1
   db67c:	6144      	str	r4, [r0, #20]
   db67e:	6102      	str	r2, [r0, #16]
   db680:	bd10      	pop	{r4, pc}

000db682 <__multiply>:
   db682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db686:	4614      	mov	r4, r2
   db688:	690a      	ldr	r2, [r1, #16]
   db68a:	6923      	ldr	r3, [r4, #16]
   db68c:	429a      	cmp	r2, r3
   db68e:	bfb8      	it	lt
   db690:	460b      	movlt	r3, r1
   db692:	4688      	mov	r8, r1
   db694:	bfbc      	itt	lt
   db696:	46a0      	movlt	r8, r4
   db698:	461c      	movlt	r4, r3
   db69a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db69e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db6a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db6aa:	eb07 0609 	add.w	r6, r7, r9
   db6ae:	429e      	cmp	r6, r3
   db6b0:	bfc8      	it	gt
   db6b2:	3101      	addgt	r1, #1
   db6b4:	f7ff feca 	bl	db44c <_Balloc>
   db6b8:	f100 0514 	add.w	r5, r0, #20
   db6bc:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db6c0:	462b      	mov	r3, r5
   db6c2:	2200      	movs	r2, #0
   db6c4:	4563      	cmp	r3, ip
   db6c6:	d202      	bcs.n	db6ce <__multiply+0x4c>
   db6c8:	f843 2b04 	str.w	r2, [r3], #4
   db6cc:	e7fa      	b.n	db6c4 <__multiply+0x42>
   db6ce:	f104 0214 	add.w	r2, r4, #20
   db6d2:	f108 0114 	add.w	r1, r8, #20
   db6d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db6da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db6de:	9300      	str	r3, [sp, #0]
   db6e0:	9b00      	ldr	r3, [sp, #0]
   db6e2:	9201      	str	r2, [sp, #4]
   db6e4:	4293      	cmp	r3, r2
   db6e6:	d957      	bls.n	db798 <__multiply+0x116>
   db6e8:	f8b2 b000 	ldrh.w	fp, [r2]
   db6ec:	f1bb 0f00 	cmp.w	fp, #0
   db6f0:	d023      	beq.n	db73a <__multiply+0xb8>
   db6f2:	4689      	mov	r9, r1
   db6f4:	46ae      	mov	lr, r5
   db6f6:	f04f 0800 	mov.w	r8, #0
   db6fa:	f859 4b04 	ldr.w	r4, [r9], #4
   db6fe:	f8be a000 	ldrh.w	sl, [lr]
   db702:	b2a3      	uxth	r3, r4
   db704:	fb0b a303 	mla	r3, fp, r3, sl
   db708:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db70c:	f8de 4000 	ldr.w	r4, [lr]
   db710:	4443      	add	r3, r8
   db712:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db716:	fb0b 840a 	mla	r4, fp, sl, r8
   db71a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db71e:	46f2      	mov	sl, lr
   db720:	b29b      	uxth	r3, r3
   db722:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db726:	454f      	cmp	r7, r9
   db728:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db72c:	f84a 3b04 	str.w	r3, [sl], #4
   db730:	d901      	bls.n	db736 <__multiply+0xb4>
   db732:	46d6      	mov	lr, sl
   db734:	e7e1      	b.n	db6fa <__multiply+0x78>
   db736:	f8ce 8004 	str.w	r8, [lr, #4]
   db73a:	9b01      	ldr	r3, [sp, #4]
   db73c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db740:	3204      	adds	r2, #4
   db742:	f1ba 0f00 	cmp.w	sl, #0
   db746:	d021      	beq.n	db78c <__multiply+0x10a>
   db748:	682b      	ldr	r3, [r5, #0]
   db74a:	462c      	mov	r4, r5
   db74c:	4689      	mov	r9, r1
   db74e:	f04f 0800 	mov.w	r8, #0
   db752:	f8b9 e000 	ldrh.w	lr, [r9]
   db756:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db75a:	fb0a be0e 	mla	lr, sl, lr, fp
   db75e:	44f0      	add	r8, lr
   db760:	46a3      	mov	fp, r4
   db762:	b29b      	uxth	r3, r3
   db764:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db768:	f84b 3b04 	str.w	r3, [fp], #4
   db76c:	f859 3b04 	ldr.w	r3, [r9], #4
   db770:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db774:	0c1b      	lsrs	r3, r3, #16
   db776:	fb0a e303 	mla	r3, sl, r3, lr
   db77a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db77e:	454f      	cmp	r7, r9
   db780:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db784:	d901      	bls.n	db78a <__multiply+0x108>
   db786:	465c      	mov	r4, fp
   db788:	e7e3      	b.n	db752 <__multiply+0xd0>
   db78a:	6063      	str	r3, [r4, #4]
   db78c:	3504      	adds	r5, #4
   db78e:	e7a7      	b.n	db6e0 <__multiply+0x5e>
   db790:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db794:	b913      	cbnz	r3, db79c <__multiply+0x11a>
   db796:	3e01      	subs	r6, #1
   db798:	2e00      	cmp	r6, #0
   db79a:	dcf9      	bgt.n	db790 <__multiply+0x10e>
   db79c:	6106      	str	r6, [r0, #16]
   db79e:	b003      	add	sp, #12
   db7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db7a4 <__pow5mult>:
   db7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db7a8:	4615      	mov	r5, r2
   db7aa:	f012 0203 	ands.w	r2, r2, #3
   db7ae:	4606      	mov	r6, r0
   db7b0:	460f      	mov	r7, r1
   db7b2:	d007      	beq.n	db7c4 <__pow5mult+0x20>
   db7b4:	3a01      	subs	r2, #1
   db7b6:	4c21      	ldr	r4, [pc, #132]	; (db83c <__pow5mult+0x98>)
   db7b8:	2300      	movs	r3, #0
   db7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db7be:	f7ff fe91 	bl	db4e4 <__multadd>
   db7c2:	4607      	mov	r7, r0
   db7c4:	10ad      	asrs	r5, r5, #2
   db7c6:	d036      	beq.n	db836 <__pow5mult+0x92>
   db7c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db7ca:	b93c      	cbnz	r4, db7dc <__pow5mult+0x38>
   db7cc:	2010      	movs	r0, #16
   db7ce:	f7fb ff59 	bl	d7684 <malloc>
   db7d2:	6270      	str	r0, [r6, #36]	; 0x24
   db7d4:	6044      	str	r4, [r0, #4]
   db7d6:	6084      	str	r4, [r0, #8]
   db7d8:	6004      	str	r4, [r0, #0]
   db7da:	60c4      	str	r4, [r0, #12]
   db7dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db7e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db7e4:	b94c      	cbnz	r4, db7fa <__pow5mult+0x56>
   db7e6:	f240 2171 	movw	r1, #625	; 0x271
   db7ea:	4630      	mov	r0, r6
   db7ec:	f7ff ff40 	bl	db670 <__i2b>
   db7f0:	2300      	movs	r3, #0
   db7f2:	f8c8 0008 	str.w	r0, [r8, #8]
   db7f6:	4604      	mov	r4, r0
   db7f8:	6003      	str	r3, [r0, #0]
   db7fa:	f04f 0800 	mov.w	r8, #0
   db7fe:	07eb      	lsls	r3, r5, #31
   db800:	d50a      	bpl.n	db818 <__pow5mult+0x74>
   db802:	4639      	mov	r1, r7
   db804:	4622      	mov	r2, r4
   db806:	4630      	mov	r0, r6
   db808:	f7ff ff3b 	bl	db682 <__multiply>
   db80c:	4639      	mov	r1, r7
   db80e:	4681      	mov	r9, r0
   db810:	4630      	mov	r0, r6
   db812:	f7ff fe50 	bl	db4b6 <_Bfree>
   db816:	464f      	mov	r7, r9
   db818:	106d      	asrs	r5, r5, #1
   db81a:	d00c      	beq.n	db836 <__pow5mult+0x92>
   db81c:	6820      	ldr	r0, [r4, #0]
   db81e:	b108      	cbz	r0, db824 <__pow5mult+0x80>
   db820:	4604      	mov	r4, r0
   db822:	e7ec      	b.n	db7fe <__pow5mult+0x5a>
   db824:	4622      	mov	r2, r4
   db826:	4621      	mov	r1, r4
   db828:	4630      	mov	r0, r6
   db82a:	f7ff ff2a 	bl	db682 <__multiply>
   db82e:	6020      	str	r0, [r4, #0]
   db830:	f8c0 8000 	str.w	r8, [r0]
   db834:	e7f4      	b.n	db820 <__pow5mult+0x7c>
   db836:	4638      	mov	r0, r7
   db838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db83c:	000dc398 	.word	0x000dc398

000db840 <__lshift>:
   db840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db844:	460c      	mov	r4, r1
   db846:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db84a:	6926      	ldr	r6, [r4, #16]
   db84c:	6849      	ldr	r1, [r1, #4]
   db84e:	68a3      	ldr	r3, [r4, #8]
   db850:	4456      	add	r6, sl
   db852:	4607      	mov	r7, r0
   db854:	4691      	mov	r9, r2
   db856:	1c75      	adds	r5, r6, #1
   db858:	42ab      	cmp	r3, r5
   db85a:	da02      	bge.n	db862 <__lshift+0x22>
   db85c:	3101      	adds	r1, #1
   db85e:	005b      	lsls	r3, r3, #1
   db860:	e7fa      	b.n	db858 <__lshift+0x18>
   db862:	4638      	mov	r0, r7
   db864:	f7ff fdf2 	bl	db44c <_Balloc>
   db868:	2300      	movs	r3, #0
   db86a:	4680      	mov	r8, r0
   db86c:	f100 0114 	add.w	r1, r0, #20
   db870:	461a      	mov	r2, r3
   db872:	4553      	cmp	r3, sl
   db874:	da03      	bge.n	db87e <__lshift+0x3e>
   db876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db87a:	3301      	adds	r3, #1
   db87c:	e7f9      	b.n	db872 <__lshift+0x32>
   db87e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db882:	6920      	ldr	r0, [r4, #16]
   db884:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db888:	f019 091f 	ands.w	r9, r9, #31
   db88c:	f104 0114 	add.w	r1, r4, #20
   db890:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db894:	d014      	beq.n	db8c0 <__lshift+0x80>
   db896:	f1c9 0c20 	rsb	ip, r9, #32
   db89a:	2200      	movs	r2, #0
   db89c:	6808      	ldr	r0, [r1, #0]
   db89e:	fa00 f009 	lsl.w	r0, r0, r9
   db8a2:	4302      	orrs	r2, r0
   db8a4:	469a      	mov	sl, r3
   db8a6:	f843 2b04 	str.w	r2, [r3], #4
   db8aa:	f851 2b04 	ldr.w	r2, [r1], #4
   db8ae:	458e      	cmp	lr, r1
   db8b0:	fa22 f20c 	lsr.w	r2, r2, ip
   db8b4:	d8f2      	bhi.n	db89c <__lshift+0x5c>
   db8b6:	f8ca 2004 	str.w	r2, [sl, #4]
   db8ba:	b142      	cbz	r2, db8ce <__lshift+0x8e>
   db8bc:	1cb5      	adds	r5, r6, #2
   db8be:	e006      	b.n	db8ce <__lshift+0x8e>
   db8c0:	3b04      	subs	r3, #4
   db8c2:	f851 2b04 	ldr.w	r2, [r1], #4
   db8c6:	f843 2f04 	str.w	r2, [r3, #4]!
   db8ca:	458e      	cmp	lr, r1
   db8cc:	d8f9      	bhi.n	db8c2 <__lshift+0x82>
   db8ce:	3d01      	subs	r5, #1
   db8d0:	4638      	mov	r0, r7
   db8d2:	f8c8 5010 	str.w	r5, [r8, #16]
   db8d6:	4621      	mov	r1, r4
   db8d8:	f7ff fded 	bl	db4b6 <_Bfree>
   db8dc:	4640      	mov	r0, r8
   db8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db8e2 <__mcmp>:
   db8e2:	6903      	ldr	r3, [r0, #16]
   db8e4:	690a      	ldr	r2, [r1, #16]
   db8e6:	1a9b      	subs	r3, r3, r2
   db8e8:	b510      	push	{r4, lr}
   db8ea:	d111      	bne.n	db910 <__mcmp+0x2e>
   db8ec:	0092      	lsls	r2, r2, #2
   db8ee:	3014      	adds	r0, #20
   db8f0:	3114      	adds	r1, #20
   db8f2:	1883      	adds	r3, r0, r2
   db8f4:	440a      	add	r2, r1
   db8f6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db8fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db8fe:	428c      	cmp	r4, r1
   db900:	d002      	beq.n	db908 <__mcmp+0x26>
   db902:	d307      	bcc.n	db914 <__mcmp+0x32>
   db904:	2001      	movs	r0, #1
   db906:	bd10      	pop	{r4, pc}
   db908:	4298      	cmp	r0, r3
   db90a:	d3f4      	bcc.n	db8f6 <__mcmp+0x14>
   db90c:	2000      	movs	r0, #0
   db90e:	bd10      	pop	{r4, pc}
   db910:	4618      	mov	r0, r3
   db912:	bd10      	pop	{r4, pc}
   db914:	f04f 30ff 	mov.w	r0, #4294967295
   db918:	bd10      	pop	{r4, pc}

000db91a <__mdiff>:
   db91a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db91e:	460c      	mov	r4, r1
   db920:	4607      	mov	r7, r0
   db922:	4611      	mov	r1, r2
   db924:	4620      	mov	r0, r4
   db926:	4615      	mov	r5, r2
   db928:	f7ff ffdb 	bl	db8e2 <__mcmp>
   db92c:	1e06      	subs	r6, r0, #0
   db92e:	d108      	bne.n	db942 <__mdiff+0x28>
   db930:	4631      	mov	r1, r6
   db932:	4638      	mov	r0, r7
   db934:	f7ff fd8a 	bl	db44c <_Balloc>
   db938:	2301      	movs	r3, #1
   db93a:	6103      	str	r3, [r0, #16]
   db93c:	6146      	str	r6, [r0, #20]
   db93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db942:	bfbc      	itt	lt
   db944:	4623      	movlt	r3, r4
   db946:	462c      	movlt	r4, r5
   db948:	4638      	mov	r0, r7
   db94a:	6861      	ldr	r1, [r4, #4]
   db94c:	bfba      	itte	lt
   db94e:	461d      	movlt	r5, r3
   db950:	2601      	movlt	r6, #1
   db952:	2600      	movge	r6, #0
   db954:	f7ff fd7a 	bl	db44c <_Balloc>
   db958:	692b      	ldr	r3, [r5, #16]
   db95a:	60c6      	str	r6, [r0, #12]
   db95c:	6926      	ldr	r6, [r4, #16]
   db95e:	f105 0914 	add.w	r9, r5, #20
   db962:	3414      	adds	r4, #20
   db964:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db968:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db96c:	f100 0514 	add.w	r5, r0, #20
   db970:	f04f 0c00 	mov.w	ip, #0
   db974:	f854 3b04 	ldr.w	r3, [r4], #4
   db978:	f859 2b04 	ldr.w	r2, [r9], #4
   db97c:	fa1c f183 	uxtah	r1, ip, r3
   db980:	fa1f fe82 	uxth.w	lr, r2
   db984:	0c12      	lsrs	r2, r2, #16
   db986:	ebce 0101 	rsb	r1, lr, r1
   db98a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db98e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db992:	b289      	uxth	r1, r1
   db994:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db998:	45c8      	cmp	r8, r9
   db99a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db99e:	46a6      	mov	lr, r4
   db9a0:	f845 3b04 	str.w	r3, [r5], #4
   db9a4:	d8e6      	bhi.n	db974 <__mdiff+0x5a>
   db9a6:	45be      	cmp	lr, r7
   db9a8:	d20e      	bcs.n	db9c8 <__mdiff+0xae>
   db9aa:	f85e 1b04 	ldr.w	r1, [lr], #4
   db9ae:	fa1c f281 	uxtah	r2, ip, r1
   db9b2:	1413      	asrs	r3, r2, #16
   db9b4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db9b8:	b292      	uxth	r2, r2
   db9ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db9be:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db9c2:	f845 2b04 	str.w	r2, [r5], #4
   db9c6:	e7ee      	b.n	db9a6 <__mdiff+0x8c>
   db9c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db9cc:	b90b      	cbnz	r3, db9d2 <__mdiff+0xb8>
   db9ce:	3e01      	subs	r6, #1
   db9d0:	e7fa      	b.n	db9c8 <__mdiff+0xae>
   db9d2:	6106      	str	r6, [r0, #16]
   db9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db9d8 <__ulp>:
   db9d8:	4b12      	ldr	r3, [pc, #72]	; (dba24 <__ulp+0x4c>)
   db9da:	ee10 2a90 	vmov	r2, s1
   db9de:	401a      	ands	r2, r3
   db9e0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db9e4:	2b00      	cmp	r3, #0
   db9e6:	dd02      	ble.n	db9ee <__ulp+0x16>
   db9e8:	2000      	movs	r0, #0
   db9ea:	4619      	mov	r1, r3
   db9ec:	e017      	b.n	dba1e <__ulp+0x46>
   db9ee:	425b      	negs	r3, r3
   db9f0:	151b      	asrs	r3, r3, #20
   db9f2:	2b13      	cmp	r3, #19
   db9f4:	f04f 0000 	mov.w	r0, #0
   db9f8:	f04f 0100 	mov.w	r1, #0
   db9fc:	dc04      	bgt.n	dba08 <__ulp+0x30>
   db9fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dba02:	fa42 f103 	asr.w	r1, r2, r3
   dba06:	e00a      	b.n	dba1e <__ulp+0x46>
   dba08:	3b14      	subs	r3, #20
   dba0a:	2b1e      	cmp	r3, #30
   dba0c:	f04f 0201 	mov.w	r2, #1
   dba10:	bfda      	itte	le
   dba12:	f1c3 031f 	rsble	r3, r3, #31
   dba16:	fa02 f303 	lslle.w	r3, r2, r3
   dba1a:	4613      	movgt	r3, r2
   dba1c:	4618      	mov	r0, r3
   dba1e:	ec41 0b10 	vmov	d0, r0, r1
   dba22:	4770      	bx	lr
   dba24:	7ff00000 	.word	0x7ff00000

000dba28 <__b2d>:
   dba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dba2a:	6905      	ldr	r5, [r0, #16]
   dba2c:	f100 0614 	add.w	r6, r0, #20
   dba30:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dba34:	1f2f      	subs	r7, r5, #4
   dba36:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dba3a:	4620      	mov	r0, r4
   dba3c:	f7ff fdcb 	bl	db5d6 <__hi0bits>
   dba40:	f1c0 0320 	rsb	r3, r0, #32
   dba44:	280a      	cmp	r0, #10
   dba46:	600b      	str	r3, [r1, #0]
   dba48:	dc14      	bgt.n	dba74 <__b2d+0x4c>
   dba4a:	f1c0 0e0b 	rsb	lr, r0, #11
   dba4e:	fa24 f10e 	lsr.w	r1, r4, lr
   dba52:	42be      	cmp	r6, r7
   dba54:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dba58:	bf34      	ite	cc
   dba5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dba5e:	2100      	movcs	r1, #0
   dba60:	3015      	adds	r0, #21
   dba62:	fa04 f000 	lsl.w	r0, r4, r0
   dba66:	fa21 f10e 	lsr.w	r1, r1, lr
   dba6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dba6e:	ea40 0201 	orr.w	r2, r0, r1
   dba72:	e023      	b.n	dbabc <__b2d+0x94>
   dba74:	42be      	cmp	r6, r7
   dba76:	bf3a      	itte	cc
   dba78:	f1a5 0708 	subcc.w	r7, r5, #8
   dba7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dba80:	2100      	movcs	r1, #0
   dba82:	380b      	subs	r0, #11
   dba84:	d015      	beq.n	dbab2 <__b2d+0x8a>
   dba86:	4084      	lsls	r4, r0
   dba88:	f1c0 0520 	rsb	r5, r0, #32
   dba8c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dba90:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dba94:	42b7      	cmp	r7, r6
   dba96:	fa21 fe05 	lsr.w	lr, r1, r5
   dba9a:	ea44 030e 	orr.w	r3, r4, lr
   dba9e:	bf8c      	ite	hi
   dbaa0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dbaa4:	2400      	movls	r4, #0
   dbaa6:	fa01 f000 	lsl.w	r0, r1, r0
   dbaaa:	40ec      	lsrs	r4, r5
   dbaac:	ea40 0204 	orr.w	r2, r0, r4
   dbab0:	e004      	b.n	dbabc <__b2d+0x94>
   dbab2:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dbab6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dbaba:	460a      	mov	r2, r1
   dbabc:	ec43 2b10 	vmov	d0, r2, r3
   dbac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbac2 <__d2b>:
   dbac2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dbac6:	460e      	mov	r6, r1
   dbac8:	2101      	movs	r1, #1
   dbaca:	ec59 8b10 	vmov	r8, r9, d0
   dbace:	4615      	mov	r5, r2
   dbad0:	f7ff fcbc 	bl	db44c <_Balloc>
   dbad4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dbad8:	4607      	mov	r7, r0
   dbada:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dbade:	b10c      	cbz	r4, dbae4 <__d2b+0x22>
   dbae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbae4:	9301      	str	r3, [sp, #4]
   dbae6:	f1b8 0f00 	cmp.w	r8, #0
   dbaea:	d019      	beq.n	dbb20 <__d2b+0x5e>
   dbaec:	a802      	add	r0, sp, #8
   dbaee:	f840 8d08 	str.w	r8, [r0, #-8]!
   dbaf2:	f7ff fd90 	bl	db616 <__lo0bits>
   dbaf6:	9b00      	ldr	r3, [sp, #0]
   dbaf8:	b148      	cbz	r0, dbb0e <__d2b+0x4c>
   dbafa:	9a01      	ldr	r2, [sp, #4]
   dbafc:	f1c0 0120 	rsb	r1, r0, #32
   dbb00:	fa02 f101 	lsl.w	r1, r2, r1
   dbb04:	430b      	orrs	r3, r1
   dbb06:	40c2      	lsrs	r2, r0
   dbb08:	617b      	str	r3, [r7, #20]
   dbb0a:	9201      	str	r2, [sp, #4]
   dbb0c:	e000      	b.n	dbb10 <__d2b+0x4e>
   dbb0e:	617b      	str	r3, [r7, #20]
   dbb10:	9b01      	ldr	r3, [sp, #4]
   dbb12:	61bb      	str	r3, [r7, #24]
   dbb14:	2b00      	cmp	r3, #0
   dbb16:	bf14      	ite	ne
   dbb18:	2102      	movne	r1, #2
   dbb1a:	2101      	moveq	r1, #1
   dbb1c:	6139      	str	r1, [r7, #16]
   dbb1e:	e007      	b.n	dbb30 <__d2b+0x6e>
   dbb20:	a801      	add	r0, sp, #4
   dbb22:	f7ff fd78 	bl	db616 <__lo0bits>
   dbb26:	9b01      	ldr	r3, [sp, #4]
   dbb28:	617b      	str	r3, [r7, #20]
   dbb2a:	2101      	movs	r1, #1
   dbb2c:	6139      	str	r1, [r7, #16]
   dbb2e:	3020      	adds	r0, #32
   dbb30:	b134      	cbz	r4, dbb40 <__d2b+0x7e>
   dbb32:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dbb36:	4404      	add	r4, r0
   dbb38:	6034      	str	r4, [r6, #0]
   dbb3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dbb3e:	e009      	b.n	dbb54 <__d2b+0x92>
   dbb40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dbb44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dbb48:	6030      	str	r0, [r6, #0]
   dbb4a:	6918      	ldr	r0, [r3, #16]
   dbb4c:	f7ff fd43 	bl	db5d6 <__hi0bits>
   dbb50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dbb54:	6028      	str	r0, [r5, #0]
   dbb56:	4638      	mov	r0, r7
   dbb58:	b003      	add	sp, #12
   dbb5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dbb5e <__ratio>:
   dbb5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dbb62:	4688      	mov	r8, r1
   dbb64:	4669      	mov	r1, sp
   dbb66:	4681      	mov	r9, r0
   dbb68:	f7ff ff5e 	bl	dba28 <__b2d>
   dbb6c:	a901      	add	r1, sp, #4
   dbb6e:	4640      	mov	r0, r8
   dbb70:	ec55 4b10 	vmov	r4, r5, d0
   dbb74:	f7ff ff58 	bl	dba28 <__b2d>
   dbb78:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dbb7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dbb80:	1a9a      	subs	r2, r3, r2
   dbb82:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dbb86:	1ac9      	subs	r1, r1, r3
   dbb88:	ec57 6b10 	vmov	r6, r7, d0
   dbb8c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dbb90:	2b00      	cmp	r3, #0
   dbb92:	bfcc      	ite	gt
   dbb94:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dbb98:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dbb9c:	4632      	mov	r2, r6
   dbb9e:	463b      	mov	r3, r7
   dbba0:	4620      	mov	r0, r4
   dbba2:	4629      	mov	r1, r5
   dbba4:	f7fd fbdc 	bl	d9360 <__aeabi_ddiv>
   dbba8:	ec41 0b10 	vmov	d0, r0, r1
   dbbac:	b003      	add	sp, #12
   dbbae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dbbb2 <__copybits>:
   dbbb2:	3901      	subs	r1, #1
   dbbb4:	b510      	push	{r4, lr}
   dbbb6:	1149      	asrs	r1, r1, #5
   dbbb8:	6914      	ldr	r4, [r2, #16]
   dbbba:	3101      	adds	r1, #1
   dbbbc:	f102 0314 	add.w	r3, r2, #20
   dbbc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dbbc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dbbc8:	42a3      	cmp	r3, r4
   dbbca:	4602      	mov	r2, r0
   dbbcc:	d204      	bcs.n	dbbd8 <__copybits+0x26>
   dbbce:	f853 2b04 	ldr.w	r2, [r3], #4
   dbbd2:	f840 2b04 	str.w	r2, [r0], #4
   dbbd6:	e7f7      	b.n	dbbc8 <__copybits+0x16>
   dbbd8:	2300      	movs	r3, #0
   dbbda:	428a      	cmp	r2, r1
   dbbdc:	d202      	bcs.n	dbbe4 <__copybits+0x32>
   dbbde:	f842 3b04 	str.w	r3, [r2], #4
   dbbe2:	e7fa      	b.n	dbbda <__copybits+0x28>
   dbbe4:	bd10      	pop	{r4, pc}

000dbbe6 <__any_on>:
   dbbe6:	f100 0214 	add.w	r2, r0, #20
   dbbea:	6900      	ldr	r0, [r0, #16]
   dbbec:	114b      	asrs	r3, r1, #5
   dbbee:	4298      	cmp	r0, r3
   dbbf0:	b510      	push	{r4, lr}
   dbbf2:	db0c      	blt.n	dbc0e <__any_on+0x28>
   dbbf4:	dd0c      	ble.n	dbc10 <__any_on+0x2a>
   dbbf6:	f011 011f 	ands.w	r1, r1, #31
   dbbfa:	d009      	beq.n	dbc10 <__any_on+0x2a>
   dbbfc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dbc00:	fa24 f001 	lsr.w	r0, r4, r1
   dbc04:	fa00 f101 	lsl.w	r1, r0, r1
   dbc08:	428c      	cmp	r4, r1
   dbc0a:	d10c      	bne.n	dbc26 <__any_on+0x40>
   dbc0c:	e000      	b.n	dbc10 <__any_on+0x2a>
   dbc0e:	4603      	mov	r3, r0
   dbc10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbc14:	4293      	cmp	r3, r2
   dbc16:	d904      	bls.n	dbc22 <__any_on+0x3c>
   dbc18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dbc1c:	2900      	cmp	r1, #0
   dbc1e:	d0f9      	beq.n	dbc14 <__any_on+0x2e>
   dbc20:	e001      	b.n	dbc26 <__any_on+0x40>
   dbc22:	2000      	movs	r0, #0
   dbc24:	bd10      	pop	{r4, pc}
   dbc26:	2001      	movs	r0, #1
   dbc28:	bd10      	pop	{r4, pc}

000dbc2a <_calloc_r>:
   dbc2a:	b538      	push	{r3, r4, r5, lr}
   dbc2c:	fb02 f401 	mul.w	r4, r2, r1
   dbc30:	4621      	mov	r1, r4
   dbc32:	f7fb fd47 	bl	d76c4 <_malloc_r>
   dbc36:	4605      	mov	r5, r0
   dbc38:	b118      	cbz	r0, dbc42 <_calloc_r+0x18>
   dbc3a:	4622      	mov	r2, r4
   dbc3c:	2100      	movs	r1, #0
   dbc3e:	f7fd feb0 	bl	d99a2 <memset>
   dbc42:	4628      	mov	r0, r5
   dbc44:	bd38      	pop	{r3, r4, r5, pc}

000dbc46 <__env_lock>:
   dbc46:	4770      	bx	lr

000dbc48 <__env_unlock>:
   dbc48:	4770      	bx	lr

000dbc4a <link_code_end>:
	...

000dbc4c <dynalib_user>:
   dbc4c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dbc5c:	0000 0000 111f 001f 0000 001f 151d 0017     ................
   dbc6c:	1515 001f 0407 001f 1517 001d 151f 001d     ................
   dbc7c:	0101 001f 151f 001f 1517 001f 417f 7f41     .............AA.
   dbc8c:	0000 7f00 4979 4f49 4949 7f49 080f 7f08     ....yIIOIII.....
   dbc9c:	494f 7949 497f 7949 0101 7f01 497f 7f49     OIIy.IIy.....II.
   dbcac:	494f 7f49 6548 6c6c 006f 6850 746f 006f     OII.Hello.Photo.
   dbcbc:	6f68 6b6f 722d 7365 6f70 736e 2f65 6557     hook-response/We
   dbccc:	7461 6568 0072 7553 006e 6f4d 006e 7554     ather.Sun.Mon.Tu
   dbcdc:	0065 6557 0064 6854 0075 7246 0069 6153     e.Wed.Thu.Fri.Sa
   dbcec:	0074 6553 7474 6e69 7367 5700 4669 0069     t.Settings.WiFi.
   dbcfc:	6944 7073 616c 0079 6144 6b72 6d20 0064     Display.Dark md.
   dbd0c:	6241 756f 0074 7845 7469 7300 6769 7320     About.Exit.sig s
   dbd1c:	7274 4900 0050 654e 2074 616e 656d 5400     tr.IP.Net name.T
   dbd2c:	7572 742d 6e6f 0065 6547 2074 7477 7268     ru-tone.Get wthr
   dbd3c:	4700 7465 7420 6d65 0070 694d 696e 6320     .Get temp.Mini c
   dbd4c:	6b6c 4400 7261 206b 6c63 0072 6944 7073     lk.Dark clr.Disp
   dbd5c:	7420 6d65 0070 7953 2d73 7376 006e 6946      temp.Sys-vsn.Fi
   dbd6c:	6d72 762d 6e73 5200 7365 7465 6d00 646f     rm-vsn.Reset.mod
   dbd7c:	3065 6d00 646f 3165 0000 0000 c000 4001     e0.mode1.......@
   dbd8c:	1000 4002 2000 4002                         ...@. .@

000dbd94 <CSWTCH.65>:
   dbd94:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   dbda4:	0050 0000                                   P...

000dbda8 <_ZTVN5spark13EthernetClassE>:
	...
   dbdb0:	7733 000d 7729 000d 771f 000d 7715 000d     3w..)w...w...w..
   dbdc0:	7709 000d 76fd 000d 76f1 000d 76e9 000d     .w...v...v...v..
   dbdd0:	76df 000d 76d5 000d 8779 000d 6162 6475     .v...v..y...baud
   dbde0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dbdf0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   dbe00:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   dbe10:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   dbe20:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   dbe30:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   dbe40:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   dbe50:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   dbe60:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   dbe70:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   dbe80:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   dbe90:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   dbea0:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   dbeb0:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
   dbec0:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   dbed0:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   dbee0:	0065 0000                                   e...

000dbee4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbeec:	7bd9 000d 7bdf 000d 7c23 000d 7bed 000d     .{...{..#|...{..
   dbefc:	7bdb 000d                                   .{..

000dbf00 <_ZTV9IPAddress>:
	...
   dbf08:	8171 000d 8161 000d 8163 000d               q...a...c...

000dbf14 <_ZTV9USBSerial>:
	...
   dbf1c:	8249 000d 8299 000d 82a7 000d 7821 000d     I...........!x..
   dbf2c:	8285 000d 824b 000d 8261 000d 8293 000d     ....K...a.......
   dbf3c:	8277 000d 8245 000d                         w...E...

000dbf44 <_ZTVN5spark13CellularClassE>:
	...
   dbf4c:	83ab 000d 83a1 000d 8397 000d 834d 000d     ............M...
   dbf5c:	838b 000d 837f 000d 8373 000d 836b 000d     ........s...k...
   dbf6c:	8361 000d 8357 000d 8779 000d               a...W...y...

000dbf78 <_ZTV11USARTSerial>:
	...
   dbf80:	83e5 000d 8435 000d 8443 000d 7821 000d     ....5...C...!x..
   dbf90:	83f9 000d 841b 000d 8407 000d 842f 000d     ............/...
   dbfa0:	83e7 000d 83eb 000d                         ........

000dbfa8 <_ZTV7TwoWire>:
	...
   dbfb0:	8511 000d 855b 000d 8533 000d 8513 000d     ....[...3.......
   dbfc0:	853b 000d 8543 000d 854b 000d 8553 000d     ;...C...K...S...

000dbfd0 <_ZTVN5spark9MeshClassE>:
	...
   dbfd8:	85f3 000d 85e9 000d 85df 000d 85d5 000d     ................
   dbfe8:	85c9 000d 85bd 000d 85b1 000d 85a9 000d     ................
   dbff8:	859f 000d 8595 000d 8779 000d               ........y...

000dc004 <_ZTVN5spark12NetworkClassE>:
	...
   dc00c:	8711 000d 871b 000d 8725 000d 872f 000d     ........%.../...
   dc01c:	8739 000d 8745 000d 8751 000d 875d 000d     9...E...Q...]...
   dc02c:	8765 000d 876f 000d 8779 000d               e...o...y...

000dc038 <_ZSt7nothrow>:
	...

000dc039 <_ctype_>:
   dc039:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc049:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc059:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc069:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc079:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc089:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc099:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc0a9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc0b9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc13c <__sf_fake_stdin>:
	...

000dc15c <__sf_fake_stdout>:
	...

000dc17c <__sf_fake_stderr>:
	...
   dc19c:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000dc1a8 <__month_lengths>:
   dc1a8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc1b8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc1c8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc1d8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc1e8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc1f8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dc208 <fpi.5344>:
   dc208:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc218:	0000 0000                                   ....

000dc21c <fpinan.5380>:
   dc21c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc22c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dc23c:	0000 0000                                   ....

000dc240 <tinytens>:
   dc240:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc250:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc260:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dc270:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dc280:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dc290:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dc2a0:	2575 006e 0000 0000                         u%n.....

000dc2a8 <__mprec_tens>:
   dc2a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc2b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc2c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc2d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc2e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc2f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc308:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc318:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc328:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc338:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc348:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc358:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc368:	9db4 79d9 7843 44ea                         ...yCx.D

000dc370 <__mprec_bigtens>:
   dc370:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc380:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc390:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc398 <p05.5387>:
   dc398:	0005 0000 0019 0000 007d 0000               ........}...

000dc3a4 <link_const_variable_data_end>:
   dc3a4:	000d6c99 	.word	0x000d6c99
   dc3a8:	000d7179 	.word	0x000d7179
   dc3ac:	000d773d 	.word	0x000d773d
   dc3b0:	000d776d 	.word	0x000d776d
   dc3b4:	000d77f9 	.word	0x000d77f9
   dc3b8:	000d78b5 	.word	0x000d78b5
   dc3bc:	000d7a0d 	.word	0x000d7a0d
   dc3c0:	000d7aad 	.word	0x000d7aad
   dc3c4:	000d83b5 	.word	0x000d83b5
   dc3c8:	000d86c1 	.word	0x000d86c1
   dc3cc:	000d8845 	.word	0x000d8845
   dc3d0:	000d8a5d 	.word	0x000d8a5d
   dc3d4:	000d8ae1 	.word	0x000d8ae1
   dc3d8:	000d8ba5 	.word	0x000d8ba5
   dc3dc:	000d8c69 	.word	0x000d8c69
