
/Users/matthewpanizza/Library/CloudStorage/OneDrive-Personal/Particle/NeoPixelClock512/target/3.1.0/photon/NeoPixelClock512.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000096c0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a96e0  080a96e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a96e8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000023c  20000000  080a96ec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000dc4  20000240  20000240  00040240  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a9928  080a9928  00039928  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a9950  080a9950  00039950  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000c3f4f  00000000  00000000  00039954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000106b2  00000000  00000000  000fd8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0001b622  00000000  00000000  0010df55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002018  00000000  00000000  00129577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005308  00000000  00000000  0012b58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002704d  00000000  00000000  00130897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e1c4  00000000  00000000  001578e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b5975  00000000  00000000  00185aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005ee8  00000000  00000000  0023b420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fcc1 	bl	80a69b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fcc9 	bl	80a69d4 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a96ec 	.word	0x080a96ec
 80a0050:	2000023c 	.word	0x2000023c
 80a0054:	20000240 	.word	0x20000240
 80a0058:	20001004 	.word	0x20001004
 80a005c:	20001004 	.word	0x20001004

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f005 f867 	bl	80a5134 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a96bc 	.word	0x080a96bc
 80a0084:	080a96e0 	.word	0x080a96e0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 b960 	b.w	80a134c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f002 fc39 	bl	80a2904 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f005 b805 	b.w	80a50a4 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f004 b88d 	b.w	80a41b8 <malloc>

080a009e <_Znaj>:
 80a009e:	f004 b88b 	b.w	80a41b8 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f004 b891 	b.w	80a41c8 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z14weatherHandlerPKcS0_>:
    }
    if(apply){
        printScreen(screenArray,start,end);
    }
}
void weatherHandler(const char *event, const char *data) {
 80a00b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a00ba:	460d      	mov	r5, r1
 80a00bc:	460c      	mov	r4, r1
            {
                humdata[2] = data[j+12];
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
            cltr[0] = data[j+9];
 80a00be:	4e58      	ldr	r6, [pc, #352]	; (80a0220 <_Z14weatherHandlerPKcS0_+0x168>)
    for(j=0; j<strlen(data); j++)
 80a00c0:	4628      	mov	r0, r5
 80a00c2:	f006 fcea 	bl	80a6a9a <strlen>
 80a00c6:	1b63      	subs	r3, r4, r5
 80a00c8:	4298      	cmp	r0, r3
 80a00ca:	d960      	bls.n	80a018e <_Z14weatherHandlerPKcS0_+0xd6>
        if(data[j] == 't' && data[j+1] == 'e' && data[j+2] == 'm' && data[j+3] == 'p' && data[j+4] == '"'){
 80a00cc:	7823      	ldrb	r3, [r4, #0]
 80a00ce:	2b74      	cmp	r3, #116	; 0x74
 80a00d0:	d138      	bne.n	80a0144 <_Z14weatherHandlerPKcS0_+0x8c>
 80a00d2:	7863      	ldrb	r3, [r4, #1]
 80a00d4:	2b65      	cmp	r3, #101	; 0x65
 80a00d6:	d11a      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a00d8:	78a3      	ldrb	r3, [r4, #2]
 80a00da:	2b6d      	cmp	r3, #109	; 0x6d
 80a00dc:	d117      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a00de:	78e3      	ldrb	r3, [r4, #3]
 80a00e0:	2b70      	cmp	r3, #112	; 0x70
 80a00e2:	d114      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a00e4:	7923      	ldrb	r3, [r4, #4]
 80a00e6:	2b22      	cmp	r3, #34	; 0x22
 80a00e8:	d111      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
            tempdata[0] = data[j+6];
 80a00ea:	79a3      	ldrb	r3, [r4, #6]
 80a00ec:	f88d 3008 	strb.w	r3, [sp, #8]
            tempdata[1] = data[j+7];
 80a00f0:	79e3      	ldrb	r3, [r4, #7]
 80a00f2:	f88d 3009 	strb.w	r3, [sp, #9]
            tempdata[2] = data[j+8];
 80a00f6:	7a23      	ldrb	r3, [r4, #8]
 80a00f8:	f88d 300a 	strb.w	r3, [sp, #10]
            tempdata[3] = data[j+9];
 80a00fc:	7a63      	ldrb	r3, [r4, #9]
 80a00fe:	f88d 300b 	strb.w	r3, [sp, #11]
            tempdata[4] = data[j+10];
 80a0102:	7aa3      	ldrb	r3, [r4, #10]
 80a0104:	f88d 300c 	strb.w	r3, [sp, #12]
            tempdata[5] = data[j+11];
 80a0108:	7ae3      	ldrb	r3, [r4, #11]
 80a010a:	f88d 300d 	strb.w	r3, [sp, #13]
        }
        if(data[j-1] == '[' && data[j] == '{' && data[j+1] == '"' && data[j+2] == 'i' && data[j+3] == 'd'){
 80a010e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80a0112:	2b5b      	cmp	r3, #91	; 0x5b
 80a0114:	d114      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a0116:	7823      	ldrb	r3, [r4, #0]
 80a0118:	2b7b      	cmp	r3, #123	; 0x7b
 80a011a:	d111      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a011c:	7863      	ldrb	r3, [r4, #1]
 80a011e:	2b22      	cmp	r3, #34	; 0x22
 80a0120:	d10e      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a0122:	78a3      	ldrb	r3, [r4, #2]
 80a0124:	2b69      	cmp	r3, #105	; 0x69
 80a0126:	d10b      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a0128:	78e3      	ldrb	r3, [r4, #3]
 80a012a:	2b64      	cmp	r3, #100	; 0x64
 80a012c:	d108      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
            cdata[0] = data[j+6];
 80a012e:	79a3      	ldrb	r3, [r4, #6]
 80a0130:	f88d 3004 	strb.w	r3, [sp, #4]
            cdata[1] = data[j+7];
 80a0134:	79e3      	ldrb	r3, [r4, #7]
 80a0136:	f88d 3005 	strb.w	r3, [sp, #5]
            cdata[2] = data[j+8];
 80a013a:	7a23      	ldrb	r3, [r4, #8]
 80a013c:	f88d 3006 	strb.w	r3, [sp, #6]
    for(j=0; j<strlen(data); j++)
 80a0140:	3401      	adds	r4, #1
 80a0142:	e7bd      	b.n	80a00c0 <_Z14weatherHandlerPKcS0_+0x8>
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
 80a0144:	2b68      	cmp	r3, #104	; 0x68
 80a0146:	d00d      	beq.n	80a0164 <_Z14weatherHandlerPKcS0_+0xac>
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
 80a0148:	2b69      	cmp	r3, #105	; 0x69
 80a014a:	d1e0      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a014c:	7863      	ldrb	r3, [r4, #1]
 80a014e:	2b63      	cmp	r3, #99	; 0x63
 80a0150:	d1dd      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a0152:	78a3      	ldrb	r3, [r4, #2]
 80a0154:	2b6f      	cmp	r3, #111	; 0x6f
 80a0156:	d1da      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a0158:	78e3      	ldrb	r3, [r4, #3]
 80a015a:	2b6e      	cmp	r3, #110	; 0x6e
            cltr[0] = data[j+9];
 80a015c:	bf04      	itt	eq
 80a015e:	7a63      	ldrbeq	r3, [r4, #9]
 80a0160:	7033      	strbeq	r3, [r6, #0]
 80a0162:	e7d4      	b.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
 80a0164:	7863      	ldrb	r3, [r4, #1]
 80a0166:	2b75      	cmp	r3, #117	; 0x75
 80a0168:	d1d1      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a016a:	78a3      	ldrb	r3, [r4, #2]
 80a016c:	2b6d      	cmp	r3, #109	; 0x6d
 80a016e:	d1ce      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a0170:	78e3      	ldrb	r3, [r4, #3]
 80a0172:	2b69      	cmp	r3, #105	; 0x69
 80a0174:	d1cb      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
            humdata[0] = data[j+10];
 80a0176:	7aa3      	ldrb	r3, [r4, #10]
 80a0178:	f88d 3000 	strb.w	r3, [sp]
            humdata[1] = data[j+11];
 80a017c:	7ae3      	ldrb	r3, [r4, #11]
 80a017e:	f88d 3001 	strb.w	r3, [sp, #1]
            if(data[j+12] == '0')
 80a0182:	7b23      	ldrb	r3, [r4, #12]
 80a0184:	2b30      	cmp	r3, #48	; 0x30
 80a0186:	d1c2      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
                humdata[2] = data[j+12];
 80a0188:	f88d 3002 	strb.w	r3, [sp, #2]
 80a018c:	e7bf      	b.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
        }
    }
    if(humdata[0] >= '0' && humdata[0] <= '9'){
 80a018e:	f89d 3000 	ldrb.w	r3, [sp]
 80a0192:	3b30      	subs	r3, #48	; 0x30
 80a0194:	2b09      	cmp	r3, #9
 80a0196:	d806      	bhi.n	80a01a6 <_Z14weatherHandlerPKcS0_+0xee>
        humidity = atof(humdata);
 80a0198:	4668      	mov	r0, sp
 80a019a:	f006 fb09 	bl	80a67b0 <atof>
 80a019e:	f005 fdb7 	bl	80a5d10 <__aeabi_d2iz>
 80a01a2:	4b20      	ldr	r3, [pc, #128]	; (80a0224 <_Z14weatherHandlerPKcS0_+0x16c>)
 80a01a4:	6018      	str	r0, [r3, #0]
    }
    if(cdata[0] >= '0' && cdata[0] <= '9'){
 80a01a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a01aa:	3b30      	subs	r3, #48	; 0x30
 80a01ac:	2b09      	cmp	r3, #9
 80a01ae:	d806      	bhi.n	80a01be <_Z14weatherHandlerPKcS0_+0x106>
        cid = atof(cdata);
 80a01b0:	a801      	add	r0, sp, #4
 80a01b2:	f006 fafd 	bl	80a67b0 <atof>
 80a01b6:	f005 fdab 	bl	80a5d10 <__aeabi_d2iz>
 80a01ba:	4b1b      	ldr	r3, [pc, #108]	; (80a0228 <_Z14weatherHandlerPKcS0_+0x170>)
 80a01bc:	6018      	str	r0, [r3, #0]
    }
    if(tempdata[0] >= '0' && tempdata[0] <= '9'){
 80a01be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a01c2:	3b30      	subs	r3, #48	; 0x30
 80a01c4:	2b09      	cmp	r3, #9
 80a01c6:	d81e      	bhi.n	80a0206 <_Z14weatherHandlerPKcS0_+0x14e>
        tempK = atof(tempdata);
 80a01c8:	a802      	add	r0, sp, #8
 80a01ca:	f006 faf1 	bl	80a67b0 <atof>
 80a01ce:	f005 fde7 	bl	80a5da0 <__aeabi_d2f>
        tempC = tempK-273.15;
 80a01d2:	f005 faab 	bl	80a572c <__aeabi_f2d>
 80a01d6:	a30e      	add	r3, pc, #56	; (adr r3, 80a0210 <_Z14weatherHandlerPKcS0_+0x158>)
 80a01d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01dc:	f005 f946 	bl	80a546c <__aeabi_dsub>
 80a01e0:	f005 fdde 	bl	80a5da0 <__aeabi_d2f>
        tempF = (tempC*1.8)+32;
 80a01e4:	f005 faa2 	bl	80a572c <__aeabi_f2d>
 80a01e8:	a30b      	add	r3, pc, #44	; (adr r3, 80a0218 <_Z14weatherHandlerPKcS0_+0x160>)
 80a01ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01ee:	f005 faf5 	bl	80a57dc <__aeabi_dmul>
 80a01f2:	4b0e      	ldr	r3, [pc, #56]	; (80a022c <_Z14weatherHandlerPKcS0_+0x174>)
 80a01f4:	2200      	movs	r2, #0
 80a01f6:	f005 f93b 	bl	80a5470 <__adddf3>
 80a01fa:	f005 fdd1 	bl	80a5da0 <__aeabi_d2f>
        TFahr = (int)tempF;
 80a01fe:	f006 f8f3 	bl	80a63e8 <__aeabi_f2iz>
 80a0202:	4b0b      	ldr	r3, [pc, #44]	; (80a0230 <_Z14weatherHandlerPKcS0_+0x178>)
 80a0204:	6018      	str	r0, [r3, #0]
    }
}
 80a0206:	b004      	add	sp, #16
 80a0208:	bd70      	pop	{r4, r5, r6, pc}
 80a020a:	bf00      	nop
 80a020c:	f3af 8000 	nop.w
 80a0210:	66666666 	.word	0x66666666
 80a0214:	40711266 	.word	0x40711266
 80a0218:	cccccccd 	.word	0xcccccccd
 80a021c:	3ffccccc 	.word	0x3ffccccc
 80a0220:	20000264 	.word	0x20000264
 80a0224:	20000278 	.word	0x20000278
 80a0228:	20000260 	.word	0x20000260
 80a022c:	40400000 	.word	0x40400000
 80a0230:	20000250 	.word	0x20000250

080a0234 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0234:	b510      	push	{r4, lr}
 80a0236:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0238:	6800      	ldr	r0, [r0, #0]
 80a023a:	b108      	cbz	r0, 80a0240 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a023c:	f003 ffc4 	bl	80a41c8 <free>
class SystemClass {
 80a0240:	4620      	mov	r0, r4
 80a0242:	bd10      	pop	{r4, pc}
 80a0244:	0000      	movs	r0, r0
	...

080a0248 <_Z11printScreenPiii>:
void printScreen(int inputArray[], int start, int end){
 80a0248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a024c:	4605      	mov	r5, r0
 80a024e:	b089      	sub	sp, #36	; 0x24
    return ((colorCode/1000000)%1000);
 80a0250:	4f7d      	ldr	r7, [pc, #500]	; (80a0448 <_Z11printScreenPiii+0x200>)
void printScreen(int inputArray[], int start, int end){
 80a0252:	9205      	str	r2, [sp, #20]
    for(count = start; count <= end; count++){
 80a0254:	b28c      	uxth	r4, r1
 80a0256:	9b05      	ldr	r3, [sp, #20]
 80a0258:	429c      	cmp	r4, r3
 80a025a:	f300 80e4 	bgt.w	80a0426 <_Z11printScreenPiii+0x1de>
        if(!(count>>8)){
 80a025e:	0a23      	lsrs	r3, r4, #8
 80a0260:	d126      	bne.n	80a02b0 <_Z11printScreenPiii+0x68>
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a0262:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
    return ((colorCode/1000000)%1000);
 80a0266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a026a:	fb91 f2f7 	sdiv	r2, r1, r7
    return ((colorCode/1000)%1000);
 80a026e:	fb91 f6f0 	sdiv	r6, r1, r0
    return ((colorCode/1000000)%1000);
 80a0272:	fb92 f3f0 	sdiv	r3, r2, r0
 80a0276:	fb00 2213 	mls	r2, r0, r3, r2
    return ((colorCode/1000)%1000);
 80a027a:	fb96 f3f0 	sdiv	r3, r6, r0
    return (colorCode%1000);
 80a027e:	fb00 1116 	mls	r1, r0, r6, r1
    return ((colorCode/1000)%1000);
 80a0282:	fb00 6313 	mls	r3, r0, r3, r6
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a0286:	b2c8      	uxtb	r0, r1
            if(((count/8)%2) == 0){                                                                                        //Prints standard row
 80a0288:	0721      	lsls	r1, r4, #28
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a028a:	bf51      	iteee	pl
 80a028c:	4621      	movpl	r1, r4
                    strip.setPixelColor(count+7-((count%8)*2),getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));     //If on the right half of line, add to mirror to other side
 80a028e:	1de1      	addmi	r1, r4, #7
 80a0290:	f004 0607 	andmi.w	r6, r4, #7
 80a0294:	eba1 0146 	submi.w	r1, r1, r6, lsl #1
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a0298:	b2d2      	uxtb	r2, r2
 80a029a:	b2db      	uxtb	r3, r3
 80a029c:	bf52      	itee	pl
 80a029e:	9000      	strpl	r0, [sp, #0]
                    strip.setPixelColor(count+7-(2*(count%8)),getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));     //If on the left half of line, subtract to mirror to other side
 80a02a0:	9000      	strmi	r0, [sp, #0]
 80a02a2:	b289      	uxthmi	r1, r1
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a02a4:	4869      	ldr	r0, [pc, #420]	; (80a044c <_Z11printScreenPiii+0x204>)
 80a02a6:	f003 fcf7 	bl	80a3c98 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for(count = start; count <= end; count++){
 80a02aa:	3401      	adds	r4, #1
 80a02ac:	b2a4      	uxth	r4, r4
 80a02ae:	e7d2      	b.n	80a0256 <_Z11printScreenPiii+0xe>
        else if ((count>>8) && count < 383){       // Red - 0.65, Green - 0.8, Blue - 0.65
 80a02b0:	f5b4 7fbf 	cmp.w	r4, #382	; 0x17e
 80a02b4:	d87c      	bhi.n	80a03b0 <_Z11printScreenPiii+0x168>
            int k = count-256;
 80a02b6:	f5a4 7880 	sub.w	r8, r4, #256	; 0x100
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a02ba:	f1d8 0300 	rsbs	r3, r8, #0
 80a02be:	f003 0307 	and.w	r3, r3, #7
 80a02c2:	f008 0907 	and.w	r9, r8, #7
 80a02c6:	bf58      	it	pl
 80a02c8:	f1c3 0900 	rsbpl	r9, r3, #0
    return ((colorCode/1000000)%1000);
 80a02cc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80a02d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a02d4:	fb93 f3f7 	sdiv	r3, r3, r7
 80a02d8:	fb93 f0f2 	sdiv	r0, r3, r2
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a02dc:	fb02 3010 	mls	r0, r2, r0, r3
 80a02e0:	f005 fa12 	bl	80a5708 <__aeabi_i2d>
 80a02e4:	a354      	add	r3, pc, #336	; (adr r3, 80a0438 <_Z11printScreenPiii+0x1f0>)
 80a02e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02ea:	f1c9 0917 	rsb	r9, r9, #23
 80a02ee:	f005 fa75 	bl	80a57dc <__aeabi_dmul>
 80a02f2:	ea4f 1909 	mov.w	r9, r9, lsl #4
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
 80a02f6:	07e2      	lsls	r2, r4, #31
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a02f8:	fa1f f989 	uxth.w	r9, r9
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a02fc:	ea4f 0684 	mov.w	r6, r4, lsl #2
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
 80a0300:	d44c      	bmi.n	80a039c <_Z11printScreenPiii+0x154>
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0302:	f1b8 0f00 	cmp.w	r8, #0
 80a0306:	da01      	bge.n	80a030c <_Z11printScreenPiii+0xc4>
 80a0308:	f1a4 08f9 	sub.w	r8, r4, #249	; 0xf9
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a030c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80a0310:	f1ca 0a0f 	rsb	sl, sl, #15
 80a0314:	44ca      	add	sl, r9
 80a0316:	fa1f fa8a 	uxth.w	sl, sl
    return ((colorCode/1000)%1000);
 80a031a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a031e:	f005 f855 	bl	80a53cc <round>
    return ((colorCode/1000)%1000);
 80a0322:	59ab      	ldr	r3, [r5, r6]
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0324:	e9cd 0102 	strd	r0, r1, [sp, #8]
    return ((colorCode/1000)%1000);
 80a0328:	fb93 f3fb 	sdiv	r3, r3, fp
 80a032c:	fb93 f0fb 	sdiv	r0, r3, fp
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0330:	fb0b 3010 	mls	r0, fp, r0, r3
 80a0334:	f005 f9e8 	bl	80a5708 <__aeabi_i2d>
 80a0338:	a341      	add	r3, pc, #260	; (adr r3, 80a0440 <_Z11printScreenPiii+0x1f8>)
 80a033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a033e:	f005 fa4d 	bl	80a57dc <__aeabi_dmul>
 80a0342:	f005 f843 	bl	80a53cc <round>
    return (colorCode%1000);
 80a0346:	59ab      	ldr	r3, [r5, r6]
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0348:	4680      	mov	r8, r0
    return (colorCode%1000);
 80a034a:	fb93 f0fb 	sdiv	r0, r3, fp
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a034e:	fb0b 3010 	mls	r0, fp, r0, r3
 80a0352:	4689      	mov	r9, r1
 80a0354:	f005 f9d8 	bl	80a5708 <__aeabi_i2d>
 80a0358:	a337      	add	r3, pc, #220	; (adr r3, 80a0438 <_Z11printScreenPiii+0x1f0>)
 80a035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a035e:	f005 fa3d 	bl	80a57dc <__aeabi_dmul>
 80a0362:	f005 f833 	bl	80a53cc <round>
 80a0366:	4602      	mov	r2, r0
 80a0368:	460b      	mov	r3, r1
 80a036a:	4640      	mov	r0, r8
 80a036c:	4649      	mov	r1, r9
 80a036e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a0372:	f005 fcf5 	bl	80a5d60 <__aeabi_d2uiz>
 80a0376:	fa5f f880 	uxtb.w	r8, r0
 80a037a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a037e:	f005 fcef 	bl	80a5d60 <__aeabi_d2uiz>
 80a0382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a0386:	b2c6      	uxtb	r6, r0
 80a0388:	4619      	mov	r1, r3
 80a038a:	4610      	mov	r0, r2
 80a038c:	f005 fce8 	bl	80a5d60 <__aeabi_d2uiz>
 80a0390:	b2c0      	uxtb	r0, r0
 80a0392:	4643      	mov	r3, r8
 80a0394:	4632      	mov	r2, r6
 80a0396:	4651      	mov	r1, sl
 80a0398:	9000      	str	r0, [sp, #0]
 80a039a:	e783      	b.n	80a02a4 <_Z11printScreenPiii+0x5c>
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a039c:	f1b8 0f00 	cmp.w	r8, #0
 80a03a0:	da01      	bge.n	80a03a6 <_Z11printScreenPiii+0x15e>
 80a03a2:	f1a4 08f9 	sub.w	r8, r4, #249	; 0xf9
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03a6:	eb09 08e8 	add.w	r8, r9, r8, asr #3
 80a03aa:	fa1f fa88 	uxth.w	sl, r8
 80a03ae:	e7b4      	b.n	80a031a <_Z11printScreenPiii+0xd2>
        else if (count > 383 && count < 512){
 80a03b0:	f5a4 78c0 	sub.w	r8, r4, #384	; 0x180
 80a03b4:	fa1f f388 	uxth.w	r3, r8
 80a03b8:	2b7f      	cmp	r3, #127	; 0x7f
 80a03ba:	f63f af76 	bhi.w	80a02aa <_Z11printScreenPiii+0x62>
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03be:	f1d8 0300 	rsbs	r3, r8, #0
 80a03c2:	f003 0307 	and.w	r3, r3, #7
 80a03c6:	f008 0907 	and.w	r9, r8, #7
 80a03ca:	bf58      	it	pl
 80a03cc:	f1c3 0900 	rsbpl	r9, r3, #0
    return ((colorCode/1000000)%1000);
 80a03d0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80a03d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a03d8:	fb93 f3f7 	sdiv	r3, r3, r7
 80a03dc:	fb93 f0f2 	sdiv	r0, r3, r2
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03e0:	fb02 3010 	mls	r0, r2, r0, r3
 80a03e4:	f005 f990 	bl	80a5708 <__aeabi_i2d>
 80a03e8:	a313      	add	r3, pc, #76	; (adr r3, 80a0438 <_Z11printScreenPiii+0x1f0>)
 80a03ea:	e9d3 2300 	ldrd	r2, r3, [r3]
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03ee:	f1c9 091f 	rsb	r9, r9, #31
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03f2:	f005 f9f3 	bl	80a57dc <__aeabi_dmul>
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03f6:	ea4f 1909 	mov.w	r9, r9, lsl #4
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
 80a03fa:	07e3      	lsls	r3, r4, #31
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03fc:	fa1f f989 	uxth.w	r9, r9
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a0400:	ea4f 0684 	mov.w	r6, r4, lsl #2
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
 80a0404:	d407      	bmi.n	80a0416 <_Z11printScreenPiii+0x1ce>
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0406:	f1b8 0f00 	cmp.w	r8, #0
 80a040a:	bfbc      	itt	lt
 80a040c:	f46f 72bc 	mvnlt.w	r2, #376	; 0x178
 80a0410:	eb04 0802 	addlt.w	r8, r4, r2
 80a0414:	e77a      	b.n	80a030c <_Z11printScreenPiii+0xc4>
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0416:	f1b8 0f00 	cmp.w	r8, #0
 80a041a:	bfbc      	itt	lt
 80a041c:	f46f 73bc 	mvnlt.w	r3, #376	; 0x178
 80a0420:	eb04 0803 	addlt.w	r8, r4, r3
 80a0424:	e7bf      	b.n	80a03a6 <_Z11printScreenPiii+0x15e>
    strip.show();
 80a0426:	4809      	ldr	r0, [pc, #36]	; (80a044c <_Z11printScreenPiii+0x204>)
}
 80a0428:	b009      	add	sp, #36	; 0x24
 80a042a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    strip.show();
 80a042e:	f002 bb87 	b.w	80a2b40 <_ZN17Adafruit_NeoPixel4showEv>
 80a0432:	bf00      	nop
 80a0434:	f3af 8000 	nop.w
 80a0438:	cccccccd 	.word	0xcccccccd
 80a043c:	3fe4cccc 	.word	0x3fe4cccc
 80a0440:	9999999a 	.word	0x9999999a
 80a0444:	3fe99999 	.word	0x3fe99999
 80a0448:	000f4240 	.word	0x000f4240
 80a044c:	20000a9c 	.word	0x20000a9c

080a0450 <_Z4snumi>:
uint32_t snum(int val) {//Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
 80a0450:	b570      	push	{r4, r5, r6, lr}
 80a0452:	b08a      	sub	sp, #40	; 0x28
uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
 80a0454:	466c      	mov	r4, sp
uint32_t snum(int val) {//Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
 80a0456:	4606      	mov	r6, r0
uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
 80a0458:	4d07      	ldr	r5, [pc, #28]	; (80a0478 <_Z4snumi+0x28>)
 80a045a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a045c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a045e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0462:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0466:	e884 0003 	stmia.w	r4, {r0, r1}
return numArray[val];
 80a046a:	ab0a      	add	r3, sp, #40	; 0x28
 80a046c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
}
 80a0470:	f856 0c28 	ldr.w	r0, [r6, #-40]
 80a0474:	b00a      	add	sp, #40	; 0x28
 80a0476:	bd70      	pop	{r4, r5, r6, pc}
 80a0478:	080a90b0 	.word	0x080a90b0

080a047c <_Z3numi>:
uint32_t num(int val) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
 80a047c:	b570      	push	{r4, r5, r6, lr}
 80a047e:	b08a      	sub	sp, #40	; 0x28
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
 80a0480:	466c      	mov	r4, sp
uint32_t num(int val) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
 80a0482:	4606      	mov	r6, r0
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
 80a0484:	4d07      	ldr	r5, [pc, #28]	; (80a04a4 <_Z3numi+0x28>)
 80a0486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a048a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a048c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a048e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0492:	e884 0003 	stmia.w	r4, {r0, r1}
return numArray[val];
 80a0496:	ab0a      	add	r3, sp, #40	; 0x28
 80a0498:	eb03 0686 	add.w	r6, r3, r6, lsl #2
}
 80a049c:	f856 0c28 	ldr.w	r0, [r6, #-40]
 80a04a0:	b00a      	add	sp, #40	; 0x28
 80a04a2:	bd70      	pop	{r4, r5, r6, pc}
 80a04a4:	080a90d8 	.word	0x080a90d8

080a04a8 <_Z12encode64Condyiihhhb>:
void encode64Cond(uint64_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a04a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a04ac:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80a04b0:	4f1d      	ldr	r7, [pc, #116]	; (80a0528 <_Z12encode64Condyiihhhb+0x80>)
 80a04b2:	4e1e      	ldr	r6, [pc, #120]	; (80a052c <_Z12encode64Condyiihhhb+0x84>)
 80a04b4:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    if(erase){
 80a04b8:	bb14      	cbnz	r4, 80a0500 <_Z12encode64Condyiihhhb+0x58>
    for(i = 0; i < length; i++){
 80a04ba:	2400      	movs	r4, #0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a04bc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80a04c0:	4466      	add	r6, ip
 80a04c2:	46a4      	mov	ip, r4
 80a04c4:	f89d e01c 	ldrb.w	lr, [sp, #28]
 80a04c8:	f89d 5020 	ldrb.w	r5, [sp, #32]
    for(i = 0; i < length; i++){
 80a04cc:	603c      	str	r4, [r7, #0]
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a04ce:	fb08 550e 	mla	r5, r8, lr, r5
 80a04d2:	f89d e018 	ldrb.w	lr, [sp, #24]
 80a04d6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a0530 <_Z12encode64Condyiihhhb+0x88>
 80a04da:	fb08 550e 	mla	r5, r8, lr, r5
    for(i = 0; i < length; i++){
 80a04de:	42a3      	cmp	r3, r4
 80a04e0:	dd1a      	ble.n	80a0518 <_Z12encode64Condyiihhhb+0x70>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a04e2:	f010 0f01 	tst.w	r0, #1
 80a04e6:	d003      	beq.n	80a04f0 <_Z12encode64Condyiihhhb+0x48>
 80a04e8:	42d4      	cmn	r4, r2
            screenArray[i+inpix] = encodeColor(R,G,B);
 80a04ea:	bf58      	it	pl
 80a04ec:	f846 5024 	strpl.w	r5, [r6, r4, lsl #2]
        encNum = encNum >> 1;
 80a04f0:	0840      	lsrs	r0, r0, #1
 80a04f2:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    for(i = 0; i < length; i++){
 80a04f6:	f04f 0c01 	mov.w	ip, #1
        encNum = encNum >> 1;
 80a04fa:	0849      	lsrs	r1, r1, #1
    for(i = 0; i < length; i++){
 80a04fc:	3401      	adds	r4, #1
 80a04fe:	e7ee      	b.n	80a04de <_Z12encode64Condyiihhhb+0x36>
        for(i = 0; i < length; i++){
 80a0500:	2400      	movs	r4, #0
                screenArray[i+inpix] = 0;
 80a0502:	46a6      	mov	lr, r4
 80a0504:	eb06 050c 	add.w	r5, r6, ip
        for(i = 0; i < length; i++){
 80a0508:	429c      	cmp	r4, r3
 80a050a:	dad6      	bge.n	80a04ba <_Z12encode64Condyiihhhb+0x12>
            if(i+inpix >= 0){
 80a050c:	42d4      	cmn	r4, r2
                screenArray[i+inpix] = 0;
 80a050e:	bf58      	it	pl
 80a0510:	f845 e024 	strpl.w	lr, [r5, r4, lsl #2]
        for(i = 0; i < length; i++){
 80a0514:	3401      	adds	r4, #1
 80a0516:	e7f7      	b.n	80a0508 <_Z12encode64Condyiihhhb+0x60>
 80a0518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a051c:	f1bc 0f00 	cmp.w	ip, #0
 80a0520:	d000      	beq.n	80a0524 <_Z12encode64Condyiihhhb+0x7c>
 80a0522:	603b      	str	r3, [r7, #0]
}
 80a0524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0528:	2000027c 	.word	0x2000027c
 80a052c:	2000029c 	.word	0x2000029c
 80a0530:	000f4240 	.word	0x000f4240

080a0534 <_Z12encode32Condmiihhhb>:
void encode32Cond(uint32_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a0534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0538:	461e      	mov	r6, r3
 80a053a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80a053e:	4f19      	ldr	r7, [pc, #100]	; (80a05a4 <_Z12encode32Condmiihhhb+0x70>)
 80a0540:	4d19      	ldr	r5, [pc, #100]	; (80a05a8 <_Z12encode32Condmiihhhb+0x74>)
 80a0542:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    if(erase){
 80a0546:	b9db      	cbnz	r3, 80a0580 <_Z12encode32Condmiihhhb+0x4c>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a0548:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    for(i = 0; i < length; i++){
 80a054c:	2300      	movs	r3, #0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a054e:	f89d e018 	ldrb.w	lr, [sp, #24]
 80a0552:	f89d 401c 	ldrb.w	r4, [sp, #28]
    for(i = 0; i < length; i++){
 80a0556:	603b      	str	r3, [r7, #0]
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a0558:	fb08 440e 	mla	r4, r8, lr, r4
 80a055c:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80a05ac <_Z12encode32Condmiihhhb+0x78>
 80a0560:	4465      	add	r5, ip
 80a0562:	fb0e 4406 	mla	r4, lr, r6, r4
 80a0566:	461e      	mov	r6, r3
    for(i = 0; i < length; i++){
 80a0568:	429a      	cmp	r2, r3
 80a056a:	dd15      	ble.n	80a0598 <_Z12encode32Condmiihhhb+0x64>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a056c:	07c6      	lsls	r6, r0, #31
 80a056e:	d503      	bpl.n	80a0578 <_Z12encode32Condmiihhhb+0x44>
 80a0570:	42cb      	cmn	r3, r1
            screenArray[i+inpix] = encodeColor(R,G,B);
 80a0572:	bf58      	it	pl
 80a0574:	f845 4023 	strpl.w	r4, [r5, r3, lsl #2]
    for(i = 0; i < length; i++){
 80a0578:	2601      	movs	r6, #1
        encNum = encNum >> 1;
 80a057a:	0840      	lsrs	r0, r0, #1
    for(i = 0; i < length; i++){
 80a057c:	3301      	adds	r3, #1
 80a057e:	e7f3      	b.n	80a0568 <_Z12encode32Condmiihhhb+0x34>
        for(i = 0; i < length; i++){
 80a0580:	2400      	movs	r4, #0
                screenArray[i+inpix] = 0;
 80a0582:	46a6      	mov	lr, r4
 80a0584:	eb05 030c 	add.w	r3, r5, ip
        for(i = 0; i < length; i++){
 80a0588:	4294      	cmp	r4, r2
 80a058a:	dadd      	bge.n	80a0548 <_Z12encode32Condmiihhhb+0x14>
            if(i+inpix >= 0){
 80a058c:	42cc      	cmn	r4, r1
                screenArray[i+inpix] = 0;
 80a058e:	bf58      	it	pl
 80a0590:	f843 e024 	strpl.w	lr, [r3, r4, lsl #2]
        for(i = 0; i < length; i++){
 80a0594:	3401      	adds	r4, #1
 80a0596:	e7f7      	b.n	80a0588 <_Z12encode32Condmiihhhb+0x54>
 80a0598:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80a059c:	b106      	cbz	r6, 80a05a0 <_Z12encode32Condmiihhhb+0x6c>
 80a059e:	603a      	str	r2, [r7, #0]
}
 80a05a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a05a4:	2000027c 	.word	0x2000027c
 80a05a8:	2000029c 	.word	0x2000029c
 80a05ac:	000f4240 	.word	0x000f4240

080a05b0 <_Z11encode8Condhiihhhb>:
void encode8Cond(uint8_t enCond, int inpix, int length, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a05b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a05b4:	461e      	mov	r6, r3
 80a05b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80a05ba:	4f19      	ldr	r7, [pc, #100]	; (80a0620 <_Z11encode8Condhiihhhb+0x70>)
 80a05bc:	4d19      	ldr	r5, [pc, #100]	; (80a0624 <_Z11encode8Condhiihhhb+0x74>)
 80a05be:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    if(erase){
 80a05c2:	b9db      	cbnz	r3, 80a05fc <_Z11encode8Condhiihhhb+0x4c>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a05c4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    for(i = 0; i < length; i++){
 80a05c8:	2300      	movs	r3, #0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a05ca:	f89d e018 	ldrb.w	lr, [sp, #24]
 80a05ce:	f89d 401c 	ldrb.w	r4, [sp, #28]
    for(i = 0; i < length; i++){
 80a05d2:	603b      	str	r3, [r7, #0]
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a05d4:	fb08 440e 	mla	r4, r8, lr, r4
 80a05d8:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80a0628 <_Z11encode8Condhiihhhb+0x78>
 80a05dc:	4465      	add	r5, ip
 80a05de:	fb0e 4406 	mla	r4, lr, r6, r4
 80a05e2:	461e      	mov	r6, r3
    for(i = 0; i < length; i++){
 80a05e4:	429a      	cmp	r2, r3
 80a05e6:	dd15      	ble.n	80a0614 <_Z11encode8Condhiihhhb+0x64>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a05e8:	07c6      	lsls	r6, r0, #31
 80a05ea:	d503      	bpl.n	80a05f4 <_Z11encode8Condhiihhhb+0x44>
 80a05ec:	42cb      	cmn	r3, r1
            screenArray[i+inpix] = encodeColor(R,G,B);
 80a05ee:	bf58      	it	pl
 80a05f0:	f845 4023 	strpl.w	r4, [r5, r3, lsl #2]
    for(i = 0; i < length; i++){
 80a05f4:	2601      	movs	r6, #1
        encNum = encNum >> 1;
 80a05f6:	0840      	lsrs	r0, r0, #1
    for(i = 0; i < length; i++){
 80a05f8:	3301      	adds	r3, #1
 80a05fa:	e7f3      	b.n	80a05e4 <_Z11encode8Condhiihhhb+0x34>
        for(i = 0; i < length; i++){
 80a05fc:	2400      	movs	r4, #0
                screenArray[i+inpix] = 0;
 80a05fe:	46a6      	mov	lr, r4
 80a0600:	eb05 030c 	add.w	r3, r5, ip
        for(i = 0; i < length; i++){
 80a0604:	4294      	cmp	r4, r2
 80a0606:	dadd      	bge.n	80a05c4 <_Z11encode8Condhiihhhb+0x14>
            if(i+inpix >= 0){
 80a0608:	42cc      	cmn	r4, r1
                screenArray[i+inpix] = 0;
 80a060a:	bf58      	it	pl
 80a060c:	f843 e024 	strpl.w	lr, [r3, r4, lsl #2]
        for(i = 0; i < length; i++){
 80a0610:	3401      	adds	r4, #1
 80a0612:	e7f7      	b.n	80a0604 <_Z11encode8Condhiihhhb+0x54>
 80a0614:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80a0618:	b106      	cbz	r6, 80a061c <_Z11encode8Condhiihhhb+0x6c>
 80a061a:	603a      	str	r2, [r7, #0]
}
 80a061c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0620:	2000027c 	.word	0x2000027c
 80a0624:	2000029c 	.word	0x2000029c
 80a0628:	000f4240 	.word	0x000f4240
 80a062c:	00000000 	.word	0x00000000

080a0630 <_Z16displayConditioniihhhb>:
void displayCondition(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a0630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0634:	4615      	mov	r5, r2
    if(cltr[0] == 'd')
 80a0636:	4a70      	ldr	r2, [pc, #448]	; (80a07f8 <_Z16displayConditioniihhhb+0x1c8>)
void displayCondition(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a0638:	b086      	sub	sp, #24
    if(cltr[0] == 'd')
 80a063a:	7812      	ldrb	r2, [r2, #0]
void displayCondition(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a063c:	461e      	mov	r6, r3
    if(cltr[0] == 'd')
 80a063e:	2a64      	cmp	r2, #100	; 0x64
void displayCondition(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a0640:	4604      	mov	r4, r0
 80a0642:	460f      	mov	r7, r1
 80a0644:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 80a0648:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
        if(cnum == 800 || cnum == 801 || cnum == 721)                       //Clear or Haze
 80a064c:	f5a0 7348 	sub.w	r3, r0, #800	; 0x320
 80a0650:	f2a0 3a22 	subw	sl, r0, #802	; 0x322
    if(cltr[0] == 'd')
 80a0654:	d16d      	bne.n	80a0732 <_Z16displayConditioniihhhb+0x102>
        if(cnum == 800 || cnum == 801 || cnum == 721)                       //Clear or Haze
 80a0656:	2b01      	cmp	r3, #1
 80a0658:	d903      	bls.n	80a0662 <_Z16displayConditioniihhhb+0x32>
 80a065a:	f240 23d1 	movw	r3, #721	; 0x2d1
 80a065e:	4298      	cmp	r0, r3
 80a0660:	d12a      	bne.n	80a06b8 <_Z16displayConditioniihhhb+0x88>
            encode64Cond(2251921634885640,inpix, 64,round(R/1.8),round(G*1.3),0, erase);
 80a0662:	4628      	mov	r0, r5
 80a0664:	f005 f850 	bl	80a5708 <__aeabi_i2d>
 80a0668:	a355      	add	r3, pc, #340	; (adr r3, 80a07c0 <_Z16displayConditioniihhhb+0x190>)
 80a066a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a066e:	f005 f9df 	bl	80a5a30 <__aeabi_ddiv>
 80a0672:	f004 feab 	bl	80a53cc <round>
 80a0676:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a067a:	4630      	mov	r0, r6
 80a067c:	f005 f844 	bl	80a5708 <__aeabi_i2d>
 80a0680:	a351      	add	r3, pc, #324	; (adr r3, 80a07c8 <_Z16displayConditioniihhhb+0x198>)
 80a0682:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0686:	f005 f8a9 	bl	80a57dc <__aeabi_dmul>
 80a068a:	f004 fe9f 	bl	80a53cc <round>
 80a068e:	2300      	movs	r3, #0
 80a0690:	f8cd 800c 	str.w	r8, [sp, #12]
 80a0694:	9302      	str	r3, [sp, #8]
 80a0696:	f005 fb63 	bl	80a5d60 <__aeabi_d2uiz>
 80a069a:	b2c0      	uxtb	r0, r0
 80a069c:	9001      	str	r0, [sp, #4]
 80a069e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a06a2:	f005 fb5d 	bl	80a5d60 <__aeabi_d2uiz>
 80a06a6:	b2c0      	uxtb	r0, r0
 80a06a8:	9000      	str	r0, [sp, #0]
 80a06aa:	2340      	movs	r3, #64	; 0x40
 80a06ac:	a148      	add	r1, pc, #288	; (adr r1, 80a07d0 <_Z16displayConditioniihhhb+0x1a0>)
 80a06ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a06b2:	463a      	mov	r2, r7
 80a06b4:	f7ff fef8 	bl	80a04a8 <_Z12encode64Condyiihhhb>
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
 80a06b8:	f1ba 0f01 	cmp.w	sl, #1
 80a06bc:	d910      	bls.n	80a06e0 <_Z16displayConditioniihhhb+0xb0>
    if((cnum > 199 && cnum < 721) || (cnum > 730 && cnum < 772)){
 80a06be:	f1a4 03c8 	sub.w	r3, r4, #200	; 0xc8
 80a06c2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80a06c6:	d82d      	bhi.n	80a0724 <_Z16displayConditioniihhhb+0xf4>
        encode64Cond(570676717487874,inpix, 64, R,G,B, erase);
 80a06c8:	a143      	add	r1, pc, #268	; (adr r1, 80a07d8 <_Z16displayConditioniihhhb+0x1a8>)
 80a06ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a06ce:	2340      	movs	r3, #64	; 0x40
 80a06d0:	463a      	mov	r2, r7
 80a06d2:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80a06d6:	e9cd 5600 	strd	r5, r6, [sp]
 80a06da:	f7ff fee5 	bl	80a04a8 <_Z12encode64Condyiihhhb>
}
 80a06de:	e025      	b.n	80a072c <_Z16displayConditioniihhhb+0xfc>
            encode64Cond(17264541704,inpix, 64, R,G*1.9,0, erase);
 80a06e0:	2300      	movs	r3, #0
 80a06e2:	4630      	mov	r0, r6
 80a06e4:	9302      	str	r3, [sp, #8]
 80a06e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80a06ea:	f005 f80d 	bl	80a5708 <__aeabi_i2d>
 80a06ee:	a33c      	add	r3, pc, #240	; (adr r3, 80a07e0 <_Z16displayConditioniihhhb+0x1b0>)
 80a06f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06f4:	f005 f872 	bl	80a57dc <__aeabi_dmul>
 80a06f8:	f005 fb32 	bl	80a5d60 <__aeabi_d2uiz>
 80a06fc:	b2c0      	uxtb	r0, r0
 80a06fe:	2340      	movs	r3, #64	; 0x40
 80a0700:	e9cd 5000 	strd	r5, r0, [sp]
 80a0704:	a138      	add	r1, pc, #224	; (adr r1, 80a07e8 <_Z16displayConditioniihhhb+0x1b8>)
 80a0706:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a070a:	463a      	mov	r2, r7
 80a070c:	f7ff fecc 	bl	80a04a8 <_Z12encode64Condyiihhhb>
            encode64Cond(1168745917412540416,inpix, 64,R,G,B, erase);
 80a0710:	a137      	add	r1, pc, #220	; (adr r1, 80a07f0 <_Z16displayConditioniihhhb+0x1c0>)
 80a0712:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0716:	2340      	movs	r3, #64	; 0x40
 80a0718:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80a071c:	e9cd 5600 	strd	r5, r6, [sp]
            encode64Cond(17833647421456,inpix, 64,R,G,B, erase);
 80a0720:	f7ff fec2 	bl	80a04a8 <_Z12encode64Condyiihhhb>
    if((cnum > 199 && cnum < 721) || (cnum > 730 && cnum < 772)){
 80a0724:	f2a4 24db 	subw	r4, r4, #731	; 0x2db
 80a0728:	2c28      	cmp	r4, #40	; 0x28
 80a072a:	d9cd      	bls.n	80a06c8 <_Z16displayConditioniihhhb+0x98>
}
 80a072c:	b006      	add	sp, #24
 80a072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(cnum == 800 || cnum == 801 || cnum == 721)
 80a0732:	2b01      	cmp	r3, #1
 80a0734:	d903      	bls.n	80a073e <_Z16displayConditioniihhhb+0x10e>
 80a0736:	f240 23d1 	movw	r3, #721	; 0x2d1
 80a073a:	4298      	cmp	r0, r3
 80a073c:	d119      	bne.n	80a0772 <_Z16displayConditioniihhhb+0x142>
            encode64Cond(68716846972928,inpix, 64, R,G*1.2,B/3, erase);
 80a073e:	2303      	movs	r3, #3
 80a0740:	fbb9 f3f3 	udiv	r3, r9, r3
 80a0744:	4630      	mov	r0, r6
 80a0746:	9302      	str	r3, [sp, #8]
 80a0748:	f8cd 800c 	str.w	r8, [sp, #12]
 80a074c:	f004 ffdc 	bl	80a5708 <__aeabi_i2d>
 80a0750:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a0754:	4b29      	ldr	r3, [pc, #164]	; (80a07fc <_Z16displayConditioniihhhb+0x1cc>)
 80a0756:	f005 f841 	bl	80a57dc <__aeabi_dmul>
 80a075a:	f005 fb01 	bl	80a5d60 <__aeabi_d2uiz>
 80a075e:	b2c0      	uxtb	r0, r0
 80a0760:	e9cd 5000 	strd	r5, r0, [sp]
 80a0764:	2340      	movs	r3, #64	; 0x40
 80a0766:	463a      	mov	r2, r7
 80a0768:	f643 617f 	movw	r1, #15999	; 0x3e7f
 80a076c:	4824      	ldr	r0, [pc, #144]	; (80a0800 <_Z16displayConditioniihhhb+0x1d0>)
 80a076e:	f7ff fe9b 	bl	80a04a8 <_Z12encode64Condyiihhhb>
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
 80a0772:	f1ba 0f01 	cmp.w	sl, #1
 80a0776:	d8a2      	bhi.n	80a06be <_Z16displayConditioniihhhb+0x8e>
            encode64Cond(263714,inpix, 64, R,G*1.2,B/3, erase);
 80a0778:	2303      	movs	r3, #3
 80a077a:	fbb9 f3f3 	udiv	r3, r9, r3
 80a077e:	4630      	mov	r0, r6
 80a0780:	9302      	str	r3, [sp, #8]
 80a0782:	f8cd 800c 	str.w	r8, [sp, #12]
 80a0786:	f004 ffbf 	bl	80a5708 <__aeabi_i2d>
 80a078a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a078e:	4b1b      	ldr	r3, [pc, #108]	; (80a07fc <_Z16displayConditioniihhhb+0x1cc>)
 80a0790:	f005 f824 	bl	80a57dc <__aeabi_dmul>
 80a0794:	f005 fae4 	bl	80a5d60 <__aeabi_d2uiz>
 80a0798:	b2c0      	uxtb	r0, r0
 80a079a:	2340      	movs	r3, #64	; 0x40
 80a079c:	2100      	movs	r1, #0
 80a079e:	e9cd 5000 	strd	r5, r0, [sp]
 80a07a2:	463a      	mov	r2, r7
 80a07a4:	4817      	ldr	r0, [pc, #92]	; (80a0804 <_Z16displayConditioniihhhb+0x1d4>)
 80a07a6:	f7ff fe7f 	bl	80a04a8 <_Z12encode64Condyiihhhb>
            encode64Cond(17833647421456,inpix, 64,R,G,B, erase);
 80a07aa:	2340      	movs	r3, #64	; 0x40
 80a07ac:	f241 0138 	movw	r1, #4152	; 0x1038
 80a07b0:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80a07b4:	e9cd 5600 	strd	r5, r6, [sp]
 80a07b8:	4813      	ldr	r0, [pc, #76]	; (80a0808 <_Z16displayConditioniihhhb+0x1d8>)
 80a07ba:	e7b1      	b.n	80a0720 <_Z16displayConditioniihhhb+0xf0>
 80a07bc:	f3af 8000 	nop.w
 80a07c0:	cccccccd 	.word	0xcccccccd
 80a07c4:	3ffccccc 	.word	0x3ffccccc
 80a07c8:	cccccccd 	.word	0xcccccccd
 80a07cc:	3ff4cccc 	.word	0x3ff4cccc
 80a07d0:	5d1c0008 	.word	0x5d1c0008
 80a07d4:	0008001c 	.word	0x0008001c
 80a07d8:	07070702 	.word	0x07070702
 80a07dc:	00020707 	.word	0x00020707
 80a07e0:	66666666 	.word	0x66666666
 80a07e4:	3ffe6666 	.word	0x3ffe6666
 80a07e8:	050c0008 	.word	0x050c0008
 80a07ec:	00000004 	.word	0x00000004
 80a07f0:	38100000 	.word	0x38100000
 80a07f4:	10383838 	.word	0x10383838
 80a07f8:	20000264 	.word	0x20000264
 80a07fc:	3ff33333 	.word	0x3ff33333
 80a0800:	63410000 	.word	0x63410000
 80a0804:	00040622 	.word	0x00040622
 80a0808:	38383810 	.word	0x38383810

080a080c <_Z13displayNumberiihhhb>:
void displayNumber(int val, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a080e:	461f      	mov	r7, r3
 80a0810:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a0814:	460d      	mov	r5, r1
 80a0816:	4616      	mov	r6, r2
    if(small){
 80a0818:	b183      	cbz	r3, 80a083c <_Z13displayNumberiihhhb+0x30>
        encNum = snum(val);
 80a081a:	f7ff fe19 	bl	80a0450 <_Z4snumi>
    for(i = 0; i < 32; i++){
 80a081e:	2200      	movs	r2, #0
 80a0820:	4629      	mov	r1, r5
 80a0822:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80a0880 <_Z13displayNumberiihhhb+0x74>
            screenArray[i+inpix] = 0;
 80a0826:	4c17      	ldr	r4, [pc, #92]	; (80a0884 <_Z13displayNumberiihhhb+0x78>)
 80a0828:	f105 0320 	add.w	r3, r5, #32
    for(i = 0; i < 32; i++){
 80a082c:	42ab      	cmp	r3, r5
 80a082e:	d008      	beq.n	80a0842 <_Z13displayNumberiihhhb+0x36>
        if(i+inpix >= 0){
 80a0830:	2d00      	cmp	r5, #0
            screenArray[i+inpix] = 0;
 80a0832:	bfa8      	it	ge
 80a0834:	f844 2025 	strge.w	r2, [r4, r5, lsl #2]
    for(i = 0; i < 32; i++){
 80a0838:	3501      	adds	r5, #1
 80a083a:	e7f7      	b.n	80a082c <_Z13displayNumberiihhhb+0x20>
        encNum = num(val);
 80a083c:	f7ff fe1e 	bl	80a047c <_Z3numi>
 80a0840:	e7ed      	b.n	80a081e <_Z13displayNumberiihhhb+0x12>
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
 80a0842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    for(i = 0; i < 32; i++){
 80a0846:	2300      	movs	r3, #0
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
 80a0848:	f89d 4018 	ldrb.w	r4, [sp, #24]
    for(i = 0; i < 32; i++){
 80a084c:	f8cc 3000 	str.w	r3, [ip]
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
 80a0850:	fb02 4407 	mla	r4, r2, r7, r4
 80a0854:	4a0c      	ldr	r2, [pc, #48]	; (80a0888 <_Z13displayNumberiihhhb+0x7c>)
 80a0856:	fb02 4206 	mla	r2, r2, r6, r4
 80a085a:	4c0a      	ldr	r4, [pc, #40]	; (80a0884 <_Z13displayNumberiihhhb+0x78>)
    for(i = 0; i < 32; i++){
 80a085c:	42a9      	cmp	r1, r5
 80a085e:	d009      	beq.n	80a0874 <_Z13displayNumberiihhhb+0x68>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a0860:	07c3      	lsls	r3, r0, #31
 80a0862:	d503      	bpl.n	80a086c <_Z13displayNumberiihhhb+0x60>
 80a0864:	2900      	cmp	r1, #0
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
 80a0866:	bfa8      	it	ge
 80a0868:	f844 2021 	strge.w	r2, [r4, r1, lsl #2]
    for(i = 0; i < 32; i++){
 80a086c:	2301      	movs	r3, #1
        encNum = encNum >> 1;
 80a086e:	0840      	lsrs	r0, r0, #1
    for(i = 0; i < 32; i++){
 80a0870:	3101      	adds	r1, #1
 80a0872:	e7f3      	b.n	80a085c <_Z13displayNumberiihhhb+0x50>
 80a0874:	b113      	cbz	r3, 80a087c <_Z13displayNumberiihhhb+0x70>
 80a0876:	2320      	movs	r3, #32
 80a0878:	f8cc 3000 	str.w	r3, [ip]
}
 80a087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a087e:	bf00      	nop
 80a0880:	2000027c 	.word	0x2000027c
 80a0884:	2000029c 	.word	0x2000029c
 80a0888:	000f4240 	.word	0x000f4240

080a088c <_Z6lettercihhhb>:
uint8_t letter(char ltr, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a088c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0890:	4604      	mov	r4, r0
    if(charNumber >= 48 && charNumber <= 57){
 80a0892:	3830      	subs	r0, #48	; 0x30
 80a0894:	fa5f fe80 	uxtb.w	lr, r0
 80a0898:	f1be 0f09 	cmp.w	lr, #9
uint8_t letter(char ltr, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a089c:	460d      	mov	r5, r1
 80a089e:	4616      	mov	r6, r2
 80a08a0:	461f      	mov	r7, r3
 80a08a2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a08a6:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    if(charNumber >= 48 && charNumber <= 57){
 80a08aa:	d813      	bhi.n	80a08d4 <_Z6lettercihhhb+0x48>
        if(small){
 80a08ac:	f1bc 0f00 	cmp.w	ip, #0
 80a08b0:	d007      	beq.n	80a08c2 <_Z6lettercihhhb+0x36>
            displayNumber((charNumber-48),inpix+2,R,G,B,true);
 80a08b2:	2101      	movs	r1, #1
 80a08b4:	e9cd 8100 	strd	r8, r1, [sp]
 80a08b8:	1ca9      	adds	r1, r5, #2
 80a08ba:	f7ff ffa7 	bl	80a080c <_Z13displayNumberiihhhb>
        return 3;
 80a08be:	2403      	movs	r4, #3
 80a08c0:	e004      	b.n	80a08cc <_Z6lettercihhhb+0x40>
            displayNumber((charNumber-48),inpix,R,G,B,false);
 80a08c2:	e9cd 8c00 	strd	r8, ip, [sp]
 80a08c6:	f7ff ffa1 	bl	80a080c <_Z13displayNumberiihhhb>
        return 4;
 80a08ca:	2404      	movs	r4, #4
}
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	b004      	add	sp, #16
 80a08d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (charNumber)
 80a08d4:	3c20      	subs	r4, #32
 80a08d6:	2c5c      	cmp	r4, #92	; 0x5c
 80a08d8:	f200 8332 	bhi.w	80a0f40 <_Z6lettercihhhb+0x6b4>
 80a08dc:	e8df f014 	tbh	[pc, r4, lsl #1]
 80a08e0:	0066005d 	.word	0x0066005d
 80a08e4:	03300070 	.word	0x03300070
 80a08e8:	03300330 	.word	0x03300330
 80a08ec:	007b0330 	.word	0x007b0330
 80a08f0:	008f0083 	.word	0x008f0083
 80a08f4:	00980330 	.word	0x00980330
 80a08f8:	00a800a0 	.word	0x00a800a0
 80a08fc:	00b900b1 	.word	0x00b900b1
 80a0900:	03300330 	.word	0x03300330
 80a0904:	03300330 	.word	0x03300330
 80a0908:	03300330 	.word	0x03300330
 80a090c:	03300330 	.word	0x03300330
 80a0910:	03300330 	.word	0x03300330
 80a0914:	00c900c1 	.word	0x00c900c1
 80a0918:	00d900d1 	.word	0x00d900d1
 80a091c:	00e900e1 	.word	0x00e900e1
 80a0920:	00f10330 	.word	0x00f10330
 80a0924:	010300fb 	.word	0x010300fb
 80a0928:	0113010b 	.word	0x0113010b
 80a092c:	0123011b 	.word	0x0123011b
 80a0930:	0133012b 	.word	0x0133012b
 80a0934:	0143013b 	.word	0x0143013b
 80a0938:	0153014b 	.word	0x0153014b
 80a093c:	017a0168 	.word	0x017a0168
 80a0940:	018a0182 	.word	0x018a0182
 80a0944:	019a0192 	.word	0x019a0192
 80a0948:	01b401a2 	.word	0x01b401a2
 80a094c:	01c401bc 	.word	0x01c401bc
 80a0950:	01de01d6 	.word	0x01de01d6
 80a0954:	01f801f0 	.word	0x01f801f0
 80a0958:	02010330 	.word	0x02010330
 80a095c:	03300330 	.word	0x03300330
 80a0960:	020a007b 	.word	0x020a007b
 80a0964:	025e0212 	.word	0x025e0212
 80a0968:	026e0266 	.word	0x026e0266
 80a096c:	027e0276 	.word	0x027e0276
 80a0970:	028e0286 	.word	0x028e0286
 80a0974:	029e0296 	.word	0x029e0296
 80a0978:	02a6032a 	.word	0x02a6032a
 80a097c:	02c002b8 	.word	0x02c002b8
 80a0980:	02d002c8 	.word	0x02d002c8
 80a0984:	02e002d8 	.word	0x02e002d8
 80a0988:	02f002e8 	.word	0x02f002e8
 80a098c:	030002f8 	.word	0x030002f8
 80a0990:	031a0312 	.word	0x031a0312
 80a0994:	03300322 	.word	0x03300322
 80a0998:	032a      	.short	0x032a
        encode8Cond(127,inpix,8,0,0,0,true);
 80a099a:	2300      	movs	r3, #0
 80a099c:	2401      	movs	r4, #1
 80a099e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80a09a2:	9300      	str	r3, [sp, #0]
        encode8Cond(127,inpix,8,R,G,B,true);
 80a09a4:	2208      	movs	r2, #8
 80a09a6:	4629      	mov	r1, r5
 80a09a8:	207f      	movs	r0, #127	; 0x7f
 80a09aa:	e006      	b.n	80a09ba <_Z6lettercihhhb+0x12e>
        encode8Cond(47,inpix,8,R,G,B,true);
 80a09ac:	2401      	movs	r4, #1
 80a09ae:	4613      	mov	r3, r2
 80a09b0:	202f      	movs	r0, #47	; 0x2f
 80a09b2:	2208      	movs	r2, #8
 80a09b4:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a09b8:	9700      	str	r7, [sp, #0]
        encode8Cond(127,inpix,8,R,G,B,true);
 80a09ba:	f7ff fdf9 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        return 1;
 80a09be:	e785      	b.n	80a08cc <_Z6lettercihhhb+0x40>
        encode32Cond(196611,inpix,24,R,G,B,true);
 80a09c0:	2301      	movs	r3, #1
 80a09c2:	f04f 1003 	mov.w	r0, #196611	; 0x30003
 80a09c6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a09ca:	4613      	mov	r3, r2
 80a09cc:	2218      	movs	r2, #24
 80a09ce:	9700      	str	r7, [sp, #0]
        encode32Cond(5002340,inpix,24,R,G,B,true);
 80a09d0:	f7ff fdb0 	bl	80a0534 <_Z12encode32Condmiihhhb>
 80a09d4:	e773      	b.n	80a08be <_Z6lettercihhhb+0x32>
        encode8Cond(3,inpix,8,R,G,B,true);
 80a09d6:	2401      	movs	r4, #1
 80a09d8:	4613      	mov	r3, r2
 80a09da:	2003      	movs	r0, #3
 80a09dc:	2208      	movs	r2, #8
 80a09de:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a09e2:	9700      	str	r7, [sp, #0]
 80a09e4:	e7e9      	b.n	80a09ba <_Z6lettercihhhb+0x12e>
        encode32Cond(16702,inpix,16,R,G,B,true);
 80a09e6:	2301      	movs	r3, #1
 80a09e8:	f244 103e 	movw	r0, #16702	; 0x413e
 80a09ec:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a09f0:	4613      	mov	r3, r2
 80a09f2:	2210      	movs	r2, #16
 80a09f4:	9700      	str	r7, [sp, #0]
        encode32Cond(32577,inpix,16,R,G,B,true);
 80a09f6:	f7ff fd9d 	bl	80a0534 <_Z12encode32Condmiihhhb>
        return 2;
 80a09fa:	2402      	movs	r4, #2
 80a09fc:	e766      	b.n	80a08cc <_Z6lettercihhhb+0x40>
        encode32Cond(15937,inpix,16,R,G,B,true);
 80a09fe:	2301      	movs	r3, #1
 80a0a00:	f643 6041 	movw	r0, #15937	; 0x3e41
 80a0a04:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a08:	9700      	str	r7, [sp, #0]
 80a0a0a:	4613      	mov	r3, r2
 80a0a0c:	2210      	movs	r2, #16
 80a0a0e:	e7f2      	b.n	80a09f6 <_Z6lettercihhhb+0x16a>
        encode32Cond(531464,inpix,24,R,G,B,true);
 80a0a10:	2301      	movs	r3, #1
 80a0a12:	48c0      	ldr	r0, [pc, #768]	; (80a0d14 <_Z6lettercihhhb+0x488>)
 80a0a14:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a18:	9700      	str	r7, [sp, #0]
 80a0a1a:	4613      	mov	r3, r2
 80a0a1c:	2218      	movs	r2, #24
 80a0a1e:	e7d7      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode8Cond(96,inpix,8,R,G,B,true);
 80a0a20:	2401      	movs	r4, #1
 80a0a22:	4613      	mov	r3, r2
 80a0a24:	2060      	movs	r0, #96	; 0x60
 80a0a26:	2208      	movs	r2, #8
 80a0a28:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0a2c:	9700      	str	r7, [sp, #0]
 80a0a2e:	e7c4      	b.n	80a09ba <_Z6lettercihhhb+0x12e>
        encode32Cond(2056,inpix,16,R,G,B,true);
 80a0a30:	2301      	movs	r3, #1
 80a0a32:	f640 0008 	movw	r0, #2056	; 0x808
 80a0a36:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a3a:	9700      	str	r7, [sp, #0]
 80a0a3c:	4613      	mov	r3, r2
 80a0a3e:	2210      	movs	r2, #16
 80a0a40:	e7d9      	b.n	80a09f6 <_Z6lettercihhhb+0x16a>
        encode8Cond(64,inpix,8,R,G,B,true);
 80a0a42:	2401      	movs	r4, #1
 80a0a44:	4613      	mov	r3, r2
 80a0a46:	2040      	movs	r0, #64	; 0x40
 80a0a48:	2208      	movs	r2, #8
 80a0a4a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0a4e:	9700      	str	r7, [sp, #0]
 80a0a50:	e7b3      	b.n	80a09ba <_Z6lettercihhhb+0x12e>
        encode32Cond(399456,inpix,24,R,G,B,true);
 80a0a52:	2301      	movs	r3, #1
 80a0a54:	48b0      	ldr	r0, [pc, #704]	; (80a0d18 <_Z6lettercihhhb+0x48c>)
 80a0a56:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a5a:	9700      	str	r7, [sp, #0]
 80a0a5c:	4613      	mov	r3, r2
 80a0a5e:	2218      	movs	r2, #24
 80a0a60:	e7b6      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode8Cond(34,inpix,8,R,G,B,true);
 80a0a62:	2401      	movs	r4, #1
 80a0a64:	4613      	mov	r3, r2
 80a0a66:	2022      	movs	r0, #34	; 0x22
 80a0a68:	2208      	movs	r2, #8
 80a0a6a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0a6e:	9700      	str	r7, [sp, #0]
 80a0a70:	e7a3      	b.n	80a09ba <_Z6lettercihhhb+0x12e>
        encode8Cond(98,inpix,8,R,G,B,true);
 80a0a72:	2401      	movs	r4, #1
 80a0a74:	4613      	mov	r3, r2
 80a0a76:	2062      	movs	r0, #98	; 0x62
 80a0a78:	2208      	movs	r2, #8
 80a0a7a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0a7e:	9700      	str	r7, [sp, #0]
 80a0a80:	e79b      	b.n	80a09ba <_Z6lettercihhhb+0x12e>
        encode32Cond(2233352,inpix,24,R,G,B,true);
 80a0a82:	2301      	movs	r3, #1
 80a0a84:	48a5      	ldr	r0, [pc, #660]	; (80a0d1c <_Z6lettercihhhb+0x490>)
 80a0a86:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a8a:	9700      	str	r7, [sp, #0]
 80a0a8c:	4613      	mov	r3, r2
 80a0a8e:	2218      	movs	r2, #24
 80a0a90:	e79e      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(1315860,inpix,24,R,G,B,true);
 80a0a92:	2301      	movs	r3, #1
 80a0a94:	48a2      	ldr	r0, [pc, #648]	; (80a0d20 <_Z6lettercihhhb+0x494>)
 80a0a96:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a9a:	9700      	str	r7, [sp, #0]
 80a0a9c:	4613      	mov	r3, r2
 80a0a9e:	2218      	movs	r2, #24
 80a0aa0:	e796      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(529442,inpix,24,R,G,B,true);
 80a0aa2:	2301      	movs	r3, #1
 80a0aa4:	489f      	ldr	r0, [pc, #636]	; (80a0d24 <_Z6lettercihhhb+0x498>)
 80a0aa6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0aaa:	9700      	str	r7, [sp, #0]
 80a0aac:	4613      	mov	r3, r2
 80a0aae:	2218      	movs	r2, #24
 80a0ab0:	e78e      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(1005827,inpix,24,R,G,B,true);
 80a0ab2:	2301      	movs	r3, #1
 80a0ab4:	489c      	ldr	r0, [pc, #624]	; (80a0d28 <_Z6lettercihhhb+0x49c>)
 80a0ab6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0aba:	9700      	str	r7, [sp, #0]
 80a0abc:	4613      	mov	r3, r2
 80a0abe:	2218      	movs	r2, #24
 80a0ac0:	e786      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(2114521470,inpix,32,R,G,B,true);
 80a0ac2:	2301      	movs	r3, #1
 80a0ac4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ac8:	4613      	mov	r3, r2
 80a0aca:	2220      	movs	r2, #32
 80a0acc:	4897      	ldr	r0, [pc, #604]	; (80a0d2c <_Z6lettercihhhb+0x4a0>)
 80a0ace:	9700      	str	r7, [sp, #0]
 80a0ad0:	f7ff fd30 	bl	80a0534 <_Z12encode32Condmiihhhb>
 80a0ad4:	e6f9      	b.n	80a08ca <_Z6lettercihhhb+0x3e>
        encode32Cond(910772607,inpix,32,R,G,B,true);
 80a0ad6:	2301      	movs	r3, #1
 80a0ad8:	4895      	ldr	r0, [pc, #596]	; (80a0d30 <_Z6lettercihhhb+0x4a4>)
 80a0ada:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ade:	9700      	str	r7, [sp, #0]
 80a0ae0:	4613      	mov	r3, r2
 80a0ae2:	2220      	movs	r2, #32
 80a0ae4:	e7f4      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(574701886,inpix,32,R,G,B,true);
 80a0ae6:	2301      	movs	r3, #1
 80a0ae8:	4892      	ldr	r0, [pc, #584]	; (80a0d34 <_Z6lettercihhhb+0x4a8>)
 80a0aea:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0aee:	9700      	str	r7, [sp, #0]
 80a0af0:	4613      	mov	r3, r2
 80a0af2:	2220      	movs	r2, #32
 80a0af4:	e7ec      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(1044463999,inpix,32,R,G,B,true);
 80a0af6:	2301      	movs	r3, #1
 80a0af8:	488f      	ldr	r0, [pc, #572]	; (80a0d38 <_Z6lettercihhhb+0x4ac>)
 80a0afa:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0afe:	9700      	str	r7, [sp, #0]
 80a0b00:	4613      	mov	r3, r2
 80a0b02:	2220      	movs	r2, #32
 80a0b04:	e7e4      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(1095321983,inpix,32,R,G,B,true);
 80a0b06:	2301      	movs	r3, #1
 80a0b08:	488c      	ldr	r0, [pc, #560]	; (80a0d3c <_Z6lettercihhhb+0x4b0>)
 80a0b0a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b0e:	9700      	str	r7, [sp, #0]
 80a0b10:	4613      	mov	r3, r2
 80a0b12:	2220      	movs	r2, #32
 80a0b14:	e7dc      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(17369471,inpix,32,R,G,B,true);
 80a0b16:	2301      	movs	r3, #1
 80a0b18:	4889      	ldr	r0, [pc, #548]	; (80a0d40 <_Z6lettercihhhb+0x4b4>)
 80a0b1a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b1e:	9700      	str	r7, [sp, #0]
 80a0b20:	4613      	mov	r3, r2
 80a0b22:	2220      	movs	r2, #32
 80a0b24:	e7d4      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(2018066815,inpix,32,R,G,B,true);
 80a0b26:	2301      	movs	r3, #1
 80a0b28:	4886      	ldr	r0, [pc, #536]	; (80a0d44 <_Z6lettercihhhb+0x4b8>)
 80a0b2a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b2e:	9700      	str	r7, [sp, #0]
 80a0b30:	4613      	mov	r3, r2
 80a0b32:	2220      	movs	r2, #32
 80a0b34:	e7cc      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(2131232895,inpix,32,R,G,B,true);
 80a0b36:	2301      	movs	r3, #1
 80a0b38:	4883      	ldr	r0, [pc, #524]	; (80a0d48 <_Z6lettercihhhb+0x4bc>)
 80a0b3a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b3e:	9700      	str	r7, [sp, #0]
 80a0b40:	4613      	mov	r3, r2
 80a0b42:	2220      	movs	r2, #32
 80a0b44:	e7c4      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(4292417,inpix,24,R,G,B,true);
 80a0b46:	2301      	movs	r3, #1
 80a0b48:	4880      	ldr	r0, [pc, #512]	; (80a0d4c <_Z6lettercihhhb+0x4c0>)
 80a0b4a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b4e:	9700      	str	r7, [sp, #0]
 80a0b50:	4613      	mov	r3, r2
 80a0b52:	2218      	movs	r2, #24
 80a0b54:	e73c      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(20922657,inpix,32,R,G,B,true);
 80a0b56:	2301      	movs	r3, #1
 80a0b58:	487d      	ldr	r0, [pc, #500]	; (80a0d50 <_Z6lettercihhhb+0x4c4>)
 80a0b5a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b5e:	9700      	str	r7, [sp, #0]
 80a0b60:	4613      	mov	r3, r2
 80a0b62:	2220      	movs	r2, #32
 80a0b64:	e7b4      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(1997015167,inpix,32,R,G,B,true);
 80a0b66:	2301      	movs	r3, #1
 80a0b68:	487a      	ldr	r0, [pc, #488]	; (80a0d54 <_Z6lettercihhhb+0x4c8>)
 80a0b6a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b6e:	9700      	str	r7, [sp, #0]
 80a0b70:	4613      	mov	r3, r2
 80a0b72:	2220      	movs	r2, #32
 80a0b74:	e7ac      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(1077952639,inpix,32,R,G,B,true);
 80a0b76:	2301      	movs	r3, #1
 80a0b78:	4877      	ldr	r0, [pc, #476]	; (80a0d58 <_Z6lettercihhhb+0x4cc>)
 80a0b7a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b7e:	9700      	str	r7, [sp, #0]
 80a0b80:	4613      	mov	r3, r2
 80a0b82:	2220      	movs	r2, #32
 80a0b84:	e7a4      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode8Cond(127,inpix+32,8,R,G,B,true);
 80a0b86:	2401      	movs	r4, #1
 80a0b88:	4613      	mov	r3, r2
 80a0b8a:	207f      	movs	r0, #127	; 0x7f
 80a0b8c:	2208      	movs	r2, #8
 80a0b8e:	3120      	adds	r1, #32
 80a0b90:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0b94:	9700      	str	r7, [sp, #0]
 80a0b96:	f7ff fd0b 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        encode32Cond(25035135,inpix,32,R,G,B,true);
 80a0b9a:	4633      	mov	r3, r6
 80a0b9c:	2220      	movs	r2, #32
 80a0b9e:	4629      	mov	r1, r5
 80a0ba0:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0ba4:	486d      	ldr	r0, [pc, #436]	; (80a0d5c <_Z6lettercihhhb+0x4d0>)
 80a0ba6:	9700      	str	r7, [sp, #0]
        encode32Cond(1081098296,inpix,32,R,G,B,true);
 80a0ba8:	f7ff fcc4 	bl	80a0534 <_Z12encode32Condmiihhhb>
        return 5;    
 80a0bac:	2405      	movs	r4, #5
 80a0bae:	e68d      	b.n	80a08cc <_Z6lettercihhhb+0x40>
        encode8Cond(127,inpix+32,8,R,G,B,true);
 80a0bb0:	2401      	movs	r4, #1
 80a0bb2:	4613      	mov	r3, r2
 80a0bb4:	207f      	movs	r0, #127	; 0x7f
 80a0bb6:	2208      	movs	r2, #8
 80a0bb8:	3120      	adds	r1, #32
 80a0bba:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0bbe:	9700      	str	r7, [sp, #0]
 80a0bc0:	f7ff fcf6 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        encode32Cond(1077805439,inpix,32,R,G,B,true);
 80a0bc4:	4633      	mov	r3, r6
 80a0bc6:	2220      	movs	r2, #32
 80a0bc8:	4629      	mov	r1, r5
 80a0bca:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0bce:	4864      	ldr	r0, [pc, #400]	; (80a0d60 <_Z6lettercihhhb+0x4d4>)
 80a0bd0:	9700      	str	r7, [sp, #0]
 80a0bd2:	e7e9      	b.n	80a0ba8 <_Z6lettercihhhb+0x31c>
        encode32Cond(1044463934,inpix,32,R,G,B,true);
 80a0bd4:	2301      	movs	r3, #1
 80a0bd6:	4863      	ldr	r0, [pc, #396]	; (80a0d64 <_Z6lettercihhhb+0x4d8>)
 80a0bd8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0bdc:	9700      	str	r7, [sp, #0]
 80a0bde:	4613      	mov	r3, r2
 80a0be0:	2220      	movs	r2, #32
 80a0be2:	e775      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(101255551,inpix,32,R,G,B,true);
 80a0be4:	2301      	movs	r3, #1
 80a0be6:	4860      	ldr	r0, [pc, #384]	; (80a0d68 <_Z6lettercihhhb+0x4dc>)
 80a0be8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0bec:	9700      	str	r7, [sp, #0]
 80a0bee:	4613      	mov	r3, r2
 80a0bf0:	2220      	movs	r2, #32
 80a0bf2:	e76d      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(522273086,inpix,32,R,G,B,true);
 80a0bf4:	2301      	movs	r3, #1
 80a0bf6:	485d      	ldr	r0, [pc, #372]	; (80a0d6c <_Z6lettercihhhb+0x4e0>)
 80a0bf8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0bfc:	9700      	str	r7, [sp, #0]
 80a0bfe:	4613      	mov	r3, r2
 80a0c00:	2220      	movs	r2, #32
 80a0c02:	e765      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(826886527,inpix,32,R,G,B,true);
 80a0c04:	2301      	movs	r3, #1
 80a0c06:	485a      	ldr	r0, [pc, #360]	; (80a0d70 <_Z6lettercihhhb+0x4e4>)
 80a0c08:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c0c:	9700      	str	r7, [sp, #0]
 80a0c0e:	4613      	mov	r3, r2
 80a0c10:	2220      	movs	r2, #32
 80a0c12:	e75d      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(826886470,inpix,32,R,G,B,true);
 80a0c14:	2301      	movs	r3, #1
 80a0c16:	4857      	ldr	r0, [pc, #348]	; (80a0d74 <_Z6lettercihhhb+0x4e8>)
 80a0c18:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c1c:	9700      	str	r7, [sp, #0]
 80a0c1e:	4613      	mov	r3, r2
 80a0c20:	2220      	movs	r2, #32
 80a0c22:	e755      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode8Cond(1,inpix+32,8,R,G,B,true);
 80a0c24:	2401      	movs	r4, #1
 80a0c26:	4613      	mov	r3, r2
 80a0c28:	4620      	mov	r0, r4
 80a0c2a:	2208      	movs	r2, #8
 80a0c2c:	3120      	adds	r1, #32
 80a0c2e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0c32:	9700      	str	r7, [sp, #0]
 80a0c34:	f7ff fcbc 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        encode32Cond(25100545,inpix,32,R,G,B,true);
 80a0c38:	4633      	mov	r3, r6
 80a0c3a:	2220      	movs	r2, #32
 80a0c3c:	4629      	mov	r1, r5
 80a0c3e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0c42:	484d      	ldr	r0, [pc, #308]	; (80a0d78 <_Z6lettercihhhb+0x4ec>)
 80a0c44:	9700      	str	r7, [sp, #0]
 80a0c46:	e7af      	b.n	80a0ba8 <_Z6lettercihhhb+0x31c>
        encode32Cond(1061175359,inpix,32,R,G,B,true);
 80a0c48:	2301      	movs	r3, #1
 80a0c4a:	484c      	ldr	r0, [pc, #304]	; (80a0d7c <_Z6lettercihhhb+0x4f0>)
 80a0c4c:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c50:	9700      	str	r7, [sp, #0]
 80a0c52:	4613      	mov	r3, r2
 80a0c54:	2220      	movs	r2, #32
 80a0c56:	e73b      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(526409759,inpix,32,R,G,B,true);
 80a0c58:	2301      	movs	r3, #1
 80a0c5a:	4849      	ldr	r0, [pc, #292]	; (80a0d80 <_Z6lettercihhhb+0x4f4>)
 80a0c5c:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c60:	9700      	str	r7, [sp, #0]
 80a0c62:	4613      	mov	r3, r2
 80a0c64:	2220      	movs	r2, #32
 80a0c66:	e733      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode8Cond(63,inpix+32,8,R,G,B,true);
 80a0c68:	2401      	movs	r4, #1
 80a0c6a:	4613      	mov	r3, r2
 80a0c6c:	203f      	movs	r0, #63	; 0x3f
 80a0c6e:	2208      	movs	r2, #8
 80a0c70:	3120      	adds	r1, #32
 80a0c72:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0c76:	9700      	str	r7, [sp, #0]
 80a0c78:	f7ff fc9a 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        encode32Cond(1077887039,inpix,32,R,G,B,true);
 80a0c7c:	4633      	mov	r3, r6
 80a0c7e:	2220      	movs	r2, #32
 80a0c80:	4629      	mov	r1, r5
 80a0c82:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0c86:	483f      	ldr	r0, [pc, #252]	; (80a0d84 <_Z6lettercihhhb+0x4f8>)
 80a0c88:	9700      	str	r7, [sp, #0]
 80a0c8a:	e78d      	b.n	80a0ba8 <_Z6lettercihhhb+0x31c>
        encode32Cond(7569152,inpix,24,R,G,B,true);
 80a0c8c:	2301      	movs	r3, #1
 80a0c8e:	483e      	ldr	r0, [pc, #248]	; (80a0d88 <_Z6lettercihhhb+0x4fc>)
 80a0c90:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c94:	9700      	str	r7, [sp, #0]
 80a0c96:	4613      	mov	r3, r2
 80a0c98:	2218      	movs	r2, #24
 80a0c9a:	e699      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode8Cond(1,inpix+32,8,R,G,B,true);
 80a0c9c:	2401      	movs	r4, #1
 80a0c9e:	4613      	mov	r3, r2
 80a0ca0:	4620      	mov	r0, r4
 80a0ca2:	2208      	movs	r2, #8
 80a0ca4:	3120      	adds	r1, #32
 80a0ca6:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0caa:	9700      	str	r7, [sp, #0]
 80a0cac:	f7ff fc80 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        encode32Cond(41681409,inpix,32,R,G,B,true);
 80a0cb0:	4633      	mov	r3, r6
 80a0cb2:	2220      	movs	r2, #32
 80a0cb4:	4629      	mov	r1, r5
 80a0cb6:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0cba:	4834      	ldr	r0, [pc, #208]	; (80a0d8c <_Z6lettercihhhb+0x500>)
 80a0cbc:	9700      	str	r7, [sp, #0]
 80a0cbe:	e773      	b.n	80a0ba8 <_Z6lettercihhhb+0x31c>
        encode32Cond(51196353,inpix,32,R,G,B,true);
 80a0cc0:	2301      	movs	r3, #1
 80a0cc2:	4833      	ldr	r0, [pc, #204]	; (80a0d90 <_Z6lettercihhhb+0x504>)
 80a0cc4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0cc8:	9700      	str	r7, [sp, #0]
 80a0cca:	4613      	mov	r3, r2
 80a0ccc:	2220      	movs	r2, #32
 80a0cce:	e6ff      	b.n	80a0ad0 <_Z6lettercihhhb+0x244>
        encode32Cond(16767,inpix,16,R,G,B,true);
 80a0cd0:	2301      	movs	r3, #1
 80a0cd2:	f244 107f 	movw	r0, #16767	; 0x417f
 80a0cd6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0cda:	9700      	str	r7, [sp, #0]
 80a0cdc:	4613      	mov	r3, r2
 80a0cde:	2210      	movs	r2, #16
 80a0ce0:	e689      	b.n	80a09f6 <_Z6lettercihhhb+0x16a>
        encode32Cond(32577,inpix,16,R,G,B,true);
 80a0ce2:	2301      	movs	r3, #1
 80a0ce4:	f647 7041 	movw	r0, #32577	; 0x7f41
 80a0ce8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0cec:	9700      	str	r7, [sp, #0]
 80a0cee:	4613      	mov	r3, r2
 80a0cf0:	2210      	movs	r2, #16
 80a0cf2:	e680      	b.n	80a09f6 <_Z6lettercihhhb+0x16a>
        encode32Cond(7358512,inpix,24,R,G,B,true);
 80a0cf4:	2301      	movs	r3, #1
 80a0cf6:	4827      	ldr	r0, [pc, #156]	; (80a0d94 <_Z6lettercihhhb+0x508>)
 80a0cf8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0cfc:	9700      	str	r7, [sp, #0]
 80a0cfe:	4613      	mov	r3, r2
 80a0d00:	2218      	movs	r2, #24
 80a0d02:	e665      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(3164287,inpix,24,R,G,B,true);
 80a0d04:	2301      	movs	r3, #1
 80a0d06:	4824      	ldr	r0, [pc, #144]	; (80a0d98 <_Z6lettercihhhb+0x50c>)
 80a0d08:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0d0c:	9700      	str	r7, [sp, #0]
 80a0d0e:	4613      	mov	r3, r2
 80a0d10:	2218      	movs	r2, #24
 80a0d12:	e65d      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
 80a0d14:	00081c08 	.word	0x00081c08
 80a0d18:	00061860 	.word	0x00061860
 80a0d1c:	00221408 	.word	0x00221408
 80a0d20:	00141414 	.word	0x00141414
 80a0d24:	00081422 	.word	0x00081422
 80a0d28:	000f5903 	.word	0x000f5903
 80a0d2c:	7e09097e 	.word	0x7e09097e
 80a0d30:	3649497f 	.word	0x3649497f
 80a0d34:	2241413e 	.word	0x2241413e
 80a0d38:	3e41417f 	.word	0x3e41417f
 80a0d3c:	4149497f 	.word	0x4149497f
 80a0d40:	0109097f 	.word	0x0109097f
 80a0d44:	7849417f 	.word	0x7849417f
 80a0d48:	7f08087f 	.word	0x7f08087f
 80a0d4c:	00417f41 	.word	0x00417f41
 80a0d50:	013f4121 	.word	0x013f4121
 80a0d54:	7708087f 	.word	0x7708087f
 80a0d58:	4040407f 	.word	0x4040407f
 80a0d5c:	017e017f 	.word	0x017e017f
 80a0d60:	403e017f 	.word	0x403e017f
 80a0d64:	3e41413e 	.word	0x3e41413e
 80a0d68:	0609097f 	.word	0x0609097f
 80a0d6c:	1f21413e 	.word	0x1f21413e
 80a0d70:	3149497f 	.word	0x3149497f
 80a0d74:	31494946 	.word	0x31494946
 80a0d78:	017f0101 	.word	0x017f0101
 80a0d7c:	3f40403f 	.word	0x3f40403f
 80a0d80:	1f60601f 	.word	0x1f60601f
 80a0d84:	403f403f 	.word	0x403f403f
 80a0d88:	00737f00 	.word	0x00737f00
 80a0d8c:	027c0201 	.word	0x027c0201
 80a0d90:	030d31c1 	.word	0x030d31c1
 80a0d94:	00704830 	.word	0x00704830
 80a0d98:	0030487f 	.word	0x0030487f
        encode32Cond(4737072,inpix,24,R,G,B,true);
 80a0d9c:	2301      	movs	r3, #1
 80a0d9e:	4869      	ldr	r0, [pc, #420]	; (80a0f44 <_Z6lettercihhhb+0x6b8>)
 80a0da0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0da4:	9700      	str	r7, [sp, #0]
 80a0da6:	4613      	mov	r3, r2
 80a0da8:	2218      	movs	r2, #24
 80a0daa:	e611      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(8341552,inpix,24,R,G,B,true);
 80a0dac:	2301      	movs	r3, #1
 80a0dae:	4866      	ldr	r0, [pc, #408]	; (80a0f48 <_Z6lettercihhhb+0x6bc>)
 80a0db0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0db4:	9700      	str	r7, [sp, #0]
 80a0db6:	4613      	mov	r3, r2
 80a0db8:	2218      	movs	r2, #24
 80a0dba:	e609      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(5788728,inpix,24,R,G,B,true);
 80a0dbc:	2301      	movs	r3, #1
 80a0dbe:	4863      	ldr	r0, [pc, #396]	; (80a0f4c <_Z6lettercihhhb+0x6c0>)
 80a0dc0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0dc4:	9700      	str	r7, [sp, #0]
 80a0dc6:	4613      	mov	r3, r2
 80a0dc8:	2218      	movs	r2, #24
 80a0dca:	e601      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(657790,inpix,24,R,G,B,true);
 80a0dcc:	2301      	movs	r3, #1
 80a0dce:	4860      	ldr	r0, [pc, #384]	; (80a0f50 <_Z6lettercihhhb+0x6c4>)
 80a0dd0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0dd4:	9700      	str	r7, [sp, #0]
 80a0dd6:	4613      	mov	r3, r2
 80a0dd8:	2218      	movs	r2, #24
 80a0dda:	e5f9      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(8148040,inpix,24,R,G,B,true);
 80a0ddc:	2301      	movs	r3, #1
 80a0dde:	485d      	ldr	r0, [pc, #372]	; (80a0f54 <_Z6lettercihhhb+0x6c8>)
 80a0de0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0de4:	9700      	str	r7, [sp, #0]
 80a0de6:	4613      	mov	r3, r2
 80a0de8:	2218      	movs	r2, #24
 80a0dea:	e5f1      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(7342207,inpix,24,R,G,B,true);
 80a0dec:	2301      	movs	r3, #1
 80a0dee:	485a      	ldr	r0, [pc, #360]	; (80a0f58 <_Z6lettercihhhb+0x6cc>)
 80a0df0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0df4:	9700      	str	r7, [sp, #0]
 80a0df6:	4613      	mov	r3, r2
 80a0df8:	2218      	movs	r2, #24
 80a0dfa:	e5e9      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode8Cond(116,inpix,8,R,G,B,true);
 80a0dfc:	2401      	movs	r4, #1
 80a0dfe:	4613      	mov	r3, r2
 80a0e00:	2074      	movs	r0, #116	; 0x74
 80a0e02:	2208      	movs	r2, #8
 80a0e04:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0e08:	9700      	str	r7, [sp, #0]
 80a0e0a:	e5d6      	b.n	80a09ba <_Z6lettercihhhb+0x12e>
        encode32Cond(3817504,inpix,24,R,G,B,true);
 80a0e0c:	2301      	movs	r3, #1
 80a0e0e:	4853      	ldr	r0, [pc, #332]	; (80a0f5c <_Z6lettercihhhb+0x6d0>)
 80a0e10:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e14:	9700      	str	r7, [sp, #0]
 80a0e16:	4613      	mov	r3, r2
 80a0e18:	2218      	movs	r2, #24
 80a0e1a:	e5d9      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(6819967,inpix,24,R,G,B,true);
 80a0e1c:	2301      	movs	r3, #1
 80a0e1e:	4850      	ldr	r0, [pc, #320]	; (80a0f60 <_Z6lettercihhhb+0x6d4>)
 80a0e20:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e24:	9700      	str	r7, [sp, #0]
 80a0e26:	4613      	mov	r3, r2
 80a0e28:	2218      	movs	r2, #24
 80a0e2a:	e5d1      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode8Cond(112,inpix+32,8,R,G,B,true);
 80a0e2c:	2401      	movs	r4, #1
 80a0e2e:	4613      	mov	r3, r2
 80a0e30:	2070      	movs	r0, #112	; 0x70
 80a0e32:	2208      	movs	r2, #8
 80a0e34:	3120      	adds	r1, #32
 80a0e36:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0e3a:	9700      	str	r7, [sp, #0]
 80a0e3c:	f7ff fbb8 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        encode32Cond(141559920,inpix,32,R,G,B,true);
 80a0e40:	4633      	mov	r3, r6
 80a0e42:	2220      	movs	r2, #32
 80a0e44:	4629      	mov	r1, r5
 80a0e46:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0e4a:	4846      	ldr	r0, [pc, #280]	; (80a0f64 <_Z6lettercihhhb+0x6d8>)
 80a0e4c:	9700      	str	r7, [sp, #0]
 80a0e4e:	e6ab      	b.n	80a0ba8 <_Z6lettercihhhb+0x31c>
        encode32Cond(7342200,inpix,32,R,G,B,true);
 80a0e50:	2301      	movs	r3, #1
 80a0e52:	4845      	ldr	r0, [pc, #276]	; (80a0f68 <_Z6lettercihhhb+0x6dc>)
 80a0e54:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e58:	9700      	str	r7, [sp, #0]
 80a0e5a:	4613      	mov	r3, r2
 80a0e5c:	2220      	movs	r2, #32
 80a0e5e:	e5b7      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(3164208,inpix,24,R,G,B,true);
 80a0e60:	2301      	movs	r3, #1
 80a0e62:	4842      	ldr	r0, [pc, #264]	; (80a0f6c <_Z6lettercihhhb+0x6e0>)
 80a0e64:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e68:	9700      	str	r7, [sp, #0]
 80a0e6a:	4613      	mov	r3, r2
 80a0e6c:	2218      	movs	r2, #24
 80a0e6e:	e5af      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(529532,inpix,24,R,G,B,true);
 80a0e70:	2301      	movs	r3, #1
 80a0e72:	483f      	ldr	r0, [pc, #252]	; (80a0f70 <_Z6lettercihhhb+0x6e4>)
 80a0e74:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e78:	9700      	str	r7, [sp, #0]
 80a0e7a:	4613      	mov	r3, r2
 80a0e7c:	2218      	movs	r2, #24
 80a0e7e:	e5a7      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(8131592,inpix,24,R,G,B,true);
 80a0e80:	2301      	movs	r3, #1
 80a0e82:	483c      	ldr	r0, [pc, #240]	; (80a0f74 <_Z6lettercihhhb+0x6e8>)
 80a0e84:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e88:	9700      	str	r7, [sp, #0]
 80a0e8a:	4613      	mov	r3, r2
 80a0e8c:	2218      	movs	r2, #24
 80a0e8e:	e59f      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(1050744,inpix,24,R,G,B,true);
 80a0e90:	2301      	movs	r3, #1
 80a0e92:	4839      	ldr	r0, [pc, #228]	; (80a0f78 <_Z6lettercihhhb+0x6ec>)
 80a0e94:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e98:	9700      	str	r7, [sp, #0]
 80a0e9a:	4613      	mov	r3, r2
 80a0e9c:	2218      	movs	r2, #24
 80a0e9e:	e597      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(7623772,inpix,24,R,G,B,true);
 80a0ea0:	2301      	movs	r3, #1
 80a0ea2:	4836      	ldr	r0, [pc, #216]	; (80a0f7c <_Z6lettercihhhb+0x6f0>)
 80a0ea4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ea8:	9700      	str	r7, [sp, #0]
 80a0eaa:	4613      	mov	r3, r2
 80a0eac:	2218      	movs	r2, #24
 80a0eae:	e58f      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(556552,inpix,24,R,G,B,true);
 80a0eb0:	2301      	movs	r3, #1
 80a0eb2:	4833      	ldr	r0, [pc, #204]	; (80a0f80 <_Z6lettercihhhb+0x6f4>)
 80a0eb4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0eb8:	9700      	str	r7, [sp, #0]
 80a0eba:	4613      	mov	r3, r2
 80a0ebc:	2218      	movs	r2, #24
 80a0ebe:	e587      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(7880760,inpix,24,R,G,B,true);
 80a0ec0:	2301      	movs	r3, #1
 80a0ec2:	4830      	ldr	r0, [pc, #192]	; (80a0f84 <_Z6lettercihhhb+0x6f8>)
 80a0ec4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ec8:	9700      	str	r7, [sp, #0]
 80a0eca:	4613      	mov	r3, r2
 80a0ecc:	2218      	movs	r2, #24
 80a0ece:	e57f      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(3686456,inpix,24,R,G,B,true);
 80a0ed0:	2301      	movs	r3, #1
 80a0ed2:	482d      	ldr	r0, [pc, #180]	; (80a0f88 <_Z6lettercihhhb+0x6fc>)
 80a0ed4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ed8:	9700      	str	r7, [sp, #0]
 80a0eda:	4613      	mov	r3, r2
 80a0edc:	2218      	movs	r2, #24
 80a0ede:	e577      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode8Cond(56,inpix+32,8,R,G,B,true);
 80a0ee0:	2401      	movs	r4, #1
 80a0ee2:	4613      	mov	r3, r2
 80a0ee4:	2038      	movs	r0, #56	; 0x38
 80a0ee6:	2208      	movs	r2, #8
 80a0ee8:	3120      	adds	r1, #32
 80a0eea:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0eee:	9700      	str	r7, [sp, #0]
 80a0ef0:	f7ff fb5e 	bl	80a05b0 <_Z11encode8Condhiihhhb>
        encode32Cond(1081098296,inpix,32,R,G,B,true);
 80a0ef4:	4633      	mov	r3, r6
 80a0ef6:	2220      	movs	r2, #32
 80a0ef8:	4629      	mov	r1, r5
 80a0efa:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0efe:	4823      	ldr	r0, [pc, #140]	; (80a0f8c <_Z6lettercihhhb+0x700>)
 80a0f00:	9700      	str	r7, [sp, #0]
 80a0f02:	e651      	b.n	80a0ba8 <_Z6lettercihhhb+0x31c>
        encode32Cond(4730952,inpix,24,R,G,B,true);
 80a0f04:	2301      	movs	r3, #1
 80a0f06:	4822      	ldr	r0, [pc, #136]	; (80a0f90 <_Z6lettercihhhb+0x704>)
 80a0f08:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f0c:	9700      	str	r7, [sp, #0]
 80a0f0e:	4613      	mov	r3, r2
 80a0f10:	2218      	movs	r2, #24
 80a0f12:	e55d      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(3952716,inpix,24,R,G,B,true);
 80a0f14:	2301      	movs	r3, #1
 80a0f16:	481f      	ldr	r0, [pc, #124]	; (80a0f94 <_Z6lettercihhhb+0x708>)
 80a0f18:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f1c:	9700      	str	r7, [sp, #0]
 80a0f1e:	4613      	mov	r3, r2
 80a0f20:	2218      	movs	r2, #24
 80a0f22:	e555      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode32Cond(5002340,inpix,24,R,G,B,true);
 80a0f24:	2301      	movs	r3, #1
 80a0f26:	481c      	ldr	r0, [pc, #112]	; (80a0f98 <_Z6lettercihhhb+0x70c>)
 80a0f28:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f2c:	9700      	str	r7, [sp, #0]
 80a0f2e:	4613      	mov	r3, r2
 80a0f30:	2218      	movs	r2, #24
 80a0f32:	e54d      	b.n	80a09d0 <_Z6lettercihhhb+0x144>
        encode8Cond(127,inpix,8,R,G,B,true);
 80a0f34:	2401      	movs	r4, #1
 80a0f36:	4613      	mov	r3, r2
 80a0f38:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0f3c:	9700      	str	r7, [sp, #0]
 80a0f3e:	e531      	b.n	80a09a4 <_Z6lettercihhhb+0x118>
    if(charNumber >= 48 && charNumber <= 57){
 80a0f40:	2400      	movs	r4, #0
 80a0f42:	e4c3      	b.n	80a08cc <_Z6lettercihhhb+0x40>
 80a0f44:	00484830 	.word	0x00484830
 80a0f48:	007f4830 	.word	0x007f4830
 80a0f4c:	00585438 	.word	0x00585438
 80a0f50:	000a097e 	.word	0x000a097e
 80a0f54:	007c5448 	.word	0x007c5448
 80a0f58:	0070087f 	.word	0x0070087f
 80a0f5c:	003a4020 	.word	0x003a4020
 80a0f60:	0068107f 	.word	0x0068107f
 80a0f64:	08700870 	.word	0x08700870
 80a0f68:	00700878 	.word	0x00700878
 80a0f6c:	00304830 	.word	0x00304830
 80a0f70:	0008147c 	.word	0x0008147c
 80a0f74:	007c1408 	.word	0x007c1408
 80a0f78:	00100878 	.word	0x00100878
 80a0f7c:	0074545c 	.word	0x0074545c
 80a0f80:	00087e08 	.word	0x00087e08
 80a0f84:	00784038 	.word	0x00784038
 80a0f88:	00384038 	.word	0x00384038
 80a0f8c:	40704038 	.word	0x40704038
 80a0f90:	00483048 	.word	0x00483048
 80a0f94:	003c504c 	.word	0x003c504c
 80a0f98:	004c5464 	.word	0x004c5464

080a0f9c <_Z7strDispPKcihhhb>:
void strDisp(const char *wrd, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a0f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fa0:	4606      	mov	r6, r0
 80a0fa2:	460c      	mov	r4, r1
 80a0fa4:	4617      	mov	r7, r2
 80a0fa6:	4698      	mov	r8, r3
    for(loop=0;loop<strlen(wrd);loop++)
 80a0fa8:	2500      	movs	r5, #0
void strDisp(const char *wrd, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a0faa:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 80a0fae:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
    for(loop=0;loop<strlen(wrd);loop++)
 80a0fb2:	4630      	mov	r0, r6
 80a0fb4:	f005 fd71 	bl	80a6a9a <strlen>
 80a0fb8:	42a8      	cmp	r0, r5
 80a0fba:	d90d      	bls.n	80a0fd8 <_Z7strDispPKcihhhb+0x3c>
        pix = pix+8+(8*letter(wrd[loop],pix,R,G,B,small));
 80a0fbc:	4621      	mov	r1, r4
 80a0fbe:	5d70      	ldrb	r0, [r6, r5]
 80a0fc0:	4643      	mov	r3, r8
 80a0fc2:	463a      	mov	r2, r7
 80a0fc4:	e9cd ab00 	strd	sl, fp, [sp]
 80a0fc8:	f7ff fc60 	bl	80a088c <_Z6lettercihhhb>
 80a0fcc:	f104 0908 	add.w	r9, r4, #8
 80a0fd0:	eb09 04c0 	add.w	r4, r9, r0, lsl #3
    for(loop=0;loop<strlen(wrd);loop++)
 80a0fd4:	3501      	adds	r5, #1
 80a0fd6:	e7ec      	b.n	80a0fb2 <_Z7strDispPKcihhhb+0x16>
}
 80a0fd8:	b003      	add	sp, #12
 80a0fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a0fe0 <_Z12displayClockihhhi>:
void displayClock(int inpix, uint8_t R, uint8_t G, uint8_t B, int manctrl){
 80a0fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fe4:	b085      	sub	sp, #20
 80a0fe6:	461e      	mov	r6, r3
 80a0fe8:	460c      	mov	r4, r1
 80a0fea:	4615      	mov	r5, r2
 80a0fec:	4607      	mov	r7, r0
    int hr = Time.hourFormat12();
 80a0fee:	f003 fe5e 	bl	80a4cae <_ZN9TimeClass12hourFormat12Ev>
 80a0ff2:	9002      	str	r0, [sp, #8]
    int min = Time.minute();
 80a0ff4:	f003 fe64 	bl	80a4cc0 <_ZN9TimeClass6minuteEv>
    if(mprev != min || manctrl) {                                      //Check if time has changed from last pixel push
 80a0ff8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80a10f0 <_Z12displayClockihhhi+0x110>
    int min = Time.minute();
 80a0ffc:	4681      	mov	r9, r0
    if(mprev != min || manctrl) {                                      //Check if time has changed from last pixel push
 80a0ffe:	f8da 3000 	ldr.w	r3, [sl]
 80a1002:	4283      	cmp	r3, r0
 80a1004:	d102      	bne.n	80a100c <_Z12displayClockihhhi+0x2c>
 80a1006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a1008:	2b00      	cmp	r3, #0
 80a100a:	d059      	beq.n	80a10c0 <_Z12displayClockihhhi+0xe0>
        if(EEPROM.read(6) == 0){                            //If the brightness is above the threshold, post large numbers by default
 80a100c:	f004 f966 	bl	80a52dc <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80a1010:	2006      	movs	r0, #6
 80a1012:	f002 fea3 	bl	80a3d5c <HAL_EEPROM_Read>
 80a1016:	4680      	mov	r8, r0
 80a1018:	2800      	cmp	r0, #0
 80a101a:	d151      	bne.n	80a10c0 <_Z12displayClockihhhi+0xe0>
            mprev = Time.minute();                          //Save current time for next check
 80a101c:	f003 fe50 	bl	80a4cc0 <_ZN9TimeClass6minuteEv>
            screenArray[inpix+57] = (B/2)+(1000*(G/2))+(1000000*(R/2));                        //Display clock colons
 80a1020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a1024:	0873      	lsrs	r3, r6, #1
 80a1026:	086a      	lsrs	r2, r5, #1
 80a1028:	fb01 3202 	mla	r2, r1, r2, r3
 80a102c:	4931      	ldr	r1, [pc, #196]	; (80a10f4 <_Z12displayClockihhhi+0x114>)
 80a102e:	0863      	lsrs	r3, r4, #1
 80a1030:	fb01 2303 	mla	r3, r1, r3, r2
 80a1034:	4a30      	ldr	r2, [pc, #192]	; (80a10f8 <_Z12displayClockihhhi+0x118>)
 80a1036:	f107 0139 	add.w	r1, r7, #57	; 0x39
 80a103a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            screenArray[inpix+61] = (B/2)+(1000*(G/2))+(1000000*(R/2));
 80a103e:	f107 013d 	add.w	r1, r7, #61	; 0x3d
 80a1042:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            if(min/10 == 0) {                               //Check if minute number is less than 10
 80a1046:	f109 0309 	add.w	r3, r9, #9
 80a104a:	2b12      	cmp	r3, #18
            mprev = Time.minute();                          //Save current time for next check
 80a104c:	f8ca 0000 	str.w	r0, [sl]
                displayNumber(0,72+inpix,R,G,B,false);            //Display 0 digit if less than 10 in 10's place
 80a1050:	f107 0148 	add.w	r1, r7, #72	; 0x48
                displayNumber(min,112+inpix,R,G,B,false);
 80a1054:	f107 0b70 	add.w	fp, r7, #112	; 0x70
            if(min/10 == 0) {                               //Check if minute number is less than 10
 80a1058:	d835      	bhi.n	80a10c6 <_Z12displayClockihhhi+0xe6>
                displayNumber(0,72+inpix,R,G,B,false);            //Display 0 digit if less than 10 in 10's place
 80a105a:	462b      	mov	r3, r5
 80a105c:	4622      	mov	r2, r4
 80a105e:	4640      	mov	r0, r8
 80a1060:	e9cd 6800 	strd	r6, r8, [sp]
 80a1064:	f7ff fbd2 	bl	80a080c <_Z13displayNumberiihhhb>
                displayNumber(min,112+inpix,R,G,B,false);
 80a1068:	462b      	mov	r3, r5
 80a106a:	4622      	mov	r2, r4
 80a106c:	4659      	mov	r1, fp
 80a106e:	4648      	mov	r0, r9
 80a1070:	e9cd 6800 	strd	r6, r8, [sp]
            displayNumber(1,inpix-24,R*(hr/10),G*(hr/10),B*(hr/10),false);   //Display 1 if present in the hour
 80a1074:	f04f 090a 	mov.w	r9, #10
                displayNumber((min%10),112+inpix,R,G,B,false);
 80a1078:	f7ff fbc8 	bl	80a080c <_Z13displayNumberiihhhb>
            displayNumber(1,inpix-24,R*(hr/10),G*(hr/10),B*(hr/10),false);   //Display 1 if present in the hour
 80a107c:	9b02      	ldr	r3, [sp, #8]
 80a107e:	f04f 0a00 	mov.w	sl, #0
 80a1082:	fb93 f8f9 	sdiv	r8, r3, r9
 80a1086:	fa5f f188 	uxtb.w	r1, r8
 80a108a:	fb05 f301 	mul.w	r3, r5, r1
 80a108e:	fb04 f201 	mul.w	r2, r4, r1
 80a1092:	4371      	muls	r1, r6
 80a1094:	b2c9      	uxtb	r1, r1
 80a1096:	2001      	movs	r0, #1
 80a1098:	9100      	str	r1, [sp, #0]
 80a109a:	b2db      	uxtb	r3, r3
 80a109c:	b2d2      	uxtb	r2, r2
 80a109e:	f1a7 0118 	sub.w	r1, r7, #24
 80a10a2:	f8cd a004 	str.w	sl, [sp, #4]
 80a10a6:	f7ff fbb1 	bl	80a080c <_Z13displayNumberiihhhb>
            displayNumber(hr-(10*(hr/10)),inpix+16,R,G,B,false);        //Display other digit of hour
 80a10aa:	9802      	ldr	r0, [sp, #8]
 80a10ac:	462b      	mov	r3, r5
 80a10ae:	4622      	mov	r2, r4
 80a10b0:	fb09 0018 	mls	r0, r9, r8, r0
 80a10b4:	e9cd 6a00 	strd	r6, sl, [sp]
 80a10b8:	f107 0110 	add.w	r1, r7, #16
 80a10bc:	f7ff fba6 	bl	80a080c <_Z13displayNumberiihhhb>
} 
 80a10c0:	b005      	add	sp, #20
 80a10c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                displayNumber((min/10),72+inpix,R,G,B,false);
 80a10c6:	f04f 0a0a 	mov.w	sl, #10
 80a10ca:	fb99 f0fa 	sdiv	r0, r9, sl
 80a10ce:	462b      	mov	r3, r5
 80a10d0:	4622      	mov	r2, r4
 80a10d2:	e9cd 6800 	strd	r6, r8, [sp]
 80a10d6:	9003      	str	r0, [sp, #12]
 80a10d8:	f7ff fb98 	bl	80a080c <_Z13displayNumberiihhhb>
                displayNumber((min%10),112+inpix,R,G,B,false);
 80a10dc:	9803      	ldr	r0, [sp, #12]
 80a10de:	462b      	mov	r3, r5
 80a10e0:	4622      	mov	r2, r4
 80a10e2:	4659      	mov	r1, fp
 80a10e4:	fb0a 9010 	mls	r0, sl, r0, r9
 80a10e8:	e9cd 6800 	strd	r6, r8, [sp]
 80a10ec:	e7c2      	b.n	80a1074 <_Z12displayClockihhhi+0x94>
 80a10ee:	bf00      	nop
 80a10f0:	2000028c 	.word	0x2000028c
 80a10f4:	000f4240 	.word	0x000f4240
 80a10f8:	2000029c 	.word	0x2000029c

080a10fc <_Z11displayTempiihhhb>:
void displayTemp(int temperature, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a10fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int TC1 = temperature/10;
 80a1100:	260a      	movs	r6, #10
void displayTemp(int temperature, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a1102:	4605      	mov	r5, r0
    int TC1 = temperature/10;
 80a1104:	fb90 f0f6 	sdiv	r0, r0, r6
    int TC2 = temperature%10;
 80a1108:	fb06 5510 	mls	r5, r6, r0, r5
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a110c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
void displayTemp(int temperature, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a1110:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1114:	f8df c064 	ldr.w	ip, [pc, #100]	; 80a117c <_Z11displayTempiihhhb+0x80>
 80a1118:	fb06 9603 	mla	r6, r6, r3, r9
void displayTemp(int temperature, int inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a111c:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 80a1120:	460c      	mov	r4, r1
 80a1122:	4617      	mov	r7, r2
 80a1124:	4698      	mov	r8, r3
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1126:	fb0c 6602 	mla	r6, ip, r2, r6
 80a112a:	f8df a054 	ldr.w	sl, [pc, #84]	; 80a1180 <_Z11displayTempiihhhb+0x84>
    if(small){
 80a112e:	f1bb 0f00 	cmp.w	fp, #0
 80a1132:	d014      	beq.n	80a115e <_Z11displayTempiihhhb+0x62>
        displayNumber(TC1,inpix, R, G, B,true);
 80a1134:	f04f 0b01 	mov.w	fp, #1
 80a1138:	e9cd 9b00 	strd	r9, fp, [sp]
 80a113c:	f7ff fb66 	bl	80a080c <_Z13displayNumberiihhhb>
        displayNumber(TC2,inpix+32,R,G,B,true);
 80a1140:	f104 0120 	add.w	r1, r4, #32
 80a1144:	4643      	mov	r3, r8
 80a1146:	463a      	mov	r2, r7
 80a1148:	4628      	mov	r0, r5
 80a114a:	e9cd 9b00 	strd	r9, fp, [sp]
 80a114e:	f7ff fb5d 	bl	80a080c <_Z13displayNumberiihhhb>
        screenArray[inpix+64] = encodeColor(R,G,B);
 80a1152:	3440      	adds	r4, #64	; 0x40
        screenArray[inpix+80] = encodeColor(R,G,B);
 80a1154:	f84a 6024 	str.w	r6, [sl, r4, lsl #2]
}
 80a1158:	b003      	add	sp, #12
 80a115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        displayNumber(TC1,inpix, R, G, B,false);
 80a115e:	e9cd 9b00 	strd	r9, fp, [sp]
 80a1162:	f7ff fb53 	bl	80a080c <_Z13displayNumberiihhhb>
        displayNumber(TC2,inpix+40,R,G,B,false);
 80a1166:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80a116a:	4643      	mov	r3, r8
 80a116c:	463a      	mov	r2, r7
 80a116e:	4628      	mov	r0, r5
 80a1170:	e9cd 9b00 	strd	r9, fp, [sp]
 80a1174:	f7ff fb4a 	bl	80a080c <_Z13displayNumberiihhhb>
        screenArray[inpix+80] = encodeColor(R,G,B);
 80a1178:	3450      	adds	r4, #80	; 0x50
 80a117a:	e7eb      	b.n	80a1154 <_Z11displayTempiihhhb+0x58>
 80a117c:	000f4240 	.word	0x000f4240
 80a1180:	2000029c 	.word	0x2000029c

080a1184 <_Z12displayHumidiihhh>:
void displayHumid(int humidPercent, int inpix, uint8_t R, uint8_t G, uint8_t B){
 80a1184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(humidPercent == 100){
 80a1188:	2864      	cmp	r0, #100	; 0x64
void displayHumid(int humidPercent, int inpix, uint8_t R, uint8_t G, uint8_t B){
 80a118a:	4607      	mov	r7, r0
 80a118c:	460c      	mov	r4, r1
 80a118e:	4615      	mov	r5, r2
 80a1190:	461e      	mov	r6, r3
 80a1192:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if(humidPercent == 100){
 80a1196:	d125      	bne.n	80a11e4 <_Z12displayHumidiihhh+0x60>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a119c:	fb03 8306 	mla	r3, r3, r6, r8
 80a11a0:	4a1a      	ldr	r2, [pc, #104]	; (80a120c <_Z12displayHumidiihhh+0x88>)
 80a11a2:	fb02 3305 	mla	r3, r2, r5, r3
 80a11a6:	4a1a      	ldr	r2, [pc, #104]	; (80a1210 <_Z12displayHumidiihhh+0x8c>)
 80a11a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        for(HC1 = 0; HC1 < 7; HC1++){
 80a11ac:	2100      	movs	r1, #0
 80a11ae:	3101      	adds	r1, #1
 80a11b0:	2907      	cmp	r1, #7
            screenArray[inpix+HC1] = encodeColor(R,G,B);
 80a11b2:	f842 3b04 	str.w	r3, [r2], #4
        for(HC1 = 0; HC1 < 7; HC1++){
 80a11b6:	d1fa      	bne.n	80a11ae <_Z12displayHumidiihhh+0x2a>
        displayNumber(0,inpix+16, R, G, B,false);
 80a11b8:	2700      	movs	r7, #0
 80a11ba:	4633      	mov	r3, r6
 80a11bc:	462a      	mov	r2, r5
 80a11be:	4638      	mov	r0, r7
 80a11c0:	f104 0110 	add.w	r1, r4, #16
 80a11c4:	e9cd 8700 	strd	r8, r7, [sp]
 80a11c8:	f7ff fb20 	bl	80a080c <_Z13displayNumberiihhhb>
        displayNumber(0,inpix+56,R,G,B,false);
 80a11cc:	4633      	mov	r3, r6
 80a11ce:	462a      	mov	r2, r5
 80a11d0:	4638      	mov	r0, r7
 80a11d2:	e9cd 8700 	strd	r8, r7, [sp]
 80a11d6:	f104 0138 	add.w	r1, r4, #56	; 0x38
        displayNumber(HC2,inpix+40,R,G,B,false);
 80a11da:	f7ff fb17 	bl	80a080c <_Z13displayNumberiihhhb>
}
 80a11de:	b003      	add	sp, #12
 80a11e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int HC1 = humidPercent/10;
 80a11e4:	f04f 0a0a 	mov.w	sl, #10
        displayNumber(HC1,inpix, R, G, B,false);
 80a11e8:	f04f 0b00 	mov.w	fp, #0
    int HC1 = humidPercent/10;
 80a11ec:	fb90 f9fa 	sdiv	r9, r0, sl
        displayNumber(HC1,inpix, R, G, B,false);
 80a11f0:	e9cd 8b00 	strd	r8, fp, [sp]
 80a11f4:	4648      	mov	r0, r9
 80a11f6:	f7ff fb09 	bl	80a080c <_Z13displayNumberiihhhb>
        displayNumber(HC2,inpix+40,R,G,B,false);
 80a11fa:	4633      	mov	r3, r6
 80a11fc:	462a      	mov	r2, r5
 80a11fe:	fb0a 7019 	mls	r0, sl, r9, r7
 80a1202:	e9cd 8b00 	strd	r8, fp, [sp]
 80a1206:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80a120a:	e7e6      	b.n	80a11da <_Z12displayHumidiihhh+0x56>
 80a120c:	000f4240 	.word	0x000f4240
 80a1210:	2000029c 	.word	0x2000029c

080a1214 <_Z4dimgiihhh>:
void dimg(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B){                     //Code block for displaying a still weather animation when in dark mode
 80a1214:	b530      	push	{r4, r5, lr}
    if(cnum > 299 && cnum < 322)
 80a1216:	f5a0 7596 	sub.w	r5, r0, #300	; 0x12c
 80a121a:	2d15      	cmp	r5, #21
void dimg(int cnum, int inpix, uint8_t R, uint8_t G, uint8_t B){                     //Code block for displaying a still weather animation when in dark mode
 80a121c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    if(cnum > 299 && cnum < 322)
 80a1220:	d813      	bhi.n	80a124a <_Z4dimgiihhh+0x36>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1226:	fb00 4403 	mla	r4, r0, r3, r4
 80a122a:	4b26      	ldr	r3, [pc, #152]	; (80a12c4 <_Z4dimgiihhh+0xb0>)
        screenArray[inpix+14] = encodeColor(R,G,B);
 80a122c:	f101 000e 	add.w	r0, r1, #14
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1230:	fb03 4202 	mla	r2, r3, r2, r4
        screenArray[inpix+14] = encodeColor(R,G,B);
 80a1234:	4b24      	ldr	r3, [pc, #144]	; (80a12c8 <_Z4dimgiihhh+0xb4>)
 80a1236:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+28] = encodeColor(R,G,B);
 80a123a:	f101 001c 	add.w	r0, r1, #28
 80a123e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+46] = encodeColor(R,G,B);
 80a1242:	312e      	adds	r1, #46	; 0x2e
        screenArray[inpix+43] = encodeColor(R,G,B);   
 80a1244:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80a1248:	e03b      	b.n	80a12c2 <_Z4dimgiihhh+0xae>
    else if(cnum > 199 && cnum < 235)
 80a124a:	f1a0 05c8 	sub.w	r5, r0, #200	; 0xc8
 80a124e:	2d22      	cmp	r5, #34	; 0x22
 80a1250:	d815      	bhi.n	80a127e <_Z4dimgiihhh+0x6a>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1256:	fb00 4403 	mla	r4, r0, r3, r4
 80a125a:	4b1a      	ldr	r3, [pc, #104]	; (80a12c4 <_Z4dimgiihhh+0xb0>)
        screenArray[inpix+27] = encodeColor(R,G,B);
 80a125c:	f101 001b 	add.w	r0, r1, #27
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1260:	fb03 4202 	mla	r2, r3, r2, r4
        screenArray[inpix+27] = encodeColor(R,G,B);
 80a1264:	4b18      	ldr	r3, [pc, #96]	; (80a12c8 <_Z4dimgiihhh+0xb4>)
 80a1266:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+20] = encodeColor(R,G,B);
 80a126a:	f101 0014 	add.w	r0, r1, #20
 80a126e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+29] = encodeColor(R,G,B);
 80a1272:	f101 001d 	add.w	r0, r1, #29
 80a1276:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+22] = encodeColor(R,G,B);
 80a127a:	3116      	adds	r1, #22
 80a127c:	e7e2      	b.n	80a1244 <_Z4dimgiihhh+0x30>
    else if(cnum > 499 && cnum < 533)
 80a127e:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
 80a1282:	2d20      	cmp	r5, #32
 80a1284:	d819      	bhi.n	80a12ba <_Z4dimgiihhh+0xa6>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a128a:	fb00 4403 	mla	r4, r0, r3, r4
 80a128e:	4b0d      	ldr	r3, [pc, #52]	; (80a12c4 <_Z4dimgiihhh+0xb0>)
        screenArray[inpix+11] = encodeColor(R,G,B);
 80a1290:	f101 000b 	add.w	r0, r1, #11
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1294:	fb03 4202 	mla	r2, r3, r2, r4
        screenArray[inpix+11] = encodeColor(R,G,B);
 80a1298:	4b0b      	ldr	r3, [pc, #44]	; (80a12c8 <_Z4dimgiihhh+0xb4>)
 80a129a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+22] = encodeColor(R,G,B);
 80a129e:	f101 0016 	add.w	r0, r1, #22
 80a12a2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+28] = encodeColor(R,G,B);
 80a12a6:	f101 001c 	add.w	r0, r1, #28
 80a12aa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+37] = encodeColor(R,G,B);
 80a12ae:	f101 0025 	add.w	r0, r1, #37	; 0x25
 80a12b2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        screenArray[inpix+43] = encodeColor(R,G,B);   
 80a12b6:	312b      	adds	r1, #43	; 0x2b
 80a12b8:	e7c4      	b.n	80a1244 <_Z4dimgiihhh+0x30>
    else if(cnum > 599 && cnum < 630)                                    //Snow
 80a12ba:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 80a12be:	281d      	cmp	r0, #29
 80a12c0:	d9e1      	bls.n	80a1286 <_Z4dimgiihhh+0x72>
}
 80a12c2:	bd30      	pop	{r4, r5, pc}
 80a12c4:	000f4240 	.word	0x000f4240
 80a12c8:	2000029c 	.word	0x2000029c

080a12cc <_Z14checkForUpdateb>:
void checkForUpdate(bool manualCtrl){
 80a12cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
 80a12ce:	4d1b      	ldr	r5, [pc, #108]	; (80a133c <_Z14checkForUpdateb+0x70>)
void checkForUpdate(bool manualCtrl){
 80a12d0:	4606      	mov	r6, r0
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
 80a12d2:	682c      	ldr	r4, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a12d4:	f002 fd32 	bl	80a3d3c <HAL_Timer_Get_Milli_Seconds>
 80a12d8:	f504 2492 	add.w	r4, r4, #299008	; 0x49000
 80a12dc:	f504 7478 	add.w	r4, r4, #992	; 0x3e0
 80a12e0:	4284      	cmp	r4, r0
 80a12e2:	d20f      	bcs.n	80a1304 <_Z14checkForUpdateb+0x38>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a12e4:	4b16      	ldr	r3, [pc, #88]	; (80a1340 <_Z14checkForUpdateb+0x74>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a12e6:	4a17      	ldr	r2, [pc, #92]	; (80a1344 <_Z14checkForUpdateb+0x78>)
 80a12e8:	781b      	ldrb	r3, [r3, #0]
 80a12ea:	4917      	ldr	r1, [pc, #92]	; (80a1348 <_Z14checkForUpdateb+0x7c>)
 80a12ec:	f88d 3000 	strb.w	r3, [sp]
 80a12f0:	a802      	add	r0, sp, #8
 80a12f2:	233c      	movs	r3, #60	; 0x3c
 80a12f4:	f003 f90a 	bl	80a450c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a12f8:	9c03      	ldr	r4, [sp, #12]
 80a12fa:	b964      	cbnz	r4, 80a1316 <_Z14checkForUpdateb+0x4a>
 80a12fc:	f002 fd1e 	bl	80a3d3c <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
 80a1300:	6028      	str	r0, [r5, #0]
}                          
 80a1302:	e006      	b.n	80a1312 <_Z14checkForUpdateb+0x46>
 80a1304:	f002 fd1a 	bl	80a3d3c <HAL_Timer_Get_Milli_Seconds>
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
 80a1308:	682b      	ldr	r3, [r5, #0]
 80a130a:	4283      	cmp	r3, r0
 80a130c:	d8ea      	bhi.n	80a12e4 <_Z14checkForUpdateb+0x18>
 80a130e:	2e00      	cmp	r6, #0
 80a1310:	d1e8      	bne.n	80a12e4 <_Z14checkForUpdateb+0x18>
}                          
 80a1312:	b004      	add	sp, #16
 80a1314:	bd70      	pop	{r4, r5, r6, pc}
      if (--_M_use_count == 0)
 80a1316:	6863      	ldr	r3, [r4, #4]
 80a1318:	3b01      	subs	r3, #1
 80a131a:	6063      	str	r3, [r4, #4]
 80a131c:	2b00      	cmp	r3, #0
 80a131e:	d1ed      	bne.n	80a12fc <_Z14checkForUpdateb+0x30>
          _M_dispose();
 80a1320:	6823      	ldr	r3, [r4, #0]
 80a1322:	4620      	mov	r0, r4
 80a1324:	689b      	ldr	r3, [r3, #8]
 80a1326:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1328:	68a3      	ldr	r3, [r4, #8]
 80a132a:	3b01      	subs	r3, #1
 80a132c:	60a3      	str	r3, [r4, #8]
 80a132e:	2b00      	cmp	r3, #0
 80a1330:	d1e4      	bne.n	80a12fc <_Z14checkForUpdateb+0x30>
            _M_destroy();
 80a1332:	6823      	ldr	r3, [r4, #0]
 80a1334:	4620      	mov	r0, r4
 80a1336:	68db      	ldr	r3, [r3, #12]
 80a1338:	4798      	blx	r3
    }
 80a133a:	e7df      	b.n	80a12fc <_Z14checkForUpdateb+0x30>
 80a133c:	20000288 	.word	0x20000288
 80a1340:	20000254 	.word	0x20000254
 80a1344:	080a9000 	.word	0x080a9000
 80a1348:	080a901c 	.word	0x080a901c

080a134c <setup>:
void setup() {
 80a134c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    lastUpdate = 0;
 80a1350:	2400      	movs	r4, #0
 80a1352:	4b6d      	ldr	r3, [pc, #436]	; (80a1508 <setup+0x1bc>)
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
 80a1354:	2103      	movs	r1, #3
 80a1356:	4620      	mov	r0, r4
    lastUpdate = 0;
 80a1358:	601c      	str	r4, [r3, #0]
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
 80a135a:	f003 ff6b 	bl	80a5234 <pinMode>
    pinMode(D1, INPUT_PULLDOWN);
 80a135e:	2103      	movs	r1, #3
 80a1360:	2001      	movs	r0, #1
 80a1362:	f003 ff67 	bl	80a5234 <pinMode>
    pinMode(D2, INPUT_PULLDOWN);
 80a1366:	2103      	movs	r1, #3
 80a1368:	2002      	movs	r0, #2
 80a136a:	f003 ff63 	bl	80a5234 <pinMode>
    pinMode(D7,OUTPUT);
 80a136e:	2101      	movs	r1, #1
 80a1370:	2007      	movs	r0, #7
 80a1372:	f003 ff5f 	bl	80a5234 <pinMode>
    RGB.control(true);
 80a1376:	2001      	movs	r0, #1
 80a1378:	f003 fb9c 	bl	80a4ab4 <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 0);
 80a137c:	4622      	mov	r2, r4
 80a137e:	4621      	mov	r1, r4
 80a1380:	4620      	mov	r0, r4
 80a1382:	f003 fba7 	bl	80a4ad4 <_ZN8RGBClass5colorEiii>
    scan = 1;                                                                       //scans photoresistor for room brightness
 80a1386:	2301      	movs	r3, #1
    fdark = 2;
 80a1388:	2102      	movs	r1, #2
    scan = 1;                                                                       //scans photoresistor for room brightness
 80a138a:	4a60      	ldr	r2, [pc, #384]	; (80a150c <setup+0x1c0>)
    strip.begin();
 80a138c:	4860      	ldr	r0, [pc, #384]	; (80a1510 <setup+0x1c4>)
    scan = 1;                                                                       //scans photoresistor for room brightness
 80a138e:	6013      	str	r3, [r2, #0]
    wmode = 1;
 80a1390:	4a60      	ldr	r2, [pc, #384]	; (80a1514 <setup+0x1c8>)
 80a1392:	4e61      	ldr	r6, [pc, #388]	; (80a1518 <setup+0x1cc>)
 80a1394:	6013      	str	r3, [r2, #0]
    dmode = 1;
 80a1396:	4a61      	ldr	r2, [pc, #388]	; (80a151c <setup+0x1d0>)
    for(j=0; j < 512; j++){
 80a1398:	4d61      	ldr	r5, [pc, #388]	; (80a1520 <setup+0x1d4>)
    dmode = 1;
 80a139a:	6013      	str	r3, [r2, #0]
    fdark = 2;
 80a139c:	4a61      	ldr	r2, [pc, #388]	; (80a1524 <setup+0x1d8>)
 80a139e:	6011      	str	r1, [r2, #0]
    trueTone = true;
 80a13a0:	4a61      	ldr	r2, [pc, #388]	; (80a1528 <setup+0x1dc>)
 80a13a2:	7013      	strb	r3, [r2, #0]
    strip.begin();
 80a13a4:	f001 fb96 	bl	80a2ad4 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
 80a13a8:	4859      	ldr	r0, [pc, #356]	; (80a1510 <setup+0x1c4>)
 80a13aa:	f001 fbc9 	bl	80a2b40 <_ZN17Adafruit_NeoPixel4showEv>
    for(j=0; j < 512; j++){
 80a13ae:	4632      	mov	r2, r6
 80a13b0:	f240 2301 	movw	r3, #513	; 0x201
        screenArray[j] = 0;
 80a13b4:	4621      	mov	r1, r4
    for(j=0; j < 512; j++){
 80a13b6:	602c      	str	r4, [r5, #0]
 80a13b8:	3b01      	subs	r3, #1
 80a13ba:	d003      	beq.n	80a13c4 <setup+0x78>
 80a13bc:	2401      	movs	r4, #1
        screenArray[j] = 0;
 80a13be:	f842 1b04 	str.w	r1, [r2], #4
    for(j=0; j < 512; j++){
 80a13c2:	e7f9      	b.n	80a13b8 <setup+0x6c>
 80a13c4:	b114      	cbz	r4, 80a13cc <setup+0x80>
 80a13c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a13ca:	602b      	str	r3, [r5, #0]
    photo = analogRead(A4)/18;
 80a13cc:	200e      	movs	r0, #14
 80a13ce:	f003 ff6e 	bl	80a52ae <analogRead>
 80a13d2:	2312      	movs	r3, #18
 80a13d4:	fb90 f3f3 	sdiv	r3, r0, r3
 80a13d8:	4a54      	ldr	r2, [pc, #336]	; (80a152c <setup+0x1e0>)
    strDisp("Hello",56,photo,photo,photo,true);
 80a13da:	2138      	movs	r1, #56	; 0x38
    photo = analogRead(A4)/18;
 80a13dc:	6013      	str	r3, [r2, #0]
    strDisp("Hello",56,photo,photo,photo,true);
 80a13de:	2201      	movs	r2, #1
 80a13e0:	b2db      	uxtb	r3, r3
 80a13e2:	e9cd 3200 	strd	r3, r2, [sp]
 80a13e6:	4852      	ldr	r0, [pc, #328]	; (80a1530 <setup+0x1e4>)
 80a13e8:	461a      	mov	r2, r3
 80a13ea:	f7ff fdd7 	bl	80a0f9c <_Z7strDispPKcihhhb>
    for(i = 56; i < 200; i+=8){
 80a13ee:	2338      	movs	r3, #56	; 0x38
 80a13f0:	4c50      	ldr	r4, [pc, #320]	; (80a1534 <setup+0x1e8>)
        printScreen(screenArray,i,i+7);
 80a13f2:	4f49      	ldr	r7, [pc, #292]	; (80a1518 <setup+0x1cc>)
    for(i = 56; i < 200; i+=8){
 80a13f4:	6023      	str	r3, [r4, #0]
 80a13f6:	6821      	ldr	r1, [r4, #0]
 80a13f8:	29c7      	cmp	r1, #199	; 0xc7
 80a13fa:	dc0a      	bgt.n	80a1412 <setup+0xc6>
        printScreen(screenArray,i,i+7);
 80a13fc:	4638      	mov	r0, r7
 80a13fe:	1dca      	adds	r2, r1, #7
 80a1400:	f7fe ff22 	bl	80a0248 <_Z11printScreenPiii>
        delay(75);
 80a1404:	204b      	movs	r0, #75	; 0x4b
 80a1406:	f002 ff0f 	bl	80a4228 <delay>
    for(i = 56; i < 200; i+=8){
 80a140a:	6823      	ldr	r3, [r4, #0]
 80a140c:	3308      	adds	r3, #8
 80a140e:	6023      	str	r3, [r4, #0]
 80a1410:	e7f1      	b.n	80a13f6 <setup+0xaa>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a1412:	2000      	movs	r0, #0
 80a1414:	f002 fcba 	bl	80a3d8c <hal_timer_millis>
 80a1418:	f04f 0800 	mov.w	r8, #0
 80a141c:	4604      	mov	r4, r0
        while (_while() && !_condition()) {
 80a141e:	4f46      	ldr	r7, [pc, #280]	; (80a1538 <setup+0x1ec>)
        return hal_timer_millis(nullptr);
 80a1420:	2000      	movs	r0, #0
 80a1422:	f002 fcb3 	bl	80a3d8c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a1426:	1b00      	subs	r0, r0, r4
 80a1428:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 80a142c:	4287      	cmp	r7, r0
 80a142e:	eb78 0301 	sbcs.w	r3, r8, r1
 80a1432:	d305      	bcc.n	80a1440 <setup+0xf4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1434:	f002 fe38 	bl	80a40a8 <spark_cloud_flag_connected>
 80a1438:	b910      	cbnz	r0, 80a1440 <setup+0xf4>
            spark_process();
 80a143a:	f002 fe2d 	bl	80a4098 <spark_process>
        while (_while() && !_condition()) {
 80a143e:	e7ef      	b.n	80a1420 <setup+0xd4>
 80a1440:	f002 fe32 	bl	80a40a8 <spark_cloud_flag_connected>
    for(j=0; j < 256; j++){
 80a1444:	2300      	movs	r3, #0
 80a1446:	f240 1201 	movw	r2, #257	; 0x101
        screenArray[j] = 0;
 80a144a:	4619      	mov	r1, r3
    for(j=0; j < 256; j++){
 80a144c:	602b      	str	r3, [r5, #0]
 80a144e:	3a01      	subs	r2, #1
 80a1450:	d003      	beq.n	80a145a <setup+0x10e>
 80a1452:	2301      	movs	r3, #1
        screenArray[j] = 0;
 80a1454:	f846 1b04 	str.w	r1, [r6], #4
    for(j=0; j < 256; j++){
 80a1458:	e7f9      	b.n	80a144e <setup+0x102>
 80a145a:	b113      	cbz	r3, 80a1462 <setup+0x116>
 80a145c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80a1460:	602b      	str	r3, [r5, #0]
    EEPROM.write(1,16);
 80a1462:	f003 ff3b 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80a1466:	2110      	movs	r1, #16
 80a1468:	2001      	movs	r0, #1
 80a146a:	f002 fc7f 	bl	80a3d6c <HAL_EEPROM_Write>
    EEPROM.write(2,1);
 80a146e:	f003 ff35 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a1472:	2101      	movs	r1, #1
 80a1474:	2002      	movs	r0, #2
 80a1476:	f002 fc79 	bl	80a3d6c <HAL_EEPROM_Write>
    EEPROM.write(3,0);
 80a147a:	f003 ff2f 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a147e:	2100      	movs	r1, #0
 80a1480:	2003      	movs	r0, #3
 80a1482:	f002 fc73 	bl	80a3d6c <HAL_EEPROM_Write>
    EEPROM.write(4,0);
 80a1486:	f003 ff29 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a148a:	2100      	movs	r1, #0
 80a148c:	2004      	movs	r0, #4
 80a148e:	f002 fc6d 	bl	80a3d6c <HAL_EEPROM_Write>
    EEPROM.write(5,1);
 80a1492:	f003 ff23 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a1496:	2101      	movs	r1, #1
 80a1498:	2005      	movs	r0, #5
 80a149a:	f002 fc67 	bl	80a3d6c <HAL_EEPROM_Write>
    EEPROM.write(6,0);
 80a149e:	f003 ff1d 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a14a2:	2100      	movs	r1, #0
 80a14a4:	2006      	movs	r0, #6
 80a14a6:	f002 fc61 	bl	80a3d6c <HAL_EEPROM_Write>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a14aa:	2300      	movs	r3, #0
 80a14ac:	2202      	movs	r2, #2
 80a14ae:	491f      	ldr	r1, [pc, #124]	; (80a152c <setup+0x1e0>)
 80a14b0:	4822      	ldr	r0, [pc, #136]	; (80a153c <setup+0x1f0>)
 80a14b2:	f002 fde9 	bl	80a4088 <spark_variable>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a14b6:	2300      	movs	r3, #0
 80a14b8:	4921      	ldr	r1, [pc, #132]	; (80a1540 <setup+0x1f4>)
 80a14ba:	461a      	mov	r2, r3
 80a14bc:	e9cd 3300 	strd	r3, r3, [sp]
 80a14c0:	4820      	ldr	r0, [pc, #128]	; (80a1544 <setup+0x1f8>)
 80a14c2:	f002 fe01 	bl	80a40c8 <spark_subscribe>
    Time.zone(12-EEPROM.read(1));
 80a14c6:	f003 ff09 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80a14ca:	2001      	movs	r0, #1
 80a14cc:	f002 fc46 	bl	80a3d5c <HAL_EEPROM_Read>
 80a14d0:	f1c0 000c 	rsb	r0, r0, #12
 80a14d4:	f004 fd6e 	bl	80a5fb4 <__aeabi_i2f>
 80a14d8:	f003 fb9e 	bl	80a4c18 <_ZN9TimeClass4zoneEf>
    mprev=(Time.minute()-1);
 80a14dc:	f003 fbf0 	bl	80a4cc0 <_ZN9TimeClass6minuteEv>
 80a14e0:	4b19      	ldr	r3, [pc, #100]	; (80a1548 <setup+0x1fc>)
 80a14e2:	3801      	subs	r0, #1
 80a14e4:	6018      	str	r0, [r3, #0]
    hprev=(Time.hourFormat12()-1);
 80a14e6:	f003 fbe2 	bl	80a4cae <_ZN9TimeClass12hourFormat12Ev>
    bound = dnbound;
 80a14ea:	223c      	movs	r2, #60	; 0x3c
    hprev=(Time.hourFormat12()-1);
 80a14ec:	4b17      	ldr	r3, [pc, #92]	; (80a154c <setup+0x200>)
 80a14ee:	3801      	subs	r0, #1
 80a14f0:	6018      	str	r0, [r3, #0]
    bound = dnbound;
 80a14f2:	4b17      	ldr	r3, [pc, #92]	; (80a1550 <setup+0x204>)
    delay(50);
 80a14f4:	2032      	movs	r0, #50	; 0x32
    bound = dnbound;
 80a14f6:	601a      	str	r2, [r3, #0]
    delay(50);
 80a14f8:	f002 fe96 	bl	80a4228 <delay>
    checkForUpdate(true);
 80a14fc:	2001      	movs	r0, #1
}
 80a14fe:	b002      	add	sp, #8
 80a1500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    checkForUpdate(true);
 80a1504:	f7ff bee2 	b.w	80a12cc <_Z14checkForUpdateb>
 80a1508:	20000288 	.word	0x20000288
 80a150c:	20000298 	.word	0x20000298
 80a1510:	20000a9c 	.word	0x20000a9c
 80a1514:	20000ab4 	.word	0x20000ab4
 80a1518:	2000029c 	.word	0x2000029c
 80a151c:	20000268 	.word	0x20000268
 80a1520:	20000284 	.word	0x20000284
 80a1524:	2000026c 	.word	0x2000026c
 80a1528:	20000ab0 	.word	0x20000ab0
 80a152c:	20000290 	.word	0x20000290
 80a1530:	080a9002 	.word	0x080a9002
 80a1534:	2000027c 	.word	0x2000027c
 80a1538:	0001869f 	.word	0x0001869f
 80a153c:	080a9008 	.word	0x080a9008
 80a1540:	080a00b9 	.word	0x080a00b9
 80a1544:	080a900e 	.word	0x080a900e
 80a1548:	2000028c 	.word	0x2000028c
 80a154c:	20000274 	.word	0x20000274
 80a1550:	2000025c 	.word	0x2000025c

080a1554 <_Z9connDelayi>:
bool connDelay(int length){
 80a1554:	b538      	push	{r3, r4, r5, lr}
    for(count=0; count<(length/100); count++){
 80a1556:	2564      	movs	r5, #100	; 0x64
 80a1558:	2400      	movs	r4, #0
 80a155a:	fb90 f5f5 	sdiv	r5, r0, r5
 80a155e:	42a5      	cmp	r5, r4
    return false;
 80a1560:	f04f 0000 	mov.w	r0, #0
    for(count=0; count<(length/100); count++){
 80a1564:	dd03      	ble.n	80a156e <_Z9connDelayi+0x1a>
        if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW){
 80a1566:	f003 fe8f 	bl	80a5288 <digitalRead>
 80a156a:	b108      	cbz	r0, 80a1570 <_Z9connDelayi+0x1c>
            return true;
 80a156c:	2001      	movs	r0, #1
}
 80a156e:	bd38      	pop	{r3, r4, r5, pc}
        if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW){
 80a1570:	2001      	movs	r0, #1
 80a1572:	f003 fe89 	bl	80a5288 <digitalRead>
 80a1576:	2800      	cmp	r0, #0
 80a1578:	d1f8      	bne.n	80a156c <_Z9connDelayi+0x18>
 80a157a:	2002      	movs	r0, #2
 80a157c:	f003 fe84 	bl	80a5288 <digitalRead>
 80a1580:	2800      	cmp	r0, #0
 80a1582:	d1f3      	bne.n	80a156c <_Z9connDelayi+0x18>
            delay(100);
 80a1584:	2064      	movs	r0, #100	; 0x64
 80a1586:	f002 fe4f 	bl	80a4228 <delay>
    for(count=0; count<(length/100); count++){
 80a158a:	3401      	adds	r4, #1
 80a158c:	e7e7      	b.n	80a155e <_Z9connDelayi+0xa>
	...

080a1590 <_Z16animateConditioniiihhh>:
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
 80a1590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1594:	4699      	mov	r9, r3
    if(cnum > 199 && cnum < 235){
 80a1596:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
 80a159a:	b087      	sub	sp, #28
    if(cnum > 199 && cnum < 235){
 80a159c:	2b22      	cmp	r3, #34	; 0x22
void animateCondition(int cnum, int inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
 80a159e:	460c      	mov	r4, r1
 80a15a0:	4693      	mov	fp, r2
 80a15a2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80a15a6:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    if(cnum > 199 && cnum < 235){
 80a15aa:	f200 8083 	bhi.w	80a16b4 <_Z16animateConditioniiihhh+0x124>
        screenArray[inpix+27] = 0;
 80a15ae:	2300      	movs	r3, #0
 80a15b0:	4e89      	ldr	r6, [pc, #548]	; (80a17d8 <_Z16animateConditioniiihhh+0x248>)
        screenArray[inpix+29] = 0;
 80a15b2:	f101 071d 	add.w	r7, r1, #29
        screenArray[inpix+20] = 0;
 80a15b6:	f101 0814 	add.w	r8, r1, #20
        printScreen(screenArray,inpix+20,inpix+29);
 80a15ba:	4630      	mov	r0, r6
        screenArray[inpix+27] = 0;
 80a15bc:	f101 0a1b 	add.w	sl, r1, #27
        printScreen(screenArray,inpix+20,inpix+29);
 80a15c0:	463a      	mov	r2, r7
 80a15c2:	4641      	mov	r1, r8
        screenArray[inpix+22] = 0;
 80a15c4:	3416      	adds	r4, #22
        screenArray[inpix+27] = 0;
 80a15c6:	f846 302a 	str.w	r3, [r6, sl, lsl #2]
        screenArray[inpix+20] = 0;
 80a15ca:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
        screenArray[inpix+29] = 0;
 80a15ce:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
        screenArray[inpix+22] = 0;
 80a15d2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
        printScreen(screenArray,inpix+20,inpix+29);
 80a15d6:	f7fe fe37 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/4)) return;
 80a15da:	4658      	mov	r0, fp
 80a15dc:	f1bb 0f00 	cmp.w	fp, #0
 80a15e0:	bfb8      	it	lt
 80a15e2:	f10b 0003 	addlt.w	r0, fp, #3
 80a15e6:	1080      	asrs	r0, r0, #2
 80a15e8:	f7ff ffb4 	bl	80a1554 <_Z9connDelayi>
 80a15ec:	2800      	cmp	r0, #0
 80a15ee:	d15e      	bne.n	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a15f0:	4648      	mov	r0, r9
 80a15f2:	f004 f889 	bl	80a5708 <__aeabi_i2d>
 80a15f6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a15fa:	4b78      	ldr	r3, [pc, #480]	; (80a17dc <_Z16animateConditioniiihhh+0x24c>)
 80a15fc:	f004 fa18 	bl	80a5a30 <__aeabi_ddiv>
 80a1600:	f004 fbae 	bl	80a5d60 <__aeabi_d2uiz>
    int R_temp = R;
 80a1604:	fa5f f980 	uxtb.w	r9, r0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1608:	4875      	ldr	r0, [pc, #468]	; (80a17e0 <_Z16animateConditioniiihhh+0x250>)
 80a160a:	fb00 f309 	mul.w	r3, r0, r9
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a160e:	4628      	mov	r0, r5
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1610:	9300      	str	r3, [sp, #0]
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a1612:	f004 f879 	bl	80a5708 <__aeabi_i2d>
 80a1616:	a36e      	add	r3, pc, #440	; (adr r3, 80a17d0 <_Z16animateConditioniiihhh+0x240>)
 80a1618:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a161c:	f004 f8de 	bl	80a57dc <__aeabi_dmul>
 80a1620:	f004 fb9e 	bl	80a5d60 <__aeabi_d2uiz>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1628:	9a00      	ldr	r2, [sp, #0]
    int G_temp = G;
 80a162a:	b2c0      	uxtb	r0, r0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a162c:	fb03 2000 	mla	r0, r3, r0, r2
        printScreen(screenArray,inpix+27, inpix+27);
 80a1630:	4651      	mov	r1, sl
 80a1632:	4652      	mov	r2, sl
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a1634:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        printScreen(screenArray,inpix+27, inpix+27);
 80a1638:	4867      	ldr	r0, [pc, #412]	; (80a17d8 <_Z16animateConditioniiihhh+0x248>)
 80a163a:	f7fe fe05 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
 80a163e:	eb0b 72db 	add.w	r2, fp, fp, lsr #31
 80a1642:	ea4f 0962 	mov.w	r9, r2, asr #1
 80a1646:	4648      	mov	r0, r9
 80a1648:	f7ff ff84 	bl	80a1554 <_Z9connDelayi>
 80a164c:	bb78      	cbnz	r0, 80a16ae <_Z16animateConditioniiihhh+0x11e>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1652:	9a00      	ldr	r2, [sp, #0]
        screenArray[inpix+20] = encodeColor(R/1.2,G*2,0);
 80a1654:	006d      	lsls	r5, r5, #1
    int G_temp = G;
 80a1656:	b2ed      	uxtb	r5, r5
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1658:	fb03 2505 	mla	r5, r3, r5, r2
        printScreen(screenArray,inpix+20, inpix+20);
 80a165c:	485e      	ldr	r0, [pc, #376]	; (80a17d8 <_Z16animateConditioniiihhh+0x248>)
 80a165e:	4642      	mov	r2, r8
 80a1660:	4641      	mov	r1, r8
        screenArray[inpix+20] = encodeColor(R/1.2,G*2,0);
 80a1662:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        printScreen(screenArray,inpix+20, inpix+20);
 80a1666:	f7fe fdef 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
 80a166a:	4648      	mov	r0, r9
 80a166c:	f7ff ff72 	bl	80a1554 <_Z9connDelayi>
 80a1670:	b9e8      	cbnz	r0, 80a16ae <_Z16animateConditioniiihhh+0x11e>
        printScreen(screenArray,inpix+29, inpix+29);
 80a1672:	4859      	ldr	r0, [pc, #356]	; (80a17d8 <_Z16animateConditioniiihhh+0x248>)
 80a1674:	463a      	mov	r2, r7
 80a1676:	4639      	mov	r1, r7
        screenArray[inpix+29] = encodeColor(R/1.2,G*2,0);
 80a1678:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
        printScreen(screenArray,inpix+29, inpix+29);
 80a167c:	f7fe fde4 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
 80a1680:	4648      	mov	r0, r9
 80a1682:	f7ff ff67 	bl	80a1554 <_Z9connDelayi>
 80a1686:	b990      	cbnz	r0, 80a16ae <_Z16animateConditioniiihhh+0x11e>
        printScreen(screenArray,inpix+22, inpix+22);
 80a1688:	4853      	ldr	r0, [pc, #332]	; (80a17d8 <_Z16animateConditioniiihhh+0x248>)
 80a168a:	4622      	mov	r2, r4
 80a168c:	4621      	mov	r1, r4
        screenArray[inpix+22] = encodeColor(R/1.2,G*2,0);
 80a168e:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        printScreen(screenArray,inpix+22, inpix+22);
 80a1692:	f7fe fdd9 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1696:	4658      	mov	r0, fp
 80a1698:	f7ff ff5c 	bl	80a1554 <_Z9connDelayi>
 80a169c:	b938      	cbnz	r0, 80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+27] = 0;
 80a169e:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        screenArray[inpix+20] = 0;
 80a16a2:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+29] = 0;
 80a16a6:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
        screenArray[inpix+22] = 0;
 80a16aa:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
}
 80a16ae:	b007      	add	sp, #28
 80a16b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(cnum > 299 && cnum < 322){
 80a16b4:	f5a0 7396 	sub.w	r3, r0, #300	; 0x12c
 80a16b8:	2b15      	cmp	r3, #21
 80a16ba:	f200 8093 	bhi.w	80a17e4 <_Z16animateConditioniiihhh+0x254>
        screenArray[inpix+14] = 0;
 80a16be:	f101 030e 	add.w	r3, r1, #14
 80a16c2:	9300      	str	r3, [sp, #0]
 80a16c4:	2300      	movs	r3, #0
 80a16c6:	4e44      	ldr	r6, [pc, #272]	; (80a17d8 <_Z16animateConditioniiihhh+0x248>)
 80a16c8:	f101 020e 	add.w	r2, r1, #14
 80a16cc:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
        screenArray[inpix+46] = 0;
 80a16d0:	f101 072e 	add.w	r7, r1, #46	; 0x2e
        screenArray[inpix+28] = 0;
 80a16d4:	f101 021c 	add.w	r2, r1, #28
 80a16d8:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
        screenArray[inpix+46] = 0;
 80a16dc:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a16e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a16e4:	fb03 8505 	mla	r5, r3, r5, r8
        screenArray[inpix+11] = encodeColor(0,G,B);
 80a16e8:	f101 090b 	add.w	r9, r1, #11
        printScreen(screenArray,inpix+11, inpix+46);
 80a16ec:	4630      	mov	r0, r6
        screenArray[inpix+28] = 0;
 80a16ee:	9201      	str	r2, [sp, #4]
        screenArray[inpix+29] = encodeColor(0,G,B);
 80a16f0:	f101 0a1d 	add.w	sl, r1, #29
        screenArray[inpix+43] = encodeColor(0,G,B);
 80a16f4:	f101 082b 	add.w	r8, r1, #43	; 0x2b
        printScreen(screenArray,inpix+11, inpix+46);
 80a16f8:	463a      	mov	r2, r7
 80a16fa:	4649      	mov	r1, r9
        screenArray[inpix+11] = encodeColor(0,G,B);
 80a16fc:	f846 5029 	str.w	r5, [r6, r9, lsl #2]
        screenArray[inpix+29] = encodeColor(0,G,B);
 80a1700:	f846 502a 	str.w	r5, [r6, sl, lsl #2]
        screenArray[inpix+43] = encodeColor(0,G,B);
 80a1704:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1708:	f7fe fd9e 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a170c:	4658      	mov	r0, fp
 80a170e:	f7ff ff21 	bl	80a1554 <_Z9connDelayi>
 80a1712:	2800      	cmp	r0, #0
 80a1714:	d1cb      	bne.n	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+11] = 0;
 80a1716:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        screenArray[inpix+12] = encodeColor(0,G,B);
 80a171a:	f104 030c 	add.w	r3, r4, #12
        screenArray[inpix+29] = 0;
 80a171e:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1722:	463a      	mov	r2, r7
        screenArray[inpix+43] = 0;
 80a1724:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1728:	4649      	mov	r1, r9
 80a172a:	4630      	mov	r0, r6
        screenArray[inpix+30] = encodeColor(0,G,B);
 80a172c:	f104 0a1e 	add.w	sl, r4, #30
        screenArray[inpix+44] = encodeColor(0,G,B);
 80a1730:	f104 082c 	add.w	r8, r4, #44	; 0x2c
        screenArray[inpix+12] = encodeColor(0,G,B);
 80a1734:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
 80a1738:	9302      	str	r3, [sp, #8]
        screenArray[inpix+30] = encodeColor(0,G,B);
 80a173a:	f846 502a 	str.w	r5, [r6, sl, lsl #2]
        screenArray[inpix+44] = encodeColor(0,G,B);
 80a173e:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1742:	f7fe fd81 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1746:	4658      	mov	r0, fp
 80a1748:	f7ff ff04 	bl	80a1554 <_Z9connDelayi>
 80a174c:	2800      	cmp	r0, #0
 80a174e:	d1ae      	bne.n	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+12] = 0;
 80a1750:	9b02      	ldr	r3, [sp, #8]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1752:	463a      	mov	r2, r7
        screenArray[inpix+12] = 0;
 80a1754:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1758:	4649      	mov	r1, r9
        screenArray[inpix+30] = 0;
 80a175a:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        screenArray[inpix+44] = 0;
 80a175e:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+13] = encodeColor(0,G,B);
 80a1762:	f104 0a0d 	add.w	sl, r4, #13
        printScreen(screenArray,inpix+11, inpix+46);
 80a1766:	4630      	mov	r0, r6
        screenArray[inpix+27] = encodeColor(0,G,B);
 80a1768:	f104 081b 	add.w	r8, r4, #27
        screenArray[inpix+45] = encodeColor(0,G,B);
 80a176c:	342d      	adds	r4, #45	; 0x2d
        screenArray[inpix+13] = encodeColor(0,G,B);
 80a176e:	f846 502a 	str.w	r5, [r6, sl, lsl #2]
        screenArray[inpix+27] = encodeColor(0,G,B);
 80a1772:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        screenArray[inpix+45] = encodeColor(0,G,B);
 80a1776:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a177a:	f7fe fd65 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a177e:	4658      	mov	r0, fp
 80a1780:	f7ff fee8 	bl	80a1554 <_Z9connDelayi>
 80a1784:	2800      	cmp	r0, #0
 80a1786:	d192      	bne.n	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+14] = encodeColor(0,G,B);
 80a1788:	9b00      	ldr	r3, [sp, #0]
        screenArray[inpix+13] = 0;
 80a178a:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        screenArray[inpix+27] = 0;
 80a178e:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+45] = 0;
 80a1792:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        screenArray[inpix+14] = encodeColor(0,G,B);
 80a1796:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+28] = encodeColor(0,G,B);
 80a179a:	9b01      	ldr	r3, [sp, #4]
        printScreen(screenArray,inpix+11, inpix+46);
 80a179c:	4630      	mov	r0, r6
 80a179e:	463a      	mov	r2, r7
 80a17a0:	4649      	mov	r1, r9
        screenArray[inpix+28] = encodeColor(0,G,B);
 80a17a2:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+46] = encodeColor(0,G,B);
 80a17a6:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a17aa:	f7fe fd4d 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a17ae:	4658      	mov	r0, fp
 80a17b0:	f7ff fed0 	bl	80a1554 <_Z9connDelayi>
 80a17b4:	2800      	cmp	r0, #0
 80a17b6:	f47f af7a 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+14] = 0;
 80a17ba:	9b00      	ldr	r3, [sp, #0]
 80a17bc:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+28] = 0;
 80a17c0:	9b01      	ldr	r3, [sp, #4]
 80a17c2:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+46] = 0;
 80a17c6:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 80a17ca:	e770      	b.n	80a16ae <_Z16animateConditioniiihhh+0x11e>
 80a17cc:	f3af 8000 	nop.w
 80a17d0:	33333333 	.word	0x33333333
 80a17d4:	40033333 	.word	0x40033333
 80a17d8:	2000029c 	.word	0x2000029c
 80a17dc:	3ff33333 	.word	0x3ff33333
 80a17e0:	000f4240 	.word	0x000f4240
    else if(cnum > 499 && cnum < 533){
 80a17e4:	f5a0 73fa 	sub.w	r3, r0, #500	; 0x1f4
 80a17e8:	2b20      	cmp	r3, #32
 80a17ea:	f200 80cb 	bhi.w	80a1984 <_Z16animateConditioniiihhh+0x3f4>
        screenArray[inpix+11] = 0;
 80a17ee:	2300      	movs	r3, #0
 80a17f0:	4edf      	ldr	r6, [pc, #892]	; (80a1b70 <_Z16animateConditioniiihhh+0x5e0>)
        screenArray[inpix+22] = 0;
 80a17f2:	f101 0216 	add.w	r2, r1, #22
        screenArray[inpix+11] = 0;
 80a17f6:	f101 0a0b 	add.w	sl, r1, #11
 80a17fa:	f846 302a 	str.w	r3, [r6, sl, lsl #2]
        screenArray[inpix+22] = 0;
 80a17fe:	9200      	str	r2, [sp, #0]
 80a1800:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
        screenArray[inpix+28] = 0;
 80a1804:	f101 021c 	add.w	r2, r1, #28
 80a1808:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80a180c:	9201      	str	r2, [sp, #4]
        screenArray[inpix+37] = 0;
 80a180e:	f101 0225 	add.w	r2, r1, #37	; 0x25
 80a1812:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80a1816:	9202      	str	r2, [sp, #8]
        screenArray[inpix+43] = 0;
 80a1818:	f101 022b 	add.w	r2, r1, #43	; 0x2b
 80a181c:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
    int G_temp = G;
 80a1820:	2303      	movs	r3, #3
 80a1822:	fbb5 f5f3 	udiv	r5, r5, r3
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a182a:	fb03 8505 	mla	r5, r3, r5, r8
        screenArray[inpix+12] = encodeColor(0,G/3,B);
 80a182e:	f101 090c 	add.w	r9, r1, #12
        screenArray[inpix+19] = encodeColor(0,G/3,B);
 80a1832:	f101 0313 	add.w	r3, r1, #19
        screenArray[inpix+12] = encodeColor(0,G/3,B);
 80a1836:	f846 5029 	str.w	r5, [r6, r9, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a183a:	4630      	mov	r0, r6
        screenArray[inpix+19] = encodeColor(0,G/3,B);
 80a183c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+43] = 0;
 80a1840:	9203      	str	r2, [sp, #12]
        screenArray[inpix+29] = encodeColor(0,G/3,B);
 80a1842:	f101 031d 	add.w	r3, r1, #29
        printScreen(screenArray,inpix+11, inpix+46);
 80a1846:	f101 022e 	add.w	r2, r1, #46	; 0x2e
        screenArray[inpix+38] = encodeColor(0,G/3,B);
 80a184a:	f101 0826 	add.w	r8, r1, #38	; 0x26
        screenArray[inpix+44] = encodeColor(0,G/3,B);
 80a184e:	f101 072c 	add.w	r7, r1, #44	; 0x2c
        printScreen(screenArray,inpix+11, inpix+46);
 80a1852:	4651      	mov	r1, sl
        screenArray[inpix+29] = encodeColor(0,G/3,B);
 80a1854:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
 80a1858:	9305      	str	r3, [sp, #20]
        screenArray[inpix+38] = encodeColor(0,G/3,B);
 80a185a:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a185e:	9204      	str	r2, [sp, #16]
        screenArray[inpix+44] = encodeColor(0,G/3,B);
 80a1860:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1864:	f7fe fcf0 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1868:	4658      	mov	r0, fp
 80a186a:	f7ff fe73 	bl	80a1554 <_Z9connDelayi>
 80a186e:	2800      	cmp	r0, #0
 80a1870:	f47f af1d 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+19] = 0;
 80a1874:	f104 0313 	add.w	r3, r4, #19
        screenArray[inpix+12] = 0;
 80a1878:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        screenArray[inpix+19] = 0;
 80a187c:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+29] = 0;
 80a1880:	9b05      	ldr	r3, [sp, #20]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1882:	4651      	mov	r1, sl
        screenArray[inpix+29] = 0;
 80a1884:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+13] = encodeColor(0,G/3,B);
 80a1888:	f104 030d 	add.w	r3, r4, #13
        screenArray[inpix+38] = 0;
 80a188c:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1890:	9a04      	ldr	r2, [sp, #16]
        screenArray[inpix+44] = 0;
 80a1892:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
        screenArray[inpix+30] = encodeColor(0,G/3,B);
 80a1896:	f104 091e 	add.w	r9, r4, #30
        screenArray[inpix+13] = encodeColor(0,G/3,B);
 80a189a:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a189e:	4630      	mov	r0, r6
        screenArray[inpix+20] = encodeColor(0,G/3,B);
 80a18a0:	f104 0314 	add.w	r3, r4, #20
        screenArray[inpix+35] = encodeColor(0,G/3,B);
 80a18a4:	f104 0823 	add.w	r8, r4, #35	; 0x23
        screenArray[inpix+45] = encodeColor(0,G/3,B);
 80a18a8:	f104 072d 	add.w	r7, r4, #45	; 0x2d
        screenArray[inpix+20] = encodeColor(0,G/3,B);
 80a18ac:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
 80a18b0:	9305      	str	r3, [sp, #20]
        screenArray[inpix+30] = encodeColor(0,G/3,B);
 80a18b2:	f846 5029 	str.w	r5, [r6, r9, lsl #2]
        screenArray[inpix+35] = encodeColor(0,G/3,B);
 80a18b6:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        screenArray[inpix+45] = encodeColor(0,G/3,B);
 80a18ba:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a18be:	f7fe fcc3 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a18c2:	4658      	mov	r0, fp
 80a18c4:	f7ff fe46 	bl	80a1554 <_Z9connDelayi>
 80a18c8:	2800      	cmp	r0, #0
 80a18ca:	f47f aef0 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+13] = 0;
 80a18ce:	f104 030d 	add.w	r3, r4, #13
 80a18d2:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+20] = 0;
 80a18d6:	9b05      	ldr	r3, [sp, #20]
        screenArray[inpix+46] = encodeColor(0,G/3,B);
 80a18d8:	9a04      	ldr	r2, [sp, #16]
        screenArray[inpix+20] = 0;
 80a18da:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a18de:	4651      	mov	r1, sl
        screenArray[inpix+30] = 0;
 80a18e0:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        screenArray[inpix+35] = 0;
 80a18e4:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+14] = encodeColor(0,G/3,B);
 80a18e8:	f104 090e 	add.w	r9, r4, #14
        screenArray[inpix+45] = 0;
 80a18ec:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
        screenArray[inpix+21] = encodeColor(0,G/3,B);
 80a18f0:	f104 0815 	add.w	r8, r4, #21
        printScreen(screenArray,inpix+11, inpix+46);
 80a18f4:	4630      	mov	r0, r6
        screenArray[inpix+27] = encodeColor(0,G/3,B);
 80a18f6:	f104 071b 	add.w	r7, r4, #27
        screenArray[inpix+36] = encodeColor(0,G/3,B);
 80a18fa:	3424      	adds	r4, #36	; 0x24
        screenArray[inpix+14] = encodeColor(0,G/3,B);
 80a18fc:	f846 5029 	str.w	r5, [r6, r9, lsl #2]
        screenArray[inpix+21] = encodeColor(0,G/3,B);
 80a1900:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        screenArray[inpix+27] = encodeColor(0,G/3,B);
 80a1904:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
        screenArray[inpix+36] = encodeColor(0,G/3,B);
 80a1908:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        screenArray[inpix+46] = encodeColor(0,G/3,B);
 80a190c:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1910:	f7fe fc9a 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1914:	4658      	mov	r0, fp
 80a1916:	f7ff fe1d 	bl	80a1554 <_Z9connDelayi>
 80a191a:	2800      	cmp	r0, #0
 80a191c:	f47f aec7 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+22] = encodeColor(0,G/3,B);
 80a1920:	9b00      	ldr	r3, [sp, #0]
        screenArray[inpix+46] = 0;
 80a1922:	9a04      	ldr	r2, [sp, #16]
        screenArray[inpix+14] = 0;
 80a1924:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        screenArray[inpix+21] = 0;
 80a1928:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+27] = 0;
 80a192c:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
        screenArray[inpix+36] = 0;
 80a1930:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        screenArray[inpix+46] = 0;
 80a1934:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
        screenArray[inpix+11] = encodeColor(0,G/3,B);
 80a1938:	f846 502a 	str.w	r5, [r6, sl, lsl #2]
        screenArray[inpix+22] = encodeColor(0,G/3,B);
 80a193c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+28] = encodeColor(0,G/3,B);
 80a1940:	9b01      	ldr	r3, [sp, #4]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1942:	4630      	mov	r0, r6
        screenArray[inpix+28] = encodeColor(0,G/3,B);
 80a1944:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+37] = encodeColor(0,G/3,B);
 80a1948:	9b02      	ldr	r3, [sp, #8]
        printScreen(screenArray,inpix+11, inpix+46);
 80a194a:	4651      	mov	r1, sl
        screenArray[inpix+37] = encodeColor(0,G/3,B);
 80a194c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+43] = encodeColor(0,G/3,B);
 80a1950:	9b03      	ldr	r3, [sp, #12]
 80a1952:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1956:	f7fe fc77 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a195a:	4658      	mov	r0, fp
 80a195c:	f7ff fdfa 	bl	80a1554 <_Z9connDelayi>
 80a1960:	2800      	cmp	r0, #0
 80a1962:	f47f aea4 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+11] = 0;
 80a1966:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        screenArray[inpix+22] = 0;
 80a196a:	9b00      	ldr	r3, [sp, #0]
 80a196c:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+28] = 0;
 80a1970:	9b01      	ldr	r3, [sp, #4]
 80a1972:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+37] = 0;
 80a1976:	9b02      	ldr	r3, [sp, #8]
 80a1978:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+43] = 0;
 80a197c:	9b03      	ldr	r3, [sp, #12]
 80a197e:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
 80a1982:	e694      	b.n	80a16ae <_Z16animateConditioniiihhh+0x11e>
    else if(cnum > 599 && cnum < 630){
 80a1984:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 80a1988:	281d      	cmp	r0, #29
 80a198a:	f200 80e3 	bhi.w	80a1b54 <_Z16animateConditioniiihhh+0x5c4>
        screenArray[inpix+11] = 0;
 80a198e:	2300      	movs	r3, #0
 80a1990:	4e77      	ldr	r6, [pc, #476]	; (80a1b70 <_Z16animateConditioniiihhh+0x5e0>)
        screenArray[inpix+22] = 0;
 80a1992:	f101 0216 	add.w	r2, r1, #22
        screenArray[inpix+11] = 0;
 80a1996:	f101 070b 	add.w	r7, r1, #11
 80a199a:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
        screenArray[inpix+22] = 0;
 80a199e:	9200      	str	r2, [sp, #0]
 80a19a0:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
        screenArray[inpix+28] = 0;
 80a19a4:	f101 021c 	add.w	r2, r1, #28
 80a19a8:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80a19ac:	9201      	str	r2, [sp, #4]
        screenArray[inpix+37] = 0;
 80a19ae:	f101 0225 	add.w	r2, r1, #37	; 0x25
 80a19b2:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80a19b6:	9202      	str	r2, [sp, #8]
        screenArray[inpix+43] = 0;
 80a19b8:	f101 022b 	add.w	r2, r1, #43	; 0x2b
 80a19bc:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a19c0:	4628      	mov	r0, r5
 80a19c2:	f101 030c 	add.w	r3, r1, #12
        screenArray[inpix+43] = 0;
 80a19c6:	9203      	str	r2, [sp, #12]
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a19c8:	9304      	str	r3, [sp, #16]
 80a19ca:	f003 fe9d 	bl	80a5708 <__aeabi_i2d>
 80a19ce:	2200      	movs	r2, #0
 80a19d0:	4b68      	ldr	r3, [pc, #416]	; (80a1b74 <_Z16animateConditioniiihhh+0x5e4>)
 80a19d2:	f003 ff03 	bl	80a57dc <__aeabi_dmul>
 80a19d6:	f004 f9c3 	bl	80a5d60 <__aeabi_d2uiz>
    int G_temp = G;
 80a19da:	fa5f fa80 	uxtb.w	sl, r0
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a19de:	4640      	mov	r0, r8
 80a19e0:	f003 fe92 	bl	80a5708 <__aeabi_i2d>
 80a19e4:	a360      	add	r3, pc, #384	; (adr r3, 80a1b68 <_Z16animateConditioniiihhh+0x5d8>)
 80a19e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a19ea:	f003 fef7 	bl	80a57dc <__aeabi_dmul>
 80a19ee:	f004 f9b7 	bl	80a5d60 <__aeabi_d2uiz>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a19f2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80a19f6:	fb05 fa0a 	mul.w	sl, r5, sl
    int B_temp = B;
 80a19fa:	b2c5      	uxtb	r5, r0
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a19fc:	4648      	mov	r0, r9
 80a19fe:	f003 fe83 	bl	80a5708 <__aeabi_i2d>
 80a1a02:	2200      	movs	r2, #0
 80a1a04:	4b5b      	ldr	r3, [pc, #364]	; (80a1b74 <_Z16animateConditioniiihhh+0x5e4>)
 80a1a06:	f003 fee9 	bl	80a57dc <__aeabi_dmul>
 80a1a0a:	f004 f9a9 	bl	80a5d60 <__aeabi_d2uiz>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1a0e:	44aa      	add	sl, r5
    int R_temp = R;
 80a1a10:	b2c5      	uxtb	r5, r0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1a12:	4859      	ldr	r0, [pc, #356]	; (80a1b78 <_Z16animateConditioniiihhh+0x5e8>)
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a14:	f104 030c 	add.w	r3, r4, #12
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1a18:	fb00 a505 	mla	r5, r0, r5, sl
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a1c:	f104 022e 	add.w	r2, r4, #46	; 0x2e
        screenArray[inpix+12] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a20:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a24:	4630      	mov	r0, r6
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a26:	f104 0313 	add.w	r3, r4, #19
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a2a:	4639      	mov	r1, r7
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a2c:	f104 0a1d 	add.w	sl, r4, #29
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a30:	f104 0926 	add.w	r9, r4, #38	; 0x26
        screenArray[inpix+44] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a34:	f104 082c 	add.w	r8, r4, #44	; 0x2c
        screenArray[inpix+19] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a38:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
 80a1a3c:	9305      	str	r3, [sp, #20]
        screenArray[inpix+29] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a3e:	f846 502a 	str.w	r5, [r6, sl, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a42:	9204      	str	r2, [sp, #16]
        screenArray[inpix+38] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a44:	f846 5029 	str.w	r5, [r6, r9, lsl #2]
        screenArray[inpix+44] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a48:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a4c:	f7fe fbfc 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1a50:	4658      	mov	r0, fp
 80a1a52:	f7ff fd7f 	bl	80a1554 <_Z9connDelayi>
 80a1a56:	2800      	cmp	r0, #0
 80a1a58:	f47f ae29 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+12] = 0;
 80a1a5c:	f104 030c 	add.w	r3, r4, #12
 80a1a60:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+19] = 0;
 80a1a64:	9b05      	ldr	r3, [sp, #20]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a66:	4639      	mov	r1, r7
        screenArray[inpix+19] = 0;
 80a1a68:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a6c:	f104 030d 	add.w	r3, r4, #13
        screenArray[inpix+29] = 0;
 80a1a70:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a74:	9a04      	ldr	r2, [sp, #16]
        screenArray[inpix+38] = 0;
 80a1a76:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        screenArray[inpix+20] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a7a:	f104 0a14 	add.w	sl, r4, #20
        screenArray[inpix+44] = 0;
 80a1a7e:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+30] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a82:	f104 091e 	add.w	r9, r4, #30
        screenArray[inpix+13] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a86:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1a8a:	4630      	mov	r0, r6
        screenArray[inpix+45] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a8c:	f104 032d 	add.w	r3, r4, #45	; 0x2d
        screenArray[inpix+35] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a90:	f104 0823 	add.w	r8, r4, #35	; 0x23
        screenArray[inpix+20] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a94:	f846 502a 	str.w	r5, [r6, sl, lsl #2]
        screenArray[inpix+45] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a98:	9305      	str	r3, [sp, #20]
        screenArray[inpix+30] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a9a:	f846 5029 	str.w	r5, [r6, r9, lsl #2]
        screenArray[inpix+35] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1a9e:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        screenArray[inpix+45] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1aa2:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1aa6:	f7fe fbcf 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1aaa:	4658      	mov	r0, fp
 80a1aac:	f7ff fd52 	bl	80a1554 <_Z9connDelayi>
 80a1ab0:	2800      	cmp	r0, #0
 80a1ab2:	f47f adfc 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+13] = 0;
 80a1ab6:	f104 030d 	add.w	r3, r4, #13
 80a1aba:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+45] = 0;
 80a1abe:	9b05      	ldr	r3, [sp, #20]
        screenArray[inpix+46] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1ac0:	9a04      	ldr	r2, [sp, #16]
        screenArray[inpix+20] = 0;
 80a1ac2:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1ac6:	4639      	mov	r1, r7
        screenArray[inpix+30] = 0;
 80a1ac8:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        screenArray[inpix+14] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1acc:	f104 0a0e 	add.w	sl, r4, #14
        screenArray[inpix+35] = 0;
 80a1ad0:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+21] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1ad4:	f104 0915 	add.w	r9, r4, #21
        screenArray[inpix+45] = 0;
 80a1ad8:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
        screenArray[inpix+27] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1adc:	f104 081b 	add.w	r8, r4, #27
        printScreen(screenArray,inpix+11, inpix+46);
 80a1ae0:	4630      	mov	r0, r6
        screenArray[inpix+36] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1ae2:	3424      	adds	r4, #36	; 0x24
        screenArray[inpix+14] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1ae4:	f846 502a 	str.w	r5, [r6, sl, lsl #2]
        screenArray[inpix+21] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1ae8:	f846 5029 	str.w	r5, [r6, r9, lsl #2]
        screenArray[inpix+27] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1aec:	f846 5028 	str.w	r5, [r6, r8, lsl #2]
        screenArray[inpix+36] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1af0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        screenArray[inpix+46] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1af4:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1af8:	f7fe fba6 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1afc:	4658      	mov	r0, fp
 80a1afe:	f7ff fd29 	bl	80a1554 <_Z9connDelayi>
 80a1b02:	2800      	cmp	r0, #0
 80a1b04:	f47f add3 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+22] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b08:	9b00      	ldr	r3, [sp, #0]
        screenArray[inpix+46] = 0;
 80a1b0a:	9a04      	ldr	r2, [sp, #16]
        screenArray[inpix+14] = 0;
 80a1b0c:	f846 002a 	str.w	r0, [r6, sl, lsl #2]
        screenArray[inpix+21] = 0;
 80a1b10:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        screenArray[inpix+27] = 0;
 80a1b14:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
        screenArray[inpix+36] = 0;
 80a1b18:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        screenArray[inpix+46] = 0;
 80a1b1c:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
        screenArray[inpix+11] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b20:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
        screenArray[inpix+22] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b24:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+28] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b28:	9b01      	ldr	r3, [sp, #4]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1b2a:	4630      	mov	r0, r6
        screenArray[inpix+28] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b2c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+37] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b30:	9b02      	ldr	r3, [sp, #8]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1b32:	4639      	mov	r1, r7
        screenArray[inpix+37] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b34:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        screenArray[inpix+43] = encodeColor(1.5*R,1.5*G,1.8*B);
 80a1b38:	9b03      	ldr	r3, [sp, #12]
 80a1b3a:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
        printScreen(screenArray,inpix+11, inpix+46);
 80a1b3e:	f7fe fb83 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a1b42:	4658      	mov	r0, fp
 80a1b44:	f7ff fd06 	bl	80a1554 <_Z9connDelayi>
 80a1b48:	2800      	cmp	r0, #0
 80a1b4a:	f47f adb0 	bne.w	80a16ae <_Z16animateConditioniiihhh+0x11e>
        screenArray[inpix+11] = 0;
 80a1b4e:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 80a1b52:	e70a      	b.n	80a196a <_Z16animateConditioniiihhh+0x3da>
        if(connDelay(tmr*3)) return;
 80a1b54:	eb02 0042 	add.w	r0, r2, r2, lsl #1
}
 80a1b58:	b007      	add	sp, #28
 80a1b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if(connDelay(tmr*3)) return;
 80a1b5e:	f7ff bcf9 	b.w	80a1554 <_Z9connDelayi>
 80a1b62:	bf00      	nop
 80a1b64:	f3af 8000 	nop.w
 80a1b68:	cccccccd 	.word	0xcccccccd
 80a1b6c:	3ffccccc 	.word	0x3ffccccc
 80a1b70:	2000029c 	.word	0x2000029c
 80a1b74:	3ff80000 	.word	0x3ff80000
 80a1b78:	000f4240 	.word	0x000f4240

080a1b7c <_Z12isSensorDarkv>:
    if(analogRead(A4) < bound) {
 80a1b7c:	200e      	movs	r0, #14
bool isSensorDark(){
 80a1b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(analogRead(A4) < bound) {
 80a1b82:	f003 fb94 	bl	80a52ae <analogRead>
 80a1b86:	4b16      	ldr	r3, [pc, #88]	; (80a1be0 <_Z12isSensorDarkv+0x64>)
 80a1b88:	681a      	ldr	r2, [r3, #0]
 80a1b8a:	4290      	cmp	r0, r2
 80a1b8c:	da25      	bge.n	80a1bda <_Z12isSensorDarkv+0x5e>
        bound = upbound;
 80a1b8e:	22fa      	movs	r2, #250	; 0xfa
        scan = 1;
 80a1b90:	2501      	movs	r5, #1
        gclock = 0;
 80a1b92:	2400      	movs	r4, #0
        bound = upbound;
 80a1b94:	601a      	str	r2, [r3, #0]
        rclock = 1;
 80a1b96:	4e13      	ldr	r6, [pc, #76]	; (80a1be4 <_Z12isSensorDarkv+0x68>)
        scan = 1;
 80a1b98:	4b13      	ldr	r3, [pc, #76]	; (80a1be8 <_Z12isSensorDarkv+0x6c>)
        gclock = 0;
 80a1b9a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80a1bec <_Z12isSensorDarkv+0x70>
        bclock = 0;
 80a1b9e:	4f14      	ldr	r7, [pc, #80]	; (80a1bf0 <_Z12isSensorDarkv+0x74>)
        scan = 1;
 80a1ba0:	601d      	str	r5, [r3, #0]
        rclock = 1;
 80a1ba2:	6035      	str	r5, [r6, #0]
        gclock = 0;
 80a1ba4:	f8c8 4000 	str.w	r4, [r8]
        bclock = 0;
 80a1ba8:	603c      	str	r4, [r7, #0]
        if(EEPROM.read(5) == 2){
 80a1baa:	f003 fb97 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a1bae:	2005      	movs	r0, #5
 80a1bb0:	f002 f8d4 	bl	80a3d5c <HAL_EEPROM_Read>
 80a1bb4:	2802      	cmp	r0, #2
 80a1bb6:	d107      	bne.n	80a1bc8 <_Z12isSensorDarkv+0x4c>
            gclock = 1;
 80a1bb8:	f8c8 5000 	str.w	r5, [r8]
            rclock = 0;
 80a1bbc:	6034      	str	r4, [r6, #0]
        dmode = 1;
 80a1bbe:	2001      	movs	r0, #1
 80a1bc0:	4b0c      	ldr	r3, [pc, #48]	; (80a1bf4 <_Z12isSensorDarkv+0x78>)
 80a1bc2:	6018      	str	r0, [r3, #0]
}
 80a1bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(EEPROM.read(5) == 3){
 80a1bc8:	f003 fb88 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a1bcc:	2005      	movs	r0, #5
 80a1bce:	f002 f8c5 	bl	80a3d5c <HAL_EEPROM_Read>
 80a1bd2:	2803      	cmp	r0, #3
 80a1bd4:	d1f3      	bne.n	80a1bbe <_Z12isSensorDarkv+0x42>
            bclock = 1;
 80a1bd6:	603d      	str	r5, [r7, #0]
 80a1bd8:	e7f0      	b.n	80a1bbc <_Z12isSensorDarkv+0x40>
    return false;
 80a1bda:	2000      	movs	r0, #0
 80a1bdc:	e7f2      	b.n	80a1bc4 <_Z12isSensorDarkv+0x48>
 80a1bde:	bf00      	nop
 80a1be0:	2000025c 	.word	0x2000025c
 80a1be4:	20000294 	.word	0x20000294
 80a1be8:	20000298 	.word	0x20000298
 80a1bec:	20000270 	.word	0x20000270
 80a1bf0:	20000258 	.word	0x20000258
 80a1bf4:	20000268 	.word	0x20000268

080a1bf8 <_Z11weatherLoopiihhh>:
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
 80a1bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1bfc:	b08b      	sub	sp, #44	; 0x2c
 80a1bfe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80a1c02:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80a1c06:	4604      	mov	r4, r0
 80a1c08:	9302      	str	r3, [sp, #8]
    if(wmode == 1)                                                  //Outdoor Temperature
 80a1c0a:	4b8d      	ldr	r3, [pc, #564]	; (80a1e40 <_Z11weatherLoopiihhh+0x248>)
void weatherLoop(int inpix, int clockpix, uint8_t R, uint8_t G, uint8_t B){
 80a1c0c:	468b      	mov	fp, r1
    if(wmode == 1)                                                  //Outdoor Temperature
 80a1c0e:	681b      	ldr	r3, [r3, #0]
 80a1c10:	2b01      	cmp	r3, #1
 80a1c12:	f040 8111 	bne.w	80a1e38 <_Z11weatherLoopiihhh+0x240>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a1c16:	2500      	movs	r5, #0
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
 80a1c18:	4e8a      	ldr	r6, [pc, #552]	; (80a1e44 <_Z11weatherLoopiihhh+0x24c>)
 80a1c1a:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80a1e48 <_Z11weatherLoopiihhh+0x250>
 80a1c1e:	2719      	movs	r7, #25
 80a1c20:	6833      	ldr	r3, [r6, #0]
 80a1c22:	2200      	movs	r2, #0
 80a1c24:	436b      	muls	r3, r5
 80a1c26:	fb93 f3f7 	sdiv	r3, r3, r7
 80a1c2a:	e9cd 2200 	strd	r2, r2, [sp]
 80a1c2e:	b2db      	uxtb	r3, r3
 80a1c30:	4621      	mov	r1, r4
 80a1c32:	f8da 0000 	ldr.w	r0, [sl]
            printScreen(screenArray,inpix,inpix+88);
 80a1c36:	f104 0958 	add.w	r9, r4, #88	; 0x58
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
 80a1c3a:	f7ff fa5f 	bl	80a10fc <_Z11displayTempiihhhb>
            printScreen(screenArray,inpix,inpix+88);
 80a1c3e:	464a      	mov	r2, r9
 80a1c40:	4621      	mov	r1, r4
 80a1c42:	4882      	ldr	r0, [pc, #520]	; (80a1e4c <_Z11weatherLoopiihhh+0x254>)
 80a1c44:	f7fe fb00 	bl	80a0248 <_Z11printScreenPiii>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a1c48:	3501      	adds	r5, #1
            delay(10);                                               //Adjust this delay to change animation duration
 80a1c4a:	200a      	movs	r0, #10
 80a1c4c:	f002 faec 	bl	80a4228 <delay>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a1c50:	2d1a      	cmp	r5, #26
 80a1c52:	d1e4      	bne.n	80a1c1e <_Z11weatherLoopiihhh+0x26>
        connDelay(2500);
 80a1c54:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a1c58:	f7ff fc7c 	bl	80a1554 <_Z9connDelayi>
        if(isSensorDark()){
 80a1c5c:	f7ff ff8e 	bl	80a1b7c <_Z12isSensorDarkv>
 80a1c60:	9b03      	ldr	r3, [sp, #12]
 80a1c62:	4680      	mov	r8, r0
 80a1c64:	fb07 f603 	mul.w	r6, r7, r3
 80a1c68:	2800      	cmp	r0, #0
 80a1c6a:	d03e      	beq.n	80a1cea <_Z11weatherLoopiihhh+0xf2>
 80a1c6c:	46aa      	mov	sl, r5
 80a1c6e:	9b04      	ldr	r3, [sp, #16]
 80a1c70:	fb07 f803 	mul.w	r8, r7, r3
 80a1c74:	9b02      	ldr	r3, [sp, #8]
 80a1c76:	435f      	muls	r7, r3
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1c78:	2119      	movs	r1, #25
 80a1c7a:	fbb7 f2f1 	udiv	r2, r7, r1
 80a1c7e:	fbb6 f5f1 	udiv	r5, r6, r1
 80a1c82:	fbb8 f1f1 	udiv	r1, r8, r1
 80a1c86:	4872      	ldr	r0, [pc, #456]	; (80a1e50 <_Z11weatherLoopiihhh+0x258>)
 80a1c88:	4b72      	ldr	r3, [pc, #456]	; (80a1e54 <_Z11weatherLoopiihhh+0x25c>)
 80a1c8a:	6800      	ldr	r0, [r0, #0]
 80a1c8c:	681b      	ldr	r3, [r3, #0]
 80a1c8e:	4401      	add	r1, r0
 80a1c90:	2001      	movs	r0, #1
 80a1c92:	4413      	add	r3, r2
 80a1c94:	4a6b      	ldr	r2, [pc, #428]	; (80a1e44 <_Z11weatherLoopiihhh+0x24c>)
 80a1c96:	b2ed      	uxtb	r5, r5
 80a1c98:	6812      	ldr	r2, [r2, #0]
 80a1c9a:	b2db      	uxtb	r3, r3
 80a1c9c:	442a      	add	r2, r5
 80a1c9e:	9000      	str	r0, [sp, #0]
 80a1ca0:	b2d2      	uxtb	r2, r2
 80a1ca2:	4658      	mov	r0, fp
 80a1ca4:	b2c9      	uxtb	r1, r1
 80a1ca6:	f7ff f99b 	bl	80a0fe0 <_Z12displayClockihhhi>
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
 80a1caa:	2200      	movs	r2, #0
 80a1cac:	e9cd 2200 	strd	r2, r2, [sp]
 80a1cb0:	4865      	ldr	r0, [pc, #404]	; (80a1e48 <_Z11weatherLoopiihhh+0x250>)
 80a1cb2:	462b      	mov	r3, r5
 80a1cb4:	4621      	mov	r1, r4
 80a1cb6:	6800      	ldr	r0, [r0, #0]
 80a1cb8:	f7ff fa20 	bl	80a10fc <_Z11displayTempiihhhb>
                printScreen(screenArray,clockpix,inpix+88);
 80a1cbc:	464a      	mov	r2, r9
 80a1cbe:	4659      	mov	r1, fp
 80a1cc0:	4862      	ldr	r0, [pc, #392]	; (80a1e4c <_Z11weatherLoopiihhh+0x254>)
 80a1cc2:	f7fe fac1 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1cc6:	200a      	movs	r0, #10
 80a1cc8:	f002 faae 	bl	80a4228 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1ccc:	9b04      	ldr	r3, [sp, #16]
 80a1cce:	f1ba 0a01 	subs.w	sl, sl, #1
 80a1cd2:	eba8 0803 	sub.w	r8, r8, r3
 80a1cd6:	9b03      	ldr	r3, [sp, #12]
 80a1cd8:	eba6 0603 	sub.w	r6, r6, r3
 80a1cdc:	9b02      	ldr	r3, [sp, #8]
 80a1cde:	eba7 0703 	sub.w	r7, r7, r3
 80a1ce2:	d1c9      	bne.n	80a1c78 <_Z11weatherLoopiihhh+0x80>
}
 80a1ce4:	b00b      	add	sp, #44	; 0x2c
 80a1ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
 80a1cea:	fbb6 f3f7 	udiv	r3, r6, r7
 80a1cee:	e9cd 8800 	strd	r8, r8, [sp]
 80a1cf2:	b2db      	uxtb	r3, r3
 80a1cf4:	2200      	movs	r2, #0
 80a1cf6:	4621      	mov	r1, r4
 80a1cf8:	f8da 0000 	ldr.w	r0, [sl]
 80a1cfc:	f7ff f9fe 	bl	80a10fc <_Z11displayTempiihhhb>
                printScreen(screenArray,inpix,inpix+88);
 80a1d00:	464a      	mov	r2, r9
 80a1d02:	4621      	mov	r1, r4
 80a1d04:	4851      	ldr	r0, [pc, #324]	; (80a1e4c <_Z11weatherLoopiihhh+0x254>)
 80a1d06:	f7fe fa9f 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1d0a:	200a      	movs	r0, #10
 80a1d0c:	f002 fa8c 	bl	80a4228 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1d10:	9b03      	ldr	r3, [sp, #12]
 80a1d12:	3d01      	subs	r5, #1
 80a1d14:	eba6 0603 	sub.w	r6, r6, r3
 80a1d18:	d1e7      	bne.n	80a1cea <_Z11weatherLoopiihhh+0xf2>
        if(EEPROM.read(4) == 1){                                    //Check settings in EEPROM
 80a1d1a:	f003 fadf 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a1d1e:	2004      	movs	r0, #4
 80a1d20:	f002 f81c 	bl	80a3d5c <HAL_EEPROM_Read>
 80a1d24:	2801      	cmp	r0, #1
 80a1d26:	d17c      	bne.n	80a1e22 <_Z11weatherLoopiihhh+0x22a>
            wmode = 2;                                              //Go to indoor temperature code block if configured to do so
 80a1d28:	2302      	movs	r3, #2
 80a1d2a:	4a45      	ldr	r2, [pc, #276]	; (80a1e40 <_Z11weatherLoopiihhh+0x248>)
 80a1d2c:	6013      	str	r3, [r2, #0]
        if(isSensorDark()){
 80a1d2e:	271a      	movs	r7, #26
 80a1d30:	2600      	movs	r6, #0
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1d32:	f04f 0a32 	mov.w	sl, #50	; 0x32
 80a1d36:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80a1e58 <_Z11weatherLoopiihhh+0x260>
            printScreen(screenArray,inpix,inpix+88);
 80a1d3a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80a1e4c <_Z11weatherLoopiihhh+0x254>
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1d3e:	2519      	movs	r5, #25
 80a1d40:	9902      	ldr	r1, [sp, #8]
 80a1d42:	9b04      	ldr	r3, [sp, #16]
 80a1d44:	4371      	muls	r1, r6
 80a1d46:	fb06 f203 	mul.w	r2, r6, r3
 80a1d4a:	fbb1 f1f5 	udiv	r1, r1, r5
 80a1d4e:	2300      	movs	r3, #0
 80a1d50:	fbb2 f2fa 	udiv	r2, r2, sl
 80a1d54:	b2c9      	uxtb	r1, r1
 80a1d56:	9301      	str	r3, [sp, #4]
 80a1d58:	9100      	str	r1, [sp, #0]
 80a1d5a:	f8d9 0000 	ldr.w	r0, [r9]
 80a1d5e:	4621      	mov	r1, r4
 80a1d60:	b2d2      	uxtb	r2, r2
 80a1d62:	f7ff f9cb 	bl	80a10fc <_Z11displayTempiihhhb>
            printScreen(screenArray,inpix,inpix+88);
 80a1d66:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80a1d6a:	461a      	mov	r2, r3
 80a1d6c:	4621      	mov	r1, r4
 80a1d6e:	4640      	mov	r0, r8
 80a1d70:	9305      	str	r3, [sp, #20]
 80a1d72:	f7fe fa69 	bl	80a0248 <_Z11printScreenPiii>
            delay(10);                                               //Adjust this delay to change animation duration
 80a1d76:	200a      	movs	r0, #10
 80a1d78:	f002 fa56 	bl	80a4228 <delay>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a1d7c:	3f01      	subs	r7, #1
 80a1d7e:	f106 0601 	add.w	r6, r6, #1
 80a1d82:	d1dc      	bne.n	80a1d3e <_Z11weatherLoopiihhh+0x146>
        connDelay(2500);
 80a1d84:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a1d88:	f7ff fbe4 	bl	80a1554 <_Z9connDelayi>
        if(isSensorDark()){
 80a1d8c:	f7ff fef6 	bl	80a1b7c <_Z12isSensorDarkv>
 80a1d90:	9b04      	ldr	r3, [sp, #16]
 80a1d92:	fb05 f803 	mul.w	r8, r5, r3
 80a1d96:	9b02      	ldr	r3, [sp, #8]
 80a1d98:	fb05 f603 	mul.w	r6, r5, r3
 80a1d9c:	2800      	cmp	r0, #0
 80a1d9e:	d05d      	beq.n	80a1e5c <_Z11weatherLoopiihhh+0x264>
 80a1da0:	f04f 091a 	mov.w	r9, #26
 80a1da4:	9b03      	ldr	r3, [sp, #12]
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1da6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80a1e44 <_Z11weatherLoopiihhh+0x24c>
 80a1daa:	fb05 f703 	mul.w	r7, r5, r3
 80a1dae:	2119      	movs	r1, #25
 80a1db0:	fbb7 f0f1 	udiv	r0, r7, r1
 80a1db4:	fbb6 f5f1 	udiv	r5, r6, r1
 80a1db8:	fbb8 f1f1 	udiv	r1, r8, r1
 80a1dbc:	f8da 2000 	ldr.w	r2, [sl]
 80a1dc0:	4b24      	ldr	r3, [pc, #144]	; (80a1e54 <_Z11weatherLoopiihhh+0x25c>)
 80a1dc2:	4402      	add	r2, r0
 80a1dc4:	4822      	ldr	r0, [pc, #136]	; (80a1e50 <_Z11weatherLoopiihhh+0x258>)
 80a1dc6:	681b      	ldr	r3, [r3, #0]
 80a1dc8:	6800      	ldr	r0, [r0, #0]
 80a1dca:	b2ed      	uxtb	r5, r5
 80a1dcc:	4401      	add	r1, r0
 80a1dce:	2001      	movs	r0, #1
 80a1dd0:	442b      	add	r3, r5
 80a1dd2:	9000      	str	r0, [sp, #0]
 80a1dd4:	b2db      	uxtb	r3, r3
 80a1dd6:	4658      	mov	r0, fp
 80a1dd8:	b2d2      	uxtb	r2, r2
 80a1dda:	b2c9      	uxtb	r1, r1
 80a1ddc:	f7ff f900 	bl	80a0fe0 <_Z12displayClockihhhi>
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1de0:	2232      	movs	r2, #50	; 0x32
 80a1de2:	2300      	movs	r3, #0
 80a1de4:	fbb8 f2f2 	udiv	r2, r8, r2
 80a1de8:	e9cd 5300 	strd	r5, r3, [sp]
 80a1dec:	481a      	ldr	r0, [pc, #104]	; (80a1e58 <_Z11weatherLoopiihhh+0x260>)
 80a1dee:	4621      	mov	r1, r4
 80a1df0:	6800      	ldr	r0, [r0, #0]
 80a1df2:	b2d2      	uxtb	r2, r2
 80a1df4:	f7ff f982 	bl	80a10fc <_Z11displayTempiihhhb>
                printScreen(screenArray,clockpix,inpix+88);
 80a1df8:	4659      	mov	r1, fp
 80a1dfa:	9a05      	ldr	r2, [sp, #20]
 80a1dfc:	4813      	ldr	r0, [pc, #76]	; (80a1e4c <_Z11weatherLoopiihhh+0x254>)
 80a1dfe:	f7fe fa23 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1e02:	200a      	movs	r0, #10
 80a1e04:	f002 fa10 	bl	80a4228 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1e08:	9b04      	ldr	r3, [sp, #16]
 80a1e0a:	f1b9 0901 	subs.w	r9, r9, #1
 80a1e0e:	eba8 0803 	sub.w	r8, r8, r3
 80a1e12:	9b03      	ldr	r3, [sp, #12]
 80a1e14:	eba7 0703 	sub.w	r7, r7, r3
 80a1e18:	9b02      	ldr	r3, [sp, #8]
 80a1e1a:	eba6 0603 	sub.w	r6, r6, r3
 80a1e1e:	d1c6      	bne.n	80a1dae <_Z11weatherLoopiihhh+0x1b6>
 80a1e20:	e760      	b.n	80a1ce4 <_Z11weatherLoopiihhh+0xec>
            wmode = 3;                                              //Otherwise skip, and go to the humidity control
 80a1e22:	2303      	movs	r3, #3
 80a1e24:	4a06      	ldr	r2, [pc, #24]	; (80a1e40 <_Z11weatherLoopiihhh+0x248>)
 80a1e26:	6013      	str	r3, [r2, #0]
    if (wmode == 3)
 80a1e28:	4b05      	ldr	r3, [pc, #20]	; (80a1e40 <_Z11weatherLoopiihhh+0x248>)
 80a1e2a:	681b      	ldr	r3, [r3, #0]
 80a1e2c:	2b03      	cmp	r3, #3
 80a1e2e:	d03f      	beq.n	80a1eb0 <_Z11weatherLoopiihhh+0x2b8>
    if(wmode == 4)
 80a1e30:	2b04      	cmp	r3, #4
 80a1e32:	f47f af57 	bne.w	80a1ce4 <_Z11weatherLoopiihhh+0xec>
 80a1e36:	e0de      	b.n	80a1ff6 <_Z11weatherLoopiihhh+0x3fe>
    if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
 80a1e38:	2b02      	cmp	r3, #2
 80a1e3a:	d1f5      	bne.n	80a1e28 <_Z11weatherLoopiihhh+0x230>
 80a1e3c:	e777      	b.n	80a1d2e <_Z11weatherLoopiihhh+0x136>
 80a1e3e:	bf00      	nop
 80a1e40:	20000ab4 	.word	0x20000ab4
 80a1e44:	20000270 	.word	0x20000270
 80a1e48:	20000250 	.word	0x20000250
 80a1e4c:	2000029c 	.word	0x2000029c
 80a1e50:	20000294 	.word	0x20000294
 80a1e54:	20000258 	.word	0x20000258
 80a1e58:	20000280 	.word	0x20000280
        if(isSensorDark()){
 80a1e5c:	271a      	movs	r7, #26
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1e5e:	f04f 0932 	mov.w	r9, #50	; 0x32
 80a1e62:	4645      	mov	r5, r8
 80a1e64:	f8df a128 	ldr.w	sl, [pc, #296]	; 80a1f90 <_Z11weatherLoopiihhh+0x398>
                printScreen(screenArray,inpix,inpix+88);
 80a1e68:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80a1f94 <_Z11weatherLoopiihhh+0x39c>
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1e6c:	2119      	movs	r1, #25
 80a1e6e:	fbb6 f1f1 	udiv	r1, r6, r1
 80a1e72:	2300      	movs	r3, #0
 80a1e74:	fbb5 f2f9 	udiv	r2, r5, r9
 80a1e78:	b2c9      	uxtb	r1, r1
 80a1e7a:	9301      	str	r3, [sp, #4]
 80a1e7c:	9100      	str	r1, [sp, #0]
 80a1e7e:	f8da 0000 	ldr.w	r0, [sl]
 80a1e82:	4621      	mov	r1, r4
 80a1e84:	b2d2      	uxtb	r2, r2
 80a1e86:	f7ff f939 	bl	80a10fc <_Z11displayTempiihhhb>
                printScreen(screenArray,inpix,inpix+88);
 80a1e8a:	4621      	mov	r1, r4
 80a1e8c:	4640      	mov	r0, r8
 80a1e8e:	9a05      	ldr	r2, [sp, #20]
 80a1e90:	f7fe f9da 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1e94:	200a      	movs	r0, #10
 80a1e96:	f002 f9c7 	bl	80a4228 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1e9a:	9b04      	ldr	r3, [sp, #16]
 80a1e9c:	3f01      	subs	r7, #1
 80a1e9e:	eba5 0503 	sub.w	r5, r5, r3
 80a1ea2:	9b02      	ldr	r3, [sp, #8]
 80a1ea4:	eba6 0603 	sub.w	r6, r6, r3
 80a1ea8:	d1e0      	bne.n	80a1e6c <_Z11weatherLoopiihhh+0x274>
        wmode = 3;
 80a1eaa:	2303      	movs	r3, #3
 80a1eac:	4a3a      	ldr	r2, [pc, #232]	; (80a1f98 <_Z11weatherLoopiihhh+0x3a0>)
 80a1eae:	6013      	str	r3, [r2, #0]
        if(isSensorDark()){
 80a1eb0:	261a      	movs	r6, #26
 80a1eb2:	2500      	movs	r5, #0
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1eb4:	2719      	movs	r7, #25
 80a1eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80a1f9c <_Z11weatherLoopiihhh+0x3a4>
            printScreen(screenArray,inpix,inpix+88);
 80a1eba:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a1f94 <_Z11weatherLoopiihhh+0x39c>
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1ebe:	9a02      	ldr	r2, [sp, #8]
 80a1ec0:	9b03      	ldr	r3, [sp, #12]
 80a1ec2:	436a      	muls	r2, r5
 80a1ec4:	436b      	muls	r3, r5
 80a1ec6:	fbb2 f2f7 	udiv	r2, r2, r7
 80a1eca:	fbb3 f3f7 	udiv	r3, r3, r7
 80a1ece:	b2d2      	uxtb	r2, r2
 80a1ed0:	9200      	str	r2, [sp, #0]
 80a1ed2:	b2db      	uxtb	r3, r3
 80a1ed4:	2200      	movs	r2, #0
 80a1ed6:	4621      	mov	r1, r4
 80a1ed8:	f8da 0000 	ldr.w	r0, [sl]
            printScreen(screenArray,inpix,inpix+88);
 80a1edc:	f104 0858 	add.w	r8, r4, #88	; 0x58
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1ee0:	f7ff f950 	bl	80a1184 <_Z12displayHumidiihhh>
            printScreen(screenArray,inpix,inpix+88);
 80a1ee4:	4642      	mov	r2, r8
 80a1ee6:	4621      	mov	r1, r4
 80a1ee8:	4648      	mov	r0, r9
 80a1eea:	f7fe f9ad 	bl	80a0248 <_Z11printScreenPiii>
            delay(10);
 80a1eee:	200a      	movs	r0, #10
 80a1ef0:	f002 f99a 	bl	80a4228 <delay>
        for(int l=0; l <= 25; l++){
 80a1ef4:	3e01      	subs	r6, #1
 80a1ef6:	f105 0501 	add.w	r5, r5, #1
 80a1efa:	d1e0      	bne.n	80a1ebe <_Z11weatherLoopiihhh+0x2c6>
        connDelay(2500);
 80a1efc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a1f00:	f7ff fb28 	bl	80a1554 <_Z9connDelayi>
        if(isSensorDark()){
 80a1f04:	f7ff fe3a 	bl	80a1b7c <_Z12isSensorDarkv>
 80a1f08:	9b03      	ldr	r3, [sp, #12]
 80a1f0a:	fb07 f603 	mul.w	r6, r7, r3
 80a1f0e:	9b02      	ldr	r3, [sp, #8]
 80a1f10:	fb07 f503 	mul.w	r5, r7, r3
 80a1f14:	2800      	cmp	r0, #0
 80a1f16:	d049      	beq.n	80a1fac <_Z11weatherLoopiihhh+0x3b4>
 80a1f18:	9b04      	ldr	r3, [sp, #16]
 80a1f1a:	435f      	muls	r7, r3
 80a1f1c:	231a      	movs	r3, #26
 80a1f1e:	9305      	str	r3, [sp, #20]
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1f20:	2119      	movs	r1, #25
 80a1f22:	fbb6 f9f1 	udiv	r9, r6, r1
 80a1f26:	fbb5 faf1 	udiv	sl, r5, r1
 80a1f2a:	fbb7 f1f1 	udiv	r1, r7, r1
 80a1f2e:	481c      	ldr	r0, [pc, #112]	; (80a1fa0 <_Z11weatherLoopiihhh+0x3a8>)
 80a1f30:	4b1c      	ldr	r3, [pc, #112]	; (80a1fa4 <_Z11weatherLoopiihhh+0x3ac>)
 80a1f32:	6800      	ldr	r0, [r0, #0]
 80a1f34:	4a1c      	ldr	r2, [pc, #112]	; (80a1fa8 <_Z11weatherLoopiihhh+0x3b0>)
 80a1f36:	4401      	add	r1, r0
 80a1f38:	2001      	movs	r0, #1
 80a1f3a:	681b      	ldr	r3, [r3, #0]
 80a1f3c:	6812      	ldr	r2, [r2, #0]
 80a1f3e:	fa5f f989 	uxtb.w	r9, r9
 80a1f42:	fa5f fa8a 	uxtb.w	sl, sl
 80a1f46:	4453      	add	r3, sl
 80a1f48:	444a      	add	r2, r9
 80a1f4a:	9000      	str	r0, [sp, #0]
 80a1f4c:	b2db      	uxtb	r3, r3
 80a1f4e:	4658      	mov	r0, fp
 80a1f50:	b2d2      	uxtb	r2, r2
 80a1f52:	b2c9      	uxtb	r1, r1
 80a1f54:	f7ff f844 	bl	80a0fe0 <_Z12displayClockihhhi>
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1f58:	4810      	ldr	r0, [pc, #64]	; (80a1f9c <_Z11weatherLoopiihhh+0x3a4>)
 80a1f5a:	f8cd a000 	str.w	sl, [sp]
 80a1f5e:	464b      	mov	r3, r9
 80a1f60:	2200      	movs	r2, #0
 80a1f62:	4621      	mov	r1, r4
 80a1f64:	6800      	ldr	r0, [r0, #0]
 80a1f66:	f7ff f90d 	bl	80a1184 <_Z12displayHumidiihhh>
                printScreen(screenArray,clockpix,inpix+88);
 80a1f6a:	4642      	mov	r2, r8
 80a1f6c:	4659      	mov	r1, fp
 80a1f6e:	4809      	ldr	r0, [pc, #36]	; (80a1f94 <_Z11weatherLoopiihhh+0x39c>)
 80a1f70:	f7fe f96a 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a1f74:	200a      	movs	r0, #10
 80a1f76:	f002 f957 	bl	80a4228 <delay>
            for(int l=25; l >= 0; l--){
 80a1f7a:	9b04      	ldr	r3, [sp, #16]
 80a1f7c:	1aff      	subs	r7, r7, r3
 80a1f7e:	9b03      	ldr	r3, [sp, #12]
 80a1f80:	1af6      	subs	r6, r6, r3
 80a1f82:	9b02      	ldr	r3, [sp, #8]
 80a1f84:	1aed      	subs	r5, r5, r3
 80a1f86:	9b05      	ldr	r3, [sp, #20]
 80a1f88:	3b01      	subs	r3, #1
 80a1f8a:	9305      	str	r3, [sp, #20]
 80a1f8c:	d1c8      	bne.n	80a1f20 <_Z11weatherLoopiihhh+0x328>
 80a1f8e:	e6a9      	b.n	80a1ce4 <_Z11weatherLoopiihhh+0xec>
 80a1f90:	20000280 	.word	0x20000280
 80a1f94:	2000029c 	.word	0x2000029c
 80a1f98:	20000ab4 	.word	0x20000ab4
 80a1f9c:	20000278 	.word	0x20000278
 80a1fa0:	20000294 	.word	0x20000294
 80a1fa4:	20000258 	.word	0x20000258
 80a1fa8:	20000270 	.word	0x20000270
        if(isSensorDark()){
 80a1fac:	271a      	movs	r7, #26
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1fae:	f04f 0919 	mov.w	r9, #25
                printScreen(screenArray,inpix,inpix+88);
 80a1fb2:	f8df a284 	ldr.w	sl, [pc, #644]	; 80a2238 <_Z11weatherLoopiihhh+0x640>
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1fb6:	fbb5 f2f9 	udiv	r2, r5, r9
 80a1fba:	fbb6 f3f9 	udiv	r3, r6, r9
 80a1fbe:	b2d2      	uxtb	r2, r2
 80a1fc0:	489e      	ldr	r0, [pc, #632]	; (80a223c <_Z11weatherLoopiihhh+0x644>)
 80a1fc2:	9200      	str	r2, [sp, #0]
 80a1fc4:	b2db      	uxtb	r3, r3
 80a1fc6:	2200      	movs	r2, #0
 80a1fc8:	4621      	mov	r1, r4
 80a1fca:	6800      	ldr	r0, [r0, #0]
 80a1fcc:	f7ff f8da 	bl	80a1184 <_Z12displayHumidiihhh>
                printScreen(screenArray,inpix,inpix+88);
 80a1fd0:	4642      	mov	r2, r8
 80a1fd2:	4621      	mov	r1, r4
 80a1fd4:	4650      	mov	r0, sl
 80a1fd6:	f7fe f937 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a1fda:	200a      	movs	r0, #10
 80a1fdc:	f002 f924 	bl	80a4228 <delay>
            for(int l=25; l >= 0; l--){
 80a1fe0:	9b03      	ldr	r3, [sp, #12]
 80a1fe2:	3f01      	subs	r7, #1
 80a1fe4:	eba6 0603 	sub.w	r6, r6, r3
 80a1fe8:	9b02      	ldr	r3, [sp, #8]
 80a1fea:	eba5 0503 	sub.w	r5, r5, r3
 80a1fee:	d1e2      	bne.n	80a1fb6 <_Z11weatherLoopiihhh+0x3be>
        wmode = 4;
 80a1ff0:	2304      	movs	r3, #4
 80a1ff2:	4a93      	ldr	r2, [pc, #588]	; (80a2240 <_Z11weatherLoopiihhh+0x648>)
 80a1ff4:	6013      	str	r3, [r2, #0]
        if(isSensorDark()){
 80a1ff6:	2615      	movs	r6, #21
 80a1ff8:	2700      	movs	r7, #0
            displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
 80a1ffa:	2514      	movs	r5, #20
 80a1ffc:	f8df 8244 	ldr.w	r8, [pc, #580]	; 80a2244 <_Z11weatherLoopiihhh+0x64c>
            printScreen(screenArray,inpix,inpix+88);
 80a2000:	f8df 9234 	ldr.w	r9, [pc, #564]	; 80a2238 <_Z11weatherLoopiihhh+0x640>
            displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
 80a2004:	2100      	movs	r1, #0
 80a2006:	9101      	str	r1, [sp, #4]
 80a2008:	9902      	ldr	r1, [sp, #8]
 80a200a:	9b03      	ldr	r3, [sp, #12]
 80a200c:	4379      	muls	r1, r7
 80a200e:	9a04      	ldr	r2, [sp, #16]
 80a2010:	437b      	muls	r3, r7
 80a2012:	437a      	muls	r2, r7
 80a2014:	fbb1 f1f5 	udiv	r1, r1, r5
 80a2018:	fbb3 f3f5 	udiv	r3, r3, r5
 80a201c:	fbb2 f2f5 	udiv	r2, r2, r5
 80a2020:	b2c9      	uxtb	r1, r1
 80a2022:	9100      	str	r1, [sp, #0]
 80a2024:	f8d8 0000 	ldr.w	r0, [r8]
 80a2028:	4621      	mov	r1, r4
 80a202a:	b2db      	uxtb	r3, r3
 80a202c:	b2d2      	uxtb	r2, r2
 80a202e:	f7fe faff 	bl	80a0630 <_Z16displayConditioniihhhb>
            printScreen(screenArray,inpix,inpix+88);
 80a2032:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80a2036:	461a      	mov	r2, r3
 80a2038:	4621      	mov	r1, r4
 80a203a:	4648      	mov	r0, r9
 80a203c:	9308      	str	r3, [sp, #32]
 80a203e:	f7fe f903 	bl	80a0248 <_Z11printScreenPiii>
            delay(10);
 80a2042:	200a      	movs	r0, #10
 80a2044:	f002 f8f0 	bl	80a4228 <delay>
        for(int l = 0; l <= 20; l++){
 80a2048:	3e01      	subs	r6, #1
 80a204a:	f107 0701 	add.w	r7, r7, #1
 80a204e:	d1d9      	bne.n	80a2004 <_Z11weatherLoopiihhh+0x40c>
        animateCondition(cid,inpix,250,R,G,B);
 80a2050:	9b02      	ldr	r3, [sp, #8]
 80a2052:	22fa      	movs	r2, #250	; 0xfa
 80a2054:	9301      	str	r3, [sp, #4]
 80a2056:	9b03      	ldr	r3, [sp, #12]
 80a2058:	4621      	mov	r1, r4
 80a205a:	9300      	str	r3, [sp, #0]
 80a205c:	f8d8 0000 	ldr.w	r0, [r8]
 80a2060:	9b04      	ldr	r3, [sp, #16]
 80a2062:	f7ff fa95 	bl	80a1590 <_Z16animateConditioniiihhh>
        displayClock(clockpix, R,G,B, false);
 80a2066:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
        printScreen(screenArray,clockpix,clockpix+152);
 80a206a:	f10b 0798 	add.w	r7, fp, #152	; 0x98
        displayClock(clockpix, R,G,B, false);
 80a206e:	4658      	mov	r0, fp
 80a2070:	9904      	ldr	r1, [sp, #16]
 80a2072:	9600      	str	r6, [sp, #0]
 80a2074:	f7fe ffb4 	bl	80a0fe0 <_Z12displayClockihhhi>
        printScreen(screenArray,clockpix,clockpix+152);
 80a2078:	463a      	mov	r2, r7
 80a207a:	4659      	mov	r1, fp
 80a207c:	486e      	ldr	r0, [pc, #440]	; (80a2238 <_Z11weatherLoopiihhh+0x640>)
 80a207e:	f7fe f8e3 	bl	80a0248 <_Z11printScreenPiii>
        animateCondition(cid,inpix,250,R,G,B);
 80a2082:	9b02      	ldr	r3, [sp, #8]
 80a2084:	22fa      	movs	r2, #250	; 0xfa
 80a2086:	9301      	str	r3, [sp, #4]
 80a2088:	9b03      	ldr	r3, [sp, #12]
 80a208a:	4621      	mov	r1, r4
 80a208c:	9300      	str	r3, [sp, #0]
 80a208e:	f8d8 0000 	ldr.w	r0, [r8]
 80a2092:	9b04      	ldr	r3, [sp, #16]
 80a2094:	f7ff fa7c 	bl	80a1590 <_Z16animateConditioniiihhh>
        displayClock(clockpix, R,G,B, false);
 80a2098:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80a209c:	4658      	mov	r0, fp
 80a209e:	9904      	ldr	r1, [sp, #16]
 80a20a0:	9600      	str	r6, [sp, #0]
 80a20a2:	f7fe ff9d 	bl	80a0fe0 <_Z12displayClockihhhi>
        printScreen(screenArray,clockpix,clockpix+152);
 80a20a6:	463a      	mov	r2, r7
 80a20a8:	4659      	mov	r1, fp
 80a20aa:	4863      	ldr	r0, [pc, #396]	; (80a2238 <_Z11weatherLoopiihhh+0x640>)
 80a20ac:	f7fe f8cc 	bl	80a0248 <_Z11printScreenPiii>
        animateCondition(cid,inpix,250,R,G,B);
 80a20b0:	9b02      	ldr	r3, [sp, #8]
 80a20b2:	22fa      	movs	r2, #250	; 0xfa
 80a20b4:	9301      	str	r3, [sp, #4]
 80a20b6:	9b03      	ldr	r3, [sp, #12]
 80a20b8:	4621      	mov	r1, r4
 80a20ba:	9300      	str	r3, [sp, #0]
 80a20bc:	f8d8 0000 	ldr.w	r0, [r8]
 80a20c0:	9b04      	ldr	r3, [sp, #16]
 80a20c2:	f7ff fa65 	bl	80a1590 <_Z16animateConditioniiihhh>
        displayClock(clockpix, R,G,B, false);
 80a20c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80a20ca:	4658      	mov	r0, fp
 80a20cc:	9904      	ldr	r1, [sp, #16]
 80a20ce:	9600      	str	r6, [sp, #0]
 80a20d0:	f7fe ff86 	bl	80a0fe0 <_Z12displayClockihhhi>
        printScreen(screenArray,clockpix,clockpix+152);
 80a20d4:	463a      	mov	r2, r7
 80a20d6:	4659      	mov	r1, fp
 80a20d8:	4857      	ldr	r0, [pc, #348]	; (80a2238 <_Z11weatherLoopiihhh+0x640>)
 80a20da:	f7fe f8b5 	bl	80a0248 <_Z11printScreenPiii>
        if(isSensorDark()){
 80a20de:	f7ff fd4d 	bl	80a1b7c <_Z12isSensorDarkv>
 80a20e2:	9b04      	ldr	r3, [sp, #16]
 80a20e4:	fb05 f703 	mul.w	r7, r5, r3
 80a20e8:	9b03      	ldr	r3, [sp, #12]
 80a20ea:	fb05 f603 	mul.w	r6, r5, r3
 80a20ee:	9b02      	ldr	r3, [sp, #8]
 80a20f0:	435d      	muls	r5, r3
 80a20f2:	2800      	cmp	r0, #0
 80a20f4:	d064      	beq.n	80a21c0 <_Z11weatherLoopiihhh+0x5c8>
 80a20f6:	2315      	movs	r3, #21
 80a20f8:	46a9      	mov	r9, r5
 80a20fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a20fe:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80a2248 <_Z11weatherLoopiihhh+0x650>
 80a2102:	4e52      	ldr	r6, [pc, #328]	; (80a224c <_Z11weatherLoopiihhh+0x654>)
 80a2104:	4f52      	ldr	r7, [pc, #328]	; (80a2250 <_Z11weatherLoopiihhh+0x658>)
        if(isSensorDark()){
 80a2106:	9309      	str	r3, [sp, #36]	; 0x24
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a2108:	f04f 0a19 	mov.w	sl, #25
 80a210c:	9b07      	ldr	r3, [sp, #28]
 80a210e:	6839      	ldr	r1, [r7, #0]
 80a2110:	fbb3 f3fa 	udiv	r3, r3, sl
 80a2114:	b2db      	uxtb	r3, r3
 80a2116:	9305      	str	r3, [sp, #20]
 80a2118:	9b06      	ldr	r3, [sp, #24]
 80a211a:	9805      	ldr	r0, [sp, #20]
 80a211c:	fbb3 f5fa 	udiv	r5, r3, sl
 80a2120:	fbb9 fafa 	udiv	sl, r9, sl
 80a2124:	4401      	add	r1, r0
 80a2126:	2001      	movs	r0, #1
 80a2128:	6833      	ldr	r3, [r6, #0]
 80a212a:	f8d8 2000 	ldr.w	r2, [r8]
 80a212e:	b2ed      	uxtb	r5, r5
 80a2130:	fa5f fa8a 	uxtb.w	sl, sl
 80a2134:	4453      	add	r3, sl
 80a2136:	442a      	add	r2, r5
 80a2138:	9000      	str	r0, [sp, #0]
 80a213a:	b2db      	uxtb	r3, r3
 80a213c:	4658      	mov	r0, fp
 80a213e:	b2d2      	uxtb	r2, r2
 80a2140:	b2c9      	uxtb	r1, r1
 80a2142:	f7fe ff4d 	bl	80a0fe0 <_Z12displayClockihhhi>
                displayCondition(cid,inpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, false);
 80a2146:	683a      	ldr	r2, [r7, #0]
 80a2148:	9905      	ldr	r1, [sp, #20]
 80a214a:	f8d8 3000 	ldr.w	r3, [r8]
 80a214e:	440a      	add	r2, r1
 80a2150:	2100      	movs	r1, #0
 80a2152:	9101      	str	r1, [sp, #4]
 80a2154:	6831      	ldr	r1, [r6, #0]
 80a2156:	483b      	ldr	r0, [pc, #236]	; (80a2244 <_Z11weatherLoopiihhh+0x64c>)
 80a2158:	4451      	add	r1, sl
 80a215a:	b2c9      	uxtb	r1, r1
 80a215c:	9100      	str	r1, [sp, #0]
 80a215e:	442b      	add	r3, r5
 80a2160:	4621      	mov	r1, r4
 80a2162:	6800      	ldr	r0, [r0, #0]
 80a2164:	b2db      	uxtb	r3, r3
 80a2166:	b2d2      	uxtb	r2, r2
 80a2168:	f7fe fa62 	bl	80a0630 <_Z16displayConditioniihhhb>
                dimg(cid,160, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock);
 80a216c:	683a      	ldr	r2, [r7, #0]
 80a216e:	9905      	ldr	r1, [sp, #20]
 80a2170:	f8d8 3000 	ldr.w	r3, [r8]
 80a2174:	440a      	add	r2, r1
 80a2176:	6831      	ldr	r1, [r6, #0]
 80a2178:	4832      	ldr	r0, [pc, #200]	; (80a2244 <_Z11weatherLoopiihhh+0x64c>)
 80a217a:	448a      	add	sl, r1
 80a217c:	fa5f f18a 	uxtb.w	r1, sl
 80a2180:	9100      	str	r1, [sp, #0]
 80a2182:	442b      	add	r3, r5
 80a2184:	b2db      	uxtb	r3, r3
 80a2186:	21a0      	movs	r1, #160	; 0xa0
 80a2188:	6800      	ldr	r0, [r0, #0]
 80a218a:	b2d2      	uxtb	r2, r2
 80a218c:	f7ff f842 	bl	80a1214 <_Z4dimgiihhh>
                printScreen(screenArray,clockpix,inpix+88);
 80a2190:	9a08      	ldr	r2, [sp, #32]
 80a2192:	4659      	mov	r1, fp
 80a2194:	4828      	ldr	r0, [pc, #160]	; (80a2238 <_Z11weatherLoopiihhh+0x640>)
 80a2196:	f7fe f857 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a219a:	200a      	movs	r0, #10
 80a219c:	f002 f844 	bl	80a4228 <delay>
            for(int l = 20; l >= 0; l--){
 80a21a0:	9b07      	ldr	r3, [sp, #28]
 80a21a2:	9a04      	ldr	r2, [sp, #16]
 80a21a4:	1a9b      	subs	r3, r3, r2
 80a21a6:	9307      	str	r3, [sp, #28]
 80a21a8:	9a03      	ldr	r2, [sp, #12]
 80a21aa:	9b06      	ldr	r3, [sp, #24]
 80a21ac:	1a9b      	subs	r3, r3, r2
 80a21ae:	9306      	str	r3, [sp, #24]
 80a21b0:	9b02      	ldr	r3, [sp, #8]
 80a21b2:	eba9 0903 	sub.w	r9, r9, r3
 80a21b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a21b8:	3b01      	subs	r3, #1
 80a21ba:	9309      	str	r3, [sp, #36]	; 0x24
 80a21bc:	d1a4      	bne.n	80a2108 <_Z11weatherLoopiihhh+0x510>
 80a21be:	e591      	b.n	80a1ce4 <_Z11weatherLoopiihhh+0xec>
        if(isSensorDark()){
 80a21c0:	f04f 0915 	mov.w	r9, #21
                displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
 80a21c4:	f04f 0a14 	mov.w	sl, #20
 80a21c8:	f8df b078 	ldr.w	fp, [pc, #120]	; 80a2244 <_Z11weatherLoopiihhh+0x64c>
 80a21cc:	fbb5 f8fa 	udiv	r8, r5, sl
 80a21d0:	2100      	movs	r1, #0
 80a21d2:	fbb7 f2fa 	udiv	r2, r7, sl
 80a21d6:	fbb6 f3fa 	udiv	r3, r6, sl
 80a21da:	fa5f f888 	uxtb.w	r8, r8
 80a21de:	e9cd 8100 	strd	r8, r1, [sp]
 80a21e2:	b2d2      	uxtb	r2, r2
 80a21e4:	b2db      	uxtb	r3, r3
 80a21e6:	4621      	mov	r1, r4
 80a21e8:	f8db 0000 	ldr.w	r0, [fp]
 80a21ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80a21f0:	f7fe fa1e 	bl	80a0630 <_Z16displayConditioniihhhb>
                dimg(cid,160, (R*l)/20, (G*l)/20, (B*l)/20);
 80a21f4:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80a21f8:	f8cd 8000 	str.w	r8, [sp]
 80a21fc:	21a0      	movs	r1, #160	; 0xa0
 80a21fe:	f8db 0000 	ldr.w	r0, [fp]
 80a2202:	f7ff f807 	bl	80a1214 <_Z4dimgiihhh>
                printScreen(screenArray,inpix,inpix+88);
 80a2206:	4621      	mov	r1, r4
 80a2208:	9a08      	ldr	r2, [sp, #32]
 80a220a:	480b      	ldr	r0, [pc, #44]	; (80a2238 <_Z11weatherLoopiihhh+0x640>)
 80a220c:	f7fe f81c 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a2210:	200a      	movs	r0, #10
 80a2212:	f002 f809 	bl	80a4228 <delay>
            for(int l = 20; l >= 0; l--){
 80a2216:	9b04      	ldr	r3, [sp, #16]
 80a2218:	f1b9 0901 	subs.w	r9, r9, #1
 80a221c:	eba7 0703 	sub.w	r7, r7, r3
 80a2220:	9b03      	ldr	r3, [sp, #12]
 80a2222:	eba6 0603 	sub.w	r6, r6, r3
 80a2226:	9b02      	ldr	r3, [sp, #8]
 80a2228:	eba5 0503 	sub.w	r5, r5, r3
 80a222c:	d1ce      	bne.n	80a21cc <_Z11weatherLoopiihhh+0x5d4>
        wmode = 1;
 80a222e:	2201      	movs	r2, #1
 80a2230:	4b03      	ldr	r3, [pc, #12]	; (80a2240 <_Z11weatherLoopiihhh+0x648>)
 80a2232:	601a      	str	r2, [r3, #0]
 80a2234:	e556      	b.n	80a1ce4 <_Z11weatherLoopiihhh+0xec>
 80a2236:	bf00      	nop
 80a2238:	2000029c 	.word	0x2000029c
 80a223c:	20000278 	.word	0x20000278
 80a2240:	20000ab4 	.word	0x20000ab4
 80a2244:	20000260 	.word	0x20000260
 80a2248:	20000270 	.word	0x20000270
 80a224c:	20000258 	.word	0x20000258
 80a2250:	20000294 	.word	0x20000294

080a2254 <_Z16menuButtonUpdatePii>:
bool menuButtonUpdate(int *modeSelect, int maxItems){
 80a2254:	b538      	push	{r3, r4, r5, lr}
 80a2256:	4604      	mov	r4, r0
    if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == HIGH)
 80a2258:	2000      	movs	r0, #0
bool menuButtonUpdate(int *modeSelect, int maxItems){
 80a225a:	460d      	mov	r5, r1
    if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == HIGH)
 80a225c:	f003 f814 	bl	80a5288 <digitalRead>
 80a2260:	b998      	cbnz	r0, 80a228a <_Z16menuButtonUpdatePii+0x36>
 80a2262:	2001      	movs	r0, #1
 80a2264:	f003 f810 	bl	80a5288 <digitalRead>
 80a2268:	b978      	cbnz	r0, 80a228a <_Z16menuButtonUpdatePii+0x36>
 80a226a:	2002      	movs	r0, #2
 80a226c:	f003 f80c 	bl	80a5288 <digitalRead>
 80a2270:	2801      	cmp	r0, #1
 80a2272:	d10a      	bne.n	80a228a <_Z16menuButtonUpdatePii+0x36>
        if(*modeSelect < maxItems){
 80a2274:	6823      	ldr	r3, [r4, #0]
 80a2276:	42ab      	cmp	r3, r5
 80a2278:	db27      	blt.n	80a22ca <_Z16menuButtonUpdatePii+0x76>
 80a227a:	6020      	str	r0, [r4, #0]
        while(digitalRead(dnbtn) == HIGH && digitalRead(upbtn) == LOW) delay(5);
 80a227c:	2002      	movs	r0, #2
 80a227e:	f003 f803 	bl	80a5288 <digitalRead>
 80a2282:	2801      	cmp	r0, #1
 80a2284:	d023      	beq.n	80a22ce <_Z16menuButtonUpdatePii+0x7a>
        return true;
 80a2286:	2001      	movs	r0, #1
}
 80a2288:	bd38      	pop	{r3, r4, r5, pc}
    if(digitalRead(upbtn) == HIGH && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == LOW)
 80a228a:	2000      	movs	r0, #0
 80a228c:	f002 fffc 	bl	80a5288 <digitalRead>
 80a2290:	2801      	cmp	r0, #1
 80a2292:	d125      	bne.n	80a22e0 <_Z16menuButtonUpdatePii+0x8c>
 80a2294:	f002 fff8 	bl	80a5288 <digitalRead>
 80a2298:	bb10      	cbnz	r0, 80a22e0 <_Z16menuButtonUpdatePii+0x8c>
 80a229a:	2002      	movs	r0, #2
 80a229c:	f002 fff4 	bl	80a5288 <digitalRead>
 80a22a0:	b9f0      	cbnz	r0, 80a22e0 <_Z16menuButtonUpdatePii+0x8c>
        if(*modeSelect > 1){
 80a22a2:	6823      	ldr	r3, [r4, #0]
 80a22a4:	2b01      	cmp	r3, #1
            *modeSelect = *modeSelect - 1;
 80a22a6:	bfc8      	it	gt
 80a22a8:	f103 35ff 	addgt.w	r5, r3, #4294967295	; 0xffffffff
 80a22ac:	6025      	str	r5, [r4, #0]
        while(digitalRead(upbtn) == HIGH && digitalRead(dnbtn) == LOW) delay(5);
 80a22ae:	2000      	movs	r0, #0
 80a22b0:	f002 ffea 	bl	80a5288 <digitalRead>
 80a22b4:	2801      	cmp	r0, #1
 80a22b6:	d1e6      	bne.n	80a2286 <_Z16menuButtonUpdatePii+0x32>
 80a22b8:	2002      	movs	r0, #2
 80a22ba:	f002 ffe5 	bl	80a5288 <digitalRead>
 80a22be:	2800      	cmp	r0, #0
 80a22c0:	d1e1      	bne.n	80a2286 <_Z16menuButtonUpdatePii+0x32>
 80a22c2:	2005      	movs	r0, #5
 80a22c4:	f001 ffb0 	bl	80a4228 <delay>
 80a22c8:	e7f1      	b.n	80a22ae <_Z16menuButtonUpdatePii+0x5a>
            *modeSelect = *modeSelect + 1;
 80a22ca:	1c58      	adds	r0, r3, #1
 80a22cc:	e7d5      	b.n	80a227a <_Z16menuButtonUpdatePii+0x26>
        while(digitalRead(dnbtn) == HIGH && digitalRead(upbtn) == LOW) delay(5);
 80a22ce:	2000      	movs	r0, #0
 80a22d0:	f002 ffda 	bl	80a5288 <digitalRead>
 80a22d4:	2800      	cmp	r0, #0
 80a22d6:	d1d6      	bne.n	80a2286 <_Z16menuButtonUpdatePii+0x32>
 80a22d8:	2005      	movs	r0, #5
 80a22da:	f001 ffa5 	bl	80a4228 <delay>
 80a22de:	e7cd      	b.n	80a227c <_Z16menuButtonUpdatePii+0x28>
    return false;
 80a22e0:	2000      	movs	r0, #0
 80a22e2:	e7d1      	b.n	80a2288 <_Z16menuButtonUpdatePii+0x34>

080a22e4 <_Z9fillStripiihhhb>:
void fillStrip(int start, int end, uint8_t R, uint8_t G, uint8_t B, bool apply){
 80a22e4:	b4f0      	push	{r4, r5, r6, r7}
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a22e6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
void fillStrip(int start, int end, uint8_t R, uint8_t G, uint8_t B, bool apply){
 80a22ea:	f89d 4010 	ldrb.w	r4, [sp, #16]
    for(i = start; i <= end; i++){
 80a22ee:	4d12      	ldr	r5, [pc, #72]	; (80a2338 <_Z9fillStripiihhhb+0x54>)
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a22f0:	fb07 4403 	mla	r4, r7, r3, r4
 80a22f4:	4b11      	ldr	r3, [pc, #68]	; (80a233c <_Z9fillStripiihhhb+0x58>)
void fillStrip(int start, int end, uint8_t R, uint8_t G, uint8_t B, bool apply){
 80a22f6:	f89d 6014 	ldrb.w	r6, [sp, #20]
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a22fa:	fb03 4402 	mla	r4, r3, r2, r4
 80a22fe:	4603      	mov	r3, r0
 80a2300:	2200      	movs	r2, #0
        screenArray[i] = encodeColor(R,G,B);
 80a2302:	4f0f      	ldr	r7, [pc, #60]	; (80a2340 <_Z9fillStripiihhhb+0x5c>)
    for(i = start; i <= end; i++){
 80a2304:	6028      	str	r0, [r5, #0]
 80a2306:	4299      	cmp	r1, r3
 80a2308:	db04      	blt.n	80a2314 <_Z9fillStripiihhhb+0x30>
        screenArray[i] = encodeColor(R,G,B);
 80a230a:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
    for(i = start; i <= end; i++){
 80a230e:	2201      	movs	r2, #1
 80a2310:	3301      	adds	r3, #1
 80a2312:	e7f8      	b.n	80a2306 <_Z9fillStripiihhhb+0x22>
 80a2314:	1c4c      	adds	r4, r1, #1
 80a2316:	1a23      	subs	r3, r4, r0
 80a2318:	42a0      	cmp	r0, r4
 80a231a:	bfc8      	it	gt
 80a231c:	2300      	movgt	r3, #0
 80a231e:	4403      	add	r3, r0
 80a2320:	b102      	cbz	r2, 80a2324 <_Z9fillStripiihhhb+0x40>
 80a2322:	602b      	str	r3, [r5, #0]
    if(apply){
 80a2324:	b12e      	cbz	r6, 80a2332 <_Z9fillStripiihhhb+0x4e>
}
 80a2326:	bcf0      	pop	{r4, r5, r6, r7}
        printScreen(screenArray,start,end);
 80a2328:	460a      	mov	r2, r1
 80a232a:	4601      	mov	r1, r0
 80a232c:	4804      	ldr	r0, [pc, #16]	; (80a2340 <_Z9fillStripiihhhb+0x5c>)
 80a232e:	f7fd bf8b 	b.w	80a0248 <_Z11printScreenPiii>
}
 80a2332:	bcf0      	pop	{r4, r5, r6, r7}
 80a2334:	4770      	bx	lr
 80a2336:	bf00      	nop
 80a2338:	2000027c 	.word	0x2000027c
 80a233c:	000f4240 	.word	0x000f4240
 80a2340:	2000029c 	.word	0x2000029c

080a2344 <_Z8settingsihhh>:
void settings(int inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
 80a2344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2348:	2500      	movs	r5, #0
void settings(int inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
 80a234a:	4698      	mov	r8, r3
    int smode = 1;
 80a234c:	2301      	movs	r3, #1
void settings(int inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
 80a234e:	4604      	mov	r4, r0
 80a2350:	460e      	mov	r6, r1
 80a2352:	4617      	mov	r7, r2
 80a2354:	b087      	sub	sp, #28
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2356:	f100 09ff 	add.w	r9, r0, #255	; 0xff
 80a235a:	462a      	mov	r2, r5
 80a235c:	4649      	mov	r1, r9
    int smode = 1;
 80a235e:	9304      	str	r3, [sp, #16]
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2360:	9301      	str	r3, [sp, #4]
 80a2362:	9500      	str	r5, [sp, #0]
 80a2364:	462b      	mov	r3, r5
 80a2366:	f7ff ffbd 	bl	80a22e4 <_Z9fillStripiihhhb>
    strDisp("Settings",inpix,R,G,B,false);
 80a236a:	4632      	mov	r2, r6
 80a236c:	4621      	mov	r1, r4
 80a236e:	48a7      	ldr	r0, [pc, #668]	; (80a260c <_Z8settingsihhh+0x2c8>)
 80a2370:	463b      	mov	r3, r7
 80a2372:	e9cd 8500 	strd	r8, r5, [sp]
 80a2376:	f7fe fe11 	bl	80a0f9c <_Z7strDispPKcihhhb>
    printScreen(screenArray,inpix,inpix+255);
 80a237a:	464a      	mov	r2, r9
 80a237c:	4621      	mov	r1, r4
 80a237e:	48a4      	ldr	r0, [pc, #656]	; (80a2610 <_Z8settingsihhh+0x2cc>)
 80a2380:	f7fd ff62 	bl	80a0248 <_Z11printScreenPiii>
    while(digitalRead(enbtn) == HIGH) delay(5);
 80a2384:	2001      	movs	r0, #1
 80a2386:	f002 ff7f 	bl	80a5288 <digitalRead>
 80a238a:	2801      	cmp	r0, #1
 80a238c:	d103      	bne.n	80a2396 <_Z8settingsihhh+0x52>
 80a238e:	2005      	movs	r0, #5
 80a2390:	f001 ff4a 	bl	80a4228 <delay>
 80a2394:	e7f6      	b.n	80a2384 <_Z8settingsihhh+0x40>
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2396:	2300      	movs	r3, #0
 80a2398:	f04f 0a01 	mov.w	sl, #1
 80a239c:	461a      	mov	r2, r3
 80a239e:	4649      	mov	r1, r9
 80a23a0:	4620      	mov	r0, r4
 80a23a2:	e9cd 3a00 	strd	r3, sl, [sp]
 80a23a6:	f7ff ff9d 	bl	80a22e4 <_Z9fillStripiihhhb>
                strDisp("Exit", inpix, R, G, B, false);
 80a23aa:	f8df b268 	ldr.w	fp, [pc, #616]	; 80a2614 <_Z8settingsihhh+0x2d0>
        switch (smode){
 80a23ae:	9b04      	ldr	r3, [sp, #16]
 80a23b0:	3b01      	subs	r3, #1
 80a23b2:	2b04      	cmp	r3, #4
 80a23b4:	d80d      	bhi.n	80a23d2 <_Z8settingsihhh+0x8e>
 80a23b6:	e8df f003 	tbb	[pc, r3]
 80a23ba:	0f03      	.short	0x0f03
 80a23bc:	1f17      	.short	0x1f17
 80a23be:	27          	.byte	0x27
 80a23bf:	00          	.byte	0x00
                strDisp("WiFi", inpix, R, G, B, false);
 80a23c0:	2300      	movs	r3, #0
 80a23c2:	4632      	mov	r2, r6
 80a23c4:	e9cd 8300 	strd	r8, r3, [sp]
 80a23c8:	4621      	mov	r1, r4
 80a23ca:	463b      	mov	r3, r7
 80a23cc:	4892      	ldr	r0, [pc, #584]	; (80a2618 <_Z8settingsihhh+0x2d4>)
                strDisp("About", inpix, R, G, B, false);
 80a23ce:	f7fe fde5 	bl	80a0f9c <_Z7strDispPKcihhhb>
                break;
 80a23d2:	2301      	movs	r3, #1
 80a23d4:	9303      	str	r3, [sp, #12]
 80a23d6:	e039      	b.n	80a244c <_Z8settingsihhh+0x108>
                strDisp("Display", inpix, R, G, B, false);
 80a23d8:	2300      	movs	r3, #0
 80a23da:	4632      	mov	r2, r6
 80a23dc:	e9cd 8300 	strd	r8, r3, [sp]
 80a23e0:	4621      	mov	r1, r4
 80a23e2:	463b      	mov	r3, r7
 80a23e4:	488d      	ldr	r0, [pc, #564]	; (80a261c <_Z8settingsihhh+0x2d8>)
 80a23e6:	e7f2      	b.n	80a23ce <_Z8settingsihhh+0x8a>
                strDisp("Dark md", inpix, R, G, B, false);
 80a23e8:	2300      	movs	r3, #0
 80a23ea:	4632      	mov	r2, r6
 80a23ec:	e9cd 8300 	strd	r8, r3, [sp]
 80a23f0:	4621      	mov	r1, r4
 80a23f2:	463b      	mov	r3, r7
 80a23f4:	488a      	ldr	r0, [pc, #552]	; (80a2620 <_Z8settingsihhh+0x2dc>)
 80a23f6:	e7ea      	b.n	80a23ce <_Z8settingsihhh+0x8a>
                strDisp("About", inpix, R, G, B, false);
 80a23f8:	2300      	movs	r3, #0
 80a23fa:	4632      	mov	r2, r6
 80a23fc:	e9cd 8300 	strd	r8, r3, [sp]
 80a2400:	4621      	mov	r1, r4
 80a2402:	463b      	mov	r3, r7
 80a2404:	4887      	ldr	r0, [pc, #540]	; (80a2624 <_Z8settingsihhh+0x2e0>)
 80a2406:	e7e2      	b.n	80a23ce <_Z8settingsihhh+0x8a>
                strDisp("Exit", inpix, R, G, B, false);
 80a2408:	2300      	movs	r3, #0
 80a240a:	4632      	mov	r2, r6
 80a240c:	4621      	mov	r1, r4
 80a240e:	4658      	mov	r0, fp
 80a2410:	e9cd 8300 	strd	r8, r3, [sp]
 80a2414:	463b      	mov	r3, r7
 80a2416:	f7fe fdc1 	bl	80a0f9c <_Z7strDispPKcihhhb>
                if(digitalRead(enbtn) == HIGH){
 80a241a:	2001      	movs	r0, #1
 80a241c:	f002 ff34 	bl	80a5288 <digitalRead>
 80a2420:	2801      	cmp	r0, #1
 80a2422:	d1d6      	bne.n	80a23d2 <_Z8settingsihhh+0x8e>
                    while(digitalRead(enbtn) == HIGH) delay(5);
 80a2424:	2001      	movs	r0, #1
 80a2426:	f002 ff2f 	bl	80a5288 <digitalRead>
 80a242a:	2801      	cmp	r0, #1
 80a242c:	d103      	bne.n	80a2436 <_Z8settingsihhh+0xf2>
 80a242e:	2005      	movs	r0, #5
 80a2430:	f001 fefa 	bl	80a4228 <delay>
 80a2434:	e7f6      	b.n	80a2424 <_Z8settingsihhh+0xe0>
                    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2436:	2500      	movs	r5, #0
 80a2438:	4649      	mov	r1, r9
 80a243a:	462b      	mov	r3, r5
 80a243c:	462a      	mov	r2, r5
 80a243e:	4620      	mov	r0, r4
 80a2440:	f8cd a004 	str.w	sl, [sp, #4]
 80a2444:	9500      	str	r5, [sp, #0]
 80a2446:	f7ff ff4d 	bl	80a22e4 <_Z9fillStripiihhhb>
                    sett = false;
 80a244a:	9503      	str	r5, [sp, #12]
        if(digitalRead(enbtn) == HIGH){
 80a244c:	2001      	movs	r0, #1
 80a244e:	f002 ff1b 	bl	80a5288 <digitalRead>
 80a2452:	2801      	cmp	r0, #1
 80a2454:	f040 8125 	bne.w	80a26a2 <_Z8settingsihhh+0x35e>
            int submode = 1;
 80a2458:	9005      	str	r0, [sp, #20]
            while(digitalRead(enbtn) == HIGH) delay(5);
 80a245a:	2001      	movs	r0, #1
 80a245c:	f002 ff14 	bl	80a5288 <digitalRead>
 80a2460:	2801      	cmp	r0, #1
 80a2462:	d103      	bne.n	80a246c <_Z8settingsihhh+0x128>
 80a2464:	2005      	movs	r0, #5
 80a2466:	f001 fedf 	bl	80a4228 <delay>
 80a246a:	e7f6      	b.n	80a245a <_Z8settingsihhh+0x116>
            fillStrip(inpix,inpix+255,0,0,0,true);
 80a246c:	2300      	movs	r3, #0
 80a246e:	4649      	mov	r1, r9
 80a2470:	461a      	mov	r2, r3
 80a2472:	4620      	mov	r0, r4
 80a2474:	f8cd a004 	str.w	sl, [sp, #4]
 80a2478:	9300      	str	r3, [sp, #0]
 80a247a:	f7ff ff33 	bl	80a22e4 <_Z9fillStripiihhhb>
                switch (smode){
 80a247e:	9b04      	ldr	r3, [sp, #16]
 80a2480:	3b01      	subs	r3, #1
 80a2482:	2b04      	cmp	r3, #4
 80a2484:	f200 813a 	bhi.w	80a26fc <_Z8settingsihhh+0x3b8>
 80a2488:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a248c:	005f0005 	.word	0x005f0005
 80a2490:	009f007f 	.word	0x009f007f
 80a2494:	0128      	.short	0x0128
                        switch(submode){
 80a2496:	9b05      	ldr	r3, [sp, #20]
 80a2498:	3b01      	subs	r3, #1
 80a249a:	2b03      	cmp	r3, #3
 80a249c:	d811      	bhi.n	80a24c2 <_Z8settingsihhh+0x17e>
 80a249e:	e8df f003 	tbb	[pc, r3]
 80a24a2:	4202      	.short	0x4202
 80a24a4:	db4c      	.short	0xdb4c
                                strDisp("sig str", inpix, R, G, B, false);
 80a24a6:	2500      	movs	r5, #0
 80a24a8:	463b      	mov	r3, r7
 80a24aa:	4632      	mov	r2, r6
 80a24ac:	4621      	mov	r1, r4
 80a24ae:	485e      	ldr	r0, [pc, #376]	; (80a2628 <_Z8settingsihhh+0x2e4>)
 80a24b0:	e9cd 8500 	strd	r8, r5, [sp]
 80a24b4:	f7fe fd72 	bl	80a0f9c <_Z7strDispPKcihhhb>
                                if(digitalRead(enbtn) == HIGH){
 80a24b8:	2001      	movs	r0, #1
 80a24ba:	f002 fee5 	bl	80a5288 <digitalRead>
 80a24be:	2801      	cmp	r0, #1
 80a24c0:	d001      	beq.n	80a24c6 <_Z8settingsihhh+0x182>
                        switch(submode){
 80a24c2:	2501      	movs	r5, #1
 80a24c4:	e0d7      	b.n	80a2676 <_Z8settingsihhh+0x332>
                                    fillStrip(inpix,inpix+255,0,0,0,true);
 80a24c6:	462a      	mov	r2, r5
 80a24c8:	4649      	mov	r1, r9
 80a24ca:	e9cd 5000 	strd	r5, r0, [sp]
 80a24ce:	462b      	mov	r3, r5
 80a24d0:	4620      	mov	r0, r4
 80a24d2:	f7ff ff07 	bl	80a22e4 <_Z9fillStripiihhhb>
                                    printScreen(screenArray,inpix,inpix+255);
 80a24d6:	464a      	mov	r2, r9
 80a24d8:	4621      	mov	r1, r4
 80a24da:	484d      	ldr	r0, [pc, #308]	; (80a2610 <_Z8settingsihhh+0x2cc>)
 80a24dc:	f7fd feb4 	bl	80a0248 <_Z11printScreenPiii>
                                    while(digitalRead(enbtn) == HIGH) delay(5);
 80a24e0:	2001      	movs	r0, #1
 80a24e2:	f002 fed1 	bl	80a5288 <digitalRead>
 80a24e6:	2801      	cmp	r0, #1
 80a24e8:	d103      	bne.n	80a24f2 <_Z8settingsihhh+0x1ae>
 80a24ea:	2005      	movs	r0, #5
 80a24ec:	f001 fe9c 	bl	80a4228 <delay>
 80a24f0:	e7f6      	b.n	80a24e0 <_Z8settingsihhh+0x19c>
                                    while(digitalRead(enbtn) == LOW) delay(5);
 80a24f2:	2001      	movs	r0, #1
 80a24f4:	f002 fec8 	bl	80a5288 <digitalRead>
 80a24f8:	b918      	cbnz	r0, 80a2502 <_Z8settingsihhh+0x1be>
 80a24fa:	2005      	movs	r0, #5
 80a24fc:	f001 fe94 	bl	80a4228 <delay>
 80a2500:	e7f7      	b.n	80a24f2 <_Z8settingsihhh+0x1ae>
                                    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2502:	2300      	movs	r3, #0
 80a2504:	4649      	mov	r1, r9
 80a2506:	461a      	mov	r2, r3
 80a2508:	4620      	mov	r0, r4
 80a250a:	f8cd a004 	str.w	sl, [sp, #4]
 80a250e:	9300      	str	r3, [sp, #0]
 80a2510:	f7ff fee8 	bl	80a22e4 <_Z9fillStripiihhhb>
                                    while(digitalRead(enbtn) == HIGH) delay(5);
 80a2514:	2001      	movs	r0, #1
 80a2516:	f002 feb7 	bl	80a5288 <digitalRead>
 80a251a:	2801      	cmp	r0, #1
 80a251c:	d1d1      	bne.n	80a24c2 <_Z8settingsihhh+0x17e>
 80a251e:	2005      	movs	r0, #5
 80a2520:	f001 fe82 	bl	80a4228 <delay>
 80a2524:	e7f6      	b.n	80a2514 <_Z8settingsihhh+0x1d0>
                                strDisp("IP",inpix, R, G, B, false);
 80a2526:	2300      	movs	r3, #0
 80a2528:	4632      	mov	r2, r6
 80a252a:	e9cd 8300 	strd	r8, r3, [sp]
 80a252e:	4621      	mov	r1, r4
 80a2530:	463b      	mov	r3, r7
 80a2532:	483e      	ldr	r0, [pc, #248]	; (80a262c <_Z8settingsihhh+0x2e8>)
                                strDisp("Reset", inpix, R, G, B, false);
 80a2534:	f7fe fd32 	bl	80a0f9c <_Z7strDispPKcihhhb>
                                break;
 80a2538:	e7c3      	b.n	80a24c2 <_Z8settingsihhh+0x17e>
                                strDisp("Net name", inpix, R, G, B, false);
 80a253a:	2300      	movs	r3, #0
 80a253c:	4632      	mov	r2, r6
 80a253e:	e9cd 8300 	strd	r8, r3, [sp]
 80a2542:	4621      	mov	r1, r4
 80a2544:	463b      	mov	r3, r7
 80a2546:	483a      	ldr	r0, [pc, #232]	; (80a2630 <_Z8settingsihhh+0x2ec>)
 80a2548:	e7f4      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                        switch(submode){
 80a254a:	9b05      	ldr	r3, [sp, #20]
 80a254c:	3b01      	subs	r3, #1
 80a254e:	2b03      	cmp	r3, #3
 80a2550:	d8b7      	bhi.n	80a24c2 <_Z8settingsihhh+0x17e>
 80a2552:	e8df f003 	tbb	[pc, r3]
 80a2556:	0a02      	.short	0x0a02
 80a2558:	8112      	.short	0x8112
                                strDisp("Tru-tone", inpix, R, G, B, false);
 80a255a:	2300      	movs	r3, #0
 80a255c:	4632      	mov	r2, r6
 80a255e:	e9cd 8300 	strd	r8, r3, [sp]
 80a2562:	4621      	mov	r1, r4
 80a2564:	463b      	mov	r3, r7
 80a2566:	4833      	ldr	r0, [pc, #204]	; (80a2634 <_Z8settingsihhh+0x2f0>)
 80a2568:	e7e4      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                                strDisp("Get wthr",inpix, R, G, B, false);
 80a256a:	2300      	movs	r3, #0
 80a256c:	4632      	mov	r2, r6
 80a256e:	e9cd 8300 	strd	r8, r3, [sp]
 80a2572:	4621      	mov	r1, r4
 80a2574:	463b      	mov	r3, r7
 80a2576:	4830      	ldr	r0, [pc, #192]	; (80a2638 <_Z8settingsihhh+0x2f4>)
 80a2578:	e7dc      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                                strDisp("Get temp", inpix, R, G, B, false);
 80a257a:	2300      	movs	r3, #0
 80a257c:	4632      	mov	r2, r6
 80a257e:	e9cd 8300 	strd	r8, r3, [sp]
 80a2582:	4621      	mov	r1, r4
 80a2584:	463b      	mov	r3, r7
 80a2586:	482d      	ldr	r0, [pc, #180]	; (80a263c <_Z8settingsihhh+0x2f8>)
 80a2588:	e7d4      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                        switch(submode){
 80a258a:	9b05      	ldr	r3, [sp, #20]
 80a258c:	3b01      	subs	r3, #1
 80a258e:	2b03      	cmp	r3, #3
 80a2590:	d897      	bhi.n	80a24c2 <_Z8settingsihhh+0x17e>
 80a2592:	e8df f003 	tbb	[pc, r3]
 80a2596:	0a02      	.short	0x0a02
 80a2598:	6112      	.short	0x6112
                                strDisp("Mini clk", inpix, R, G, B, false);
 80a259a:	2300      	movs	r3, #0
 80a259c:	4632      	mov	r2, r6
 80a259e:	e9cd 8300 	strd	r8, r3, [sp]
 80a25a2:	4621      	mov	r1, r4
 80a25a4:	463b      	mov	r3, r7
 80a25a6:	4826      	ldr	r0, [pc, #152]	; (80a2640 <_Z8settingsihhh+0x2fc>)
 80a25a8:	e7c4      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                                strDisp("Dark clr",inpix, R, G, B, false);
 80a25aa:	2300      	movs	r3, #0
 80a25ac:	4632      	mov	r2, r6
 80a25ae:	e9cd 8300 	strd	r8, r3, [sp]
 80a25b2:	4621      	mov	r1, r4
 80a25b4:	463b      	mov	r3, r7
 80a25b6:	4823      	ldr	r0, [pc, #140]	; (80a2644 <_Z8settingsihhh+0x300>)
 80a25b8:	e7bc      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                                strDisp("Disp temp", inpix, R, G, B, false);
 80a25ba:	2300      	movs	r3, #0
 80a25bc:	4632      	mov	r2, r6
 80a25be:	e9cd 8300 	strd	r8, r3, [sp]
 80a25c2:	4621      	mov	r1, r4
 80a25c4:	463b      	mov	r3, r7
 80a25c6:	4820      	ldr	r0, [pc, #128]	; (80a2648 <_Z8settingsihhh+0x304>)
 80a25c8:	e7b4      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                        switch(submode){
 80a25ca:	9b05      	ldr	r3, [sp, #20]
 80a25cc:	3b01      	subs	r3, #1
 80a25ce:	2b03      	cmp	r3, #3
 80a25d0:	f63f af77 	bhi.w	80a24c2 <_Z8settingsihhh+0x17e>
 80a25d4:	e8df f003 	tbb	[pc, r3]
 80a25d8:	40120a02 	.word	0x40120a02
                                strDisp("Sys-vsn", inpix, R, G, B, false);
 80a25dc:	2300      	movs	r3, #0
 80a25de:	4632      	mov	r2, r6
 80a25e0:	e9cd 8300 	strd	r8, r3, [sp]
 80a25e4:	4621      	mov	r1, r4
 80a25e6:	463b      	mov	r3, r7
 80a25e8:	4818      	ldr	r0, [pc, #96]	; (80a264c <_Z8settingsihhh+0x308>)
 80a25ea:	e7a3      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                                strDisp("Firm-vsn",inpix, R, G, B, false);
 80a25ec:	2300      	movs	r3, #0
 80a25ee:	4632      	mov	r2, r6
 80a25f0:	e9cd 8300 	strd	r8, r3, [sp]
 80a25f4:	4621      	mov	r1, r4
 80a25f6:	463b      	mov	r3, r7
 80a25f8:	4815      	ldr	r0, [pc, #84]	; (80a2650 <_Z8settingsihhh+0x30c>)
 80a25fa:	e79b      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
                                strDisp("Reset", inpix, R, G, B, false);
 80a25fc:	2300      	movs	r3, #0
 80a25fe:	4632      	mov	r2, r6
 80a2600:	e9cd 8300 	strd	r8, r3, [sp]
 80a2604:	4621      	mov	r1, r4
 80a2606:	463b      	mov	r3, r7
 80a2608:	4812      	ldr	r0, [pc, #72]	; (80a2654 <_Z8settingsihhh+0x310>)
 80a260a:	e793      	b.n	80a2534 <_Z8settingsihhh+0x1f0>
 80a260c:	080a9024 	.word	0x080a9024
 80a2610:	2000029c 	.word	0x2000029c
 80a2614:	080a9048 	.word	0x080a9048
 80a2618:	080a902d 	.word	0x080a902d
 80a261c:	080a9032 	.word	0x080a9032
 80a2620:	080a903a 	.word	0x080a903a
 80a2624:	080a9042 	.word	0x080a9042
 80a2628:	080a904d 	.word	0x080a904d
 80a262c:	080a9055 	.word	0x080a9055
 80a2630:	080a9058 	.word	0x080a9058
 80a2634:	080a9061 	.word	0x080a9061
 80a2638:	080a906a 	.word	0x080a906a
 80a263c:	080a9073 	.word	0x080a9073
 80a2640:	080a907c 	.word	0x080a907c
 80a2644:	080a9085 	.word	0x080a9085
 80a2648:	080a908e 	.word	0x080a908e
 80a264c:	080a9098 	.word	0x080a9098
 80a2650:	080a90a0 	.word	0x080a90a0
 80a2654:	080a90a9 	.word	0x080a90a9
                                strDisp("Exit", inpix, R, G, B, false);
 80a2658:	2300      	movs	r3, #0
 80a265a:	4632      	mov	r2, r6
 80a265c:	4621      	mov	r1, r4
 80a265e:	4658      	mov	r0, fp
 80a2660:	e9cd 8300 	strd	r8, r3, [sp]
 80a2664:	463b      	mov	r3, r7
 80a2666:	f7fe fc99 	bl	80a0f9c <_Z7strDispPKcihhhb>
                                if(digitalRead(enbtn) == HIGH) submenu = false;
 80a266a:	2001      	movs	r0, #1
 80a266c:	f002 fe0c 	bl	80a5288 <digitalRead>
 80a2670:	1e45      	subs	r5, r0, #1
 80a2672:	bf18      	it	ne
 80a2674:	2501      	movne	r5, #1
                        if(menuButtonUpdate(&submode,4)) fillStrip(inpix,inpix+255,0,0,0,true);
 80a2676:	2104      	movs	r1, #4
 80a2678:	a805      	add	r0, sp, #20
 80a267a:	f7ff fdeb 	bl	80a2254 <_Z16menuButtonUpdatePii>
 80a267e:	b140      	cbz	r0, 80a2692 <_Z8settingsihhh+0x34e>
 80a2680:	2300      	movs	r3, #0
 80a2682:	4649      	mov	r1, r9
 80a2684:	461a      	mov	r2, r3
 80a2686:	4620      	mov	r0, r4
 80a2688:	f8cd a004 	str.w	sl, [sp, #4]
 80a268c:	9300      	str	r3, [sp, #0]
 80a268e:	f7ff fe29 	bl	80a22e4 <_Z9fillStripiihhhb>
                printScreen(screenArray,inpix,inpix+255);
 80a2692:	464a      	mov	r2, r9
 80a2694:	4621      	mov	r1, r4
 80a2696:	481a      	ldr	r0, [pc, #104]	; (80a2700 <_Z8settingsihhh+0x3bc>)
 80a2698:	f7fd fdd6 	bl	80a0248 <_Z11printScreenPiii>
            while(submenu){
 80a269c:	2d00      	cmp	r5, #0
 80a269e:	f47f aeee 	bne.w	80a247e <_Z8settingsihhh+0x13a>
        if(menuButtonUpdate(&smode,numMenuItems)) fillStrip(inpix,inpix+255,0,0,0,true);
 80a26a2:	2105      	movs	r1, #5
 80a26a4:	a804      	add	r0, sp, #16
 80a26a6:	f7ff fdd5 	bl	80a2254 <_Z16menuButtonUpdatePii>
 80a26aa:	b140      	cbz	r0, 80a26be <_Z8settingsihhh+0x37a>
 80a26ac:	2300      	movs	r3, #0
 80a26ae:	4649      	mov	r1, r9
 80a26b0:	461a      	mov	r2, r3
 80a26b2:	4620      	mov	r0, r4
 80a26b4:	f8cd a004 	str.w	sl, [sp, #4]
 80a26b8:	9300      	str	r3, [sp, #0]
 80a26ba:	f7ff fe13 	bl	80a22e4 <_Z9fillStripiihhhb>
        printScreen(screenArray,inpix,inpix+255);
 80a26be:	464a      	mov	r2, r9
 80a26c0:	4621      	mov	r1, r4
 80a26c2:	480f      	ldr	r0, [pc, #60]	; (80a2700 <_Z8settingsihhh+0x3bc>)
 80a26c4:	f7fd fdc0 	bl	80a0248 <_Z11printScreenPiii>
        delay(50);
 80a26c8:	2032      	movs	r0, #50	; 0x32
 80a26ca:	f001 fdad 	bl	80a4228 <delay>
    while(sett == true) 
 80a26ce:	9b03      	ldr	r3, [sp, #12]
 80a26d0:	2b00      	cmp	r3, #0
 80a26d2:	f47f ae6c 	bne.w	80a23ae <_Z8settingsihhh+0x6a>
}
 80a26d6:	b007      	add	sp, #28
 80a26d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        strDisp("Exit", inpix, R, G, B, false);
 80a26dc:	2300      	movs	r3, #0
 80a26de:	4632      	mov	r2, r6
 80a26e0:	4621      	mov	r1, r4
 80a26e2:	4658      	mov	r0, fp
 80a26e4:	e9cd 8300 	strd	r8, r3, [sp]
 80a26e8:	463b      	mov	r3, r7
 80a26ea:	f7fe fc57 	bl	80a0f9c <_Z7strDispPKcihhhb>
                        if(digitalRead(enbtn) == HIGH) submenu = false;
 80a26ee:	2001      	movs	r0, #1
 80a26f0:	f002 fdca 	bl	80a5288 <digitalRead>
 80a26f4:	1e45      	subs	r5, r0, #1
 80a26f6:	bf18      	it	ne
 80a26f8:	2501      	movne	r5, #1
 80a26fa:	e7ca      	b.n	80a2692 <_Z8settingsihhh+0x34e>
                switch (smode){
 80a26fc:	2501      	movs	r5, #1
 80a26fe:	e7c8      	b.n	80a2692 <_Z8settingsihhh+0x34e>
 80a2700:	2000029c 	.word	0x2000029c
 80a2704:	00000000 	.word	0x00000000

080a2708 <_Z16colorModeProcessv>:
void colorModeProcess(){
 80a2708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(scan == 1){
 80a270c:	4b72      	ldr	r3, [pc, #456]	; (80a28d8 <_Z16colorModeProcessv+0x1d0>)
 80a270e:	f8d3 9000 	ldr.w	r9, [r3]
 80a2712:	f1b9 0f01 	cmp.w	r9, #1
 80a2716:	d135      	bne.n	80a2784 <_Z16colorModeProcessv+0x7c>
        scan=2;
 80a2718:	f04f 0802 	mov.w	r8, #2
        if(analogRead(A4) < bound) {
 80a271c:	200e      	movs	r0, #14
        scan=2;
 80a271e:	f8c3 8000 	str.w	r8, [r3]
        if(analogRead(A4) < bound) {
 80a2722:	f002 fdc4 	bl	80a52ae <analogRead>
 80a2726:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 80a28dc <_Z16colorModeProcessv+0x1d4>
 80a272a:	4c6d      	ldr	r4, [pc, #436]	; (80a28e0 <_Z16colorModeProcessv+0x1d8>)
 80a272c:	f8da 3000 	ldr.w	r3, [sl]
 80a2730:	4d6c      	ldr	r5, [pc, #432]	; (80a28e4 <_Z16colorModeProcessv+0x1dc>)
 80a2732:	4298      	cmp	r0, r3
 80a2734:	4f6c      	ldr	r7, [pc, #432]	; (80a28e8 <_Z16colorModeProcessv+0x1e0>)
 80a2736:	4e6d      	ldr	r6, [pc, #436]	; (80a28ec <_Z16colorModeProcessv+0x1e4>)
 80a2738:	da31      	bge.n	80a279e <_Z16colorModeProcessv+0x96>
            bound = upbound;
 80a273a:	23fa      	movs	r3, #250	; 0xfa
 80a273c:	f8ca 3000 	str.w	r3, [sl]
            if(fdark == 2){
 80a2740:	6823      	ldr	r3, [r4, #0]
 80a2742:	4543      	cmp	r3, r8
 80a2744:	d10a      	bne.n	80a275c <_Z16colorModeProcessv+0x54>
                fillStrip(0,511,0,0,0,false);
 80a2746:	2300      	movs	r3, #0
 80a2748:	f240 11ff 	movw	r1, #511	; 0x1ff
 80a274c:	461a      	mov	r2, r3
 80a274e:	4618      	mov	r0, r3
 80a2750:	e9cd 3300 	strd	r3, r3, [sp]
 80a2754:	f7ff fdc6 	bl	80a22e4 <_Z9fillStripiihhhb>
                fdark = 1;
 80a2758:	f8c4 9000 	str.w	r9, [r4]
            gclock = 0;
 80a275c:	2400      	movs	r4, #0
            rclock = 1;
 80a275e:	f04f 0801 	mov.w	r8, #1
            gclock = 0;
 80a2762:	603c      	str	r4, [r7, #0]
            rclock = 1;
 80a2764:	f8c5 8000 	str.w	r8, [r5]
            bclock = 0;
 80a2768:	6034      	str	r4, [r6, #0]
            if(EEPROM.read(5) == 2){
 80a276a:	f002 fdb7 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a276e:	2005      	movs	r0, #5
 80a2770:	f001 faf4 	bl	80a3d5c <HAL_EEPROM_Read>
 80a2774:	2802      	cmp	r0, #2
 80a2776:	d108      	bne.n	80a278a <_Z16colorModeProcessv+0x82>
                gclock = 1;
 80a2778:	f8c7 8000 	str.w	r8, [r7]
                rclock = 0;
 80a277c:	602c      	str	r4, [r5, #0]
            dmode = 1;
 80a277e:	2201      	movs	r2, #1
 80a2780:	4b5b      	ldr	r3, [pc, #364]	; (80a28f0 <_Z16colorModeProcessv+0x1e8>)
 80a2782:	601a      	str	r2, [r3, #0]
}
 80a2784:	b003      	add	sp, #12
 80a2786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(EEPROM.read(5) == 3){
 80a278a:	f002 fda7 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a278e:	2005      	movs	r0, #5
 80a2790:	f001 fae4 	bl	80a3d5c <HAL_EEPROM_Read>
 80a2794:	2803      	cmp	r0, #3
 80a2796:	d1f2      	bne.n	80a277e <_Z16colorModeProcessv+0x76>
                bclock = 1;
 80a2798:	f8c6 8000 	str.w	r8, [r6]
 80a279c:	e7ee      	b.n	80a277c <_Z16colorModeProcessv+0x74>
            if(fdark == 1){
 80a279e:	6823      	ldr	r3, [r4, #0]
 80a27a0:	2b01      	cmp	r3, #1
 80a27a2:	d10a      	bne.n	80a27ba <_Z16colorModeProcessv+0xb2>
                fillStrip(0,511,0,0,0,false);
 80a27a4:	2300      	movs	r3, #0
 80a27a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80a27aa:	461a      	mov	r2, r3
 80a27ac:	4618      	mov	r0, r3
 80a27ae:	e9cd 3300 	strd	r3, r3, [sp]
 80a27b2:	f7ff fd97 	bl	80a22e4 <_Z9fillStripiihhhb>
                fdark = 2;
 80a27b6:	f8c4 8000 	str.w	r8, [r4]
            photo = analogRead(A4)/18;
 80a27ba:	200e      	movs	r0, #14
 80a27bc:	f002 fd77 	bl	80a52ae <analogRead>
 80a27c0:	2412      	movs	r4, #18
 80a27c2:	fb90 f0f4 	sdiv	r0, r0, r4
 80a27c6:	4b4b      	ldr	r3, [pc, #300]	; (80a28f4 <_Z16colorModeProcessv+0x1ec>)
 80a27c8:	6018      	str	r0, [r3, #0]
            if(trueTone){
 80a27ca:	4b4b      	ldr	r3, [pc, #300]	; (80a28f8 <_Z16colorModeProcessv+0x1f0>)
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a27cc:	200e      	movs	r0, #14
            if(trueTone){
 80a27ce:	781b      	ldrb	r3, [r3, #0]
 80a27d0:	2b00      	cmp	r3, #0
 80a27d2:	d050      	beq.n	80a2876 <_Z16colorModeProcessv+0x16e>
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a27d4:	f002 fd6b 	bl	80a52ae <analogRead>
 80a27d8:	4683      	mov	fp, r0
                tempG = (float)analogRead(A4)/((float)10000)+0.65;
 80a27da:	200e      	movs	r0, #14
 80a27dc:	f002 fd67 	bl	80a52ae <analogRead>
 80a27e0:	4680      	mov	r8, r0
                rclock = analogRead(A4)/18;//*(1-(analogRead(A4)/9500));
 80a27e2:	200e      	movs	r0, #14
 80a27e4:	f002 fd63 	bl	80a52ae <analogRead>
 80a27e8:	fb90 f0f4 	sdiv	r0, r0, r4
 80a27ec:	6028      	str	r0, [r5, #0]
                gclock = (analogRead(A4)/18)*tempG;
 80a27ee:	200e      	movs	r0, #14
 80a27f0:	f002 fd5d 	bl	80a52ae <analogRead>
 80a27f4:	4605      	mov	r5, r0
                tempG = (float)analogRead(A4)/((float)10000)+0.65;
 80a27f6:	4640      	mov	r0, r8
 80a27f8:	f003 fbdc 	bl	80a5fb4 <__aeabi_i2f>
 80a27fc:	493f      	ldr	r1, [pc, #252]	; (80a28fc <_Z16colorModeProcessv+0x1f4>)
 80a27fe:	f003 fce1 	bl	80a61c4 <__aeabi_fdiv>
 80a2802:	f002 ff93 	bl	80a572c <__aeabi_f2d>
 80a2806:	a32c      	add	r3, pc, #176	; (adr r3, 80a28b8 <_Z16colorModeProcessv+0x1b0>)
 80a2808:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a280c:	f002 fe30 	bl	80a5470 <__adddf3>
 80a2810:	4680      	mov	r8, r0
                gclock = (analogRead(A4)/18)*tempG;
 80a2812:	fb95 f0f4 	sdiv	r0, r5, r4
                tempG = (float)analogRead(A4)/((float)10000)+0.65;
 80a2816:	4689      	mov	r9, r1
                gclock = (analogRead(A4)/18)*tempG;
 80a2818:	f002 ff76 	bl	80a5708 <__aeabi_i2d>
 80a281c:	4602      	mov	r2, r0
 80a281e:	460b      	mov	r3, r1
 80a2820:	4640      	mov	r0, r8
 80a2822:	4649      	mov	r1, r9
 80a2824:	f002 ffda 	bl	80a57dc <__aeabi_dmul>
 80a2828:	f003 fa72 	bl	80a5d10 <__aeabi_d2iz>
 80a282c:	6038      	str	r0, [r7, #0]
                bclock = (analogRead(A4)/18)*tempB;
 80a282e:	200e      	movs	r0, #14
 80a2830:	f002 fd3d 	bl	80a52ae <analogRead>
 80a2834:	4605      	mov	r5, r0
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a2836:	4658      	mov	r0, fp
 80a2838:	f003 fbbc 	bl	80a5fb4 <__aeabi_i2f>
 80a283c:	4930      	ldr	r1, [pc, #192]	; (80a2900 <_Z16colorModeProcessv+0x1f8>)
 80a283e:	f003 fcc1 	bl	80a61c4 <__aeabi_fdiv>
 80a2842:	f002 ff73 	bl	80a572c <__aeabi_f2d>
 80a2846:	a31e      	add	r3, pc, #120	; (adr r3, 80a28c0 <_Z16colorModeProcessv+0x1b8>)
 80a2848:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a284c:	f002 fe10 	bl	80a5470 <__adddf3>
 80a2850:	4680      	mov	r8, r0
                bclock = (analogRead(A4)/18)*tempB;
 80a2852:	fb95 f0f4 	sdiv	r0, r5, r4
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a2856:	4689      	mov	r9, r1
                bclock = (analogRead(A4)/18)*tempB;
 80a2858:	f002 ff56 	bl	80a5708 <__aeabi_i2d>
 80a285c:	4602      	mov	r2, r0
 80a285e:	460b      	mov	r3, r1
 80a2860:	4640      	mov	r0, r8
 80a2862:	4649      	mov	r1, r9
                bclock = (analogRead(A4)/18)*0.8;
 80a2864:	f002 ffba 	bl	80a57dc <__aeabi_dmul>
 80a2868:	f003 fa52 	bl	80a5d10 <__aeabi_d2iz>
            bound = dnbound;
 80a286c:	233c      	movs	r3, #60	; 0x3c
                bclock = (analogRead(A4)/18)*0.8;
 80a286e:	6030      	str	r0, [r6, #0]
            bound = dnbound;
 80a2870:	f8ca 3000 	str.w	r3, [sl]
}
 80a2874:	e786      	b.n	80a2784 <_Z16colorModeProcessv+0x7c>
                rclock = analogRead(A4)/18;
 80a2876:	f002 fd1a 	bl	80a52ae <analogRead>
 80a287a:	fb90 f0f4 	sdiv	r0, r0, r4
 80a287e:	6028      	str	r0, [r5, #0]
                gclock = (analogRead(A4)/18)*0.9;
 80a2880:	200e      	movs	r0, #14
 80a2882:	f002 fd14 	bl	80a52ae <analogRead>
 80a2886:	fb90 f0f4 	sdiv	r0, r0, r4
 80a288a:	f002 ff3d 	bl	80a5708 <__aeabi_i2d>
 80a288e:	a30e      	add	r3, pc, #56	; (adr r3, 80a28c8 <_Z16colorModeProcessv+0x1c0>)
 80a2890:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2894:	f002 ffa2 	bl	80a57dc <__aeabi_dmul>
 80a2898:	f003 fa3a 	bl	80a5d10 <__aeabi_d2iz>
 80a289c:	6038      	str	r0, [r7, #0]
                bclock = (analogRead(A4)/18)*0.8;
 80a289e:	200e      	movs	r0, #14
 80a28a0:	f002 fd05 	bl	80a52ae <analogRead>
 80a28a4:	fb90 f0f4 	sdiv	r0, r0, r4
 80a28a8:	f002 ff2e 	bl	80a5708 <__aeabi_i2d>
 80a28ac:	a308      	add	r3, pc, #32	; (adr r3, 80a28d0 <_Z16colorModeProcessv+0x1c8>)
 80a28ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a28b2:	e7d7      	b.n	80a2864 <_Z16colorModeProcessv+0x15c>
 80a28b4:	f3af 8000 	nop.w
 80a28b8:	cccccccd 	.word	0xcccccccd
 80a28bc:	3fe4cccc 	.word	0x3fe4cccc
 80a28c0:	33333333 	.word	0x33333333
 80a28c4:	3fd33333 	.word	0x3fd33333
 80a28c8:	cccccccd 	.word	0xcccccccd
 80a28cc:	3feccccc 	.word	0x3feccccc
 80a28d0:	9999999a 	.word	0x9999999a
 80a28d4:	3fe99999 	.word	0x3fe99999
 80a28d8:	20000298 	.word	0x20000298
 80a28dc:	2000025c 	.word	0x2000025c
 80a28e0:	2000026c 	.word	0x2000026c
 80a28e4:	20000294 	.word	0x20000294
 80a28e8:	20000270 	.word	0x20000270
 80a28ec:	20000258 	.word	0x20000258
 80a28f0:	20000268 	.word	0x20000268
 80a28f4:	20000290 	.word	0x20000290
 80a28f8:	20000ab0 	.word	0x20000ab0
 80a28fc:	461c4000 	.word	0x461c4000
 80a2900:	45a9a000 	.word	0x45a9a000

080a2904 <loop>:
void loop(){
 80a2904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    colorModeProcess();
 80a2908:	f7ff fefe 	bl	80a2708 <_Z16colorModeProcessv>
    if(dmode == 1){                                                     
 80a290c:	4b39      	ldr	r3, [pc, #228]	; (80a29f4 <loop+0xf0>)
 80a290e:	681f      	ldr	r7, [r3, #0]
 80a2910:	2f01      	cmp	r7, #1
 80a2912:	d13e      	bne.n	80a2992 <loop+0x8e>
        displayClock(0, rclock, gclock, bclock, true);                          //Manually Update Temperature every full cycle
 80a2914:	4e38      	ldr	r6, [pc, #224]	; (80a29f8 <loop+0xf4>)
 80a2916:	4d39      	ldr	r5, [pc, #228]	; (80a29fc <loop+0xf8>)
 80a2918:	4c39      	ldr	r4, [pc, #228]	; (80a2a00 <loop+0xfc>)
 80a291a:	7833      	ldrb	r3, [r6, #0]
 80a291c:	2000      	movs	r0, #0
 80a291e:	782a      	ldrb	r2, [r5, #0]
 80a2920:	7821      	ldrb	r1, [r4, #0]
 80a2922:	9700      	str	r7, [sp, #0]
 80a2924:	f7fe fb5c 	bl	80a0fe0 <_Z12displayClockihhhi>
        printScreen(screenArray,0,PIXEL_COUNT-1);
 80a2928:	f240 12ff 	movw	r2, #511	; 0x1ff
 80a292c:	2100      	movs	r1, #0
 80a292e:	4835      	ldr	r0, [pc, #212]	; (80a2a04 <loop+0x100>)
 80a2930:	f7fd fc8a 	bl	80a0248 <_Z11printScreenPiii>
        checkForUpdate(false);
 80a2934:	2000      	movs	r0, #0
 80a2936:	f7fe fcc9 	bl	80a12cc <_Z14checkForUpdateb>
        scan = 1;
 80a293a:	4b33      	ldr	r3, [pc, #204]	; (80a2a08 <loop+0x104>)
        if(analogRead(A4) >= bound)             
 80a293c:	200e      	movs	r0, #14
        scan = 1;
 80a293e:	601f      	str	r7, [r3, #0]
        if(analogRead(A4) >= bound)             
 80a2940:	f002 fcb5 	bl	80a52ae <analogRead>
 80a2944:	4b31      	ldr	r3, [pc, #196]	; (80a2a0c <loop+0x108>)
 80a2946:	681b      	ldr	r3, [r3, #0]
 80a2948:	4298      	cmp	r0, r3
 80a294a:	db28      	blt.n	80a299e <loop+0x9a>
            if(EEPROM.read(2) == 1)                                             //Check if setting is enabled for displaying weather elements
 80a294c:	f002 fcc6 	bl	80a52dc <_Z21__fetch_global_EEPROMv>
 80a2950:	2002      	movs	r0, #2
 80a2952:	f001 fa03 	bl	80a3d5c <HAL_EEPROM_Read>
 80a2956:	2801      	cmp	r0, #1
 80a2958:	d107      	bne.n	80a296a <loop+0x66>
                weatherLoop(160,0,rclock,gclock,bclock);
 80a295a:	7833      	ldrb	r3, [r6, #0]
 80a295c:	2100      	movs	r1, #0
 80a295e:	9300      	str	r3, [sp, #0]
 80a2960:	20a0      	movs	r0, #160	; 0xa0
 80a2962:	782b      	ldrb	r3, [r5, #0]
 80a2964:	7822      	ldrb	r2, [r4, #0]
 80a2966:	f7ff f947 	bl	80a1bf8 <_Z11weatherLoopiihhh>
            if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == HIGH && digitalRead(dnbtn) == LOW){
 80a296a:	2000      	movs	r0, #0
 80a296c:	f002 fc8c 	bl	80a5288 <digitalRead>
 80a2970:	b978      	cbnz	r0, 80a2992 <loop+0x8e>
 80a2972:	2001      	movs	r0, #1
 80a2974:	f002 fc88 	bl	80a5288 <digitalRead>
 80a2978:	2801      	cmp	r0, #1
 80a297a:	d10a      	bne.n	80a2992 <loop+0x8e>
 80a297c:	2002      	movs	r0, #2
 80a297e:	f002 fc83 	bl	80a5288 <digitalRead>
 80a2982:	b930      	cbnz	r0, 80a2992 <loop+0x8e>
                settings(256,rclock,gclock,bclock);
 80a2984:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a2988:	7833      	ldrb	r3, [r6, #0]
 80a298a:	782a      	ldrb	r2, [r5, #0]
 80a298c:	7821      	ldrb	r1, [r4, #0]
 80a298e:	f7ff fcd9 	bl	80a2344 <_Z8settingsihhh>
    delay(100);
 80a2992:	2064      	movs	r0, #100	; 0x64
}
 80a2994:	b002      	add	sp, #8
 80a2996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(100);
 80a299a:	f001 bc45 	b.w	80a4228 <delay>
                displayCondition(cid,160, rclock, gclock, bclock, true);
 80a299e:	7833      	ldrb	r3, [r6, #0]
 80a29a0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a2a10 <loop+0x10c>
 80a29a4:	7822      	ldrb	r2, [r4, #0]
 80a29a6:	f8d8 0000 	ldr.w	r0, [r8]
 80a29aa:	9300      	str	r3, [sp, #0]
 80a29ac:	21a0      	movs	r1, #160	; 0xa0
 80a29ae:	782b      	ldrb	r3, [r5, #0]
 80a29b0:	9701      	str	r7, [sp, #4]
 80a29b2:	f7fd fe3d 	bl	80a0630 <_Z16displayConditioniihhhb>
                dimg(cid,160, rclock, gclock, bclock);
 80a29b6:	7833      	ldrb	r3, [r6, #0]
 80a29b8:	7822      	ldrb	r2, [r4, #0]
 80a29ba:	f8d8 0000 	ldr.w	r0, [r8]
 80a29be:	9300      	str	r3, [sp, #0]
 80a29c0:	21a0      	movs	r1, #160	; 0xa0
 80a29c2:	782b      	ldrb	r3, [r5, #0]
 80a29c4:	f7fe fc26 	bl	80a1214 <_Z4dimgiihhh>
                displayTemp(TFahr,257/*169+256*/,rclock, gclock, bclock,true);
 80a29c8:	7833      	ldrb	r3, [r6, #0]
 80a29ca:	4812      	ldr	r0, [pc, #72]	; (80a2a14 <loop+0x110>)
 80a29cc:	9300      	str	r3, [sp, #0]
 80a29ce:	9701      	str	r7, [sp, #4]
 80a29d0:	782b      	ldrb	r3, [r5, #0]
 80a29d2:	7822      	ldrb	r2, [r4, #0]
 80a29d4:	f240 1101 	movw	r1, #257	; 0x101
 80a29d8:	6800      	ldr	r0, [r0, #0]
 80a29da:	f7fe fb8f 	bl	80a10fc <_Z11displayTempiihhhb>
                printScreen(screenArray,160,255);
 80a29de:	22ff      	movs	r2, #255	; 0xff
 80a29e0:	21a0      	movs	r1, #160	; 0xa0
 80a29e2:	4808      	ldr	r0, [pc, #32]	; (80a2a04 <loop+0x100>)
 80a29e4:	f7fd fc30 	bl	80a0248 <_Z11printScreenPiii>
            delay(1000);
 80a29e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a29ec:	f001 fc1c 	bl	80a4228 <delay>
 80a29f0:	e7cf      	b.n	80a2992 <loop+0x8e>
 80a29f2:	bf00      	nop
 80a29f4:	20000268 	.word	0x20000268
 80a29f8:	20000258 	.word	0x20000258
 80a29fc:	20000270 	.word	0x20000270
 80a2a00:	20000294 	.word	0x20000294
 80a2a04:	2000029c 	.word	0x2000029c
 80a2a08:	20000298 	.word	0x20000298
 80a2a0c:	2000025c 	.word	0x2000025c
 80a2a10:	20000260 	.word	0x20000260
 80a2a14:	20000250 	.word	0x20000250

080a2a18 <_GLOBAL__sub_I_strip>:
                }
            }
        }
        strcpy(dowVal,tempdat);
    }
}
 80a2a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 80a2a1a:	2501      	movs	r5, #1
              error_(SYSTEM_ERROR_NONE) {
 80a2a1c:	2600      	movs	r6, #0
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
 80a2a1e:	4c11      	ldr	r4, [pc, #68]	; (80a2a64 <_GLOBAL__sub_I_strip+0x4c>)
 80a2a20:	4b11      	ldr	r3, [pc, #68]	; (80a2a68 <_GLOBAL__sub_I_strip+0x50>)
 80a2a22:	4f12      	ldr	r7, [pc, #72]	; (80a2a6c <_GLOBAL__sub_I_strip+0x54>)
 80a2a24:	701d      	strb	r5, [r3, #0]
 80a2a26:	220d      	movs	r2, #13
 80a2a28:	2302      	movs	r3, #2
 80a2a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a2a2e:	4620      	mov	r0, r4
 80a2a30:	f000 f875 	bl	80a2b1e <_ZN17Adafruit_NeoPixelC1Ethh>
 80a2a34:	463a      	mov	r2, r7
 80a2a36:	490e      	ldr	r1, [pc, #56]	; (80a2a70 <_GLOBAL__sub_I_strip+0x58>)
 80a2a38:	4620      	mov	r0, r4
 80a2a3a:	f002 fcbb 	bl	80a53b4 <__aeabi_atexit>
 80a2a3e:	4c0d      	ldr	r4, [pc, #52]	; (80a2a74 <_GLOBAL__sub_I_strip+0x5c>)
    SleepResult() {}
 80a2a40:	4b0d      	ldr	r3, [pc, #52]	; (80a2a78 <_GLOBAL__sub_I_strip+0x60>)
        set_system_mode(mode);
 80a2a42:	4628      	mov	r0, r5
    SleepResult() {}
 80a2a44:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a2a46:	e9c4 6600 	strd	r6, r6, [r4]
        set_system_mode(mode);
 80a2a4a:	f001 fad9 	bl	80a4000 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
 80a2a4e:	463a      	mov	r2, r7
 80a2a50:	4620      	mov	r0, r4
 80a2a52:	490a      	ldr	r1, [pc, #40]	; (80a2a7c <_GLOBAL__sub_I_strip+0x64>)
 80a2a54:	f002 fcae 	bl	80a53b4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80a2a58:	4631      	mov	r1, r6
 80a2a5a:	4628      	mov	r0, r5
}
 80a2a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
 80a2a60:	f001 bade 	b.w	80a4020 <system_thread_set_state>
 80a2a64:	20000a9c 	.word	0x20000a9c
 80a2a68:	20000254 	.word	0x20000254
 80a2a6c:	20000240 	.word	0x20000240
 80a2a70:	080a2a81 	.word	0x080a2a81
 80a2a74:	20000244 	.word	0x20000244
 80a2a78:	ffff0000 	.word	0xffff0000
 80a2a7c:	080a0235 	.word	0x080a0235

080a2a80 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a2a80:	b510      	push	{r4, lr}
 80a2a82:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a2a84:	68c0      	ldr	r0, [r0, #12]
 80a2a86:	b108      	cbz	r0, 80a2a8c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a2a88:	f001 fb9e 	bl	80a41c8 <free>
  if (begun) pinMode(pin, INPUT);
 80a2a8c:	7823      	ldrb	r3, [r4, #0]
 80a2a8e:	b11b      	cbz	r3, 80a2a98 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a2a90:	2100      	movs	r1, #0
 80a2a92:	79e0      	ldrb	r0, [r4, #7]
 80a2a94:	f002 fbce 	bl	80a5234 <pinMode>
}
 80a2a98:	4620      	mov	r0, r4
 80a2a9a:	bd10      	pop	{r4, pc}

080a2a9c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a2a9c:	b538      	push	{r3, r4, r5, lr}
 80a2a9e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a2aa0:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a2aa2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a2aa4:	b108      	cbz	r0, 80a2aaa <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a2aa6:	f001 fb8f 	bl	80a41c8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a2aaa:	79a3      	ldrb	r3, [r4, #6]
 80a2aac:	2b06      	cmp	r3, #6
 80a2aae:	bf0c      	ite	eq
 80a2ab0:	2004      	moveq	r0, #4
 80a2ab2:	2003      	movne	r0, #3
 80a2ab4:	4368      	muls	r0, r5
 80a2ab6:	b280      	uxth	r0, r0
 80a2ab8:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a2aba:	f001 fb7d 	bl	80a41b8 <malloc>
 80a2abe:	60e0      	str	r0, [r4, #12]
 80a2ac0:	b128      	cbz	r0, 80a2ace <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a2ac2:	2100      	movs	r1, #0
 80a2ac4:	88a2      	ldrh	r2, [r4, #4]
 80a2ac6:	f003 ff85 	bl	80a69d4 <memset>
    numLEDs = n;
 80a2aca:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a2acc:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a2ace:	80a0      	strh	r0, [r4, #4]
 80a2ad0:	8060      	strh	r0, [r4, #2]
}
 80a2ad2:	e7fb      	b.n	80a2acc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a2ad4 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a2ad4:	b510      	push	{r4, lr}
 80a2ad6:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a2ad8:	2101      	movs	r1, #1
 80a2ada:	79c0      	ldrb	r0, [r0, #7]
 80a2adc:	f002 fbaa 	bl	80a5234 <pinMode>
  digitalWrite(pin, LOW);
 80a2ae0:	2100      	movs	r1, #0
 80a2ae2:	79e0      	ldrb	r0, [r4, #7]
 80a2ae4:	f002 fbb7 	bl	80a5256 <digitalWrite>
  begun = true;
 80a2ae8:	2301      	movs	r3, #1
 80a2aea:	7023      	strb	r3, [r4, #0]
}
 80a2aec:	bd10      	pop	{r4, pc}

080a2aee <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a2aee:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a2af0:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a2af2:	4605      	mov	r5, r0
 80a2af4:	460c      	mov	r4, r1
    if (begun) {
 80a2af6:	b11b      	cbz	r3, 80a2b00 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a2af8:	2100      	movs	r1, #0
 80a2afa:	79c0      	ldrb	r0, [r0, #7]
 80a2afc:	f002 fb9a 	bl	80a5234 <pinMode>
    }
    pin = p;
    if (begun) {
 80a2b00:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a2b02:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a2b04:	b153      	cbz	r3, 80a2b1c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a2b06:	b2a4      	uxth	r4, r4
 80a2b08:	4620      	mov	r0, r4
 80a2b0a:	2101      	movs	r1, #1
 80a2b0c:	f002 fb92 	bl	80a5234 <pinMode>
        digitalWrite(p, LOW);
 80a2b10:	4620      	mov	r0, r4
    }
}
 80a2b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a2b16:	2100      	movs	r1, #0
 80a2b18:	f002 bb9d 	b.w	80a5256 <digitalWrite>
}
 80a2b1c:	bd38      	pop	{r3, r4, r5, pc}

080a2b1e <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a2b1e:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a2b20:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a2b22:	4604      	mov	r4, r0
 80a2b24:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a2b26:	7183      	strb	r3, [r0, #6]
 80a2b28:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a2b2c:	7005      	strb	r5, [r0, #0]
 80a2b2e:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a2b30:	f7ff ffb4 	bl	80a2a9c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a2b34:	4620      	mov	r0, r4
 80a2b36:	4631      	mov	r1, r6
 80a2b38:	f7ff ffd9 	bl	80a2aee <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a2b3c:	4620      	mov	r0, r4
 80a2b3e:	bd70      	pop	{r4, r5, r6, pc}

080a2b40 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a2b40:	68c3      	ldr	r3, [r0, #12]
 80a2b42:	2b00      	cmp	r3, #0
 80a2b44:	f000 8441 	beq.w	80a33ca <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a2b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2b4a:	7983      	ldrb	r3, [r0, #6]
 80a2b4c:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a2b4e:	3b02      	subs	r3, #2
 80a2b50:	b2db      	uxtb	r3, r3
 80a2b52:	2b04      	cmp	r3, #4
 80a2b54:	bf8c      	ite	hi
 80a2b56:	2532      	movhi	r5, #50	; 0x32
 80a2b58:	4a28      	ldrls	r2, [pc, #160]	; (80a2bfc <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a2b5a:	b087      	sub	sp, #28
 80a2b5c:	bf98      	it	ls
 80a2b5e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a2b62:	f001 f8e3 	bl	80a3d2c <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a2b66:	6923      	ldr	r3, [r4, #16]
 80a2b68:	1ac0      	subs	r0, r0, r3
 80a2b6a:	42a8      	cmp	r0, r5
 80a2b6c:	d3f9      	bcc.n	80a2b62 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a2b6e:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a2b70:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a2b72:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a2b74:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2b78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a2b7c:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a2b7e:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2b80:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a2b82:	f000 826e 	beq.w	80a3062 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a2b86:	2d07      	cmp	r5, #7
 80a2b88:	f000 826b 	beq.w	80a3062 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a2b8c:	2d06      	cmp	r5, #6
 80a2b8e:	f000 841d 	beq.w	80a33cc <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a2b92:	2d05      	cmp	r5, #5
 80a2b94:	f000 83a1 	beq.w	80a32da <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a2b98:	2d08      	cmp	r5, #8
 80a2b9a:	f000 839e 	beq.w	80a32da <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a2b9e:	2d00      	cmp	r5, #0
 80a2ba0:	f040 854f 	bne.w	80a3642 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2ba4:	2b00      	cmp	r3, #0
 80a2ba6:	f000 8392 	beq.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a2baa:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a2bae:	4a14      	ldr	r2, [pc, #80]	; (80a2c00 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a2bb0:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2bb2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a2bb6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a2bb8:	3b03      	subs	r3, #3
 80a2bba:	b29b      	uxth	r3, r3
 80a2bbc:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2bc0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a2bc4:	b2db      	uxtb	r3, r3
 80a2bc6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a2bca:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a2bce:	b2db      	uxtb	r3, r3
 80a2bd0:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a2bd4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a2bd8:	b2db      	uxtb	r3, r3
 80a2bda:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2bde:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a2be2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2be6:	021b      	lsls	r3, r3, #8
 80a2be8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a2bec:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a2bf0:	4303      	orrs	r3, r0
 80a2bf2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2bf4:	f88d 5005 	strb.w	r5, [sp, #5]
 80a2bf8:	e11b      	b.n	80a2e32 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a2bfa:	bf00      	nop
 80a2bfc:	080a9100 	.word	0x080a9100
 80a2c00:	20000ab8 	.word	0x20000ab8
        if (c & mask) { // if masked bit is high
          // WS2811 spec             1.20us HIGH
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.25us)
          // This lib on Photon     (meas. 1.25us)
          asm volatile(
 80a2c04:	4600      	mov	r0, r0
 80a2c06:	bf00      	nop
 80a2c08:	bf00      	nop
 80a2c0a:	bf00      	nop
 80a2c0c:	bf00      	nop
 80a2c0e:	bf00      	nop
 80a2c10:	bf00      	nop
 80a2c12:	bf00      	nop
 80a2c14:	bf00      	nop
 80a2c16:	bf00      	nop
 80a2c18:	bf00      	nop
 80a2c1a:	bf00      	nop
 80a2c1c:	bf00      	nop
 80a2c1e:	bf00      	nop
 80a2c20:	bf00      	nop
 80a2c22:	bf00      	nop
 80a2c24:	bf00      	nop
 80a2c26:	bf00      	nop
 80a2c28:	bf00      	nop
 80a2c2a:	bf00      	nop
 80a2c2c:	bf00      	nop
 80a2c2e:	bf00      	nop
 80a2c30:	bf00      	nop
 80a2c32:	bf00      	nop
 80a2c34:	bf00      	nop
 80a2c36:	bf00      	nop
 80a2c38:	bf00      	nop
 80a2c3a:	bf00      	nop
 80a2c3c:	bf00      	nop
 80a2c3e:	bf00      	nop
 80a2c40:	bf00      	nop
 80a2c42:	bf00      	nop
 80a2c44:	bf00      	nop
 80a2c46:	bf00      	nop
 80a2c48:	bf00      	nop
 80a2c4a:	bf00      	nop
 80a2c4c:	bf00      	nop
 80a2c4e:	bf00      	nop
 80a2c50:	bf00      	nop
 80a2c52:	bf00      	nop
 80a2c54:	bf00      	nop
 80a2c56:	bf00      	nop
 80a2c58:	bf00      	nop
 80a2c5a:	bf00      	nop
 80a2c5c:	bf00      	nop
 80a2c5e:	bf00      	nop
 80a2c60:	bf00      	nop
 80a2c62:	bf00      	nop
 80a2c64:	bf00      	nop
 80a2c66:	bf00      	nop
 80a2c68:	bf00      	nop
 80a2c6a:	bf00      	nop
 80a2c6c:	bf00      	nop
 80a2c6e:	bf00      	nop
 80a2c70:	bf00      	nop
 80a2c72:	bf00      	nop
 80a2c74:	bf00      	nop
 80a2c76:	bf00      	nop
 80a2c78:	bf00      	nop
 80a2c7a:	bf00      	nop
 80a2c7c:	bf00      	nop
 80a2c7e:	bf00      	nop
 80a2c80:	bf00      	nop
 80a2c82:	bf00      	nop
 80a2c84:	bf00      	nop
 80a2c86:	bf00      	nop
 80a2c88:	bf00      	nop
 80a2c8a:	bf00      	nop
 80a2c8c:	bf00      	nop
 80a2c8e:	bf00      	nop
 80a2c90:	bf00      	nop
 80a2c92:	bf00      	nop
 80a2c94:	bf00      	nop
 80a2c96:	bf00      	nop
 80a2c98:	bf00      	nop
 80a2c9a:	bf00      	nop
 80a2c9c:	bf00      	nop
 80a2c9e:	bf00      	nop
 80a2ca0:	bf00      	nop
 80a2ca2:	bf00      	nop
 80a2ca4:	bf00      	nop
 80a2ca6:	bf00      	nop
 80a2ca8:	bf00      	nop
 80a2caa:	bf00      	nop
 80a2cac:	bf00      	nop
 80a2cae:	bf00      	nop
 80a2cb0:	bf00      	nop
 80a2cb2:	bf00      	nop
 80a2cb4:	bf00      	nop
 80a2cb6:	bf00      	nop
 80a2cb8:	bf00      	nop
 80a2cba:	bf00      	nop
 80a2cbc:	bf00      	nop
 80a2cbe:	bf00      	nop
 80a2cc0:	bf00      	nop
 80a2cc2:	bf00      	nop
 80a2cc4:	bf00      	nop
 80a2cc6:	bf00      	nop
 80a2cc8:	bf00      	nop
 80a2cca:	bf00      	nop
 80a2ccc:	bf00      	nop
 80a2cce:	bf00      	nop
 80a2cd0:	bf00      	nop
 80a2cd2:	bf00      	nop
 80a2cd4:	bf00      	nop
 80a2cd6:	bf00      	nop
 80a2cd8:	bf00      	nop
 80a2cda:	bf00      	nop
 80a2cdc:	bf00      	nop
 80a2cde:	bf00      	nop
 80a2ce0:	bf00      	nop
 80a2ce2:	bf00      	nop
 80a2ce4:	bf00      	nop
 80a2ce6:	bf00      	nop
 80a2ce8:	bf00      	nop
 80a2cea:	bf00      	nop
 80a2cec:	bf00      	nop
 80a2cee:	bf00      	nop
 80a2cf0:	bf00      	nop
 80a2cf2:	bf00      	nop
 80a2cf4:	bf00      	nop
 80a2cf6:	bf00      	nop
 80a2cf8:	bf00      	nop
 80a2cfa:	bf00      	nop
 80a2cfc:	bf00      	nop
 80a2cfe:	bf00      	nop
 80a2d00:	bf00      	nop
 80a2d02:	bf00      	nop
 80a2d04:	bf00      	nop
 80a2d06:	bf00      	nop
 80a2d08:	bf00      	nop
 80a2d0a:	bf00      	nop
            ::: "r0", "cc", "memory");
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a2d0c:	79e3      	ldrb	r3, [r4, #7]
 80a2d0e:	6810      	ldr	r0, [r2, #0]
 80a2d10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2d14:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2d18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2d1c:	88b8      	ldrh	r0, [r7, #4]
 80a2d1e:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a2d20:	4600      	mov	r0, r0
 80a2d22:	bf00      	nop
 80a2d24:	bf00      	nop
 80a2d26:	bf00      	nop
 80a2d28:	bf00      	nop
 80a2d2a:	bf00      	nop
 80a2d2c:	bf00      	nop
 80a2d2e:	bf00      	nop
 80a2d30:	bf00      	nop
 80a2d32:	bf00      	nop
 80a2d34:	bf00      	nop
 80a2d36:	bf00      	nop
 80a2d38:	bf00      	nop
 80a2d3a:	bf00      	nop
 80a2d3c:	bf00      	nop
 80a2d3e:	bf00      	nop
 80a2d40:	bf00      	nop
 80a2d42:	bf00      	nop
 80a2d44:	bf00      	nop
 80a2d46:	bf00      	nop
 80a2d48:	bf00      	nop
 80a2d4a:	bf00      	nop
 80a2d4c:	bf00      	nop
 80a2d4e:	bf00      	nop
 80a2d50:	bf00      	nop
 80a2d52:	bf00      	nop
 80a2d54:	bf00      	nop
 80a2d56:	bf00      	nop
 80a2d58:	bf00      	nop
 80a2d5a:	bf00      	nop
 80a2d5c:	bf00      	nop
 80a2d5e:	bf00      	nop
 80a2d60:	bf00      	nop
 80a2d62:	bf00      	nop
 80a2d64:	bf00      	nop
 80a2d66:	bf00      	nop
 80a2d68:	bf00      	nop
 80a2d6a:	bf00      	nop
 80a2d6c:	bf00      	nop
 80a2d6e:	bf00      	nop
 80a2d70:	bf00      	nop
 80a2d72:	bf00      	nop
 80a2d74:	bf00      	nop
 80a2d76:	bf00      	nop
 80a2d78:	bf00      	nop
 80a2d7a:	bf00      	nop
 80a2d7c:	bf00      	nop
 80a2d7e:	bf00      	nop
 80a2d80:	bf00      	nop
 80a2d82:	bf00      	nop
 80a2d84:	bf00      	nop
 80a2d86:	bf00      	nop
 80a2d88:	bf00      	nop
 80a2d8a:	bf00      	nop
 80a2d8c:	bf00      	nop
 80a2d8e:	bf00      	nop
 80a2d90:	bf00      	nop
 80a2d92:	bf00      	nop
 80a2d94:	bf00      	nop
 80a2d96:	bf00      	nop
 80a2d98:	bf00      	nop
 80a2d9a:	bf00      	nop
 80a2d9c:	bf00      	nop
 80a2d9e:	bf00      	nop
 80a2da0:	bf00      	nop
 80a2da2:	bf00      	nop
 80a2da4:	bf00      	nop
 80a2da6:	bf00      	nop
 80a2da8:	bf00      	nop
 80a2daa:	bf00      	nop
 80a2dac:	bf00      	nop
 80a2dae:	bf00      	nop
 80a2db0:	bf00      	nop
 80a2db2:	bf00      	nop
 80a2db4:	bf00      	nop
 80a2db6:	bf00      	nop
 80a2db8:	bf00      	nop
 80a2dba:	bf00      	nop
 80a2dbc:	bf00      	nop
 80a2dbe:	bf00      	nop
 80a2dc0:	bf00      	nop
 80a2dc2:	bf00      	nop
 80a2dc4:	bf00      	nop
 80a2dc6:	bf00      	nop
 80a2dc8:	bf00      	nop
 80a2dca:	bf00      	nop
 80a2dcc:	bf00      	nop
 80a2dce:	bf00      	nop
 80a2dd0:	bf00      	nop
 80a2dd2:	bf00      	nop
 80a2dd4:	bf00      	nop
 80a2dd6:	bf00      	nop
 80a2dd8:	bf00      	nop
 80a2dda:	bf00      	nop
 80a2ddc:	bf00      	nop
 80a2dde:	bf00      	nop
 80a2de0:	bf00      	nop
 80a2de2:	bf00      	nop
 80a2de4:	bf00      	nop
 80a2de6:	bf00      	nop
 80a2de8:	bf00      	nop
 80a2dea:	bf00      	nop
 80a2dec:	bf00      	nop
 80a2dee:	bf00      	nop
 80a2df0:	bf00      	nop
 80a2df2:	bf00      	nop
 80a2df4:	bf00      	nop
 80a2df6:	bf00      	nop
 80a2df8:	bf00      	nop
 80a2dfa:	bf00      	nop
 80a2dfc:	bf00      	nop
 80a2dfe:	bf00      	nop
 80a2e00:	bf00      	nop
 80a2e02:	bf00      	nop
 80a2e04:	bf00      	nop
 80a2e06:	bf00      	nop
 80a2e08:	bf00      	nop
 80a2e0a:	bf00      	nop
 80a2e0c:	bf00      	nop
 80a2e0e:	bf00      	nop
 80a2e10:	bf00      	nop
 80a2e12:	bf00      	nop
 80a2e14:	bf00      	nop
 80a2e16:	bf00      	nop
 80a2e18:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a2e1a:	9b04      	ldr	r3, [sp, #16]
 80a2e1c:	085b      	lsrs	r3, r3, #1
 80a2e1e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2e20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2e24:	3301      	adds	r3, #1
 80a2e26:	b2db      	uxtb	r3, r3
 80a2e28:	2b17      	cmp	r3, #23
 80a2e2a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a2e2e:	f200 8723 	bhi.w	80a3c78 <_ZN17Adafruit_NeoPixel4showEv+0x1138>
        pinSet(pin, HIGH); // HIGH
 80a2e32:	79e3      	ldrb	r3, [r4, #7]
 80a2e34:	6810      	ldr	r0, [r2, #0]
 80a2e36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2e3a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2e3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2e42:	88b8      	ldrh	r0, [r7, #4]
 80a2e44:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2e46:	9803      	ldr	r0, [sp, #12]
 80a2e48:	9b04      	ldr	r3, [sp, #16]
 80a2e4a:	4218      	tst	r0, r3
 80a2e4c:	f47f aeda 	bne.w	80a2c04 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          asm volatile(
 80a2e50:	4600      	mov	r0, r0
 80a2e52:	bf00      	nop
 80a2e54:	bf00      	nop
 80a2e56:	bf00      	nop
 80a2e58:	bf00      	nop
 80a2e5a:	bf00      	nop
 80a2e5c:	bf00      	nop
 80a2e5e:	bf00      	nop
 80a2e60:	bf00      	nop
 80a2e62:	bf00      	nop
 80a2e64:	bf00      	nop
 80a2e66:	bf00      	nop
 80a2e68:	bf00      	nop
 80a2e6a:	bf00      	nop
 80a2e6c:	bf00      	nop
 80a2e6e:	bf00      	nop
 80a2e70:	bf00      	nop
 80a2e72:	bf00      	nop
 80a2e74:	bf00      	nop
 80a2e76:	bf00      	nop
 80a2e78:	bf00      	nop
 80a2e7a:	bf00      	nop
 80a2e7c:	bf00      	nop
 80a2e7e:	bf00      	nop
 80a2e80:	bf00      	nop
 80a2e82:	bf00      	nop
 80a2e84:	bf00      	nop
 80a2e86:	bf00      	nop
 80a2e88:	bf00      	nop
 80a2e8a:	bf00      	nop
 80a2e8c:	bf00      	nop
 80a2e8e:	bf00      	nop
 80a2e90:	bf00      	nop
 80a2e92:	bf00      	nop
 80a2e94:	bf00      	nop
 80a2e96:	bf00      	nop
 80a2e98:	bf00      	nop
 80a2e9a:	bf00      	nop
 80a2e9c:	bf00      	nop
 80a2e9e:	bf00      	nop
 80a2ea0:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2ea2:	79e3      	ldrb	r3, [r4, #7]
 80a2ea4:	6810      	ldr	r0, [r2, #0]
 80a2ea6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2eaa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2eae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2eb2:	88b8      	ldrh	r0, [r7, #4]
 80a2eb4:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a2eb6:	4600      	mov	r0, r0
 80a2eb8:	bf00      	nop
 80a2eba:	bf00      	nop
 80a2ebc:	bf00      	nop
 80a2ebe:	bf00      	nop
 80a2ec0:	bf00      	nop
 80a2ec2:	bf00      	nop
 80a2ec4:	bf00      	nop
 80a2ec6:	bf00      	nop
 80a2ec8:	bf00      	nop
 80a2eca:	bf00      	nop
 80a2ecc:	bf00      	nop
 80a2ece:	bf00      	nop
 80a2ed0:	bf00      	nop
 80a2ed2:	bf00      	nop
 80a2ed4:	bf00      	nop
 80a2ed6:	bf00      	nop
 80a2ed8:	bf00      	nop
 80a2eda:	bf00      	nop
 80a2edc:	bf00      	nop
 80a2ede:	bf00      	nop
 80a2ee0:	bf00      	nop
 80a2ee2:	bf00      	nop
 80a2ee4:	bf00      	nop
 80a2ee6:	bf00      	nop
 80a2ee8:	bf00      	nop
 80a2eea:	bf00      	nop
 80a2eec:	bf00      	nop
 80a2eee:	bf00      	nop
 80a2ef0:	bf00      	nop
 80a2ef2:	bf00      	nop
 80a2ef4:	bf00      	nop
 80a2ef6:	bf00      	nop
 80a2ef8:	bf00      	nop
 80a2efa:	bf00      	nop
 80a2efc:	bf00      	nop
 80a2efe:	bf00      	nop
 80a2f00:	bf00      	nop
 80a2f02:	bf00      	nop
 80a2f04:	bf00      	nop
 80a2f06:	bf00      	nop
 80a2f08:	bf00      	nop
 80a2f0a:	bf00      	nop
 80a2f0c:	bf00      	nop
 80a2f0e:	bf00      	nop
 80a2f10:	bf00      	nop
 80a2f12:	bf00      	nop
 80a2f14:	bf00      	nop
 80a2f16:	bf00      	nop
 80a2f18:	bf00      	nop
 80a2f1a:	bf00      	nop
 80a2f1c:	bf00      	nop
 80a2f1e:	bf00      	nop
 80a2f20:	bf00      	nop
 80a2f22:	bf00      	nop
 80a2f24:	bf00      	nop
 80a2f26:	bf00      	nop
 80a2f28:	bf00      	nop
 80a2f2a:	bf00      	nop
 80a2f2c:	bf00      	nop
 80a2f2e:	bf00      	nop
 80a2f30:	bf00      	nop
 80a2f32:	bf00      	nop
 80a2f34:	bf00      	nop
 80a2f36:	bf00      	nop
 80a2f38:	bf00      	nop
 80a2f3a:	bf00      	nop
 80a2f3c:	bf00      	nop
 80a2f3e:	bf00      	nop
 80a2f40:	bf00      	nop
 80a2f42:	bf00      	nop
 80a2f44:	bf00      	nop
 80a2f46:	bf00      	nop
 80a2f48:	bf00      	nop
 80a2f4a:	bf00      	nop
 80a2f4c:	bf00      	nop
 80a2f4e:	bf00      	nop
 80a2f50:	bf00      	nop
 80a2f52:	bf00      	nop
 80a2f54:	bf00      	nop
 80a2f56:	bf00      	nop
 80a2f58:	bf00      	nop
 80a2f5a:	bf00      	nop
 80a2f5c:	bf00      	nop
 80a2f5e:	bf00      	nop
 80a2f60:	bf00      	nop
 80a2f62:	bf00      	nop
 80a2f64:	bf00      	nop
 80a2f66:	bf00      	nop
 80a2f68:	bf00      	nop
 80a2f6a:	bf00      	nop
 80a2f6c:	bf00      	nop
 80a2f6e:	bf00      	nop
 80a2f70:	bf00      	nop
 80a2f72:	bf00      	nop
 80a2f74:	bf00      	nop
 80a2f76:	bf00      	nop
 80a2f78:	bf00      	nop
 80a2f7a:	bf00      	nop
 80a2f7c:	bf00      	nop
 80a2f7e:	bf00      	nop
 80a2f80:	bf00      	nop
 80a2f82:	bf00      	nop
 80a2f84:	bf00      	nop
 80a2f86:	bf00      	nop
 80a2f88:	bf00      	nop
 80a2f8a:	bf00      	nop
 80a2f8c:	bf00      	nop
 80a2f8e:	bf00      	nop
 80a2f90:	bf00      	nop
 80a2f92:	bf00      	nop
 80a2f94:	bf00      	nop
 80a2f96:	bf00      	nop
 80a2f98:	bf00      	nop
 80a2f9a:	bf00      	nop
 80a2f9c:	bf00      	nop
 80a2f9e:	bf00      	nop
 80a2fa0:	bf00      	nop
 80a2fa2:	bf00      	nop
 80a2fa4:	bf00      	nop
 80a2fa6:	bf00      	nop
 80a2fa8:	bf00      	nop
 80a2faa:	bf00      	nop
 80a2fac:	bf00      	nop
 80a2fae:	bf00      	nop
 80a2fb0:	bf00      	nop
 80a2fb2:	bf00      	nop
 80a2fb4:	bf00      	nop
 80a2fb6:	bf00      	nop
 80a2fb8:	bf00      	nop
 80a2fba:	bf00      	nop
 80a2fbc:	bf00      	nop
 80a2fbe:	bf00      	nop
 80a2fc0:	bf00      	nop
 80a2fc2:	bf00      	nop
 80a2fc4:	bf00      	nop
 80a2fc6:	bf00      	nop
 80a2fc8:	bf00      	nop
 80a2fca:	bf00      	nop
 80a2fcc:	bf00      	nop
 80a2fce:	bf00      	nop
 80a2fd0:	bf00      	nop
 80a2fd2:	bf00      	nop
 80a2fd4:	bf00      	nop
 80a2fd6:	bf00      	nop
 80a2fd8:	bf00      	nop
 80a2fda:	bf00      	nop
 80a2fdc:	bf00      	nop
 80a2fde:	bf00      	nop
 80a2fe0:	bf00      	nop
 80a2fe2:	bf00      	nop
 80a2fe4:	bf00      	nop
 80a2fe6:	bf00      	nop
 80a2fe8:	bf00      	nop
 80a2fea:	bf00      	nop
 80a2fec:	bf00      	nop
 80a2fee:	bf00      	nop
 80a2ff0:	bf00      	nop
 80a2ff2:	bf00      	nop
 80a2ff4:	bf00      	nop
 80a2ff6:	bf00      	nop
 80a2ff8:	bf00      	nop
 80a2ffa:	bf00      	nop
 80a2ffc:	bf00      	nop
 80a2ffe:	bf00      	nop
 80a3000:	bf00      	nop
 80a3002:	bf00      	nop
 80a3004:	bf00      	nop
 80a3006:	bf00      	nop
 80a3008:	bf00      	nop
 80a300a:	bf00      	nop
 80a300c:	bf00      	nop
 80a300e:	bf00      	nop
 80a3010:	bf00      	nop
 80a3012:	bf00      	nop
 80a3014:	bf00      	nop
 80a3016:	bf00      	nop
 80a3018:	bf00      	nop
 80a301a:	bf00      	nop
 80a301c:	bf00      	nop
 80a301e:	bf00      	nop
 80a3020:	bf00      	nop
 80a3022:	bf00      	nop
 80a3024:	bf00      	nop
 80a3026:	bf00      	nop
 80a3028:	bf00      	nop
 80a302a:	bf00      	nop
 80a302c:	bf00      	nop
 80a302e:	bf00      	nop
 80a3030:	bf00      	nop
 80a3032:	bf00      	nop
 80a3034:	bf00      	nop
 80a3036:	bf00      	nop
 80a3038:	bf00      	nop
 80a303a:	bf00      	nop
 80a303c:	bf00      	nop
 80a303e:	bf00      	nop
 80a3040:	bf00      	nop
 80a3042:	bf00      	nop
 80a3044:	bf00      	nop
 80a3046:	bf00      	nop
 80a3048:	bf00      	nop
 80a304a:	bf00      	nop
 80a304c:	bf00      	nop
 80a304e:	bf00      	nop
 80a3050:	bf00      	nop
 80a3052:	bf00      	nop
 80a3054:	bf00      	nop
 80a3056:	bf00      	nop
 80a3058:	bf00      	nop
 80a305a:	bf00      	nop
 80a305c:	bf00      	nop
 80a305e:	bf00      	nop
 80a3060:	e6db      	b.n	80a2e1a <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3062:	2b00      	cmp	r3, #0
 80a3064:	f000 8133 	beq.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a3068:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a306c:	f04f 0c00 	mov.w	ip, #0
 80a3070:	4a12      	ldr	r2, [pc, #72]	; (80a30bc <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a3072:	4608      	mov	r0, r1
 80a3074:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a3076:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a307a:	3103      	adds	r1, #3
 80a307c:	3b03      	subs	r3, #3
 80a307e:	b29b      	uxth	r3, r3
 80a3080:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a3084:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a3088:	b2db      	uxtb	r3, r3
 80a308a:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a308e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a3092:	b2db      	uxtb	r3, r3
 80a3094:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a3098:	7883      	ldrb	r3, [r0, #2]
 80a309a:	b2db      	uxtb	r3, r3
 80a309c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a30a0:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a30a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a30a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a30ac:	021b      	lsls	r3, r3, #8
 80a30ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80a30b2:	4303      	orrs	r3, r0
 80a30b4:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a30b6:	f88d c005 	strb.w	ip, [sp, #5]
 80a30ba:	e07f      	b.n	80a31bc <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a30bc:	20000ab8 	.word	0x20000ab8
          asm volatile(
 80a30c0:	4600      	mov	r0, r0
 80a30c2:	bf00      	nop
 80a30c4:	bf00      	nop
 80a30c6:	bf00      	nop
 80a30c8:	bf00      	nop
 80a30ca:	bf00      	nop
 80a30cc:	bf00      	nop
 80a30ce:	bf00      	nop
 80a30d0:	bf00      	nop
 80a30d2:	bf00      	nop
 80a30d4:	bf00      	nop
 80a30d6:	bf00      	nop
 80a30d8:	bf00      	nop
 80a30da:	bf00      	nop
 80a30dc:	bf00      	nop
 80a30de:	bf00      	nop
 80a30e0:	bf00      	nop
 80a30e2:	bf00      	nop
 80a30e4:	bf00      	nop
 80a30e6:	bf00      	nop
 80a30e8:	bf00      	nop
 80a30ea:	bf00      	nop
 80a30ec:	bf00      	nop
 80a30ee:	bf00      	nop
 80a30f0:	bf00      	nop
 80a30f2:	bf00      	nop
 80a30f4:	bf00      	nop
 80a30f6:	bf00      	nop
 80a30f8:	bf00      	nop
 80a30fa:	bf00      	nop
 80a30fc:	bf00      	nop
 80a30fe:	bf00      	nop
 80a3100:	bf00      	nop
 80a3102:	bf00      	nop
 80a3104:	bf00      	nop
 80a3106:	bf00      	nop
 80a3108:	bf00      	nop
 80a310a:	bf00      	nop
 80a310c:	bf00      	nop
 80a310e:	bf00      	nop
 80a3110:	bf00      	nop
 80a3112:	bf00      	nop
 80a3114:	bf00      	nop
 80a3116:	bf00      	nop
 80a3118:	bf00      	nop
 80a311a:	bf00      	nop
 80a311c:	bf00      	nop
 80a311e:	bf00      	nop
 80a3120:	bf00      	nop
 80a3122:	bf00      	nop
 80a3124:	bf00      	nop
 80a3126:	bf00      	nop
 80a3128:	bf00      	nop
 80a312a:	bf00      	nop
 80a312c:	bf00      	nop
 80a312e:	bf00      	nop
 80a3130:	bf00      	nop
 80a3132:	bf00      	nop
 80a3134:	bf00      	nop
 80a3136:	bf00      	nop
 80a3138:	bf00      	nop
 80a313a:	bf00      	nop
 80a313c:	bf00      	nop
 80a313e:	bf00      	nop
 80a3140:	bf00      	nop
 80a3142:	bf00      	nop
 80a3144:	bf00      	nop
 80a3146:	bf00      	nop
 80a3148:	bf00      	nop
 80a314a:	bf00      	nop
 80a314c:	bf00      	nop
 80a314e:	bf00      	nop
 80a3150:	bf00      	nop
 80a3152:	bf00      	nop
 80a3154:	bf00      	nop
 80a3156:	bf00      	nop
 80a3158:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a315a:	79e3      	ldrb	r3, [r4, #7]
 80a315c:	6810      	ldr	r0, [r2, #0]
 80a315e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3162:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a3166:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a316a:	88b0      	ldrh	r0, [r6, #4]
 80a316c:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a316e:	4600      	mov	r0, r0
 80a3170:	bf00      	nop
 80a3172:	bf00      	nop
 80a3174:	bf00      	nop
 80a3176:	bf00      	nop
 80a3178:	bf00      	nop
 80a317a:	bf00      	nop
 80a317c:	bf00      	nop
 80a317e:	bf00      	nop
 80a3180:	bf00      	nop
 80a3182:	bf00      	nop
 80a3184:	bf00      	nop
 80a3186:	bf00      	nop
 80a3188:	bf00      	nop
 80a318a:	bf00      	nop
 80a318c:	bf00      	nop
 80a318e:	bf00      	nop
 80a3190:	bf00      	nop
 80a3192:	bf00      	nop
 80a3194:	bf00      	nop
 80a3196:	bf00      	nop
 80a3198:	bf00      	nop
 80a319a:	bf00      	nop
 80a319c:	bf00      	nop
 80a319e:	bf00      	nop
 80a31a0:	bf00      	nop
 80a31a2:	bf00      	nop
        mask >>= 1;
 80a31a4:	9b04      	ldr	r3, [sp, #16]
 80a31a6:	085b      	lsrs	r3, r3, #1
 80a31a8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a31aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a31ae:	3301      	adds	r3, #1
 80a31b0:	b2db      	uxtb	r3, r3
 80a31b2:	2b17      	cmp	r3, #23
 80a31b4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a31b8:	f200 8083 	bhi.w	80a32c2 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a31bc:	79e3      	ldrb	r3, [r4, #7]
 80a31be:	6810      	ldr	r0, [r2, #0]
 80a31c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a31c4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a31c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a31cc:	88b0      	ldrh	r0, [r6, #4]
 80a31ce:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a31d0:	9803      	ldr	r0, [sp, #12]
 80a31d2:	9b04      	ldr	r3, [sp, #16]
 80a31d4:	4218      	tst	r0, r3
 80a31d6:	f47f af73 	bne.w	80a30c0 <_ZN17Adafruit_NeoPixel4showEv+0x580>
          asm volatile(
 80a31da:	4600      	mov	r0, r0
 80a31dc:	bf00      	nop
 80a31de:	bf00      	nop
 80a31e0:	bf00      	nop
 80a31e2:	bf00      	nop
 80a31e4:	bf00      	nop
 80a31e6:	bf00      	nop
 80a31e8:	bf00      	nop
 80a31ea:	bf00      	nop
 80a31ec:	bf00      	nop
 80a31ee:	bf00      	nop
 80a31f0:	bf00      	nop
 80a31f2:	bf00      	nop
 80a31f4:	bf00      	nop
 80a31f6:	bf00      	nop
 80a31f8:	bf00      	nop
 80a31fa:	bf00      	nop
 80a31fc:	bf00      	nop
 80a31fe:	bf00      	nop
 80a3200:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3202:	79e3      	ldrb	r3, [r4, #7]
 80a3204:	6810      	ldr	r0, [r2, #0]
 80a3206:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a320a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a320e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3212:	88b0      	ldrh	r0, [r6, #4]
 80a3214:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a3216:	4600      	mov	r0, r0
 80a3218:	bf00      	nop
 80a321a:	bf00      	nop
 80a321c:	bf00      	nop
 80a321e:	bf00      	nop
 80a3220:	bf00      	nop
 80a3222:	bf00      	nop
 80a3224:	bf00      	nop
 80a3226:	bf00      	nop
 80a3228:	bf00      	nop
 80a322a:	bf00      	nop
 80a322c:	bf00      	nop
 80a322e:	bf00      	nop
 80a3230:	bf00      	nop
 80a3232:	bf00      	nop
 80a3234:	bf00      	nop
 80a3236:	bf00      	nop
 80a3238:	bf00      	nop
 80a323a:	bf00      	nop
 80a323c:	bf00      	nop
 80a323e:	bf00      	nop
 80a3240:	bf00      	nop
 80a3242:	bf00      	nop
 80a3244:	bf00      	nop
 80a3246:	bf00      	nop
 80a3248:	bf00      	nop
 80a324a:	bf00      	nop
 80a324c:	bf00      	nop
 80a324e:	bf00      	nop
 80a3250:	bf00      	nop
 80a3252:	bf00      	nop
 80a3254:	bf00      	nop
 80a3256:	bf00      	nop
 80a3258:	bf00      	nop
 80a325a:	bf00      	nop
 80a325c:	bf00      	nop
 80a325e:	bf00      	nop
 80a3260:	bf00      	nop
 80a3262:	bf00      	nop
 80a3264:	bf00      	nop
 80a3266:	bf00      	nop
 80a3268:	bf00      	nop
 80a326a:	bf00      	nop
 80a326c:	bf00      	nop
 80a326e:	bf00      	nop
 80a3270:	bf00      	nop
 80a3272:	bf00      	nop
 80a3274:	bf00      	nop
 80a3276:	bf00      	nop
 80a3278:	bf00      	nop
 80a327a:	bf00      	nop
 80a327c:	bf00      	nop
 80a327e:	bf00      	nop
 80a3280:	bf00      	nop
 80a3282:	bf00      	nop
 80a3284:	bf00      	nop
 80a3286:	bf00      	nop
 80a3288:	bf00      	nop
 80a328a:	bf00      	nop
 80a328c:	bf00      	nop
 80a328e:	bf00      	nop
 80a3290:	bf00      	nop
 80a3292:	bf00      	nop
 80a3294:	bf00      	nop
 80a3296:	bf00      	nop
 80a3298:	bf00      	nop
 80a329a:	bf00      	nop
 80a329c:	bf00      	nop
 80a329e:	bf00      	nop
 80a32a0:	bf00      	nop
 80a32a2:	bf00      	nop
 80a32a4:	bf00      	nop
 80a32a6:	bf00      	nop
 80a32a8:	bf00      	nop
 80a32aa:	bf00      	nop
 80a32ac:	bf00      	nop
 80a32ae:	bf00      	nop
 80a32b0:	bf00      	nop
 80a32b2:	bf00      	nop
 80a32b4:	bf00      	nop
 80a32b6:	bf00      	nop
 80a32b8:	bf00      	nop
 80a32ba:	bf00      	nop
 80a32bc:	bf00      	nop
 80a32be:	bf00      	nop
 80a32c0:	e770      	b.n	80a31a4 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a32c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a32c6:	b29b      	uxth	r3, r3
 80a32c8:	2b00      	cmp	r3, #0
 80a32ca:	f47f aed2 	bne.w	80a3072 <_ZN17Adafruit_NeoPixel4showEv+0x532>
  __ASM volatile ("cpsie i");
 80a32ce:	b662      	cpsie	i
 80a32d0:	f000 fd2c 	bl	80a3d2c <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a32d4:	6120      	str	r0, [r4, #16]
}
 80a32d6:	b007      	add	sp, #28
 80a32d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a32da:	2b00      	cmp	r3, #0
 80a32dc:	d0f7      	beq.n	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a32de:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a32e2:	f04f 0c00 	mov.w	ip, #0
        pinSet(pin, HIGH); // HIGH
 80a32e6:	4b54      	ldr	r3, [pc, #336]	; (80a3438 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a32e8:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a32ea:	4b54      	ldr	r3, [pc, #336]	; (80a343c <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a32ec:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a32ee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a32f2:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a32f4:	3a03      	subs	r2, #3
 80a32f6:	b292      	uxth	r2, r2
 80a32f8:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a32fc:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a3300:	b2d2      	uxtb	r2, r2
 80a3302:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a3306:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a330a:	b2d2      	uxtb	r2, r2
 80a330c:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a3310:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a3314:	b2d2      	uxtb	r2, r2
 80a3316:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a331a:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a331e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a3322:	0212      	lsls	r2, r2, #8
 80a3324:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80a3328:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a332c:	4332      	orrs	r2, r6
 80a332e:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a3330:	f88d c005 	strb.w	ip, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a3334:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a3336:	685f      	ldr	r7, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a3338:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a333c:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a3340:	88b6      	ldrh	r6, [r6, #4]
 80a3342:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a3346:	9705      	str	r7, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a3348:	8316      	strh	r6, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a334a:	9e03      	ldr	r6, [sp, #12]
 80a334c:	9a04      	ldr	r2, [sp, #16]
 80a334e:	4216      	tst	r6, r2
 80a3350:	d025      	beq.n	80a339e <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a3352:	685a      	ldr	r2, [r3, #4]
 80a3354:	9e05      	ldr	r6, [sp, #20]
 80a3356:	1b92      	subs	r2, r2, r6
 80a3358:	2a4f      	cmp	r2, #79	; 0x4f
 80a335a:	d9fa      	bls.n	80a3352 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a335c:	79e2      	ldrb	r2, [r4, #7]
 80a335e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a3362:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a3366:	88b6      	ldrh	r6, [r6, #4]
 80a3368:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a336c:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a336e:	685a      	ldr	r2, [r3, #4]
 80a3370:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a3372:	685a      	ldr	r2, [r3, #4]
 80a3374:	9e05      	ldr	r6, [sp, #20]
 80a3376:	1b92      	subs	r2, r2, r6
 80a3378:	2a07      	cmp	r2, #7
 80a337a:	d9fa      	bls.n	80a3372 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a337c:	9a04      	ldr	r2, [sp, #16]
 80a337e:	0852      	lsrs	r2, r2, #1
 80a3380:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a3382:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a3386:	3201      	adds	r2, #1
 80a3388:	b2d2      	uxtb	r2, r2
 80a338a:	2a17      	cmp	r2, #23
 80a338c:	f88d 2005 	strb.w	r2, [sp, #5]
 80a3390:	d9d0      	bls.n	80a3334 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3392:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a3396:	b292      	uxth	r2, r2
 80a3398:	2a00      	cmp	r2, #0
 80a339a:	d1a7      	bne.n	80a32ec <_ZN17Adafruit_NeoPixel4showEv+0x7ac>
 80a339c:	e797      	b.n	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a339e:	685a      	ldr	r2, [r3, #4]
 80a33a0:	9e05      	ldr	r6, [sp, #20]
 80a33a2:	1b92      	subs	r2, r2, r6
 80a33a4:	2a18      	cmp	r2, #24
 80a33a6:	d9fa      	bls.n	80a339e <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a33a8:	79e2      	ldrb	r2, [r4, #7]
 80a33aa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a33ae:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a33b2:	88b6      	ldrh	r6, [r6, #4]
 80a33b4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a33b8:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a33ba:	685a      	ldr	r2, [r3, #4]
 80a33bc:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a33be:	685a      	ldr	r2, [r3, #4]
 80a33c0:	9e05      	ldr	r6, [sp, #20]
 80a33c2:	1b92      	subs	r2, r2, r6
 80a33c4:	2a45      	cmp	r2, #69	; 0x45
 80a33c6:	d9fa      	bls.n	80a33be <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a33c8:	e7d8      	b.n	80a337c <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a33ca:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a33cc:	2b00      	cmp	r3, #0
 80a33ce:	f43f af7e 	beq.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a33d2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a33d6:	2600      	movs	r6, #0
 80a33d8:	4a17      	ldr	r2, [pc, #92]	; (80a3438 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a33da:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a33dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a33e0:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a33e2:	3b04      	subs	r3, #4
 80a33e4:	b29b      	uxth	r3, r3
 80a33e6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a33ea:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a33ee:	b2db      	uxtb	r3, r3
 80a33f0:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a33f4:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a33f8:	b2db      	uxtb	r3, r3
 80a33fa:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a33fe:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a3402:	b2db      	uxtb	r3, r3
 80a3404:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a3408:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a340c:	b2db      	uxtb	r3, r3
 80a340e:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a3412:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a3416:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a341a:	041b      	lsls	r3, r3, #16
 80a341c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a3420:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a3424:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a3428:	433b      	orrs	r3, r7
 80a342a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a342e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a3430:	f88d 6005 	strb.w	r6, [sp, #5]
 80a3434:	e07f      	b.n	80a3536 <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a3436:	bf00      	nop
 80a3438:	20000ab8 	.word	0x20000ab8
 80a343c:	e0001000 	.word	0xe0001000
          asm volatile(
 80a3440:	4600      	mov	r0, r0
 80a3442:	bf00      	nop
 80a3444:	bf00      	nop
 80a3446:	bf00      	nop
 80a3448:	bf00      	nop
 80a344a:	bf00      	nop
 80a344c:	bf00      	nop
 80a344e:	bf00      	nop
 80a3450:	bf00      	nop
 80a3452:	bf00      	nop
 80a3454:	bf00      	nop
 80a3456:	bf00      	nop
 80a3458:	bf00      	nop
 80a345a:	bf00      	nop
 80a345c:	bf00      	nop
 80a345e:	bf00      	nop
 80a3460:	bf00      	nop
 80a3462:	bf00      	nop
 80a3464:	bf00      	nop
 80a3466:	bf00      	nop
 80a3468:	bf00      	nop
 80a346a:	bf00      	nop
 80a346c:	bf00      	nop
 80a346e:	bf00      	nop
 80a3470:	bf00      	nop
 80a3472:	bf00      	nop
 80a3474:	bf00      	nop
 80a3476:	bf00      	nop
 80a3478:	bf00      	nop
 80a347a:	bf00      	nop
 80a347c:	bf00      	nop
 80a347e:	bf00      	nop
 80a3480:	bf00      	nop
 80a3482:	bf00      	nop
 80a3484:	bf00      	nop
 80a3486:	bf00      	nop
 80a3488:	bf00      	nop
 80a348a:	bf00      	nop
 80a348c:	bf00      	nop
 80a348e:	bf00      	nop
 80a3490:	bf00      	nop
 80a3492:	bf00      	nop
 80a3494:	bf00      	nop
 80a3496:	bf00      	nop
 80a3498:	bf00      	nop
 80a349a:	bf00      	nop
 80a349c:	bf00      	nop
 80a349e:	bf00      	nop
 80a34a0:	bf00      	nop
 80a34a2:	bf00      	nop
 80a34a4:	bf00      	nop
 80a34a6:	bf00      	nop
 80a34a8:	bf00      	nop
 80a34aa:	bf00      	nop
 80a34ac:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a34ae:	79e3      	ldrb	r3, [r4, #7]
 80a34b0:	6810      	ldr	r0, [r2, #0]
 80a34b2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a34b6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a34ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a34be:	88b8      	ldrh	r0, [r7, #4]
 80a34c0:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a34c2:	4600      	mov	r0, r0
 80a34c4:	bf00      	nop
 80a34c6:	bf00      	nop
 80a34c8:	bf00      	nop
 80a34ca:	bf00      	nop
 80a34cc:	bf00      	nop
 80a34ce:	bf00      	nop
 80a34d0:	bf00      	nop
 80a34d2:	bf00      	nop
 80a34d4:	bf00      	nop
 80a34d6:	bf00      	nop
 80a34d8:	bf00      	nop
 80a34da:	bf00      	nop
 80a34dc:	bf00      	nop
 80a34de:	bf00      	nop
 80a34e0:	bf00      	nop
 80a34e2:	bf00      	nop
 80a34e4:	bf00      	nop
 80a34e6:	bf00      	nop
 80a34e8:	bf00      	nop
 80a34ea:	bf00      	nop
 80a34ec:	bf00      	nop
 80a34ee:	bf00      	nop
 80a34f0:	bf00      	nop
 80a34f2:	bf00      	nop
 80a34f4:	bf00      	nop
 80a34f6:	bf00      	nop
 80a34f8:	bf00      	nop
 80a34fa:	bf00      	nop
 80a34fc:	bf00      	nop
 80a34fe:	bf00      	nop
 80a3500:	bf00      	nop
 80a3502:	bf00      	nop
 80a3504:	bf00      	nop
 80a3506:	bf00      	nop
 80a3508:	bf00      	nop
 80a350a:	bf00      	nop
 80a350c:	bf00      	nop
 80a350e:	bf00      	nop
 80a3510:	bf00      	nop
 80a3512:	bf00      	nop
 80a3514:	bf00      	nop
 80a3516:	bf00      	nop
 80a3518:	bf00      	nop
 80a351a:	bf00      	nop
 80a351c:	bf00      	nop
 80a351e:	bf00      	nop
        mask >>= 1;
 80a3520:	9b04      	ldr	r3, [sp, #16]
 80a3522:	085b      	lsrs	r3, r3, #1
 80a3524:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a3526:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a352a:	3301      	adds	r3, #1
 80a352c:	b2db      	uxtb	r3, r3
 80a352e:	2b1f      	cmp	r3, #31
 80a3530:	f88d 3005 	strb.w	r3, [sp, #5]
 80a3534:	d87e      	bhi.n	80a3634 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a3536:	79e3      	ldrb	r3, [r4, #7]
 80a3538:	6810      	ldr	r0, [r2, #0]
 80a353a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a353e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3542:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3546:	88b8      	ldrh	r0, [r7, #4]
 80a3548:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a354a:	9803      	ldr	r0, [sp, #12]
 80a354c:	9b04      	ldr	r3, [sp, #16]
 80a354e:	4218      	tst	r0, r3
 80a3550:	f47f af76 	bne.w	80a3440 <_ZN17Adafruit_NeoPixel4showEv+0x900>
          asm volatile(
 80a3554:	4600      	mov	r0, r0
 80a3556:	bf00      	nop
 80a3558:	bf00      	nop
 80a355a:	bf00      	nop
 80a355c:	bf00      	nop
 80a355e:	bf00      	nop
 80a3560:	bf00      	nop
 80a3562:	bf00      	nop
 80a3564:	bf00      	nop
 80a3566:	bf00      	nop
 80a3568:	bf00      	nop
 80a356a:	bf00      	nop
 80a356c:	bf00      	nop
 80a356e:	bf00      	nop
 80a3570:	bf00      	nop
 80a3572:	bf00      	nop
 80a3574:	bf00      	nop
 80a3576:	bf00      	nop
 80a3578:	bf00      	nop
 80a357a:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a357c:	79e3      	ldrb	r3, [r4, #7]
 80a357e:	6810      	ldr	r0, [r2, #0]
 80a3580:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3584:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3588:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a358c:	88b8      	ldrh	r0, [r7, #4]
 80a358e:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a3590:	4600      	mov	r0, r0
 80a3592:	bf00      	nop
 80a3594:	bf00      	nop
 80a3596:	bf00      	nop
 80a3598:	bf00      	nop
 80a359a:	bf00      	nop
 80a359c:	bf00      	nop
 80a359e:	bf00      	nop
 80a35a0:	bf00      	nop
 80a35a2:	bf00      	nop
 80a35a4:	bf00      	nop
 80a35a6:	bf00      	nop
 80a35a8:	bf00      	nop
 80a35aa:	bf00      	nop
 80a35ac:	bf00      	nop
 80a35ae:	bf00      	nop
 80a35b0:	bf00      	nop
 80a35b2:	bf00      	nop
 80a35b4:	bf00      	nop
 80a35b6:	bf00      	nop
 80a35b8:	bf00      	nop
 80a35ba:	bf00      	nop
 80a35bc:	bf00      	nop
 80a35be:	bf00      	nop
 80a35c0:	bf00      	nop
 80a35c2:	bf00      	nop
 80a35c4:	bf00      	nop
 80a35c6:	bf00      	nop
 80a35c8:	bf00      	nop
 80a35ca:	bf00      	nop
 80a35cc:	bf00      	nop
 80a35ce:	bf00      	nop
 80a35d0:	bf00      	nop
 80a35d2:	bf00      	nop
 80a35d4:	bf00      	nop
 80a35d6:	bf00      	nop
 80a35d8:	bf00      	nop
 80a35da:	bf00      	nop
 80a35dc:	bf00      	nop
 80a35de:	bf00      	nop
 80a35e0:	bf00      	nop
 80a35e2:	bf00      	nop
 80a35e4:	bf00      	nop
 80a35e6:	bf00      	nop
 80a35e8:	bf00      	nop
 80a35ea:	bf00      	nop
 80a35ec:	bf00      	nop
 80a35ee:	bf00      	nop
 80a35f0:	bf00      	nop
 80a35f2:	bf00      	nop
 80a35f4:	bf00      	nop
 80a35f6:	bf00      	nop
 80a35f8:	bf00      	nop
 80a35fa:	bf00      	nop
 80a35fc:	bf00      	nop
 80a35fe:	bf00      	nop
 80a3600:	bf00      	nop
 80a3602:	bf00      	nop
 80a3604:	bf00      	nop
 80a3606:	bf00      	nop
 80a3608:	bf00      	nop
 80a360a:	bf00      	nop
 80a360c:	bf00      	nop
 80a360e:	bf00      	nop
 80a3610:	bf00      	nop
 80a3612:	bf00      	nop
 80a3614:	bf00      	nop
 80a3616:	bf00      	nop
 80a3618:	bf00      	nop
 80a361a:	bf00      	nop
 80a361c:	bf00      	nop
 80a361e:	bf00      	nop
 80a3620:	bf00      	nop
 80a3622:	bf00      	nop
 80a3624:	bf00      	nop
 80a3626:	bf00      	nop
 80a3628:	bf00      	nop
 80a362a:	bf00      	nop
 80a362c:	bf00      	nop
 80a362e:	bf00      	nop
 80a3630:	bf00      	nop
 80a3632:	e775      	b.n	80a3520 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a3634:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a3638:	b29b      	uxth	r3, r3
 80a363a:	2b00      	cmp	r3, #0
 80a363c:	f47f aecd 	bne.w	80a33da <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a3640:	e645      	b.n	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a3642:	2d03      	cmp	r5, #3
 80a3644:	f000 8128 	beq.w	80a3898 <_ZN17Adafruit_NeoPixel4showEv+0xd58>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3648:	2b00      	cmp	r3, #0
 80a364a:	f43f ae40 	beq.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a364e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a3652:	2600      	movs	r6, #0
 80a3654:	4a16      	ldr	r2, [pc, #88]	; (80a36b0 <_ZN17Adafruit_NeoPixel4showEv+0xb70>)
      mask = 0x800000; // reset the mask
 80a3656:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a3658:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a365c:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a365e:	3b03      	subs	r3, #3
 80a3660:	b29b      	uxth	r3, r3
 80a3662:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a3666:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a3668:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a366a:	b2db      	uxtb	r3, r3
 80a366c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a3670:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a3672:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a3676:	b2db      	uxtb	r3, r3
 80a3678:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a367c:	788b      	ldrb	r3, [r1, #2]
 80a367e:	3103      	adds	r1, #3
 80a3680:	b2db      	uxtb	r3, r3
 80a3682:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a3686:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a368a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a368e:	021b      	lsls	r3, r3, #8
 80a3690:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80a3694:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a3698:	ea43 030c 	orr.w	r3, r3, ip
      pinSet(pin, LOW); // LOW
 80a369c:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a36a0:	9303      	str	r3, [sp, #12]
      pinSet(pin, LOW); // LOW
 80a36a2:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
      j = 0;        // reset the 24-bit counter
 80a36a6:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a36aa:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80a36ae:	e07a      	b.n	80a37a6 <_ZN17Adafruit_NeoPixel4showEv+0xc66>
 80a36b0:	20000ab8 	.word	0x20000ab8
          mask >>= 1; // Do this task during the long delay of this bit
 80a36b4:	9b04      	ldr	r3, [sp, #16]
 80a36b6:	085b      	lsrs	r3, r3, #1
 80a36b8:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a36ba:	4600      	mov	r0, r0
 80a36bc:	bf00      	nop
 80a36be:	bf00      	nop
 80a36c0:	bf00      	nop
 80a36c2:	bf00      	nop
 80a36c4:	bf00      	nop
 80a36c6:	bf00      	nop
 80a36c8:	bf00      	nop
 80a36ca:	bf00      	nop
 80a36cc:	bf00      	nop
 80a36ce:	bf00      	nop
 80a36d0:	bf00      	nop
 80a36d2:	bf00      	nop
 80a36d4:	bf00      	nop
 80a36d6:	bf00      	nop
 80a36d8:	bf00      	nop
 80a36da:	bf00      	nop
 80a36dc:	bf00      	nop
 80a36de:	bf00      	nop
 80a36e0:	bf00      	nop
 80a36e2:	bf00      	nop
 80a36e4:	bf00      	nop
 80a36e6:	bf00      	nop
 80a36e8:	bf00      	nop
 80a36ea:	bf00      	nop
 80a36ec:	bf00      	nop
 80a36ee:	bf00      	nop
 80a36f0:	bf00      	nop
 80a36f2:	bf00      	nop
 80a36f4:	bf00      	nop
 80a36f6:	bf00      	nop
 80a36f8:	bf00      	nop
 80a36fa:	bf00      	nop
 80a36fc:	bf00      	nop
 80a36fe:	bf00      	nop
 80a3700:	bf00      	nop
 80a3702:	bf00      	nop
 80a3704:	bf00      	nop
 80a3706:	bf00      	nop
 80a3708:	bf00      	nop
 80a370a:	bf00      	nop
 80a370c:	bf00      	nop
 80a370e:	bf00      	nop
 80a3710:	bf00      	nop
 80a3712:	bf00      	nop
 80a3714:	bf00      	nop
 80a3716:	bf00      	nop
 80a3718:	bf00      	nop
 80a371a:	bf00      	nop
 80a371c:	bf00      	nop
 80a371e:	bf00      	nop
 80a3720:	bf00      	nop
 80a3722:	bf00      	nop
 80a3724:	bf00      	nop
 80a3726:	bf00      	nop
 80a3728:	bf00      	nop
 80a372a:	bf00      	nop
 80a372c:	bf00      	nop
 80a372e:	bf00      	nop
 80a3730:	bf00      	nop
 80a3732:	bf00      	nop
 80a3734:	bf00      	nop
 80a3736:	bf00      	nop
 80a3738:	bf00      	nop
 80a373a:	bf00      	nop
 80a373c:	bf00      	nop
 80a373e:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a3740:	79e0      	ldrb	r0, [r4, #7]
 80a3742:	6817      	ldr	r7, [r2, #0]
          j++;
 80a3744:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a3748:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a374c:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
          j++;
 80a3750:	3301      	adds	r3, #1
          pinSet(pin, HIGH); // HIGH
 80a3752:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80a3756:	f8bc 7004 	ldrh.w	r7, [ip, #4]
          j++;
 80a375a:	b2db      	uxtb	r3, r3
 80a375c:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a3760:	8307      	strh	r7, [r0, #24]
          asm volatile(
 80a3762:	4600      	mov	r0, r0
 80a3764:	bf00      	nop
 80a3766:	bf00      	nop
 80a3768:	bf00      	nop
 80a376a:	bf00      	nop
 80a376c:	bf00      	nop
 80a376e:	bf00      	nop
 80a3770:	bf00      	nop
 80a3772:	bf00      	nop
 80a3774:	bf00      	nop
 80a3776:	bf00      	nop
 80a3778:	bf00      	nop
 80a377a:	bf00      	nop
 80a377c:	bf00      	nop
 80a377e:	bf00      	nop
 80a3780:	bf00      	nop
 80a3782:	bf00      	nop
 80a3784:	bf00      	nop
 80a3786:	bf00      	nop
 80a3788:	bf00      	nop
 80a378a:	bf00      	nop
          if(j==24) break;
 80a378c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a3790:	2b18      	cmp	r3, #24
 80a3792:	d07a      	beq.n	80a388a <_ZN17Adafruit_NeoPixel4showEv+0xd4a>
          pinSet(pin, LOW); // LOW
 80a3794:	79e3      	ldrb	r3, [r4, #7]
 80a3796:	6810      	ldr	r0, [r2, #0]
 80a3798:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a379c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a37a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a37a4:	88b8      	ldrh	r0, [r7, #4]
      pinSet(pin, LOW); // LOW
 80a37a6:	8358      	strh	r0, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a37a8:	9803      	ldr	r0, [sp, #12]
 80a37aa:	9b04      	ldr	r3, [sp, #16]
 80a37ac:	4218      	tst	r0, r3
 80a37ae:	d181      	bne.n	80a36b4 <_ZN17Adafruit_NeoPixel4showEv+0xb74>
          asm volatile(
 80a37b0:	4600      	mov	r0, r0
 80a37b2:	bf00      	nop
 80a37b4:	bf00      	nop
 80a37b6:	bf00      	nop
 80a37b8:	bf00      	nop
 80a37ba:	bf00      	nop
 80a37bc:	bf00      	nop
 80a37be:	bf00      	nop
 80a37c0:	bf00      	nop
 80a37c2:	bf00      	nop
 80a37c4:	bf00      	nop
 80a37c6:	bf00      	nop
 80a37c8:	bf00      	nop
 80a37ca:	bf00      	nop
 80a37cc:	bf00      	nop
 80a37ce:	bf00      	nop
 80a37d0:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a37d2:	79e3      	ldrb	r3, [r4, #7]
 80a37d4:	6810      	ldr	r0, [r2, #0]
 80a37d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a37da:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a37de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a37e2:	88b8      	ldrh	r0, [r7, #4]
 80a37e4:	8318      	strh	r0, [r3, #24]
          j++;
 80a37e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a37ea:	3301      	adds	r3, #1
 80a37ec:	b2db      	uxtb	r3, r3
 80a37ee:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a37f2:	9b04      	ldr	r3, [sp, #16]
 80a37f4:	085b      	lsrs	r3, r3, #1
 80a37f6:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a37f8:	4600      	mov	r0, r0
 80a37fa:	bf00      	nop
 80a37fc:	bf00      	nop
 80a37fe:	bf00      	nop
 80a3800:	bf00      	nop
 80a3802:	bf00      	nop
 80a3804:	bf00      	nop
 80a3806:	bf00      	nop
 80a3808:	bf00      	nop
 80a380a:	bf00      	nop
 80a380c:	bf00      	nop
 80a380e:	bf00      	nop
 80a3810:	bf00      	nop
 80a3812:	bf00      	nop
 80a3814:	bf00      	nop
 80a3816:	bf00      	nop
 80a3818:	bf00      	nop
 80a381a:	bf00      	nop
 80a381c:	bf00      	nop
 80a381e:	bf00      	nop
 80a3820:	bf00      	nop
 80a3822:	bf00      	nop
 80a3824:	bf00      	nop
 80a3826:	bf00      	nop
 80a3828:	bf00      	nop
 80a382a:	bf00      	nop
 80a382c:	bf00      	nop
 80a382e:	bf00      	nop
 80a3830:	bf00      	nop
 80a3832:	bf00      	nop
 80a3834:	bf00      	nop
 80a3836:	bf00      	nop
 80a3838:	bf00      	nop
 80a383a:	bf00      	nop
 80a383c:	bf00      	nop
 80a383e:	bf00      	nop
 80a3840:	bf00      	nop
 80a3842:	bf00      	nop
 80a3844:	bf00      	nop
 80a3846:	bf00      	nop
 80a3848:	bf00      	nop
 80a384a:	bf00      	nop
 80a384c:	bf00      	nop
 80a384e:	bf00      	nop
 80a3850:	bf00      	nop
 80a3852:	bf00      	nop
 80a3854:	bf00      	nop
 80a3856:	bf00      	nop
 80a3858:	bf00      	nop
 80a385a:	bf00      	nop
 80a385c:	bf00      	nop
 80a385e:	bf00      	nop
 80a3860:	bf00      	nop
 80a3862:	bf00      	nop
 80a3864:	bf00      	nop
 80a3866:	bf00      	nop
 80a3868:	bf00      	nop
 80a386a:	bf00      	nop
 80a386c:	bf00      	nop
 80a386e:	bf00      	nop
 80a3870:	bf00      	nop
 80a3872:	bf00      	nop
 80a3874:	bf00      	nop
 80a3876:	bf00      	nop
 80a3878:	bf00      	nop
 80a387a:	bf00      	nop
 80a387c:	bf00      	nop
 80a387e:	bf00      	nop
 80a3880:	bf00      	nop
          if(j==24) break;
 80a3882:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a3886:	2b18      	cmp	r3, #24
 80a3888:	d184      	bne.n	80a3794 <_ZN17Adafruit_NeoPixel4showEv+0xc54>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a388a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a388e:	b29b      	uxth	r3, r3
 80a3890:	2b00      	cmp	r3, #0
 80a3892:	f47f aee0 	bne.w	80a3656 <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a3896:	e51a      	b.n	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3898:	2b00      	cmp	r3, #0
 80a389a:	f43f ad18 	beq.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a389e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a38a2:	2600      	movs	r6, #0
 80a38a4:	4a12      	ldr	r2, [pc, #72]	; (80a38f0 <_ZN17Adafruit_NeoPixel4showEv+0xdb0>)
      mask = 0x800000; // reset the mask
 80a38a6:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a38a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a38ac:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a38ae:	3b03      	subs	r3, #3
 80a38b0:	b29b      	uxth	r3, r3
 80a38b2:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a38b6:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a38ba:	b2db      	uxtb	r3, r3
 80a38bc:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a38c0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a38c4:	b2db      	uxtb	r3, r3
 80a38c6:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a38ca:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a38ce:	b2db      	uxtb	r3, r3
 80a38d0:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a38d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a38d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a38dc:	021b      	lsls	r3, r3, #8
 80a38de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a38e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a38e6:	4303      	orrs	r3, r0
 80a38e8:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a38ea:	f88d 6005 	strb.w	r6, [sp, #5]
 80a38ee:	e0e0      	b.n	80a3ab2 <_ZN17Adafruit_NeoPixel4showEv+0xf72>
 80a38f0:	20000ab8 	.word	0x20000ab8
          asm volatile(
 80a38f4:	4600      	mov	r0, r0
 80a38f6:	bf00      	nop
 80a38f8:	bf00      	nop
 80a38fa:	bf00      	nop
 80a38fc:	bf00      	nop
 80a38fe:	bf00      	nop
 80a3900:	bf00      	nop
 80a3902:	bf00      	nop
 80a3904:	bf00      	nop
 80a3906:	bf00      	nop
 80a3908:	bf00      	nop
 80a390a:	bf00      	nop
 80a390c:	bf00      	nop
 80a390e:	bf00      	nop
 80a3910:	bf00      	nop
 80a3912:	bf00      	nop
 80a3914:	bf00      	nop
 80a3916:	bf00      	nop
 80a3918:	bf00      	nop
 80a391a:	bf00      	nop
 80a391c:	bf00      	nop
 80a391e:	bf00      	nop
 80a3920:	bf00      	nop
 80a3922:	bf00      	nop
 80a3924:	bf00      	nop
 80a3926:	bf00      	nop
 80a3928:	bf00      	nop
 80a392a:	bf00      	nop
 80a392c:	bf00      	nop
 80a392e:	bf00      	nop
 80a3930:	bf00      	nop
 80a3932:	bf00      	nop
 80a3934:	bf00      	nop
 80a3936:	bf00      	nop
 80a3938:	bf00      	nop
 80a393a:	bf00      	nop
 80a393c:	bf00      	nop
 80a393e:	bf00      	nop
 80a3940:	bf00      	nop
 80a3942:	bf00      	nop
 80a3944:	bf00      	nop
 80a3946:	bf00      	nop
 80a3948:	bf00      	nop
 80a394a:	bf00      	nop
 80a394c:	bf00      	nop
 80a394e:	bf00      	nop
 80a3950:	bf00      	nop
 80a3952:	bf00      	nop
 80a3954:	bf00      	nop
 80a3956:	bf00      	nop
 80a3958:	bf00      	nop
 80a395a:	bf00      	nop
 80a395c:	bf00      	nop
 80a395e:	bf00      	nop
 80a3960:	bf00      	nop
 80a3962:	bf00      	nop
 80a3964:	bf00      	nop
 80a3966:	bf00      	nop
 80a3968:	bf00      	nop
 80a396a:	bf00      	nop
 80a396c:	bf00      	nop
 80a396e:	bf00      	nop
 80a3970:	bf00      	nop
 80a3972:	bf00      	nop
 80a3974:	bf00      	nop
 80a3976:	bf00      	nop
 80a3978:	bf00      	nop
 80a397a:	bf00      	nop
 80a397c:	bf00      	nop
 80a397e:	bf00      	nop
 80a3980:	bf00      	nop
 80a3982:	bf00      	nop
 80a3984:	bf00      	nop
 80a3986:	bf00      	nop
 80a3988:	bf00      	nop
 80a398a:	bf00      	nop
 80a398c:	bf00      	nop
 80a398e:	bf00      	nop
 80a3990:	bf00      	nop
 80a3992:	bf00      	nop
 80a3994:	bf00      	nop
 80a3996:	bf00      	nop
 80a3998:	bf00      	nop
 80a399a:	bf00      	nop
 80a399c:	bf00      	nop
 80a399e:	bf00      	nop
 80a39a0:	bf00      	nop
 80a39a2:	bf00      	nop
 80a39a4:	bf00      	nop
 80a39a6:	bf00      	nop
 80a39a8:	bf00      	nop
 80a39aa:	bf00      	nop
 80a39ac:	bf00      	nop
 80a39ae:	bf00      	nop
 80a39b0:	bf00      	nop
 80a39b2:	bf00      	nop
 80a39b4:	bf00      	nop
 80a39b6:	bf00      	nop
 80a39b8:	bf00      	nop
 80a39ba:	bf00      	nop
 80a39bc:	bf00      	nop
 80a39be:	bf00      	nop
 80a39c0:	bf00      	nop
 80a39c2:	bf00      	nop
 80a39c4:	bf00      	nop
 80a39c6:	bf00      	nop
 80a39c8:	bf00      	nop
 80a39ca:	bf00      	nop
 80a39cc:	bf00      	nop
 80a39ce:	bf00      	nop
 80a39d0:	bf00      	nop
 80a39d2:	bf00      	nop
 80a39d4:	bf00      	nop
 80a39d6:	bf00      	nop
 80a39d8:	bf00      	nop
 80a39da:	bf00      	nop
 80a39dc:	bf00      	nop
 80a39de:	bf00      	nop
 80a39e0:	bf00      	nop
 80a39e2:	bf00      	nop
 80a39e4:	bf00      	nop
 80a39e6:	bf00      	nop
 80a39e8:	bf00      	nop
 80a39ea:	bf00      	nop
 80a39ec:	bf00      	nop
 80a39ee:	bf00      	nop
 80a39f0:	bf00      	nop
 80a39f2:	bf00      	nop
 80a39f4:	bf00      	nop
 80a39f6:	bf00      	nop
 80a39f8:	bf00      	nop
 80a39fa:	bf00      	nop
 80a39fc:	bf00      	nop
 80a39fe:	bf00      	nop
 80a3a00:	bf00      	nop
 80a3a02:	bf00      	nop
 80a3a04:	bf00      	nop
 80a3a06:	bf00      	nop
 80a3a08:	bf00      	nop
 80a3a0a:	bf00      	nop
 80a3a0c:	bf00      	nop
 80a3a0e:	bf00      	nop
 80a3a10:	bf00      	nop
 80a3a12:	bf00      	nop
 80a3a14:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3a16:	79e3      	ldrb	r3, [r4, #7]
 80a3a18:	6810      	ldr	r0, [r2, #0]
 80a3a1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3a1e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3a22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3a26:	88b8      	ldrh	r0, [r7, #4]
 80a3a28:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a3a2a:	4600      	mov	r0, r0
 80a3a2c:	bf00      	nop
 80a3a2e:	bf00      	nop
 80a3a30:	bf00      	nop
 80a3a32:	bf00      	nop
 80a3a34:	bf00      	nop
 80a3a36:	bf00      	nop
 80a3a38:	bf00      	nop
 80a3a3a:	bf00      	nop
 80a3a3c:	bf00      	nop
 80a3a3e:	bf00      	nop
 80a3a40:	bf00      	nop
 80a3a42:	bf00      	nop
 80a3a44:	bf00      	nop
 80a3a46:	bf00      	nop
 80a3a48:	bf00      	nop
 80a3a4a:	bf00      	nop
 80a3a4c:	bf00      	nop
 80a3a4e:	bf00      	nop
 80a3a50:	bf00      	nop
 80a3a52:	bf00      	nop
 80a3a54:	bf00      	nop
 80a3a56:	bf00      	nop
 80a3a58:	bf00      	nop
 80a3a5a:	bf00      	nop
 80a3a5c:	bf00      	nop
 80a3a5e:	bf00      	nop
 80a3a60:	bf00      	nop
 80a3a62:	bf00      	nop
 80a3a64:	bf00      	nop
 80a3a66:	bf00      	nop
 80a3a68:	bf00      	nop
 80a3a6a:	bf00      	nop
 80a3a6c:	bf00      	nop
 80a3a6e:	bf00      	nop
 80a3a70:	bf00      	nop
 80a3a72:	bf00      	nop
 80a3a74:	bf00      	nop
 80a3a76:	bf00      	nop
 80a3a78:	bf00      	nop
 80a3a7a:	bf00      	nop
 80a3a7c:	bf00      	nop
 80a3a7e:	bf00      	nop
 80a3a80:	bf00      	nop
 80a3a82:	bf00      	nop
 80a3a84:	bf00      	nop
 80a3a86:	bf00      	nop
 80a3a88:	bf00      	nop
 80a3a8a:	bf00      	nop
 80a3a8c:	bf00      	nop
 80a3a8e:	bf00      	nop
 80a3a90:	bf00      	nop
 80a3a92:	bf00      	nop
 80a3a94:	bf00      	nop
 80a3a96:	bf00      	nop
 80a3a98:	bf00      	nop
        mask >>= 1;
 80a3a9a:	9b04      	ldr	r3, [sp, #16]
 80a3a9c:	085b      	lsrs	r3, r3, #1
 80a3a9e:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a3aa0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a3aa4:	3301      	adds	r3, #1
 80a3aa6:	b2db      	uxtb	r3, r3
 80a3aa8:	2b17      	cmp	r3, #23
 80a3aaa:	f88d 3005 	strb.w	r3, [sp, #5]
 80a3aae:	f200 80eb 	bhi.w	80a3c88 <_ZN17Adafruit_NeoPixel4showEv+0x1148>
        pinSet(pin, HIGH); // HIGH
 80a3ab2:	79e3      	ldrb	r3, [r4, #7]
 80a3ab4:	6810      	ldr	r0, [r2, #0]
 80a3ab6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3aba:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3abe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3ac2:	88b8      	ldrh	r0, [r7, #4]
 80a3ac4:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a3ac6:	9803      	ldr	r0, [sp, #12]
 80a3ac8:	9b04      	ldr	r3, [sp, #16]
 80a3aca:	4218      	tst	r0, r3
 80a3acc:	f47f af12 	bne.w	80a38f4 <_ZN17Adafruit_NeoPixel4showEv+0xdb4>
          asm volatile(
 80a3ad0:	4600      	mov	r0, r0
 80a3ad2:	bf00      	nop
 80a3ad4:	bf00      	nop
 80a3ad6:	bf00      	nop
 80a3ad8:	bf00      	nop
 80a3ada:	bf00      	nop
 80a3adc:	bf00      	nop
 80a3ade:	bf00      	nop
 80a3ae0:	bf00      	nop
 80a3ae2:	bf00      	nop
 80a3ae4:	bf00      	nop
 80a3ae6:	bf00      	nop
 80a3ae8:	bf00      	nop
 80a3aea:	bf00      	nop
 80a3aec:	bf00      	nop
 80a3aee:	bf00      	nop
 80a3af0:	bf00      	nop
 80a3af2:	bf00      	nop
 80a3af4:	bf00      	nop
 80a3af6:	bf00      	nop
 80a3af8:	bf00      	nop
 80a3afa:	bf00      	nop
 80a3afc:	bf00      	nop
 80a3afe:	bf00      	nop
 80a3b00:	bf00      	nop
 80a3b02:	bf00      	nop
 80a3b04:	bf00      	nop
 80a3b06:	bf00      	nop
 80a3b08:	bf00      	nop
 80a3b0a:	bf00      	nop
 80a3b0c:	bf00      	nop
 80a3b0e:	bf00      	nop
 80a3b10:	bf00      	nop
 80a3b12:	bf00      	nop
 80a3b14:	bf00      	nop
 80a3b16:	bf00      	nop
 80a3b18:	bf00      	nop
 80a3b1a:	bf00      	nop
 80a3b1c:	bf00      	nop
 80a3b1e:	bf00      	nop
 80a3b20:	bf00      	nop
 80a3b22:	bf00      	nop
 80a3b24:	bf00      	nop
 80a3b26:	bf00      	nop
 80a3b28:	bf00      	nop
 80a3b2a:	bf00      	nop
 80a3b2c:	bf00      	nop
 80a3b2e:	bf00      	nop
 80a3b30:	bf00      	nop
 80a3b32:	bf00      	nop
 80a3b34:	bf00      	nop
 80a3b36:	bf00      	nop
 80a3b38:	bf00      	nop
 80a3b3a:	bf00      	nop
 80a3b3c:	bf00      	nop
 80a3b3e:	bf00      	nop
 80a3b40:	bf00      	nop
 80a3b42:	bf00      	nop
 80a3b44:	bf00      	nop
 80a3b46:	bf00      	nop
 80a3b48:	bf00      	nop
 80a3b4a:	bf00      	nop
 80a3b4c:	bf00      	nop
 80a3b4e:	bf00      	nop
 80a3b50:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3b52:	79e3      	ldrb	r3, [r4, #7]
 80a3b54:	6810      	ldr	r0, [r2, #0]
 80a3b56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3b5a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3b5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3b62:	88b8      	ldrh	r0, [r7, #4]
 80a3b64:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a3b66:	4600      	mov	r0, r0
 80a3b68:	bf00      	nop
 80a3b6a:	bf00      	nop
 80a3b6c:	bf00      	nop
 80a3b6e:	bf00      	nop
 80a3b70:	bf00      	nop
 80a3b72:	bf00      	nop
 80a3b74:	bf00      	nop
 80a3b76:	bf00      	nop
 80a3b78:	bf00      	nop
 80a3b7a:	bf00      	nop
 80a3b7c:	bf00      	nop
 80a3b7e:	bf00      	nop
 80a3b80:	bf00      	nop
 80a3b82:	bf00      	nop
 80a3b84:	bf00      	nop
 80a3b86:	bf00      	nop
 80a3b88:	bf00      	nop
 80a3b8a:	bf00      	nop
 80a3b8c:	bf00      	nop
 80a3b8e:	bf00      	nop
 80a3b90:	bf00      	nop
 80a3b92:	bf00      	nop
 80a3b94:	bf00      	nop
 80a3b96:	bf00      	nop
 80a3b98:	bf00      	nop
 80a3b9a:	bf00      	nop
 80a3b9c:	bf00      	nop
 80a3b9e:	bf00      	nop
 80a3ba0:	bf00      	nop
 80a3ba2:	bf00      	nop
 80a3ba4:	bf00      	nop
 80a3ba6:	bf00      	nop
 80a3ba8:	bf00      	nop
 80a3baa:	bf00      	nop
 80a3bac:	bf00      	nop
 80a3bae:	bf00      	nop
 80a3bb0:	bf00      	nop
 80a3bb2:	bf00      	nop
 80a3bb4:	bf00      	nop
 80a3bb6:	bf00      	nop
 80a3bb8:	bf00      	nop
 80a3bba:	bf00      	nop
 80a3bbc:	bf00      	nop
 80a3bbe:	bf00      	nop
 80a3bc0:	bf00      	nop
 80a3bc2:	bf00      	nop
 80a3bc4:	bf00      	nop
 80a3bc6:	bf00      	nop
 80a3bc8:	bf00      	nop
 80a3bca:	bf00      	nop
 80a3bcc:	bf00      	nop
 80a3bce:	bf00      	nop
 80a3bd0:	bf00      	nop
 80a3bd2:	bf00      	nop
 80a3bd4:	bf00      	nop
 80a3bd6:	bf00      	nop
 80a3bd8:	bf00      	nop
 80a3bda:	bf00      	nop
 80a3bdc:	bf00      	nop
 80a3bde:	bf00      	nop
 80a3be0:	bf00      	nop
 80a3be2:	bf00      	nop
 80a3be4:	bf00      	nop
 80a3be6:	bf00      	nop
 80a3be8:	bf00      	nop
 80a3bea:	bf00      	nop
 80a3bec:	bf00      	nop
 80a3bee:	bf00      	nop
 80a3bf0:	bf00      	nop
 80a3bf2:	bf00      	nop
 80a3bf4:	bf00      	nop
 80a3bf6:	bf00      	nop
 80a3bf8:	bf00      	nop
 80a3bfa:	bf00      	nop
 80a3bfc:	bf00      	nop
 80a3bfe:	bf00      	nop
 80a3c00:	bf00      	nop
 80a3c02:	bf00      	nop
 80a3c04:	bf00      	nop
 80a3c06:	bf00      	nop
 80a3c08:	bf00      	nop
 80a3c0a:	bf00      	nop
 80a3c0c:	bf00      	nop
 80a3c0e:	bf00      	nop
 80a3c10:	bf00      	nop
 80a3c12:	bf00      	nop
 80a3c14:	bf00      	nop
 80a3c16:	bf00      	nop
 80a3c18:	bf00      	nop
 80a3c1a:	bf00      	nop
 80a3c1c:	bf00      	nop
 80a3c1e:	bf00      	nop
 80a3c20:	bf00      	nop
 80a3c22:	bf00      	nop
 80a3c24:	bf00      	nop
 80a3c26:	bf00      	nop
 80a3c28:	bf00      	nop
 80a3c2a:	bf00      	nop
 80a3c2c:	bf00      	nop
 80a3c2e:	bf00      	nop
 80a3c30:	bf00      	nop
 80a3c32:	bf00      	nop
 80a3c34:	bf00      	nop
 80a3c36:	bf00      	nop
 80a3c38:	bf00      	nop
 80a3c3a:	bf00      	nop
 80a3c3c:	bf00      	nop
 80a3c3e:	bf00      	nop
 80a3c40:	bf00      	nop
 80a3c42:	bf00      	nop
 80a3c44:	bf00      	nop
 80a3c46:	bf00      	nop
 80a3c48:	bf00      	nop
 80a3c4a:	bf00      	nop
 80a3c4c:	bf00      	nop
 80a3c4e:	bf00      	nop
 80a3c50:	bf00      	nop
 80a3c52:	bf00      	nop
 80a3c54:	bf00      	nop
 80a3c56:	bf00      	nop
 80a3c58:	bf00      	nop
 80a3c5a:	bf00      	nop
 80a3c5c:	bf00      	nop
 80a3c5e:	bf00      	nop
 80a3c60:	bf00      	nop
 80a3c62:	bf00      	nop
 80a3c64:	bf00      	nop
 80a3c66:	bf00      	nop
 80a3c68:	bf00      	nop
 80a3c6a:	bf00      	nop
 80a3c6c:	bf00      	nop
 80a3c6e:	bf00      	nop
 80a3c70:	bf00      	nop
 80a3c72:	bf00      	nop
 80a3c74:	bf00      	nop
 80a3c76:	e710      	b.n	80a3a9a <_ZN17Adafruit_NeoPixel4showEv+0xf5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3c78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a3c7c:	b29b      	uxth	r3, r3
 80a3c7e:	2b00      	cmp	r3, #0
 80a3c80:	f47e af96 	bne.w	80a2bb0 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a3c84:	f7ff bb23 	b.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3c88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a3c8c:	b29b      	uxth	r3, r3
 80a3c8e:	2b00      	cmp	r3, #0
 80a3c90:	f47f ae09 	bne.w	80a38a6 <_ZN17Adafruit_NeoPixel4showEv+0xd66>
 80a3c94:	f7ff bb1b 	b.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a3c98 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a3c98:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a3c9a:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a3c9c:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
 80a3ca0:	428c      	cmp	r4, r1
 80a3ca2:	d91f      	bls.n	80a3ce4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4c>
    if(brightness) { // See notes in setBrightness()
 80a3ca4:	7a04      	ldrb	r4, [r0, #8]
 80a3ca6:	b12c      	cbz	r4, 80a3cb4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x1c>
      r = (r * brightness) >> 8;
 80a3ca8:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a3caa:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a3cac:	436c      	muls	r4, r5
      r = (r * brightness) >> 8;
 80a3cae:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a3cb0:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a3cb2:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a3cb4:	68c6      	ldr	r6, [r0, #12]
 80a3cb6:	7980      	ldrb	r0, [r0, #6]
 80a3cb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a3cbc:	3802      	subs	r0, #2
 80a3cbe:	1874      	adds	r4, r6, r1
    switch(type) {
 80a3cc0:	2806      	cmp	r0, #6
 80a3cc2:	d810      	bhi.n	80a3ce6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a3cc4:	e8df f000 	tbb	[pc, r0]
 80a3cc8:	04080f04 	.word	0x04080f04
 80a3ccc:	040f      	.short	0x040f
 80a3cce:	04          	.byte	0x04
 80a3ccf:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a3cd0:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a3cd2:	7062      	strb	r2, [r4, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a3cd4:	70a5      	strb	r5, [r4, #2]
        } break;
    }
  }
}
 80a3cd6:	e005      	b.n	80a3ce4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4c>
          *p++ = r;
 80a3cd8:	2afe      	cmp	r2, #254	; 0xfe
 80a3cda:	bf28      	it	cs
 80a3cdc:	22fe      	movcs	r2, #254	; 0xfe
 80a3cde:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a3ce0:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a3ce2:	70a3      	strb	r3, [r4, #2]
}
 80a3ce4:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
 80a3ce6:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a3ce8:	7063      	strb	r3, [r4, #1]
 80a3cea:	e7f3      	b.n	80a3cd4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3c>

080a3cec <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a3cec:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a3cee:	f000 f85d 	bl	80a3dac <HAL_Pin_Map>
 80a3cf2:	4b01      	ldr	r3, [pc, #4]	; (80a3cf8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a3cf4:	6018      	str	r0, [r3, #0]
}
 80a3cf6:	bd08      	pop	{r3, pc}
 80a3cf8:	20000ab8 	.word	0x20000ab8

080a3cfc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3cfc:	b508      	push	{r3, lr}
 80a3cfe:	4b02      	ldr	r3, [pc, #8]	; (80a3d08 <os_mutex_recursive_create+0xc>)
 80a3d00:	681b      	ldr	r3, [r3, #0]
 80a3d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3d04:	9301      	str	r3, [sp, #4]
 80a3d06:	bd08      	pop	{r3, pc}
 80a3d08:	080601d0 	.word	0x080601d0

080a3d0c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3d0c:	b508      	push	{r3, lr}
 80a3d0e:	4b02      	ldr	r3, [pc, #8]	; (80a3d18 <os_mutex_recursive_destroy+0xc>)
 80a3d10:	681b      	ldr	r3, [r3, #0]
 80a3d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3d14:	9301      	str	r3, [sp, #4]
 80a3d16:	bd08      	pop	{r3, pc}
 80a3d18:	080601d0 	.word	0x080601d0

080a3d1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3d1c:	b508      	push	{r3, lr}
 80a3d1e:	4b02      	ldr	r3, [pc, #8]	; (80a3d28 <HAL_RNG_GetRandomNumber+0xc>)
 80a3d20:	681b      	ldr	r3, [r3, #0]
 80a3d22:	685b      	ldr	r3, [r3, #4]
 80a3d24:	9301      	str	r3, [sp, #4]
 80a3d26:	bd08      	pop	{r3, pc}
 80a3d28:	0806019c 	.word	0x0806019c

080a3d2c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a3d2c:	b508      	push	{r3, lr}
 80a3d2e:	4b02      	ldr	r3, [pc, #8]	; (80a3d38 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a3d30:	681b      	ldr	r3, [r3, #0]
 80a3d32:	691b      	ldr	r3, [r3, #16]
 80a3d34:	9301      	str	r3, [sp, #4]
 80a3d36:	bd08      	pop	{r3, pc}
 80a3d38:	0806019c 	.word	0x0806019c

080a3d3c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3d3c:	b508      	push	{r3, lr}
 80a3d3e:	4b02      	ldr	r3, [pc, #8]	; (80a3d48 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3d40:	681b      	ldr	r3, [r3, #0]
 80a3d42:	695b      	ldr	r3, [r3, #20]
 80a3d44:	9301      	str	r3, [sp, #4]
 80a3d46:	bd08      	pop	{r3, pc}
 80a3d48:	0806019c 	.word	0x0806019c

080a3d4c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a3d4c:	b508      	push	{r3, lr}
 80a3d4e:	4b02      	ldr	r3, [pc, #8]	; (80a3d58 <HAL_EEPROM_Init+0xc>)
 80a3d50:	681b      	ldr	r3, [r3, #0]
 80a3d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3d54:	9301      	str	r3, [sp, #4]
 80a3d56:	bd08      	pop	{r3, pc}
 80a3d58:	0806019c 	.word	0x0806019c

080a3d5c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80a3d5c:	b508      	push	{r3, lr}
 80a3d5e:	4b02      	ldr	r3, [pc, #8]	; (80a3d68 <HAL_EEPROM_Read+0xc>)
 80a3d60:	681b      	ldr	r3, [r3, #0]
 80a3d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3d64:	9301      	str	r3, [sp, #4]
 80a3d66:	bd08      	pop	{r3, pc}
 80a3d68:	0806019c 	.word	0x0806019c

080a3d6c <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 80a3d6c:	b508      	push	{r3, lr}
 80a3d6e:	4b02      	ldr	r3, [pc, #8]	; (80a3d78 <HAL_EEPROM_Write+0xc>)
 80a3d70:	681b      	ldr	r3, [r3, #0]
 80a3d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3d74:	9301      	str	r3, [sp, #4]
 80a3d76:	bd08      	pop	{r3, pc}
 80a3d78:	0806019c 	.word	0x0806019c

080a3d7c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a3d7c:	b508      	push	{r3, lr}
 80a3d7e:	4b02      	ldr	r3, [pc, #8]	; (80a3d88 <hal_rtc_time_is_valid+0xc>)
 80a3d80:	681b      	ldr	r3, [r3, #0]
 80a3d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3d84:	9301      	str	r3, [sp, #4]
 80a3d86:	bd08      	pop	{r3, pc}
 80a3d88:	0806019c 	.word	0x0806019c

080a3d8c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a3d8c:	b508      	push	{r3, lr}
 80a3d8e:	4b02      	ldr	r3, [pc, #8]	; (80a3d98 <hal_timer_millis+0xc>)
 80a3d90:	681b      	ldr	r3, [r3, #0]
 80a3d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a3d94:	9301      	str	r3, [sp, #4]
 80a3d96:	bd08      	pop	{r3, pc}
 80a3d98:	0806019c 	.word	0x0806019c

080a3d9c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a3d9c:	b508      	push	{r3, lr}
 80a3d9e:	4b02      	ldr	r3, [pc, #8]	; (80a3da8 <hal_rtc_get_time+0xc>)
 80a3da0:	681b      	ldr	r3, [r3, #0]
 80a3da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3da4:	9301      	str	r3, [sp, #4]
 80a3da6:	bd08      	pop	{r3, pc}
 80a3da8:	0806019c 	.word	0x0806019c

080a3dac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3dac:	b508      	push	{r3, lr}
 80a3dae:	4b02      	ldr	r3, [pc, #8]	; (80a3db8 <HAL_Pin_Map+0xc>)
 80a3db0:	681b      	ldr	r3, [r3, #0]
 80a3db2:	681b      	ldr	r3, [r3, #0]
 80a3db4:	9301      	str	r3, [sp, #4]
 80a3db6:	bd08      	pop	{r3, pc}
 80a3db8:	080601b0 	.word	0x080601b0

080a3dbc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3dbc:	b508      	push	{r3, lr}
 80a3dbe:	4b02      	ldr	r3, [pc, #8]	; (80a3dc8 <HAL_Validate_Pin_Function+0xc>)
 80a3dc0:	681b      	ldr	r3, [r3, #0]
 80a3dc2:	685b      	ldr	r3, [r3, #4]
 80a3dc4:	9301      	str	r3, [sp, #4]
 80a3dc6:	bd08      	pop	{r3, pc}
 80a3dc8:	080601b0 	.word	0x080601b0

080a3dcc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3dcc:	b508      	push	{r3, lr}
 80a3dce:	4b02      	ldr	r3, [pc, #8]	; (80a3dd8 <HAL_Pin_Mode+0xc>)
 80a3dd0:	681b      	ldr	r3, [r3, #0]
 80a3dd2:	689b      	ldr	r3, [r3, #8]
 80a3dd4:	9301      	str	r3, [sp, #4]
 80a3dd6:	bd08      	pop	{r3, pc}
 80a3dd8:	080601b0 	.word	0x080601b0

080a3ddc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3ddc:	b508      	push	{r3, lr}
 80a3dde:	4b02      	ldr	r3, [pc, #8]	; (80a3de8 <HAL_Get_Pin_Mode+0xc>)
 80a3de0:	681b      	ldr	r3, [r3, #0]
 80a3de2:	68db      	ldr	r3, [r3, #12]
 80a3de4:	9301      	str	r3, [sp, #4]
 80a3de6:	bd08      	pop	{r3, pc}
 80a3de8:	080601b0 	.word	0x080601b0

080a3dec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3dec:	b508      	push	{r3, lr}
 80a3dee:	4b02      	ldr	r3, [pc, #8]	; (80a3df8 <HAL_GPIO_Write+0xc>)
 80a3df0:	681b      	ldr	r3, [r3, #0]
 80a3df2:	691b      	ldr	r3, [r3, #16]
 80a3df4:	9301      	str	r3, [sp, #4]
 80a3df6:	bd08      	pop	{r3, pc}
 80a3df8:	080601b0 	.word	0x080601b0

080a3dfc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3dfc:	b508      	push	{r3, lr}
 80a3dfe:	4b02      	ldr	r3, [pc, #8]	; (80a3e08 <HAL_GPIO_Read+0xc>)
 80a3e00:	681b      	ldr	r3, [r3, #0]
 80a3e02:	695b      	ldr	r3, [r3, #20]
 80a3e04:	9301      	str	r3, [sp, #4]
 80a3e06:	bd08      	pop	{r3, pc}
 80a3e08:	080601b0 	.word	0x080601b0

080a3e0c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a3e0c:	b508      	push	{r3, lr}
 80a3e0e:	4b02      	ldr	r3, [pc, #8]	; (80a3e18 <hal_adc_read+0xc>)
 80a3e10:	681b      	ldr	r3, [r3, #0]
 80a3e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3e14:	9301      	str	r3, [sp, #4]
 80a3e16:	bd08      	pop	{r3, pc}
 80a3e18:	080601b0 	.word	0x080601b0

080a3e1c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a3e1c:	b508      	push	{r3, lr}
 80a3e1e:	4b02      	ldr	r3, [pc, #8]	; (80a3e28 <hal_i2c_write+0xc>)
 80a3e20:	681b      	ldr	r3, [r3, #0]
 80a3e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3e24:	9301      	str	r3, [sp, #4]
 80a3e26:	bd08      	pop	{r3, pc}
 80a3e28:	080601ac 	.word	0x080601ac

080a3e2c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a3e2c:	b508      	push	{r3, lr}
 80a3e2e:	4b02      	ldr	r3, [pc, #8]	; (80a3e38 <hal_i2c_available+0xc>)
 80a3e30:	681b      	ldr	r3, [r3, #0]
 80a3e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3e34:	9301      	str	r3, [sp, #4]
 80a3e36:	bd08      	pop	{r3, pc}
 80a3e38:	080601ac 	.word	0x080601ac

080a3e3c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a3e3c:	b508      	push	{r3, lr}
 80a3e3e:	4b02      	ldr	r3, [pc, #8]	; (80a3e48 <hal_i2c_read+0xc>)
 80a3e40:	681b      	ldr	r3, [r3, #0]
 80a3e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3e44:	9301      	str	r3, [sp, #4]
 80a3e46:	bd08      	pop	{r3, pc}
 80a3e48:	080601ac 	.word	0x080601ac

080a3e4c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3e4c:	b508      	push	{r3, lr}
 80a3e4e:	4b02      	ldr	r3, [pc, #8]	; (80a3e58 <hal_i2c_peek+0xc>)
 80a3e50:	681b      	ldr	r3, [r3, #0]
 80a3e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3e54:	9301      	str	r3, [sp, #4]
 80a3e56:	bd08      	pop	{r3, pc}
 80a3e58:	080601ac 	.word	0x080601ac

080a3e5c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3e5c:	b508      	push	{r3, lr}
 80a3e5e:	4b02      	ldr	r3, [pc, #8]	; (80a3e68 <hal_i2c_flush+0xc>)
 80a3e60:	681b      	ldr	r3, [r3, #0]
 80a3e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3e64:	9301      	str	r3, [sp, #4]
 80a3e66:	bd08      	pop	{r3, pc}
 80a3e68:	080601ac 	.word	0x080601ac

080a3e6c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3e6c:	b508      	push	{r3, lr}
 80a3e6e:	4b02      	ldr	r3, [pc, #8]	; (80a3e78 <hal_i2c_is_enabled+0xc>)
 80a3e70:	681b      	ldr	r3, [r3, #0]
 80a3e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3e74:	9301      	str	r3, [sp, #4]
 80a3e76:	bd08      	pop	{r3, pc}
 80a3e78:	080601ac 	.word	0x080601ac

080a3e7c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3e7c:	b508      	push	{r3, lr}
 80a3e7e:	4b03      	ldr	r3, [pc, #12]	; (80a3e8c <hal_i2c_init+0x10>)
 80a3e80:	681b      	ldr	r3, [r3, #0]
 80a3e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a3e86:	9301      	str	r3, [sp, #4]
 80a3e88:	bd08      	pop	{r3, pc}
 80a3e8a:	0000      	.short	0x0000
 80a3e8c:	080601ac 	.word	0x080601ac

080a3e90 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a3e90:	b508      	push	{r3, lr}
 80a3e92:	4b02      	ldr	r3, [pc, #8]	; (80a3e9c <hal_spi_init+0xc>)
 80a3e94:	681b      	ldr	r3, [r3, #0]
 80a3e96:	69db      	ldr	r3, [r3, #28]
 80a3e98:	9301      	str	r3, [sp, #4]
 80a3e9a:	bd08      	pop	{r3, pc}
 80a3e9c:	080601b4 	.word	0x080601b4

080a3ea0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a3ea0:	b508      	push	{r3, lr}
 80a3ea2:	4b02      	ldr	r3, [pc, #8]	; (80a3eac <hal_spi_is_enabled+0xc>)
 80a3ea4:	681b      	ldr	r3, [r3, #0]
 80a3ea6:	6a1b      	ldr	r3, [r3, #32]
 80a3ea8:	9301      	str	r3, [sp, #4]
 80a3eaa:	bd08      	pop	{r3, pc}
 80a3eac:	080601b4 	.word	0x080601b4

080a3eb0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a3eb0:	b508      	push	{r3, lr}
 80a3eb2:	4b02      	ldr	r3, [pc, #8]	; (80a3ebc <hal_usart_init+0xc>)
 80a3eb4:	681b      	ldr	r3, [r3, #0]
 80a3eb6:	699b      	ldr	r3, [r3, #24]
 80a3eb8:	9301      	str	r3, [sp, #4]
 80a3eba:	bd08      	pop	{r3, pc}
 80a3ebc:	080601c4 	.word	0x080601c4

080a3ec0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3ec0:	b508      	push	{r3, lr}
 80a3ec2:	4b02      	ldr	r3, [pc, #8]	; (80a3ecc <hal_usart_write+0xc>)
 80a3ec4:	681b      	ldr	r3, [r3, #0]
 80a3ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3ec8:	9301      	str	r3, [sp, #4]
 80a3eca:	bd08      	pop	{r3, pc}
 80a3ecc:	080601c4 	.word	0x080601c4

080a3ed0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3ed0:	b508      	push	{r3, lr}
 80a3ed2:	4b02      	ldr	r3, [pc, #8]	; (80a3edc <hal_usart_available+0xc>)
 80a3ed4:	681b      	ldr	r3, [r3, #0]
 80a3ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3ed8:	9301      	str	r3, [sp, #4]
 80a3eda:	bd08      	pop	{r3, pc}
 80a3edc:	080601c4 	.word	0x080601c4

080a3ee0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3ee0:	b508      	push	{r3, lr}
 80a3ee2:	4b02      	ldr	r3, [pc, #8]	; (80a3eec <hal_usart_read+0xc>)
 80a3ee4:	681b      	ldr	r3, [r3, #0]
 80a3ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3ee8:	9301      	str	r3, [sp, #4]
 80a3eea:	bd08      	pop	{r3, pc}
 80a3eec:	080601c4 	.word	0x080601c4

080a3ef0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a3ef0:	b508      	push	{r3, lr}
 80a3ef2:	4b02      	ldr	r3, [pc, #8]	; (80a3efc <hal_usart_peek+0xc>)
 80a3ef4:	681b      	ldr	r3, [r3, #0]
 80a3ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3ef8:	9301      	str	r3, [sp, #4]
 80a3efa:	bd08      	pop	{r3, pc}
 80a3efc:	080601c4 	.word	0x080601c4

080a3f00 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3f00:	b508      	push	{r3, lr}
 80a3f02:	4b02      	ldr	r3, [pc, #8]	; (80a3f0c <hal_usart_flush+0xc>)
 80a3f04:	681b      	ldr	r3, [r3, #0]
 80a3f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3f08:	9301      	str	r3, [sp, #4]
 80a3f0a:	bd08      	pop	{r3, pc}
 80a3f0c:	080601c4 	.word	0x080601c4

080a3f10 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a3f10:	b508      	push	{r3, lr}
 80a3f12:	4b02      	ldr	r3, [pc, #8]	; (80a3f1c <hal_usart_is_enabled+0xc>)
 80a3f14:	681b      	ldr	r3, [r3, #0]
 80a3f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3f18:	9301      	str	r3, [sp, #4]
 80a3f1a:	bd08      	pop	{r3, pc}
 80a3f1c:	080601c4 	.word	0x080601c4

080a3f20 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a3f20:	b508      	push	{r3, lr}
 80a3f22:	4b02      	ldr	r3, [pc, #8]	; (80a3f2c <hal_usart_available_data_for_write+0xc>)
 80a3f24:	681b      	ldr	r3, [r3, #0]
 80a3f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3f28:	9301      	str	r3, [sp, #4]
 80a3f2a:	bd08      	pop	{r3, pc}
 80a3f2c:	080601c4 	.word	0x080601c4

080a3f30 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3f30:	b508      	push	{r3, lr}
 80a3f32:	4b02      	ldr	r3, [pc, #8]	; (80a3f3c <HAL_USB_USART_Init+0xc>)
 80a3f34:	681b      	ldr	r3, [r3, #0]
 80a3f36:	681b      	ldr	r3, [r3, #0]
 80a3f38:	9301      	str	r3, [sp, #4]
 80a3f3a:	bd08      	pop	{r3, pc}
 80a3f3c:	080601d8 	.word	0x080601d8

080a3f40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3f40:	b508      	push	{r3, lr}
 80a3f42:	4b02      	ldr	r3, [pc, #8]	; (80a3f4c <HAL_USB_USART_Available_Data+0xc>)
 80a3f44:	681b      	ldr	r3, [r3, #0]
 80a3f46:	691b      	ldr	r3, [r3, #16]
 80a3f48:	9301      	str	r3, [sp, #4]
 80a3f4a:	bd08      	pop	{r3, pc}
 80a3f4c:	080601d8 	.word	0x080601d8

080a3f50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3f50:	b508      	push	{r3, lr}
 80a3f52:	4b02      	ldr	r3, [pc, #8]	; (80a3f5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3f54:	681b      	ldr	r3, [r3, #0]
 80a3f56:	695b      	ldr	r3, [r3, #20]
 80a3f58:	9301      	str	r3, [sp, #4]
 80a3f5a:	bd08      	pop	{r3, pc}
 80a3f5c:	080601d8 	.word	0x080601d8

080a3f60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3f60:	b508      	push	{r3, lr}
 80a3f62:	4b02      	ldr	r3, [pc, #8]	; (80a3f6c <HAL_USB_USART_Receive_Data+0xc>)
 80a3f64:	681b      	ldr	r3, [r3, #0]
 80a3f66:	699b      	ldr	r3, [r3, #24]
 80a3f68:	9301      	str	r3, [sp, #4]
 80a3f6a:	bd08      	pop	{r3, pc}
 80a3f6c:	080601d8 	.word	0x080601d8

080a3f70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3f70:	b508      	push	{r3, lr}
 80a3f72:	4b02      	ldr	r3, [pc, #8]	; (80a3f7c <HAL_USB_USART_Send_Data+0xc>)
 80a3f74:	681b      	ldr	r3, [r3, #0]
 80a3f76:	69db      	ldr	r3, [r3, #28]
 80a3f78:	9301      	str	r3, [sp, #4]
 80a3f7a:	bd08      	pop	{r3, pc}
 80a3f7c:	080601d8 	.word	0x080601d8

080a3f80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3f80:	b508      	push	{r3, lr}
 80a3f82:	4b02      	ldr	r3, [pc, #8]	; (80a3f8c <HAL_USB_USART_Flush_Data+0xc>)
 80a3f84:	681b      	ldr	r3, [r3, #0]
 80a3f86:	6a1b      	ldr	r3, [r3, #32]
 80a3f88:	9301      	str	r3, [sp, #4]
 80a3f8a:	bd08      	pop	{r3, pc}
 80a3f8c:	080601d8 	.word	0x080601d8

080a3f90 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3f90:	b508      	push	{r3, lr}
 80a3f92:	4b02      	ldr	r3, [pc, #8]	; (80a3f9c <inet_gethostbyname+0xc>)
 80a3f94:	681b      	ldr	r3, [r3, #0]
 80a3f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3f98:	9301      	str	r3, [sp, #4]
 80a3f9a:	bd08      	pop	{r3, pc}
 80a3f9c:	080601c0 	.word	0x080601c0

080a3fa0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a3fa0:	b508      	push	{r3, lr}
 80a3fa2:	4b02      	ldr	r3, [pc, #8]	; (80a3fac <LED_SetSignalingColor+0xc>)
 80a3fa4:	681b      	ldr	r3, [r3, #0]
 80a3fa6:	685b      	ldr	r3, [r3, #4]
 80a3fa8:	9301      	str	r3, [sp, #4]
 80a3faa:	bd08      	pop	{r3, pc}
 80a3fac:	080201a8 	.word	0x080201a8

080a3fb0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a3fb0:	b508      	push	{r3, lr}
 80a3fb2:	4b02      	ldr	r3, [pc, #8]	; (80a3fbc <LED_Signaling_Start+0xc>)
 80a3fb4:	681b      	ldr	r3, [r3, #0]
 80a3fb6:	689b      	ldr	r3, [r3, #8]
 80a3fb8:	9301      	str	r3, [sp, #4]
 80a3fba:	bd08      	pop	{r3, pc}
 80a3fbc:	080201a8 	.word	0x080201a8

080a3fc0 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a3fc0:	b508      	push	{r3, lr}
 80a3fc2:	4b02      	ldr	r3, [pc, #8]	; (80a3fcc <LED_Signaling_Stop+0xc>)
 80a3fc4:	681b      	ldr	r3, [r3, #0]
 80a3fc6:	68db      	ldr	r3, [r3, #12]
 80a3fc8:	9301      	str	r3, [sp, #4]
 80a3fca:	bd08      	pop	{r3, pc}
 80a3fcc:	080201a8 	.word	0x080201a8

080a3fd0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a3fd0:	b508      	push	{r3, lr}
 80a3fd2:	4b02      	ldr	r3, [pc, #8]	; (80a3fdc <LED_RGB_IsOverRidden+0xc>)
 80a3fd4:	681b      	ldr	r3, [r3, #0]
 80a3fd6:	699b      	ldr	r3, [r3, #24]
 80a3fd8:	9301      	str	r3, [sp, #4]
 80a3fda:	bd08      	pop	{r3, pc}
 80a3fdc:	080201a8 	.word	0x080201a8

080a3fe0 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a3fe0:	b508      	push	{r3, lr}
 80a3fe2:	4b02      	ldr	r3, [pc, #8]	; (80a3fec <LED_On+0xc>)
 80a3fe4:	681b      	ldr	r3, [r3, #0]
 80a3fe6:	69db      	ldr	r3, [r3, #28]
 80a3fe8:	9301      	str	r3, [sp, #4]
 80a3fea:	bd08      	pop	{r3, pc}
 80a3fec:	080201a8 	.word	0x080201a8

080a3ff0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3ff0:	b508      	push	{r3, lr}
 80a3ff2:	4b02      	ldr	r3, [pc, #8]	; (80a3ffc <system_mode+0xc>)
 80a3ff4:	681b      	ldr	r3, [r3, #0]
 80a3ff6:	681b      	ldr	r3, [r3, #0]
 80a3ff8:	9301      	str	r3, [sp, #4]
 80a3ffa:	bd08      	pop	{r3, pc}
 80a3ffc:	080601a4 	.word	0x080601a4

080a4000 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a4000:	b508      	push	{r3, lr}
 80a4002:	4b02      	ldr	r3, [pc, #8]	; (80a400c <set_system_mode+0xc>)
 80a4004:	681b      	ldr	r3, [r3, #0]
 80a4006:	685b      	ldr	r3, [r3, #4]
 80a4008:	9301      	str	r3, [sp, #4]
 80a400a:	bd08      	pop	{r3, pc}
 80a400c:	080601a4 	.word	0x080601a4

080a4010 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a4010:	b508      	push	{r3, lr}
 80a4012:	4b02      	ldr	r3, [pc, #8]	; (80a401c <system_delay_ms+0xc>)
 80a4014:	681b      	ldr	r3, [r3, #0]
 80a4016:	695b      	ldr	r3, [r3, #20]
 80a4018:	9301      	str	r3, [sp, #4]
 80a401a:	bd08      	pop	{r3, pc}
 80a401c:	080601a4 	.word	0x080601a4

080a4020 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a4020:	b508      	push	{r3, lr}
 80a4022:	4b02      	ldr	r3, [pc, #8]	; (80a402c <system_thread_set_state+0xc>)
 80a4024:	681b      	ldr	r3, [r3, #0]
 80a4026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a4028:	9301      	str	r3, [sp, #4]
 80a402a:	bd08      	pop	{r3, pc}
 80a402c:	080601a4 	.word	0x080601a4

080a4030 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a4030:	b508      	push	{r3, lr}
 80a4032:	4b02      	ldr	r3, [pc, #8]	; (80a403c <application_thread_current+0xc>)
 80a4034:	681b      	ldr	r3, [r3, #0]
 80a4036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a4038:	9301      	str	r3, [sp, #4]
 80a403a:	bd08      	pop	{r3, pc}
 80a403c:	080601a4 	.word	0x080601a4

080a4040 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a4040:	b508      	push	{r3, lr}
 80a4042:	4b02      	ldr	r3, [pc, #8]	; (80a404c <application_thread_invoke+0xc>)
 80a4044:	681b      	ldr	r3, [r3, #0]
 80a4046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a4048:	9301      	str	r3, [sp, #4]
 80a404a:	bd08      	pop	{r3, pc}
 80a404c:	080601a4 	.word	0x080601a4

080a4050 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a4050:	b508      	push	{r3, lr}
 80a4052:	4b02      	ldr	r3, [pc, #8]	; (80a405c <system_thread_get_state+0xc>)
 80a4054:	681b      	ldr	r3, [r3, #0]
 80a4056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a4058:	9301      	str	r3, [sp, #4]
 80a405a:	bd08      	pop	{r3, pc}
 80a405c:	080601a4 	.word	0x080601a4

080a4060 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a4060:	b508      	push	{r3, lr}
 80a4062:	4b03      	ldr	r3, [pc, #12]	; (80a4070 <system_ctrl_set_app_request_handler+0x10>)
 80a4064:	681b      	ldr	r3, [r3, #0]
 80a4066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a406a:	9301      	str	r3, [sp, #4]
 80a406c:	bd08      	pop	{r3, pc}
 80a406e:	0000      	.short	0x0000
 80a4070:	080601a4 	.word	0x080601a4

080a4074 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a4074:	b508      	push	{r3, lr}
 80a4076:	4b03      	ldr	r3, [pc, #12]	; (80a4084 <system_ctrl_set_result+0x10>)
 80a4078:	681b      	ldr	r3, [r3, #0]
 80a407a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a407e:	9301      	str	r3, [sp, #4]
 80a4080:	bd08      	pop	{r3, pc}
 80a4082:	0000      	.short	0x0000
 80a4084:	080601a4 	.word	0x080601a4

080a4088 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a4088:	b508      	push	{r3, lr}
 80a408a:	4b02      	ldr	r3, [pc, #8]	; (80a4094 <spark_variable+0xc>)
 80a408c:	681b      	ldr	r3, [r3, #0]
 80a408e:	681b      	ldr	r3, [r3, #0]
 80a4090:	9301      	str	r3, [sp, #4]
 80a4092:	bd08      	pop	{r3, pc}
 80a4094:	080601cc 	.word	0x080601cc

080a4098 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a4098:	b508      	push	{r3, lr}
 80a409a:	4b02      	ldr	r3, [pc, #8]	; (80a40a4 <spark_process+0xc>)
 80a409c:	681b      	ldr	r3, [r3, #0]
 80a409e:	689b      	ldr	r3, [r3, #8]
 80a40a0:	9301      	str	r3, [sp, #4]
 80a40a2:	bd08      	pop	{r3, pc}
 80a40a4:	080601cc 	.word	0x080601cc

080a40a8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a40a8:	b508      	push	{r3, lr}
 80a40aa:	4b02      	ldr	r3, [pc, #8]	; (80a40b4 <spark_cloud_flag_connected+0xc>)
 80a40ac:	681b      	ldr	r3, [r3, #0]
 80a40ae:	695b      	ldr	r3, [r3, #20]
 80a40b0:	9301      	str	r3, [sp, #4]
 80a40b2:	bd08      	pop	{r3, pc}
 80a40b4:	080601cc 	.word	0x080601cc

080a40b8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a40b8:	b508      	push	{r3, lr}
 80a40ba:	4b02      	ldr	r3, [pc, #8]	; (80a40c4 <spark_send_event+0xc>)
 80a40bc:	681b      	ldr	r3, [r3, #0]
 80a40be:	6a1b      	ldr	r3, [r3, #32]
 80a40c0:	9301      	str	r3, [sp, #4]
 80a40c2:	bd08      	pop	{r3, pc}
 80a40c4:	080601cc 	.word	0x080601cc

080a40c8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a40c8:	b508      	push	{r3, lr}
 80a40ca:	4b02      	ldr	r3, [pc, #8]	; (80a40d4 <spark_subscribe+0xc>)
 80a40cc:	681b      	ldr	r3, [r3, #0]
 80a40ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a40d0:	9301      	str	r3, [sp, #4]
 80a40d2:	bd08      	pop	{r3, pc}
 80a40d4:	080601cc 	.word	0x080601cc

080a40d8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a40d8:	b508      	push	{r3, lr}
 80a40da:	4b02      	ldr	r3, [pc, #8]	; (80a40e4 <spark_sync_time_pending+0xc>)
 80a40dc:	681b      	ldr	r3, [r3, #0]
 80a40de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a40e0:	9301      	str	r3, [sp, #4]
 80a40e2:	bd08      	pop	{r3, pc}
 80a40e4:	080601cc 	.word	0x080601cc

080a40e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a40e8:	b508      	push	{r3, lr}
 80a40ea:	4b02      	ldr	r3, [pc, #8]	; (80a40f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a40ec:	681b      	ldr	r3, [r3, #0]
 80a40ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a40f0:	9301      	str	r3, [sp, #4]
 80a40f2:	bd08      	pop	{r3, pc}
 80a40f4:	080601cc 	.word	0x080601cc

080a40f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a40f8:	b508      	push	{r3, lr}
 80a40fa:	4b02      	ldr	r3, [pc, #8]	; (80a4104 <network_connect+0xc>)
 80a40fc:	681b      	ldr	r3, [r3, #0]
 80a40fe:	685b      	ldr	r3, [r3, #4]
 80a4100:	9301      	str	r3, [sp, #4]
 80a4102:	bd08      	pop	{r3, pc}
 80a4104:	080601c8 	.word	0x080601c8

080a4108 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a4108:	b508      	push	{r3, lr}
 80a410a:	4b02      	ldr	r3, [pc, #8]	; (80a4114 <network_connecting+0xc>)
 80a410c:	681b      	ldr	r3, [r3, #0]
 80a410e:	689b      	ldr	r3, [r3, #8]
 80a4110:	9301      	str	r3, [sp, #4]
 80a4112:	bd08      	pop	{r3, pc}
 80a4114:	080601c8 	.word	0x080601c8

080a4118 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a4118:	b508      	push	{r3, lr}
 80a411a:	4b02      	ldr	r3, [pc, #8]	; (80a4124 <network_disconnect+0xc>)
 80a411c:	681b      	ldr	r3, [r3, #0]
 80a411e:	68db      	ldr	r3, [r3, #12]
 80a4120:	9301      	str	r3, [sp, #4]
 80a4122:	bd08      	pop	{r3, pc}
 80a4124:	080601c8 	.word	0x080601c8

080a4128 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a4128:	b508      	push	{r3, lr}
 80a412a:	4b02      	ldr	r3, [pc, #8]	; (80a4134 <network_ready+0xc>)
 80a412c:	681b      	ldr	r3, [r3, #0]
 80a412e:	691b      	ldr	r3, [r3, #16]
 80a4130:	9301      	str	r3, [sp, #4]
 80a4132:	bd08      	pop	{r3, pc}
 80a4134:	080601c8 	.word	0x080601c8

080a4138 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a4138:	b508      	push	{r3, lr}
 80a413a:	4b02      	ldr	r3, [pc, #8]	; (80a4144 <network_on+0xc>)
 80a413c:	681b      	ldr	r3, [r3, #0]
 80a413e:	695b      	ldr	r3, [r3, #20]
 80a4140:	9301      	str	r3, [sp, #4]
 80a4142:	bd08      	pop	{r3, pc}
 80a4144:	080601c8 	.word	0x080601c8

080a4148 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a4148:	b508      	push	{r3, lr}
 80a414a:	4b02      	ldr	r3, [pc, #8]	; (80a4154 <network_off+0xc>)
 80a414c:	681b      	ldr	r3, [r3, #0]
 80a414e:	699b      	ldr	r3, [r3, #24]
 80a4150:	9301      	str	r3, [sp, #4]
 80a4152:	bd08      	pop	{r3, pc}
 80a4154:	080601c8 	.word	0x080601c8

080a4158 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a4158:	b508      	push	{r3, lr}
 80a415a:	4b02      	ldr	r3, [pc, #8]	; (80a4164 <network_listen+0xc>)
 80a415c:	681b      	ldr	r3, [r3, #0]
 80a415e:	69db      	ldr	r3, [r3, #28]
 80a4160:	9301      	str	r3, [sp, #4]
 80a4162:	bd08      	pop	{r3, pc}
 80a4164:	080601c8 	.word	0x080601c8

080a4168 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a4168:	b508      	push	{r3, lr}
 80a416a:	4b02      	ldr	r3, [pc, #8]	; (80a4174 <network_listening+0xc>)
 80a416c:	681b      	ldr	r3, [r3, #0]
 80a416e:	6a1b      	ldr	r3, [r3, #32]
 80a4170:	9301      	str	r3, [sp, #4]
 80a4172:	bd08      	pop	{r3, pc}
 80a4174:	080601c8 	.word	0x080601c8

080a4178 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a4178:	b508      	push	{r3, lr}
 80a417a:	4b02      	ldr	r3, [pc, #8]	; (80a4184 <network_set_listen_timeout+0xc>)
 80a417c:	681b      	ldr	r3, [r3, #0]
 80a417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4180:	9301      	str	r3, [sp, #4]
 80a4182:	bd08      	pop	{r3, pc}
 80a4184:	080601c8 	.word	0x080601c8

080a4188 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a4188:	b508      	push	{r3, lr}
 80a418a:	4b02      	ldr	r3, [pc, #8]	; (80a4194 <network_get_listen_timeout+0xc>)
 80a418c:	681b      	ldr	r3, [r3, #0]
 80a418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a4190:	9301      	str	r3, [sp, #4]
 80a4192:	bd08      	pop	{r3, pc}
 80a4194:	080601c8 	.word	0x080601c8

080a4198 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a4198:	b508      	push	{r3, lr}
 80a419a:	4b02      	ldr	r3, [pc, #8]	; (80a41a4 <network_is_on+0xc>)
 80a419c:	681b      	ldr	r3, [r3, #0]
 80a419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a41a0:	9301      	str	r3, [sp, #4]
 80a41a2:	bd08      	pop	{r3, pc}
 80a41a4:	080601c8 	.word	0x080601c8

080a41a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a41a8:	b508      	push	{r3, lr}
 80a41aa:	4b02      	ldr	r3, [pc, #8]	; (80a41b4 <network_is_off+0xc>)
 80a41ac:	681b      	ldr	r3, [r3, #0]
 80a41ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a41b0:	9301      	str	r3, [sp, #4]
 80a41b2:	bd08      	pop	{r3, pc}
 80a41b4:	080601c8 	.word	0x080601c8

080a41b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a41b8:	b508      	push	{r3, lr}
 80a41ba:	4b02      	ldr	r3, [pc, #8]	; (80a41c4 <malloc+0xc>)
 80a41bc:	681b      	ldr	r3, [r3, #0]
 80a41be:	681b      	ldr	r3, [r3, #0]
 80a41c0:	9301      	str	r3, [sp, #4]
 80a41c2:	bd08      	pop	{r3, pc}
 80a41c4:	080601a0 	.word	0x080601a0

080a41c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a41c8:	b508      	push	{r3, lr}
 80a41ca:	4b02      	ldr	r3, [pc, #8]	; (80a41d4 <free+0xc>)
 80a41cc:	681b      	ldr	r3, [r3, #0]
 80a41ce:	685b      	ldr	r3, [r3, #4]
 80a41d0:	9301      	str	r3, [sp, #4]
 80a41d2:	bd08      	pop	{r3, pc}
 80a41d4:	080601a0 	.word	0x080601a0

080a41d8 <siscanf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a41d8:	b508      	push	{r3, lr}
 80a41da:	4b02      	ldr	r3, [pc, #8]	; (80a41e4 <siscanf+0xc>)
 80a41dc:	681b      	ldr	r3, [r3, #0]
 80a41de:	699b      	ldr	r3, [r3, #24]
 80a41e0:	9301      	str	r3, [sp, #4]
 80a41e2:	bd08      	pop	{r3, pc}
 80a41e4:	080601a0 	.word	0x080601a0

080a41e8 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a41e8:	b508      	push	{r3, lr}
 80a41ea:	4b02      	ldr	r3, [pc, #8]	; (80a41f4 <abort+0xc>)
 80a41ec:	681b      	ldr	r3, [r3, #0]
 80a41ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a41f0:	9301      	str	r3, [sp, #4]
 80a41f2:	bd08      	pop	{r3, pc}
 80a41f4:	080601a0 	.word	0x080601a0

080a41f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a41f8:	b508      	push	{r3, lr}
 80a41fa:	4b02      	ldr	r3, [pc, #8]	; (80a4204 <_malloc_r+0xc>)
 80a41fc:	681b      	ldr	r3, [r3, #0]
 80a41fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4200:	9301      	str	r3, [sp, #4]
 80a4202:	bd08      	pop	{r3, pc}
 80a4204:	080601a0 	.word	0x080601a0

080a4208 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a4208:	b508      	push	{r3, lr}
 80a420a:	4b02      	ldr	r3, [pc, #8]	; (80a4214 <__assert_func+0xc>)
 80a420c:	681b      	ldr	r3, [r3, #0]
 80a420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4210:	9301      	str	r3, [sp, #4]
 80a4212:	bd08      	pop	{r3, pc}
 80a4214:	080601a0 	.word	0x080601a0

080a4218 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a4218:	b508      	push	{r3, lr}
 80a421a:	4b02      	ldr	r3, [pc, #8]	; (80a4224 <newlib_impure_ptr_callback+0xc>)
 80a421c:	681b      	ldr	r3, [r3, #0]
 80a421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a4220:	9301      	str	r3, [sp, #4]
 80a4222:	bd08      	pop	{r3, pc}
 80a4224:	080601a0 	.word	0x080601a0

080a4228 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4228:	2100      	movs	r1, #0
 80a422a:	f7ff bef1 	b.w	80a4010 <system_delay_ms>

080a422e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a422e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4230:	6883      	ldr	r3, [r0, #8]
 80a4232:	4604      	mov	r4, r0
 80a4234:	b90b      	cbnz	r3, 80a423a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a4236:	f001 f8c6 	bl	80a53c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a423a:	68c3      	ldr	r3, [r0, #12]
 80a423c:	4798      	blx	r3
      if (_M_manager)
 80a423e:	68a3      	ldr	r3, [r4, #8]
 80a4240:	b11b      	cbz	r3, 80a424a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4242:	2203      	movs	r2, #3
 80a4244:	4621      	mov	r1, r4
 80a4246:	4620      	mov	r0, r4
 80a4248:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a424a:	4620      	mov	r0, r4
}
 80a424c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a4250:	2110      	movs	r1, #16
 80a4252:	f001 b8b4 	b.w	80a53be <_ZdlPvj>

080a4256 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4256:	4770      	bx	lr

080a4258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a4258:	2000      	movs	r0, #0
 80a425a:	4770      	bx	lr

080a425c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a425c:	b510      	push	{r4, lr}
 80a425e:	4604      	mov	r4, r0
 80a4260:	2110      	movs	r1, #16
 80a4262:	f001 f8ac 	bl	80a53be <_ZdlPvj>
 80a4266:	4620      	mov	r0, r4
 80a4268:	bd10      	pop	{r4, pc}

080a426a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a426a:	b508      	push	{r3, lr}
      { delete this; }
 80a426c:	f7ff fff6 	bl	80a425c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a4270:	bd08      	pop	{r3, pc}

080a4272 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a4272:	b510      	push	{r4, lr}
      if (_M_manager)
 80a4274:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a4276:	4604      	mov	r4, r0
      if (_M_manager)
 80a4278:	b113      	cbz	r3, 80a4280 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a427a:	2203      	movs	r2, #3
 80a427c:	4601      	mov	r1, r0
 80a427e:	4798      	blx	r3
    }
 80a4280:	4620      	mov	r0, r4
 80a4282:	bd10      	pop	{r4, pc}

080a4284 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a4284:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a4286:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a4288:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a428c:	6002      	str	r2, [r0, #0]
 80a428e:	8084      	strh	r4, [r0, #4]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4290:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4292:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a4294:	680c      	ldr	r4, [r1, #0]
 80a4296:	8085      	strh	r5, [r0, #4]
 80a4298:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a429a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a429c:	bd30      	pop	{r4, r5, pc}

080a429e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a429e:	b510      	push	{r4, lr}
 80a42a0:	4604      	mov	r4, r0
    free((void*)msg_);
 80a42a2:	6800      	ldr	r0, [r0, #0]
 80a42a4:	f7ff ff90 	bl	80a41c8 <free>
}
 80a42a8:	4620      	mov	r0, r4
 80a42aa:	bd10      	pop	{r4, pc}

080a42ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a42ac:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a42ae:	68c4      	ldr	r4, [r0, #12]
 80a42b0:	b1f4      	cbz	r4, 80a42f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a42b2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a42b4:	2b02      	cmp	r3, #2
 80a42b6:	d103      	bne.n	80a42c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a42b8:	f104 000c 	add.w	r0, r4, #12
 80a42bc:	f7ff ffef 	bl	80a429e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a42c0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a42c2:	b135      	cbz	r5, 80a42d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a42c4:	4628      	mov	r0, r5
 80a42c6:	f7ff ffd4 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
 80a42ca:	2110      	movs	r1, #16
 80a42cc:	4628      	mov	r0, r5
 80a42ce:	f001 f876 	bl	80a53be <_ZdlPvj>
 80a42d2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a42d4:	b135      	cbz	r5, 80a42e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a42d6:	4628      	mov	r0, r5
 80a42d8:	f7ff ffcb 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
 80a42dc:	2110      	movs	r1, #16
 80a42de:	4628      	mov	r0, r5
 80a42e0:	f001 f86d 	bl	80a53be <_ZdlPvj>
 80a42e4:	4620      	mov	r0, r4
 80a42e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a42ea:	2114      	movs	r1, #20
 80a42ec:	f001 b867 	b.w	80a53be <_ZdlPvj>
 80a42f0:	bd38      	pop	{r3, r4, r5, pc}

080a42f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a42f2:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a42f4:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a42f6:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a42f8:	b17c      	cbz	r4, 80a431a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a42fa:	6863      	ldr	r3, [r4, #4]
 80a42fc:	3b01      	subs	r3, #1
 80a42fe:	6063      	str	r3, [r4, #4]
 80a4300:	b95b      	cbnz	r3, 80a431a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a4302:	6823      	ldr	r3, [r4, #0]
 80a4304:	4620      	mov	r0, r4
 80a4306:	689b      	ldr	r3, [r3, #8]
 80a4308:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a430a:	68a3      	ldr	r3, [r4, #8]
 80a430c:	3b01      	subs	r3, #1
 80a430e:	60a3      	str	r3, [r4, #8]
 80a4310:	b91b      	cbnz	r3, 80a431a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a4312:	6823      	ldr	r3, [r4, #0]
 80a4314:	4620      	mov	r0, r4
 80a4316:	68db      	ldr	r3, [r3, #12]
 80a4318:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a431a:	4628      	mov	r0, r5
 80a431c:	bd38      	pop	{r3, r4, r5, pc}

080a431e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a431e:	680b      	ldr	r3, [r1, #0]
 80a4320:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a4322:	684b      	ldr	r3, [r1, #4]
 80a4324:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a4326:	b113      	cbz	r3, 80a432e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a4328:	685a      	ldr	r2, [r3, #4]
 80a432a:	3201      	adds	r2, #1
 80a432c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a432e:	4770      	bx	lr

080a4330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a4330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4332:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a4334:	4668      	mov	r0, sp
 80a4336:	460d      	mov	r5, r1
 80a4338:	f7ff fff1 	bl	80a431e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a433c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a433e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4340:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a4342:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4344:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a4346:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a4348:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a434a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a434c:	f7ff ffd1 	bl	80a42f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a4350:	b135      	cbz	r5, 80a4360 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a4352:	1d28      	adds	r0, r5, #4
 80a4354:	f7ff ffcd 	bl	80a42f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4358:	2108      	movs	r1, #8
 80a435a:	4628      	mov	r0, r5
 80a435c:	f001 f82f 	bl	80a53be <_ZdlPvj>
        return p;
    }
 80a4360:	4620      	mov	r0, r4
 80a4362:	b003      	add	sp, #12
 80a4364:	bd30      	pop	{r4, r5, pc}

080a4366 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a4366:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4368:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a436a:	460b      	mov	r3, r1
 80a436c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a436e:	c803      	ldmia	r0, {r0, r1}
 80a4370:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a4374:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a4378:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a437c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a4380:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a4384:	b002      	add	sp, #8
 80a4386:	bd10      	pop	{r4, pc}

080a4388 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a4388:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a438a:	b510      	push	{r4, lr}
      if (_M_empty())
 80a438c:	b90a      	cbnz	r2, 80a4392 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a438e:	f001 f81a 	bl	80a53c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4392:	68c3      	ldr	r3, [r0, #12]
    }
 80a4394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4398:	4718      	bx	r3

080a439a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a439a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a439c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a439e:	f100 0110 	add.w	r1, r0, #16
 80a43a2:	f7ff fff1 	bl	80a4388 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a43a6:	bd08      	pop	{r3, pc}

080a43a8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a43a8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a43aa:	b510      	push	{r4, lr}
      if (_M_empty())
 80a43ac:	b90a      	cbnz	r2, 80a43b2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a43ae:	f001 f80a 	bl	80a53c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a43b2:	68c3      	ldr	r3, [r0, #12]
    }
 80a43b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a43b8:	4718      	bx	r3

080a43ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a43ba:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a43bc:	6800      	ldr	r0, [r0, #0]
 80a43be:	f100 0110 	add.w	r1, r0, #16
 80a43c2:	f7ff fff1 	bl	80a43a8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a43c6:	bd08      	pop	{r3, pc}

080a43c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a43c8:	b538      	push	{r3, r4, r5, lr}
 80a43ca:	2300      	movs	r3, #0
 80a43cc:	4604      	mov	r4, r0
 80a43ce:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a43d0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a43d2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a43d4:	f7fb fe61 	bl	80a009a <_Znwj>
 80a43d8:	b128      	cbz	r0, 80a43e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a43da:	2301      	movs	r3, #1
 80a43dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a43e0:	4b02      	ldr	r3, [pc, #8]	; (80a43ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a43e2:	60c5      	str	r5, [r0, #12]
 80a43e4:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a43e6:	6020      	str	r0, [r4, #0]
	}
 80a43e8:	4620      	mov	r0, r4
 80a43ea:	bd38      	pop	{r3, r4, r5, pc}
 80a43ec:	080a911c 	.word	0x080a911c

080a43f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a43f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a43f2:	2300      	movs	r3, #0
 80a43f4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a43f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a43f8:	4604      	mov	r4, r0
 80a43fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a43fc:	b12b      	cbz	r3, 80a440a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a43fe:	2202      	movs	r2, #2
 80a4400:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4402:	68eb      	ldr	r3, [r5, #12]
 80a4404:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4406:	68ab      	ldr	r3, [r5, #8]
 80a4408:	60a3      	str	r3, [r4, #8]
    }
 80a440a:	4620      	mov	r0, r4
 80a440c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a4410:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4412:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a4414:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a4416:	4668      	mov	r0, sp
 80a4418:	f7ff ff34 	bl	80a4284 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a441c:	f04f 0302 	mov.w	r3, #2
 80a4420:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a4424:	2a00      	cmp	r2, #0
 80a4426:	d103      	bne.n	80a4430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a4428:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a442c:	2900      	cmp	r1, #0
 80a442e:	d1f7      	bne.n	80a4420 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a4430:	d125      	bne.n	80a447e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a4432:	f104 050c 	add.w	r5, r4, #12
 80a4436:	4669      	mov	r1, sp
 80a4438:	4628      	mov	r0, r5
 80a443a:	f7ff ff23 	bl	80a4284 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a443e:	2301      	movs	r3, #1
 80a4440:	f3bf 8f5b 	dmb	ish
 80a4444:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4446:	2000      	movs	r0, #0
 80a4448:	f3bf 8f5b 	dmb	ish
 80a444c:	f104 0308 	add.w	r3, r4, #8
 80a4450:	e853 6f00 	ldrex	r6, [r3]
 80a4454:	e843 0200 	strex	r2, r0, [r3]
 80a4458:	2a00      	cmp	r2, #0
 80a445a:	d1f9      	bne.n	80a4450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a445c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4460:	b16e      	cbz	r6, 80a447e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a4462:	f7ff fde5 	bl	80a4030 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4466:	b178      	cbz	r0, 80a4488 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4468:	4629      	mov	r1, r5
 80a446a:	4630      	mov	r0, r6
 80a446c:	f7ff ff8c 	bl	80a4388 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a4470:	4630      	mov	r0, r6
 80a4472:	f7ff fefe 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4476:	2110      	movs	r1, #16
 80a4478:	4630      	mov	r0, r6
 80a447a:	f000 ffa0 	bl	80a53be <_ZdlPvj>
        p_->setError(std::move(error));
 80a447e:	4668      	mov	r0, sp
 80a4480:	f7ff ff0d 	bl	80a429e <_ZN8particle5ErrorD1Ev>
    }
 80a4484:	b009      	add	sp, #36	; 0x24
 80a4486:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4488:	4631      	mov	r1, r6
 80a448a:	a802      	add	r0, sp, #8
 80a448c:	f7ff ffb0 	bl	80a43f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4490:	68e0      	ldr	r0, [r4, #12]
 80a4492:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4496:	b108      	cbz	r0, 80a449c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a4498:	f002 fae4 	bl	80a6a64 <strdup>
        type_(type) {
 80a449c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a449e:	2010      	movs	r0, #16
 80a44a0:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a44a4:	f7fb fdf9 	bl	80a009a <_Znwj>
 80a44a8:	4605      	mov	r5, r0
 80a44aa:	b1e8      	cbz	r0, 80a44e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a44ac:	2700      	movs	r7, #0
 80a44ae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a44b0:	2018      	movs	r0, #24
 80a44b2:	f7fb fdf2 	bl	80a009a <_Znwj>
 80a44b6:	4604      	mov	r4, r0
 80a44b8:	b188      	cbz	r0, 80a44de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a44ba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a44bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a44be:	a802      	add	r0, sp, #8
 80a44c0:	f7ff ff51 	bl	80a4366 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a44c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a44c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a44c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a44ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a44cc:	9204      	str	r2, [sp, #16]
 80a44ce:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a44d0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a44d2:	60e3      	str	r3, [r4, #12]
 80a44d4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a44d8:	9205      	str	r2, [sp, #20]
 80a44da:	f7ff fed3 	bl	80a4284 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a44de:	4b08      	ldr	r3, [pc, #32]	; (80a4500 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a44e0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a44e2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a44e4:	4b07      	ldr	r3, [pc, #28]	; (80a4504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a44e6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a44e8:	a806      	add	r0, sp, #24
 80a44ea:	f7ff fed8 	bl	80a429e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a44ee:	a802      	add	r0, sp, #8
 80a44f0:	f7ff febf 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a44f4:	2200      	movs	r2, #0
 80a44f6:	4629      	mov	r1, r5
 80a44f8:	4803      	ldr	r0, [pc, #12]	; (80a4508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a44fa:	f7ff fda1 	bl	80a4040 <application_thread_invoke>
 80a44fe:	e7b7      	b.n	80a4470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a4500:	080a439b 	.word	0x080a439b
 80a4504:	080a4625 	.word	0x080a4625
 80a4508:	080a422f 	.word	0x080a422f

080a450c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4510:	b08a      	sub	sp, #40	; 0x28
 80a4512:	4605      	mov	r5, r0
 80a4514:	460c      	mov	r4, r1
 80a4516:	4617      	mov	r7, r2
 80a4518:	4698      	mov	r8, r3
 80a451a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a451e:	f7ff fdc3 	bl	80a40a8 <spark_cloud_flag_connected>
 80a4522:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a4524:	4682      	mov	sl, r0
 80a4526:	bb38      	cbnz	r0, 80a4578 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a4528:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a452c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a452e:	a905      	add	r1, sp, #20
 80a4530:	4630      	mov	r0, r6
 80a4532:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4536:	f7ff fea5 	bl	80a4284 <_ZN8particle5ErrorC1EOS0_>
 80a453a:	2014      	movs	r0, #20
 80a453c:	f7fb fdad 	bl	80a009a <_Znwj>
 80a4540:	4604      	mov	r4, r0
 80a4542:	b148      	cbz	r0, 80a4558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a4544:	2302      	movs	r3, #2
 80a4546:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4548:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a454a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a454e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a4550:	4631      	mov	r1, r6
 80a4552:	300c      	adds	r0, #12
 80a4554:	f7ff fe96 	bl	80a4284 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4558:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a455a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a455c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a4560:	f7ff ff32 	bl	80a43c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4564:	4630      	mov	r0, r6
 80a4566:	f7ff fe9a 	bl	80a429e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a456a:	a805      	add	r0, sp, #20
 80a456c:	f7ff fe97 	bl	80a429e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a4570:	4628      	mov	r0, r5
 80a4572:	b00a      	add	sp, #40	; 0x28
 80a4574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a4578:	230c      	movs	r3, #12
 80a457a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a457e:	2014      	movs	r0, #20
 80a4580:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a4584:	9307      	str	r3, [sp, #28]
 80a4586:	f7fb fd88 	bl	80a009a <_Znwj>
 80a458a:	4601      	mov	r1, r0
 80a458c:	b128      	cbz	r0, 80a459a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a458e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a4592:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4596:	f880 a001 	strb.w	sl, [r0, #1]
 80a459a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a459c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a459e:	f7ff ff13 	bl	80a43c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a45a2:	4b1f      	ldr	r3, [pc, #124]	; (80a4620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a45a4:	2008      	movs	r0, #8
 80a45a6:	9308      	str	r3, [sp, #32]
 80a45a8:	f7fb fd77 	bl	80a009a <_Znwj>
 80a45ac:	4682      	mov	sl, r0
 80a45ae:	b110      	cbz	r0, 80a45b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a45b0:	a903      	add	r1, sp, #12
 80a45b2:	f7ff feb4 	bl	80a431e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a45b6:	4642      	mov	r2, r8
 80a45b8:	4639      	mov	r1, r7
 80a45ba:	4620      	mov	r0, r4
 80a45bc:	9600      	str	r6, [sp, #0]
 80a45be:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a45c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a45c6:	f7ff fd77 	bl	80a40b8 <spark_send_event>
 80a45ca:	b9b8      	cbnz	r0, 80a45fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a45cc:	9b03      	ldr	r3, [sp, #12]
 80a45ce:	785b      	ldrb	r3, [r3, #1]
 80a45d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a45d4:	b993      	cbnz	r3, 80a45fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a45d6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a45da:	a905      	add	r1, sp, #20
 80a45dc:	a803      	add	r0, sp, #12
 80a45de:	9205      	str	r2, [sp, #20]
 80a45e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a45e4:	f7ff ff14 	bl	80a4410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a45e8:	a805      	add	r0, sp, #20
 80a45ea:	f7ff fe58 	bl	80a429e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a45ee:	a805      	add	r0, sp, #20
 80a45f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a45f2:	f7ff fe9d 	bl	80a4330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a45f6:	a806      	add	r0, sp, #24
 80a45f8:	f7ff fe7b 	bl	80a42f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a45fc:	a903      	add	r1, sp, #12
 80a45fe:	a805      	add	r0, sp, #20
 80a4600:	f7ff fe8d 	bl	80a431e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4604:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4606:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4608:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a460a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a460c:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a460e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a4610:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a4612:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a4614:	f7ff fe6d 	bl	80a42f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4618:	a804      	add	r0, sp, #16
 80a461a:	f7ff fe6a 	bl	80a42f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a461e:	e7a7      	b.n	80a4570 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a4620:	080a46a1 	.word	0x080a46a1

080a4624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a4624:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4628:	4605      	mov	r5, r0
	switch (__op)
 80a462a:	d103      	bne.n	80a4634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a462c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a462e:	6003      	str	r3, [r0, #0]
      }
 80a4630:	2000      	movs	r0, #0
 80a4632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a4634:	2a02      	cmp	r2, #2
 80a4636:	d010      	beq.n	80a465a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a4638:	2a03      	cmp	r2, #3
 80a463a:	d1f9      	bne.n	80a4630 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a463c:	6804      	ldr	r4, [r0, #0]
 80a463e:	2c00      	cmp	r4, #0
 80a4640:	d0f6      	beq.n	80a4630 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a4642:	f104 0010 	add.w	r0, r4, #16
 80a4646:	f7ff fe2a 	bl	80a429e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a464a:	4620      	mov	r0, r4
 80a464c:	f7ff fe11 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4650:	2118      	movs	r1, #24
 80a4652:	4620      	mov	r0, r4
 80a4654:	f000 feb3 	bl	80a53be <_ZdlPvj>
 80a4658:	e7ea      	b.n	80a4630 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a465a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a465c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a465e:	f7fb fd1c 	bl	80a009a <_Znwj>
 80a4662:	4604      	mov	r4, r0
 80a4664:	b150      	cbz	r0, 80a467c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4666:	4631      	mov	r1, r6
 80a4668:	f7ff fec2 	bl	80a43f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a466c:	6930      	ldr	r0, [r6, #16]
 80a466e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4672:	b108      	cbz	r0, 80a4678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a4674:	f002 f9f6 	bl	80a6a64 <strdup>
        type_(type) {
 80a4678:	6120      	str	r0, [r4, #16]
 80a467a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a467c:	602c      	str	r4, [r5, #0]
	}
 80a467e:	e7d7      	b.n	80a4630 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a4680 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a4680:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4682:	2300      	movs	r3, #0
 80a4684:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a4686:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4688:	4604      	mov	r4, r0
 80a468a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a468c:	b12b      	cbz	r3, 80a469a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a468e:	2202      	movs	r2, #2
 80a4690:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4692:	68eb      	ldr	r3, [r5, #12]
 80a4694:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4696:	68ab      	ldr	r3, [r5, #8]
 80a4698:	60a3      	str	r3, [r4, #8]
    }
 80a469a:	4620      	mov	r0, r4
 80a469c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a46a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a46a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a46a2:	4604      	mov	r4, r0
 80a46a4:	b089      	sub	sp, #36	; 0x24
 80a46a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a46a8:	a801      	add	r0, sp, #4
 80a46aa:	4611      	mov	r1, r2
 80a46ac:	f7ff fe40 	bl	80a4330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a46b0:	b1a4      	cbz	r4, 80a46dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a46b2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a46b4:	b11d      	cbz	r5, 80a46be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a46b6:	4628      	mov	r0, r5
 80a46b8:	f002 f9d4 	bl	80a6a64 <strdup>
 80a46bc:	4605      	mov	r5, r0
 80a46be:	a801      	add	r0, sp, #4
 80a46c0:	a903      	add	r1, sp, #12
        type_(type) {
 80a46c2:	9503      	str	r5, [sp, #12]
 80a46c4:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a46c8:	f7ff fea2 	bl	80a4410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a46cc:	a803      	add	r0, sp, #12
 80a46ce:	f7ff fde6 	bl	80a429e <_ZN8particle5ErrorD1Ev>
 80a46d2:	a802      	add	r0, sp, #8
 80a46d4:	f7ff fe0d 	bl	80a42f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a46d8:	b009      	add	sp, #36	; 0x24
 80a46da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a46dc:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a46de:	9d01      	ldr	r5, [sp, #4]
 80a46e0:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a46e4:	2a00      	cmp	r2, #0
 80a46e6:	d103      	bne.n	80a46f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a46e8:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a46ec:	2900      	cmp	r1, #0
 80a46ee:	d1f7      	bne.n	80a46e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a46f0:	d1ef      	bne.n	80a46d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a46f2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a46f4:	f3bf 8f5b 	dmb	ish
 80a46f8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a46fa:	f3bf 8f5b 	dmb	ish
 80a46fe:	1d2b      	adds	r3, r5, #4
 80a4700:	e853 6f00 	ldrex	r6, [r3]
 80a4704:	e843 4200 	strex	r2, r4, [r3]
 80a4708:	2a00      	cmp	r2, #0
 80a470a:	d1f9      	bne.n	80a4700 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a470c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4710:	2e00      	cmp	r6, #0
 80a4712:	d0de      	beq.n	80a46d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a4714:	4620      	mov	r0, r4
 80a4716:	f7ff fc8b 	bl	80a4030 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a471a:	4607      	mov	r7, r0
 80a471c:	b160      	cbz	r0, 80a4738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a471e:	4630      	mov	r0, r6
 80a4720:	f105 010c 	add.w	r1, r5, #12
 80a4724:	f7ff fe40 	bl	80a43a8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a4728:	4630      	mov	r0, r6
 80a472a:	f7ff fda2 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a472e:	2110      	movs	r1, #16
 80a4730:	4630      	mov	r0, r6
 80a4732:	f000 fe44 	bl	80a53be <_ZdlPvj>
 80a4736:	e7cc      	b.n	80a46d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4738:	4631      	mov	r1, r6
 80a473a:	a803      	add	r0, sp, #12
 80a473c:	f7ff ffa0 	bl	80a4680 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4740:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4742:	2010      	movs	r0, #16
 80a4744:	f88d 301c 	strb.w	r3, [sp, #28]
 80a4748:	f7fb fca7 	bl	80a009a <_Znwj>
 80a474c:	4605      	mov	r5, r0
 80a474e:	b1d0      	cbz	r0, 80a4786 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a4750:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4752:	2014      	movs	r0, #20
 80a4754:	f7fb fca1 	bl	80a009a <_Znwj>
 80a4758:	4604      	mov	r4, r0
 80a475a:	b178      	cbz	r0, 80a477c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a475c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a475e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4760:	a803      	add	r0, sp, #12
 80a4762:	f7ff fe00 	bl	80a4366 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4766:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4768:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a476a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a476c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a476e:	9205      	str	r2, [sp, #20]
 80a4770:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4772:	60e3      	str	r3, [r4, #12]
 80a4774:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a4778:	9206      	str	r2, [sp, #24]
 80a477a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a477c:	4b06      	ldr	r3, [pc, #24]	; (80a4798 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a477e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4780:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4782:	4b06      	ldr	r3, [pc, #24]	; (80a479c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a4784:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a4786:	a803      	add	r0, sp, #12
 80a4788:	f7ff fd73 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a478c:	2200      	movs	r2, #0
 80a478e:	4629      	mov	r1, r5
 80a4790:	4803      	ldr	r0, [pc, #12]	; (80a47a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a4792:	f7ff fc55 	bl	80a4040 <application_thread_invoke>
 80a4796:	e7c7      	b.n	80a4728 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a4798:	080a43bb 	.word	0x080a43bb
 80a479c:	080a47a5 	.word	0x080a47a5
 80a47a0:	080a422f 	.word	0x080a422f

080a47a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a47a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a47a6:	b570      	push	{r4, r5, r6, lr}
 80a47a8:	4604      	mov	r4, r0
	switch (__op)
 80a47aa:	d103      	bne.n	80a47b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a47ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a47ae:	6003      	str	r3, [r0, #0]
      }
 80a47b0:	2000      	movs	r0, #0
 80a47b2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a47b4:	2a02      	cmp	r2, #2
 80a47b6:	d00c      	beq.n	80a47d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a47b8:	2a03      	cmp	r2, #3
 80a47ba:	d1f9      	bne.n	80a47b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a47bc:	6804      	ldr	r4, [r0, #0]
 80a47be:	2c00      	cmp	r4, #0
 80a47c0:	d0f6      	beq.n	80a47b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a47c2:	4620      	mov	r0, r4
 80a47c4:	f7ff fd55 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a47c8:	2114      	movs	r1, #20
 80a47ca:	4620      	mov	r0, r4
 80a47cc:	f000 fdf7 	bl	80a53be <_ZdlPvj>
 80a47d0:	e7ee      	b.n	80a47b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a47d2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a47d4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a47d6:	f7fb fc60 	bl	80a009a <_Znwj>
 80a47da:	4605      	mov	r5, r0
 80a47dc:	b120      	cbz	r0, 80a47e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a47de:	4631      	mov	r1, r6
 80a47e0:	f7ff ff4e 	bl	80a4680 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a47e4:	7c33      	ldrb	r3, [r6, #16]
 80a47e6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a47e8:	6025      	str	r5, [r4, #0]
	}
 80a47ea:	e7e1      	b.n	80a47b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a47ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a47ec:	4770      	bx	lr

080a47ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a47ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a47f0:	4606      	mov	r6, r0
 80a47f2:	4615      	mov	r5, r2
 80a47f4:	460c      	mov	r4, r1
 80a47f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a47f8:	42bc      	cmp	r4, r7
 80a47fa:	d006      	beq.n	80a480a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a47fc:	6833      	ldr	r3, [r6, #0]
 80a47fe:	4630      	mov	r0, r6
 80a4800:	689b      	ldr	r3, [r3, #8]
 80a4802:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4806:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4808:	e7f6      	b.n	80a47f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a480a:	4628      	mov	r0, r5
 80a480c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a480e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a480e:	2200      	movs	r2, #0
 80a4810:	7c00      	ldrb	r0, [r0, #16]
 80a4812:	f7ff bb03 	b.w	80a3e1c <hal_i2c_write>

080a4816 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a4816:	2100      	movs	r1, #0
 80a4818:	7c00      	ldrb	r0, [r0, #16]
 80a481a:	f7ff bb07 	b.w	80a3e2c <hal_i2c_available>

080a481e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a481e:	2100      	movs	r1, #0
 80a4820:	7c00      	ldrb	r0, [r0, #16]
 80a4822:	f7ff bb0b 	b.w	80a3e3c <hal_i2c_read>

080a4826 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a4826:	2100      	movs	r1, #0
 80a4828:	7c00      	ldrb	r0, [r0, #16]
 80a482a:	f7ff bb0f 	b.w	80a3e4c <hal_i2c_peek>

080a482e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a482e:	2100      	movs	r1, #0
 80a4830:	7c00      	ldrb	r0, [r0, #16]
 80a4832:	f7ff bb13 	b.w	80a3e5c <hal_i2c_flush>

080a4836 <_ZN7TwoWireD0Ev>:
 80a4836:	b510      	push	{r4, lr}
 80a4838:	4604      	mov	r4, r0
 80a483a:	2114      	movs	r1, #20
 80a483c:	f000 fdbf 	bl	80a53be <_ZdlPvj>
 80a4840:	4620      	mov	r0, r4
 80a4842:	bd10      	pop	{r4, pc}

080a4844 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4844:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a4846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a484a:	4604      	mov	r4, r0
 80a484c:	4608      	mov	r0, r1
 80a484e:	2100      	movs	r1, #0
 80a4850:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4854:	4b03      	ldr	r3, [pc, #12]	; (80a4864 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a4856:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4858:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a485a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a485c:	f7ff fb0e 	bl	80a3e7c <hal_i2c_init>
}
 80a4860:	4620      	mov	r0, r4
 80a4862:	bd10      	pop	{r4, pc}
 80a4864:	080a9138 	.word	0x080a9138

080a4868 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4868:	4770      	bx	lr

080a486a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a486a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a486c:	460e      	mov	r6, r1
 80a486e:	2400      	movs	r4, #0
 80a4870:	f100 0708 	add.w	r7, r0, #8
 80a4874:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a4876:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a487a:	220a      	movs	r2, #10
 80a487c:	4630      	mov	r0, r6
 80a487e:	f000 f8f6 	bl	80a4a6e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4882:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4884:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4886:	d101      	bne.n	80a488c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4888:	4620      	mov	r0, r4
 80a488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a488c:	2c00      	cmp	r4, #0
 80a488e:	d0f2      	beq.n	80a4876 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4890:	212e      	movs	r1, #46	; 0x2e
 80a4892:	4630      	mov	r0, r6
 80a4894:	f000 f8e8 	bl	80a4a68 <_ZN5Print5printEc>
 80a4898:	4404      	add	r4, r0
 80a489a:	e7ec      	b.n	80a4876 <_ZNK9IPAddress7printToER5Print+0xc>

080a489c <_ZN9IPAddressD0Ev>:
 80a489c:	b510      	push	{r4, lr}
 80a489e:	4604      	mov	r4, r0
 80a48a0:	2118      	movs	r1, #24
 80a48a2:	f000 fd8c 	bl	80a53be <_ZdlPvj>
 80a48a6:	4620      	mov	r0, r4
 80a48a8:	bd10      	pop	{r4, pc}
	...

080a48ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a48ac:	b510      	push	{r4, lr}
 80a48ae:	4604      	mov	r4, r0
 80a48b0:	4b04      	ldr	r3, [pc, #16]	; (80a48c4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a48b2:	2211      	movs	r2, #17
 80a48b4:	2100      	movs	r1, #0
 80a48b6:	f840 3b04 	str.w	r3, [r0], #4
 80a48ba:	f002 f88b 	bl	80a69d4 <memset>
}
 80a48be:	4620      	mov	r0, r4
 80a48c0:	bd10      	pop	{r4, pc}
 80a48c2:	bf00      	nop
 80a48c4:	080a9160 	.word	0x080a9160

080a48c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a48c8:	4603      	mov	r3, r0
 80a48ca:	4a07      	ldr	r2, [pc, #28]	; (80a48e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a48cc:	b510      	push	{r4, lr}
 80a48ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a48d2:	f101 0210 	add.w	r2, r1, #16
 80a48d6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a48da:	4291      	cmp	r1, r2
 80a48dc:	f843 4b04 	str.w	r4, [r3], #4
 80a48e0:	d1f9      	bne.n	80a48d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a48e2:	780a      	ldrb	r2, [r1, #0]
 80a48e4:	701a      	strb	r2, [r3, #0]
}
 80a48e6:	bd10      	pop	{r4, pc}
 80a48e8:	080a9160 	.word	0x080a9160

080a48ec <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a48ec:	4a02      	ldr	r2, [pc, #8]	; (80a48f8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a48ee:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a48f2:	2204      	movs	r2, #4
 80a48f4:	7502      	strb	r2, [r0, #20]
}
 80a48f6:	4770      	bx	lr
 80a48f8:	080a9160 	.word	0x080a9160

080a48fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a48fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a48fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4902:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4906:	2304      	movs	r3, #4
 80a4908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a490c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4910:	6044      	str	r4, [r0, #4]
 80a4912:	7503      	strb	r3, [r0, #20]
}
 80a4914:	bd10      	pop	{r4, pc}
	...

080a4918 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4918:	b513      	push	{r0, r1, r4, lr}
 80a491a:	4c04      	ldr	r4, [pc, #16]	; (80a492c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a491c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a491e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a4922:	9400      	str	r4, [sp, #0]
 80a4924:	f7ff ffea 	bl	80a48fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4928:	b002      	add	sp, #8
 80a492a:	bd10      	pop	{r4, pc}
 80a492c:	080a9160 	.word	0x080a9160

080a4930 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4930:	4b01      	ldr	r3, [pc, #4]	; (80a4938 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4932:	4a02      	ldr	r2, [pc, #8]	; (80a493c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4934:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a4936:	4770      	bx	lr
 80a4938:	20000abc 	.word	0x20000abc
 80a493c:	080a916c 	.word	0x080a916c

080a4940 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4940:	2300      	movs	r3, #0
 80a4942:	6840      	ldr	r0, [r0, #4]
 80a4944:	461a      	mov	r2, r3
 80a4946:	f7ff bbd7 	b.w	80a40f8 <network_connect>

080a494a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a494a:	2200      	movs	r2, #0
 80a494c:	2102      	movs	r1, #2
 80a494e:	6840      	ldr	r0, [r0, #4]
 80a4950:	f7ff bbe2 	b.w	80a4118 <network_disconnect>

080a4954 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4954:	2200      	movs	r2, #0
 80a4956:	6840      	ldr	r0, [r0, #4]
 80a4958:	4611      	mov	r1, r2
 80a495a:	f7ff bbd5 	b.w	80a4108 <network_connecting>

080a495e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a495e:	2200      	movs	r2, #0
 80a4960:	6840      	ldr	r0, [r0, #4]
 80a4962:	4611      	mov	r1, r2
 80a4964:	f7ff bbe0 	b.w	80a4128 <network_ready>

080a4968 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4968:	2300      	movs	r3, #0
 80a496a:	6840      	ldr	r0, [r0, #4]
 80a496c:	461a      	mov	r2, r3
 80a496e:	4619      	mov	r1, r3
 80a4970:	f7ff bbe2 	b.w	80a4138 <network_on>

080a4974 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4974:	2300      	movs	r3, #0
 80a4976:	6840      	ldr	r0, [r0, #4]
 80a4978:	461a      	mov	r2, r3
 80a497a:	4619      	mov	r1, r3
 80a497c:	f7ff bbe4 	b.w	80a4148 <network_off>

080a4980 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a4980:	2100      	movs	r1, #0
 80a4982:	6840      	ldr	r0, [r0, #4]
 80a4984:	f7ff bc08 	b.w	80a4198 <network_is_on>

080a4988 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a4988:	2100      	movs	r1, #0
 80a498a:	6840      	ldr	r0, [r0, #4]
 80a498c:	f7ff bc0c 	b.w	80a41a8 <network_is_off>

080a4990 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4990:	2200      	movs	r2, #0
 80a4992:	6840      	ldr	r0, [r0, #4]
 80a4994:	f081 0101 	eor.w	r1, r1, #1
 80a4998:	f7ff bbde 	b.w	80a4158 <network_listen>

080a499c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a499c:	2200      	movs	r2, #0
 80a499e:	6840      	ldr	r0, [r0, #4]
 80a49a0:	f7ff bbea 	b.w	80a4178 <network_set_listen_timeout>

080a49a4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a49a4:	2200      	movs	r2, #0
 80a49a6:	6840      	ldr	r0, [r0, #4]
 80a49a8:	4611      	mov	r1, r2
 80a49aa:	f7ff bbed 	b.w	80a4188 <network_get_listen_timeout>

080a49ae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a49ae:	2200      	movs	r2, #0
 80a49b0:	6840      	ldr	r0, [r0, #4]
 80a49b2:	4611      	mov	r1, r2
 80a49b4:	f7ff bbd8 	b.w	80a4168 <network_listening>

080a49b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a49b8:	b570      	push	{r4, r5, r6, lr}
 80a49ba:	4615      	mov	r5, r2
 80a49bc:	b08e      	sub	sp, #56	; 0x38
 80a49be:	4604      	mov	r4, r0
    IPAddress addr;
 80a49c0:	a808      	add	r0, sp, #32
 80a49c2:	f7ff ff73 	bl	80a48ac <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a49c6:	2211      	movs	r2, #17
 80a49c8:	2100      	movs	r1, #0
 80a49ca:	a803      	add	r0, sp, #12
 80a49cc:	f002 f802 	bl	80a69d4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a49d0:	2600      	movs	r6, #0
 80a49d2:	4628      	mov	r0, r5
 80a49d4:	f002 f861 	bl	80a6a9a <strlen>
 80a49d8:	4b0a      	ldr	r3, [pc, #40]	; (80a4a04 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a49da:	9600      	str	r6, [sp, #0]
 80a49dc:	b281      	uxth	r1, r0
 80a49de:	685b      	ldr	r3, [r3, #4]
 80a49e0:	4628      	mov	r0, r5
 80a49e2:	aa03      	add	r2, sp, #12
 80a49e4:	f7ff fad4 	bl	80a3f90 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a49e8:	b130      	cbz	r0, 80a49f8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a49ea:	4631      	mov	r1, r6
 80a49ec:	4620      	mov	r0, r4
 80a49ee:	f7ff ff7d 	bl	80a48ec <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a49f2:	4620      	mov	r0, r4
 80a49f4:	b00e      	add	sp, #56	; 0x38
 80a49f6:	bd70      	pop	{r4, r5, r6, pc}
 80a49f8:	4620      	mov	r0, r4
 80a49fa:	a903      	add	r1, sp, #12
 80a49fc:	f7ff ff64 	bl	80a48c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a4a00:	e7f7      	b.n	80a49f2 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a4a02:	bf00      	nop
 80a4a04:	20000f7c 	.word	0x20000f7c

080a4a08 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4a08:	4b02      	ldr	r3, [pc, #8]	; (80a4a14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a4a0a:	4a03      	ldr	r2, [pc, #12]	; (80a4a18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a4a0c:	601a      	str	r2, [r3, #0]
 80a4a0e:	2200      	movs	r2, #0
 80a4a10:	605a      	str	r2, [r3, #4]

} // spark
 80a4a12:	4770      	bx	lr
 80a4a14:	20000ac0 	.word	0x20000ac0
 80a4a18:	080a9178 	.word	0x080a9178

080a4a1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a4a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4a1e:	4606      	mov	r6, r0
 80a4a20:	460d      	mov	r5, r1
  size_t n = 0;
 80a4a22:	2400      	movs	r4, #0
 80a4a24:	188f      	adds	r7, r1, r2
  while (size--) {
 80a4a26:	42bd      	cmp	r5, r7
 80a4a28:	d00c      	beq.n	80a4a44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a4a2a:	6833      	ldr	r3, [r6, #0]
 80a4a2c:	4630      	mov	r0, r6
 80a4a2e:	689b      	ldr	r3, [r3, #8]
 80a4a30:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4a34:	4798      	blx	r3
     if (chunk>=0)
 80a4a36:	1e03      	subs	r3, r0, #0
 80a4a38:	db01      	blt.n	80a4a3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a4a3a:	441c      	add	r4, r3
  while (size--) {
 80a4a3c:	e7f3      	b.n	80a4a26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a4a3e:	2c00      	cmp	r4, #0
 80a4a40:	bf08      	it	eq
 80a4a42:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a4a44:	4620      	mov	r0, r4
 80a4a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4a48 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a4a48:	b570      	push	{r4, r5, r6, lr}
 80a4a4a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a4a4c:	460c      	mov	r4, r1
    }
 80a4a4e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a4a50:	b149      	cbz	r1, 80a4a66 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a4a52:	f002 f822 	bl	80a6a9a <strlen>
 80a4a56:	682b      	ldr	r3, [r5, #0]
 80a4a58:	4602      	mov	r2, r0
 80a4a5a:	4621      	mov	r1, r4
 80a4a5c:	4628      	mov	r0, r5
    }
 80a4a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a4a62:	68db      	ldr	r3, [r3, #12]
 80a4a64:	4718      	bx	r3
    }
 80a4a66:	bd70      	pop	{r4, r5, r6, pc}

080a4a68 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a4a68:	6803      	ldr	r3, [r0, #0]
 80a4a6a:	689b      	ldr	r3, [r3, #8]
 80a4a6c:	4718      	bx	r3

080a4a6e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a4a6e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a4a70:	2a01      	cmp	r2, #1
 80a4a72:	bf98      	it	ls
 80a4a74:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a4a76:	b530      	push	{r4, r5, lr}
 80a4a78:	b08b      	sub	sp, #44	; 0x2c
 80a4a7a:	460c      	mov	r4, r1
  *str = '\0';
 80a4a7c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a4a80:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a4a82:	4625      	mov	r5, r4
 80a4a84:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a4a88:	fb04 5312 	mls	r3, r4, r2, r5
 80a4a8c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a4a8e:	2b09      	cmp	r3, #9
 80a4a90:	bf94      	ite	ls
 80a4a92:	3330      	addls	r3, #48	; 0x30
 80a4a94:	3337      	addhi	r3, #55	; 0x37
 80a4a96:	b2db      	uxtb	r3, r3
  } while(n);
 80a4a98:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a4a9a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a4a9e:	d9f0      	bls.n	80a4a82 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a4aa0:	f7ff ffd2 	bl	80a4a48 <_ZN5Print5writeEPKc>
}
 80a4aa4:	b00b      	add	sp, #44	; 0x2c
 80a4aa6:	bd30      	pop	{r4, r5, pc}

080a4aa8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a4aa8:	b510      	push	{r4, lr}
 80a4aaa:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 80a4aac:	f7ff fbe1 	bl	80a4272 <_ZNSt14_Function_baseD1Ev>
 80a4ab0:	4620      	mov	r0, r4
 80a4ab2:	bd10      	pop	{r4, pc}

080a4ab4 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a4ab4:	b510      	push	{r4, lr}
 80a4ab6:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a4ab8:	f7ff fa8a 	bl	80a3fd0 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a4abc:	4284      	cmp	r4, r0
 80a4abe:	d008      	beq.n	80a4ad2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a4ac0:	b11c      	cbz	r4, 80a4aca <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a4ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a4ac6:	f7ff ba73 	b.w	80a3fb0 <LED_Signaling_Start>
}
 80a4aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a4ace:	f7ff ba77 	b.w	80a3fc0 <LED_Signaling_Stop>
}
 80a4ad2:	bd10      	pop	{r4, pc}

080a4ad4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a4ad4:	b570      	push	{r4, r5, r6, lr}
 80a4ad6:	4605      	mov	r5, r0
 80a4ad8:	460e      	mov	r6, r1
 80a4ada:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a4adc:	f7ff fa78 	bl	80a3fd0 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a4ae0:	b150      	cbz	r0, 80a4af8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a4ae2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a4ae6:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a4aea:	f7ff fa59 	bl	80a3fa0 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
 80a4aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
 80a4af2:	20e7      	movs	r0, #231	; 0xe7
 80a4af4:	f7ff ba74 	b.w	80a3fe0 <LED_On>
}
 80a4af8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4afc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a4afc:	2300      	movs	r3, #0
 80a4afe:	4803      	ldr	r0, [pc, #12]	; (80a4b0c <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
 80a4b00:	4a03      	ldr	r2, [pc, #12]	; (80a4b10 <_GLOBAL__sub_I_RGB+0x14>)
 80a4b02:	4904      	ldr	r1, [pc, #16]	; (80a4b14 <_GLOBAL__sub_I_RGB+0x18>)
 80a4b04:	6083      	str	r3, [r0, #8]
 80a4b06:	f000 bc55 	b.w	80a53b4 <__aeabi_atexit>
 80a4b0a:	bf00      	nop
 80a4b0c:	20000ac8 	.word	0x20000ac8
 80a4b10:	20000240 	.word	0x20000240
 80a4b14:	080a4aa9 	.word	0x080a4aa9

080a4b18 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a4b18:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a4b1a:	2600      	movs	r6, #0
 80a4b1c:	4604      	mov	r4, r0
 80a4b1e:	460d      	mov	r5, r1
 80a4b20:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a4b24:	f7ff f8ea 	bl	80a3cfc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a4b28:	4628      	mov	r0, r5
    _spi = spi;
 80a4b2a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a4b2c:	f7ff f9b0 	bl	80a3e90 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a4b30:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a4b32:	6066      	str	r6, [r4, #4]
}
 80a4b34:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4b38 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a4b38:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a4b3a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a4b3c:	b510      	push	{r4, lr}
 80a4b3e:	4b08      	ldr	r3, [pc, #32]	; (80a4b60 <_GLOBAL__sub_I_System+0x28>)
 80a4b40:	4c08      	ldr	r4, [pc, #32]	; (80a4b64 <_GLOBAL__sub_I_System+0x2c>)
 80a4b42:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a4b44:	4b08      	ldr	r3, [pc, #32]	; (80a4b68 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a4b46:	e9c4 0000 	strd	r0, r0, [r4]
    SleepResult() {}
 80a4b4a:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a4b4c:	f7ff fa58 	bl	80a4000 <set_system_mode>
SystemClass System;
 80a4b50:	4620      	mov	r0, r4
 80a4b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a4b56:	4a05      	ldr	r2, [pc, #20]	; (80a4b6c <_GLOBAL__sub_I_System+0x34>)
 80a4b58:	4905      	ldr	r1, [pc, #20]	; (80a4b70 <_GLOBAL__sub_I_System+0x38>)
 80a4b5a:	f000 bc2b 	b.w	80a53b4 <__aeabi_atexit>
 80a4b5e:	bf00      	nop
 80a4b60:	20000ae4 	.word	0x20000ae4
 80a4b64:	20000ad8 	.word	0x20000ad8
 80a4b68:	ffff0000 	.word	0xffff0000
 80a4b6c:	20000240 	.word	0x20000240
 80a4b70:	080a0235 	.word	0x080a0235

080a4b74 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a4b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a4b78:	4b15      	ldr	r3, [pc, #84]	; (80a4bd0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a4b7a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a4bd4 <_ZL22Refresh_UnixTime_Cachex+0x60>
    unix_time += time_zone_cache;
 80a4b7e:	e9d3 6700 	ldrd	r6, r7, [r3]
    unix_time += dst_current_cache;
 80a4b82:	4b15      	ldr	r3, [pc, #84]	; (80a4bd8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
    unix_time += time_zone_cache;
 80a4b84:	1980      	adds	r0, r0, r6
 80a4b86:	eb47 0701 	adc.w	r7, r7, r1
    unix_time += dst_current_cache;
 80a4b8a:	e9d3 6100 	ldrd	r6, r1, [r3]
 80a4b8e:	1986      	adds	r6, r0, r6
 80a4b90:	eb47 0701 	adc.w	r7, r7, r1
    if(unix_time != unix_time_cache)
 80a4b94:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a4b98:	42bb      	cmp	r3, r7
 80a4b9a:	bf08      	it	eq
 80a4b9c:	42b2      	cmpeq	r2, r6
{
 80a4b9e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
 80a4ba0:	d013      	beq.n	80a4bca <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a4ba2:	a903      	add	r1, sp, #12
 80a4ba4:	4668      	mov	r0, sp
 80a4ba6:	e9cd 6700 	strd	r6, r7, [sp]
 80a4baa:	f001 fe13 	bl	80a67d4 <localtime_r>
	calendar_time.tm_year += 1900;
 80a4bae:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4bb0:	4d0a      	ldr	r5, [pc, #40]	; (80a4bdc <_ZL22Refresh_UnixTime_Cachex+0x68>)
	calendar_time.tm_year += 1900;
 80a4bb2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4bb6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a4bb8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a4bc2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4bc6:	6823      	ldr	r3, [r4, #0]
 80a4bc8:	602b      	str	r3, [r5, #0]
    }
}
 80a4bca:	b00c      	add	sp, #48	; 0x30
 80a4bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4bd0:	20000b18 	.word	0x20000b18
 80a4bd4:	20000b20 	.word	0x20000b20
 80a4bd8:	20000b10 	.word	0x20000b10
 80a4bdc:	20000aec 	.word	0x20000aec

080a4be0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a4be0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4be2:	2000      	movs	r0, #0
 80a4be4:	f7ff fa78 	bl	80a40d8 <spark_sync_time_pending>
 80a4be8:	b128      	cbz	r0, 80a4bf6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4bea:	f7ff fa5d 	bl	80a40a8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4bee:	f080 0001 	eor.w	r0, r0, #1
 80a4bf2:	b2c0      	uxtb	r0, r0
    }
 80a4bf4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4bf6:	2001      	movs	r0, #1
 80a4bf8:	e7fc      	b.n	80a4bf4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a4bfc <_ZN9TimeClass12hourFormat12Ex>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
 80a4bfc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a4bfe:	f7ff ffb9 	bl	80a4b74 <_ZL22Refresh_UnixTime_Cachex>
	if(calendar_time_cache.tm_hour == 0)
 80a4c02:	4b04      	ldr	r3, [pc, #16]	; (80a4c14 <_ZN9TimeClass12hourFormat12Ex+0x18>)
 80a4c04:	6898      	ldr	r0, [r3, #8]
 80a4c06:	b118      	cbz	r0, 80a4c10 <_ZN9TimeClass12hourFormat12Ex+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
 80a4c08:	280c      	cmp	r0, #12
 80a4c0a:	dd00      	ble.n	80a4c0e <_ZN9TimeClass12hourFormat12Ex+0x12>
		return calendar_time_cache.tm_hour - 12 ;
 80a4c0c:	380c      	subs	r0, #12
	else
		return calendar_time_cache.tm_hour ;
}
 80a4c0e:	bd08      	pop	{r3, pc}
		return 12;	//midnight
 80a4c10:	200c      	movs	r0, #12
 80a4c12:	e7fc      	b.n	80a4c0e <_ZN9TimeClass12hourFormat12Ex+0x12>
 80a4c14:	20000aec 	.word	0x20000aec

080a4c18 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4c18:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4c1a:	490a      	ldr	r1, [pc, #40]	; (80a4c44 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a4c1c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4c1e:	f001 fbbb 	bl	80a6398 <__aeabi_fcmplt>
 80a4c22:	b968      	cbnz	r0, 80a4c40 <_ZN9TimeClass4zoneEf+0x28>
 80a4c24:	4620      	mov	r0, r4
 80a4c26:	4908      	ldr	r1, [pc, #32]	; (80a4c48 <_ZN9TimeClass4zoneEf+0x30>)
 80a4c28:	f001 fbd4 	bl	80a63d4 <__aeabi_fcmpgt>
 80a4c2c:	b940      	cbnz	r0, 80a4c40 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a4c2e:	4907      	ldr	r1, [pc, #28]	; (80a4c4c <_ZN9TimeClass4zoneEf+0x34>)
 80a4c30:	4620      	mov	r0, r4
 80a4c32:	f001 fa13 	bl	80a605c <__aeabi_fmul>
 80a4c36:	f001 fbfd 	bl	80a6434 <__aeabi_f2lz>
 80a4c3a:	4b05      	ldr	r3, [pc, #20]	; (80a4c50 <_ZN9TimeClass4zoneEf+0x38>)
 80a4c3c:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a4c40:	bd10      	pop	{r4, pc}
 80a4c42:	bf00      	nop
 80a4c44:	c1400000 	.word	0xc1400000
 80a4c48:	41600000 	.word	0x41600000
 80a4c4c:	45610000 	.word	0x45610000
 80a4c50:	20000b18 	.word	0x20000b18

080a4c54 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a4c54:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a4c56:	2000      	movs	r0, #0
 80a4c58:	f7ff f890 	bl	80a3d7c <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4c5c:	4604      	mov	r4, r0
 80a4c5e:	b9a0      	cbnz	r0, 80a4c8a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4c60:	f7ff f9c6 	bl	80a3ff0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4c64:	2801      	cmp	r0, #1
 80a4c66:	d110      	bne.n	80a4c8a <_ZN9TimeClass7isValidEv+0x36>
 80a4c68:	4620      	mov	r0, r4
 80a4c6a:	f7ff f9f1 	bl	80a4050 <system_thread_get_state>
 80a4c6e:	b960      	cbnz	r0, 80a4c8a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a4c70:	f7ff ffb6 	bl	80a4be0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4c74:	b910      	cbnz	r0, 80a4c7c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a4c76:	f7ff fa0f 	bl	80a4098 <spark_process>
        while (_while() && !_condition()) {
 80a4c7a:	e7f9      	b.n	80a4c70 <_ZN9TimeClass7isValidEv+0x1c>
 80a4c7c:	f7ff ffb0 	bl	80a4be0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a4c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a4c84:	2000      	movs	r0, #0
 80a4c86:	f7ff b879 	b.w	80a3d7c <hal_rtc_time_is_valid>
}
 80a4c8a:	4620      	mov	r0, r4
 80a4c8c:	bd10      	pop	{r4, pc}

080a4c8e <_ZN9TimeClass3nowEv>:
{
 80a4c8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4c90:	f7ff ffe0 	bl	80a4c54 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4c94:	2210      	movs	r2, #16
 80a4c96:	2100      	movs	r1, #0
 80a4c98:	4668      	mov	r0, sp
 80a4c9a:	f001 fe9b 	bl	80a69d4 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a4c9e:	2100      	movs	r1, #0
 80a4ca0:	4668      	mov	r0, sp
 80a4ca2:	f7ff f87b 	bl	80a3d9c <hal_rtc_get_time>
}
 80a4ca6:	9800      	ldr	r0, [sp, #0]
 80a4ca8:	b005      	add	sp, #20
 80a4caa:	f85d fb04 	ldr.w	pc, [sp], #4

080a4cae <_ZN9TimeClass12hourFormat12Ev>:
{
 80a4cae:	b508      	push	{r3, lr}
	return hourFormat12(now());
 80a4cb0:	f7ff ffed 	bl	80a4c8e <_ZN9TimeClass3nowEv>
}
 80a4cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return hourFormat12(now());
 80a4cb8:	17c1      	asrs	r1, r0, #31
 80a4cba:	f7ff bf9f 	b.w	80a4bfc <_ZN9TimeClass12hourFormat12Ex>
	...

080a4cc0 <_ZN9TimeClass6minuteEv>:
{
 80a4cc0:	b508      	push	{r3, lr}
	return minute(now());
 80a4cc2:	f7ff ffe4 	bl	80a4c8e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a4cc6:	17c1      	asrs	r1, r0, #31
 80a4cc8:	f7ff ff54 	bl	80a4b74 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4ccc:	4b01      	ldr	r3, [pc, #4]	; (80a4cd4 <_ZN9TimeClass6minuteEv+0x14>)
 80a4cce:	6858      	ldr	r0, [r3, #4]
 80a4cd0:	bd08      	pop	{r3, pc}
 80a4cd2:	bf00      	nop
 80a4cd4:	20000aec 	.word	0x20000aec

080a4cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4cd8:	4b02      	ldr	r3, [pc, #8]	; (80a4ce4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a4cda:	681a      	ldr	r2, [r3, #0]
 80a4cdc:	4b02      	ldr	r3, [pc, #8]	; (80a4ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4cde:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4ce0:	4770      	bx	lr
 80a4ce2:	bf00      	nop
 80a4ce4:	20000000 	.word	0x20000000
 80a4ce8:	20000ae8 	.word	0x20000ae8

080a4cec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4cec:	4770      	bx	lr

080a4cee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4cee:	7441      	strb	r1, [r0, #17]
}
 80a4cf0:	4770      	bx	lr

080a4cf2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4cf2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4cf4:	7c00      	ldrb	r0, [r0, #16]
 80a4cf6:	f7ff f913 	bl	80a3f20 <hal_usart_available_data_for_write>
}
 80a4cfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4cfe:	bd08      	pop	{r3, pc}

080a4d00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4d00:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4d02:	7c00      	ldrb	r0, [r0, #16]
 80a4d04:	f7ff f8e4 	bl	80a3ed0 <hal_usart_available>
}
 80a4d08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d0c:	bd08      	pop	{r3, pc}

080a4d0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4d0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4d10:	7c00      	ldrb	r0, [r0, #16]
 80a4d12:	f7ff f8ed 	bl	80a3ef0 <hal_usart_peek>
}
 80a4d16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d1a:	bd08      	pop	{r3, pc}

080a4d1c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4d1c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4d1e:	7c00      	ldrb	r0, [r0, #16]
 80a4d20:	f7ff f8de 	bl	80a3ee0 <hal_usart_read>
}
 80a4d24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d28:	bd08      	pop	{r3, pc}

080a4d2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4d2a:	7c00      	ldrb	r0, [r0, #16]
 80a4d2c:	f7ff b8e8 	b.w	80a3f00 <hal_usart_flush>

080a4d30 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4d30:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4d32:	7c46      	ldrb	r6, [r0, #17]
{
 80a4d34:	4604      	mov	r4, r0
 80a4d36:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4d38:	b12e      	cbz	r6, 80a4d46 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4d3a:	4629      	mov	r1, r5
 80a4d3c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4d42:	f7ff b8bd 	b.w	80a3ec0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4d46:	7c00      	ldrb	r0, [r0, #16]
 80a4d48:	f7ff f8ea 	bl	80a3f20 <hal_usart_available_data_for_write>
 80a4d4c:	2800      	cmp	r0, #0
 80a4d4e:	dcf4      	bgt.n	80a4d3a <_ZN11USARTSerial5writeEh+0xa>
}
 80a4d50:	4630      	mov	r0, r6
 80a4d52:	bd70      	pop	{r4, r5, r6, pc}

080a4d54 <_ZN11USARTSerialD0Ev>:
 80a4d54:	b510      	push	{r4, lr}
 80a4d56:	4604      	mov	r4, r0
 80a4d58:	2114      	movs	r1, #20
 80a4d5a:	f000 fb30 	bl	80a53be <_ZdlPvj>
 80a4d5e:	4620      	mov	r0, r4
 80a4d60:	bd10      	pop	{r4, pc}
	...

080a4d64 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4d64:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4d68:	b510      	push	{r4, lr}
 80a4d6a:	4604      	mov	r4, r0
 80a4d6c:	4608      	mov	r0, r1
 80a4d6e:	4611      	mov	r1, r2
 80a4d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4d74:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4d78:	4a04      	ldr	r2, [pc, #16]	; (80a4d8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4d7a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4d7c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4d7e:	2201      	movs	r2, #1
 80a4d80:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4d82:	461a      	mov	r2, r3
 80a4d84:	f7ff f894 	bl	80a3eb0 <hal_usart_init>
}
 80a4d88:	4620      	mov	r0, r4
 80a4d8a:	bd10      	pop	{r4, pc}
 80a4d8c:	080a91d0 	.word	0x080a91d0

080a4d90 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4d90:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a4d92:	4d0d      	ldr	r5, [pc, #52]	; (80a4dc8 <_Z22__fetch_global_Serial1v+0x38>)
 80a4d94:	7829      	ldrb	r1, [r5, #0]
 80a4d96:	f3bf 8f5b 	dmb	ish
 80a4d9a:	f011 0401 	ands.w	r4, r1, #1
 80a4d9e:	d111      	bne.n	80a4dc4 <_Z22__fetch_global_Serial1v+0x34>
 80a4da0:	4628      	mov	r0, r5
 80a4da2:	f7fb f980 	bl	80a00a6 <__cxa_guard_acquire>
 80a4da6:	b168      	cbz	r0, 80a4dc4 <_Z22__fetch_global_Serial1v+0x34>
 80a4da8:	4621      	mov	r1, r4
 80a4daa:	4a08      	ldr	r2, [pc, #32]	; (80a4dcc <_Z22__fetch_global_Serial1v+0x3c>)
 80a4dac:	4b08      	ldr	r3, [pc, #32]	; (80a4dd0 <_Z22__fetch_global_Serial1v+0x40>)
 80a4dae:	4809      	ldr	r0, [pc, #36]	; (80a4dd4 <_Z22__fetch_global_Serial1v+0x44>)
 80a4db0:	f7ff ffd8 	bl	80a4d64 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a4db4:	4628      	mov	r0, r5
 80a4db6:	f7fb f97b 	bl	80a00b0 <__cxa_guard_release>
 80a4dba:	4a07      	ldr	r2, [pc, #28]	; (80a4dd8 <_Z22__fetch_global_Serial1v+0x48>)
 80a4dbc:	4907      	ldr	r1, [pc, #28]	; (80a4ddc <_Z22__fetch_global_Serial1v+0x4c>)
 80a4dbe:	4805      	ldr	r0, [pc, #20]	; (80a4dd4 <_Z22__fetch_global_Serial1v+0x44>)
 80a4dc0:	f000 faf8 	bl	80a53b4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a4dc4:	4803      	ldr	r0, [pc, #12]	; (80a4dd4 <_Z22__fetch_global_Serial1v+0x44>)
 80a4dc6:	bd38      	pop	{r3, r4, r5, pc}
 80a4dc8:	20000b28 	.word	0x20000b28
 80a4dcc:	20000b2c 	.word	0x20000b2c
 80a4dd0:	20000bb0 	.word	0x20000bb0
 80a4dd4:	20000c34 	.word	0x20000c34
 80a4dd8:	20000240 	.word	0x20000240
 80a4ddc:	080a4ced 	.word	0x080a4ced

080a4de0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4de0:	7441      	strb	r1, [r0, #17]
}
 80a4de2:	4770      	bx	lr

080a4de4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4de4:	4770      	bx	lr

080a4de6 <_ZN9USBSerial4readEv>:
{
 80a4de6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4de8:	2100      	movs	r1, #0
 80a4dea:	7c00      	ldrb	r0, [r0, #16]
 80a4dec:	f7ff f8b8 	bl	80a3f60 <HAL_USB_USART_Receive_Data>
}
 80a4df0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4df4:	bd08      	pop	{r3, pc}

080a4df6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a4df6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4df8:	2101      	movs	r1, #1
 80a4dfa:	7c00      	ldrb	r0, [r0, #16]
 80a4dfc:	f7ff f8b0 	bl	80a3f60 <HAL_USB_USART_Receive_Data>
}
 80a4e00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4e04:	bd08      	pop	{r3, pc}

080a4e06 <_ZN9USBSerial17availableForWriteEv>:
{
 80a4e06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4e08:	7c00      	ldrb	r0, [r0, #16]
 80a4e0a:	f7ff f8a1 	bl	80a3f50 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4e0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e12:	bd08      	pop	{r3, pc}

080a4e14 <_ZN9USBSerial9availableEv>:
{
 80a4e14:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4e16:	7c00      	ldrb	r0, [r0, #16]
 80a4e18:	f7ff f892 	bl	80a3f40 <HAL_USB_USART_Available_Data>
}
 80a4e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e20:	bd08      	pop	{r3, pc}

080a4e22 <_ZN9USBSerial5writeEh>:
{
 80a4e22:	b538      	push	{r3, r4, r5, lr}
 80a4e24:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4e26:	7c00      	ldrb	r0, [r0, #16]
{
 80a4e28:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4e2a:	f7ff f891 	bl	80a3f50 <HAL_USB_USART_Available_Data_For_Write>
 80a4e2e:	2800      	cmp	r0, #0
 80a4e30:	dc01      	bgt.n	80a4e36 <_ZN9USBSerial5writeEh+0x14>
 80a4e32:	7c60      	ldrb	r0, [r4, #17]
 80a4e34:	b128      	cbz	r0, 80a4e42 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4e36:	4629      	mov	r1, r5
 80a4e38:	7c20      	ldrb	r0, [r4, #16]
 80a4e3a:	f7ff f899 	bl	80a3f70 <HAL_USB_USART_Send_Data>
 80a4e3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4e42:	bd38      	pop	{r3, r4, r5, pc}

080a4e44 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4e44:	7c00      	ldrb	r0, [r0, #16]
 80a4e46:	f7ff b89b 	b.w	80a3f80 <HAL_USB_USART_Flush_Data>

080a4e4a <_ZN9USBSerialD0Ev>:
 80a4e4a:	b510      	push	{r4, lr}
 80a4e4c:	4604      	mov	r4, r0
 80a4e4e:	2114      	movs	r1, #20
 80a4e50:	f000 fab5 	bl	80a53be <_ZdlPvj>
 80a4e54:	4620      	mov	r0, r4
 80a4e56:	bd10      	pop	{r4, pc}

080a4e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4e58:	b510      	push	{r4, lr}
 80a4e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4e5e:	4604      	mov	r4, r0
 80a4e60:	4608      	mov	r0, r1
 80a4e62:	2100      	movs	r1, #0
 80a4e64:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4e68:	4b04      	ldr	r3, [pc, #16]	; (80a4e7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4e6a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4e6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4e6e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4e70:	4611      	mov	r1, r2
  _blocking = true;
 80a4e72:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4e74:	f7ff f85c 	bl	80a3f30 <HAL_USB_USART_Init>
}
 80a4e78:	4620      	mov	r0, r4
 80a4e7a:	bd10      	pop	{r4, pc}
 80a4e7c:	080a9200 	.word	0x080a9200

080a4e80 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4e80:	b510      	push	{r4, lr}
 80a4e82:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4e84:	2214      	movs	r2, #20
 80a4e86:	2100      	movs	r1, #0
 80a4e88:	f001 fda4 	bl	80a69d4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a4e8c:	4b05      	ldr	r3, [pc, #20]	; (80a4ea4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4e8e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a4e90:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a4e92:	4b05      	ldr	r3, [pc, #20]	; (80a4ea8 <_Z19acquireSerialBufferv+0x28>)
 80a4e94:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4e96:	f240 1301 	movw	r3, #257	; 0x101
 80a4e9a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4e9c:	2381      	movs	r3, #129	; 0x81
 80a4e9e:	8223      	strh	r3, [r4, #16]
}
 80a4ea0:	bd10      	pop	{r4, pc}
 80a4ea2:	bf00      	nop
 80a4ea4:	20000c78 	.word	0x20000c78
 80a4ea8:	20000d79 	.word	0x20000d79

080a4eac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4eac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4eae:	4d0f      	ldr	r5, [pc, #60]	; (80a4eec <_Z16_fetch_usbserialv+0x40>)
{
 80a4eb0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4eb2:	a801      	add	r0, sp, #4
 80a4eb4:	f7ff ffe4 	bl	80a4e80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4eb8:	7829      	ldrb	r1, [r5, #0]
 80a4eba:	f3bf 8f5b 	dmb	ish
 80a4ebe:	f011 0401 	ands.w	r4, r1, #1
 80a4ec2:	d110      	bne.n	80a4ee6 <_Z16_fetch_usbserialv+0x3a>
 80a4ec4:	4628      	mov	r0, r5
 80a4ec6:	f7fb f8ee 	bl	80a00a6 <__cxa_guard_acquire>
 80a4eca:	b160      	cbz	r0, 80a4ee6 <_Z16_fetch_usbserialv+0x3a>
 80a4ecc:	4621      	mov	r1, r4
 80a4ece:	aa01      	add	r2, sp, #4
 80a4ed0:	4807      	ldr	r0, [pc, #28]	; (80a4ef0 <_Z16_fetch_usbserialv+0x44>)
 80a4ed2:	f7ff ffc1 	bl	80a4e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4ed6:	4628      	mov	r0, r5
 80a4ed8:	f7fb f8ea 	bl	80a00b0 <__cxa_guard_release>
 80a4edc:	4a05      	ldr	r2, [pc, #20]	; (80a4ef4 <_Z16_fetch_usbserialv+0x48>)
 80a4ede:	4906      	ldr	r1, [pc, #24]	; (80a4ef8 <_Z16_fetch_usbserialv+0x4c>)
 80a4ee0:	4803      	ldr	r0, [pc, #12]	; (80a4ef0 <_Z16_fetch_usbserialv+0x44>)
 80a4ee2:	f000 fa67 	bl	80a53b4 <__aeabi_atexit>
	return _usbserial;
}
 80a4ee6:	4802      	ldr	r0, [pc, #8]	; (80a4ef0 <_Z16_fetch_usbserialv+0x44>)
 80a4ee8:	b007      	add	sp, #28
 80a4eea:	bd30      	pop	{r4, r5, pc}
 80a4eec:	20000c48 	.word	0x20000c48
 80a4ef0:	20000c50 	.word	0x20000c50
 80a4ef4:	20000240 	.word	0x20000240
 80a4ef8:	080a4de5 	.word	0x080a4de5

080a4efc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4efc:	b510      	push	{r4, lr}
 80a4efe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4f00:	2214      	movs	r2, #20
 80a4f02:	2100      	movs	r1, #0
 80a4f04:	f001 fd66 	bl	80a69d4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4f08:	4b05      	ldr	r3, [pc, #20]	; (80a4f20 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4f0a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a4f0c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a4f0e:	4b05      	ldr	r3, [pc, #20]	; (80a4f24 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a4f10:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4f12:	f240 1301 	movw	r3, #257	; 0x101
 80a4f16:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4f18:	2381      	movs	r3, #129	; 0x81
 80a4f1a:	8223      	strh	r3, [r4, #16]
}
 80a4f1c:	bd10      	pop	{r4, pc}
 80a4f1e:	bf00      	nop
 80a4f20:	20000dfa 	.word	0x20000dfa
 80a4f24:	20000efb 	.word	0x20000efb

080a4f28 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4f28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4f2a:	4c0f      	ldr	r4, [pc, #60]	; (80a4f68 <_Z17_fetch_usbserial1v+0x40>)
{
 80a4f2c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4f2e:	a801      	add	r0, sp, #4
 80a4f30:	f7ff ffe4 	bl	80a4efc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4f34:	7823      	ldrb	r3, [r4, #0]
 80a4f36:	f3bf 8f5b 	dmb	ish
 80a4f3a:	07db      	lsls	r3, r3, #31
 80a4f3c:	d410      	bmi.n	80a4f60 <_Z17_fetch_usbserial1v+0x38>
 80a4f3e:	4620      	mov	r0, r4
 80a4f40:	f7fb f8b1 	bl	80a00a6 <__cxa_guard_acquire>
 80a4f44:	b160      	cbz	r0, 80a4f60 <_Z17_fetch_usbserial1v+0x38>
 80a4f46:	2101      	movs	r1, #1
 80a4f48:	aa01      	add	r2, sp, #4
 80a4f4a:	4808      	ldr	r0, [pc, #32]	; (80a4f6c <_Z17_fetch_usbserial1v+0x44>)
 80a4f4c:	f7ff ff84 	bl	80a4e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4f50:	4620      	mov	r0, r4
 80a4f52:	f7fb f8ad 	bl	80a00b0 <__cxa_guard_release>
 80a4f56:	4a06      	ldr	r2, [pc, #24]	; (80a4f70 <_Z17_fetch_usbserial1v+0x48>)
 80a4f58:	4906      	ldr	r1, [pc, #24]	; (80a4f74 <_Z17_fetch_usbserial1v+0x4c>)
 80a4f5a:	4804      	ldr	r0, [pc, #16]	; (80a4f6c <_Z17_fetch_usbserial1v+0x44>)
 80a4f5c:	f000 fa2a 	bl	80a53b4 <__aeabi_atexit>
  return _usbserial1;
}
 80a4f60:	4802      	ldr	r0, [pc, #8]	; (80a4f6c <_Z17_fetch_usbserial1v+0x44>)
 80a4f62:	b006      	add	sp, #24
 80a4f64:	bd10      	pop	{r4, pc}
 80a4f66:	bf00      	nop
 80a4f68:	20000c4c 	.word	0x20000c4c
 80a4f6c:	20000c64 	.word	0x20000c64
 80a4f70:	20000240 	.word	0x20000240
 80a4f74:	080a4de5 	.word	0x080a4de5

080a4f78 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a4f78:	2200      	movs	r2, #0
 80a4f7a:	6840      	ldr	r0, [r0, #4]
 80a4f7c:	4611      	mov	r1, r2
 80a4f7e:	f7ff b8d3 	b.w	80a4128 <network_ready>

080a4f82 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a4f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4f84:	4615      	mov	r5, r2
 80a4f86:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a4f88:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a4f8a:	460e      	mov	r6, r1
 80a4f8c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a4f8e:	2100      	movs	r1, #0
 80a4f90:	a803      	add	r0, sp, #12
 80a4f92:	f001 fd1f 	bl	80a69d4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4f96:	4628      	mov	r0, r5
 80a4f98:	f001 fd7f 	bl	80a6a9a <strlen>
 80a4f9c:	2700      	movs	r7, #0
 80a4f9e:	b281      	uxth	r1, r0
 80a4fa0:	6873      	ldr	r3, [r6, #4]
 80a4fa2:	4628      	mov	r0, r5
 80a4fa4:	9700      	str	r7, [sp, #0]
 80a4fa6:	aa03      	add	r2, sp, #12
 80a4fa8:	f7fe fff2 	bl	80a3f90 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4fac:	b130      	cbz	r0, 80a4fbc <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a4fae:	4639      	mov	r1, r7
 80a4fb0:	4620      	mov	r0, r4
 80a4fb2:	f7ff fc9b 	bl	80a48ec <_ZN9IPAddressC1Em>
    }
 80a4fb6:	4620      	mov	r0, r4
 80a4fb8:	b009      	add	sp, #36	; 0x24
 80a4fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4fbc:	4620      	mov	r0, r4
 80a4fbe:	a903      	add	r1, sp, #12
 80a4fc0:	f7ff fc82 	bl	80a48c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a4fc4:	e7f7      	b.n	80a4fb6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a4fc6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a4fc6:	2200      	movs	r2, #0
 80a4fc8:	6840      	ldr	r0, [r0, #4]
 80a4fca:	4611      	mov	r1, r2
 80a4fcc:	f7ff b8cc 	b.w	80a4168 <network_listening>

080a4fd0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a4fd0:	2200      	movs	r2, #0
 80a4fd2:	6840      	ldr	r0, [r0, #4]
 80a4fd4:	4611      	mov	r1, r2
 80a4fd6:	f7ff b8d7 	b.w	80a4188 <network_get_listen_timeout>

080a4fda <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a4fda:	2200      	movs	r2, #0
 80a4fdc:	6840      	ldr	r0, [r0, #4]
 80a4fde:	f7ff b8cb 	b.w	80a4178 <network_set_listen_timeout>

080a4fe2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4fe2:	2200      	movs	r2, #0
 80a4fe4:	6840      	ldr	r0, [r0, #4]
 80a4fe6:	f081 0101 	eor.w	r1, r1, #1
 80a4fea:	f7ff b8b5 	b.w	80a4158 <network_listen>

080a4fee <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a4fee:	2300      	movs	r3, #0
 80a4ff0:	6840      	ldr	r0, [r0, #4]
 80a4ff2:	461a      	mov	r2, r3
 80a4ff4:	4619      	mov	r1, r3
 80a4ff6:	f7ff b8a7 	b.w	80a4148 <network_off>

080a4ffa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a4ffa:	2300      	movs	r3, #0
 80a4ffc:	6840      	ldr	r0, [r0, #4]
 80a4ffe:	461a      	mov	r2, r3
 80a5000:	4619      	mov	r1, r3
 80a5002:	f7ff b899 	b.w	80a4138 <network_on>

080a5006 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a5006:	2200      	movs	r2, #0
 80a5008:	6840      	ldr	r0, [r0, #4]
 80a500a:	4611      	mov	r1, r2
 80a500c:	f7ff b87c 	b.w	80a4108 <network_connecting>

080a5010 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a5010:	2200      	movs	r2, #0
 80a5012:	2102      	movs	r1, #2
 80a5014:	6840      	ldr	r0, [r0, #4]
 80a5016:	f7ff b87f 	b.w	80a4118 <network_disconnect>

080a501a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a501a:	2300      	movs	r3, #0
 80a501c:	6840      	ldr	r0, [r0, #4]
 80a501e:	461a      	mov	r2, r3
 80a5020:	f7ff b86a 	b.w	80a40f8 <network_connect>

080a5024 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a5024:	2204      	movs	r2, #4
 80a5026:	4b02      	ldr	r3, [pc, #8]	; (80a5030 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a5028:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a502a:	4a02      	ldr	r2, [pc, #8]	; (80a5034 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a502c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a502e:	4770      	bx	lr
 80a5030:	20000f7c 	.word	0x20000f7c
 80a5034:	080a9230 	.word	0x080a9230

080a5038 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a5038:	4b01      	ldr	r3, [pc, #4]	; (80a5040 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a503a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a503c:	4770      	bx	lr
 80a503e:	bf00      	nop
 80a5040:	20000004 	.word	0x20000004

080a5044 <serialEventRun>:
{
 80a5044:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a5046:	4b13      	ldr	r3, [pc, #76]	; (80a5094 <serialEventRun+0x50>)
 80a5048:	b143      	cbz	r3, 80a505c <serialEventRun+0x18>
 80a504a:	f7ff ff2f 	bl	80a4eac <_Z16_fetch_usbserialv>
 80a504e:	6803      	ldr	r3, [r0, #0]
 80a5050:	691b      	ldr	r3, [r3, #16]
 80a5052:	4798      	blx	r3
 80a5054:	2800      	cmp	r0, #0
 80a5056:	dd01      	ble.n	80a505c <serialEventRun+0x18>
        serialEvent();
 80a5058:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a505c:	4b0e      	ldr	r3, [pc, #56]	; (80a5098 <serialEventRun+0x54>)
 80a505e:	b143      	cbz	r3, 80a5072 <serialEventRun+0x2e>
 80a5060:	f7ff fe96 	bl	80a4d90 <_Z22__fetch_global_Serial1v>
 80a5064:	6803      	ldr	r3, [r0, #0]
 80a5066:	691b      	ldr	r3, [r3, #16]
 80a5068:	4798      	blx	r3
 80a506a:	2800      	cmp	r0, #0
 80a506c:	dd01      	ble.n	80a5072 <serialEventRun+0x2e>
        serialEvent1();
 80a506e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a5072:	4b0a      	ldr	r3, [pc, #40]	; (80a509c <serialEventRun+0x58>)
 80a5074:	b10b      	cbz	r3, 80a507a <serialEventRun+0x36>
 80a5076:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a507a:	4b09      	ldr	r3, [pc, #36]	; (80a50a0 <serialEventRun+0x5c>)
 80a507c:	b143      	cbz	r3, 80a5090 <serialEventRun+0x4c>
 80a507e:	f7ff ff53 	bl	80a4f28 <_Z17_fetch_usbserial1v>
 80a5082:	6803      	ldr	r3, [r0, #0]
 80a5084:	691b      	ldr	r3, [r3, #16]
 80a5086:	4798      	blx	r3
 80a5088:	2800      	cmp	r0, #0
 80a508a:	dd01      	ble.n	80a5090 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a508c:	f3af 8000 	nop.w
}
 80a5090:	bd08      	pop	{r3, pc}
 80a5092:	bf00      	nop
	...

080a50a4 <_post_loop>:
{
 80a50a4:	b508      	push	{r3, lr}
	serialEventRun();
 80a50a6:	f7ff ffcd 	bl	80a5044 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a50aa:	f7fe fe47 	bl	80a3d3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a50ae:	4b01      	ldr	r3, [pc, #4]	; (80a50b4 <_post_loop+0x10>)
 80a50b0:	6018      	str	r0, [r3, #0]
}
 80a50b2:	bd08      	pop	{r3, pc}
 80a50b4:	20000f9c 	.word	0x20000f9c

080a50b8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a50b8:	4805      	ldr	r0, [pc, #20]	; (80a50d0 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a50ba:	4a06      	ldr	r2, [pc, #24]	; (80a50d4 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a50bc:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a50be:	1a12      	subs	r2, r2, r0
 80a50c0:	4905      	ldr	r1, [pc, #20]	; (80a50d8 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a50c2:	f001 fc79 	bl	80a69b8 <memcpy>
    __backup_sram_signature = signature;
 80a50c6:	4b05      	ldr	r3, [pc, #20]	; (80a50dc <_Z33system_initialize_user_backup_ramv+0x24>)
 80a50c8:	4a05      	ldr	r2, [pc, #20]	; (80a50e0 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a50ca:	601a      	str	r2, [r3, #0]
}
 80a50cc:	bd08      	pop	{r3, pc}
 80a50ce:	bf00      	nop
 80a50d0:	40024000 	.word	0x40024000
 80a50d4:	40024004 	.word	0x40024004
 80a50d8:	080a96e8 	.word	0x080a96e8
 80a50dc:	40024000 	.word	0x40024000
 80a50e0:	9a271c1e 	.word	0x9a271c1e

080a50e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a50e4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a50e6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a50e8:	461a      	mov	r2, r3
 80a50ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a50ee:	9300      	str	r3, [sp, #0]
 80a50f0:	f7fe ffc0 	bl	80a4074 <system_ctrl_set_result>
}
 80a50f4:	b003      	add	sp, #12
 80a50f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a50fc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a50fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a50fe:	8843      	ldrh	r3, [r0, #2]
 80a5100:	2b0a      	cmp	r3, #10
 80a5102:	d008      	beq.n	80a5116 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a5104:	2b50      	cmp	r3, #80	; 0x50
 80a5106:	d10b      	bne.n	80a5120 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a5108:	4b09      	ldr	r3, [pc, #36]	; (80a5130 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a510a:	681b      	ldr	r3, [r3, #0]
 80a510c:	b14b      	cbz	r3, 80a5122 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a510e:	b003      	add	sp, #12
 80a5110:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a5114:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a5116:	f7ff ffe5 	bl	80a50e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a511a:	b003      	add	sp, #12
 80a511c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a5120:	2300      	movs	r3, #0
 80a5122:	461a      	mov	r2, r3
 80a5124:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a5128:	9300      	str	r3, [sp, #0]
 80a512a:	f7fe ffa3 	bl	80a4074 <system_ctrl_set_result>
}
 80a512e:	e7f4      	b.n	80a511a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a5130:	20000f88 	.word	0x20000f88

080a5134 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a5134:	2100      	movs	r1, #0
{
 80a5136:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a5138:	4811      	ldr	r0, [pc, #68]	; (80a5180 <module_user_init_hook+0x4c>)
 80a513a:	f7ff f86d 	bl	80a4218 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a513e:	4b11      	ldr	r3, [pc, #68]	; (80a5184 <module_user_init_hook+0x50>)
 80a5140:	681a      	ldr	r2, [r3, #0]
 80a5142:	4b11      	ldr	r3, [pc, #68]	; (80a5188 <module_user_init_hook+0x54>)
 80a5144:	429a      	cmp	r2, r3
 80a5146:	bf0c      	ite	eq
 80a5148:	2201      	moveq	r2, #1
 80a514a:	2200      	movne	r2, #0
 80a514c:	4b0f      	ldr	r3, [pc, #60]	; (80a518c <module_user_init_hook+0x58>)
 80a514e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a5150:	d001      	beq.n	80a5156 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a5152:	f7ff ffb1 	bl	80a50b8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a5156:	f7fe fde1 	bl	80a3d1c <HAL_RNG_GetRandomNumber>
 80a515a:	4604      	mov	r4, r0
    srand(seed);
 80a515c:	f001 fc42 	bl	80a69e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a5160:	4b0b      	ldr	r3, [pc, #44]	; (80a5190 <module_user_init_hook+0x5c>)
 80a5162:	b113      	cbz	r3, 80a516a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a5164:	4620      	mov	r0, r4
 80a5166:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a516a:	2100      	movs	r1, #0
 80a516c:	4808      	ldr	r0, [pc, #32]	; (80a5190 <module_user_init_hook+0x5c>)
 80a516e:	f7fe ffbb 	bl	80a40e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a5172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a5176:	2100      	movs	r1, #0
 80a5178:	4806      	ldr	r0, [pc, #24]	; (80a5194 <module_user_init_hook+0x60>)
 80a517a:	f7fe bf71 	b.w	80a4060 <system_ctrl_set_app_request_handler>
 80a517e:	bf00      	nop
 80a5180:	080a5039 	.word	0x080a5039
 80a5184:	40024000 	.word	0x40024000
 80a5188:	9a271c1e 	.word	0x9a271c1e
 80a518c:	20000f84 	.word	0x20000f84
 80a5190:	00000000 	.word	0x00000000
 80a5194:	080a50fd 	.word	0x080a50fd

080a5198 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a5198:	b510      	push	{r4, lr}
 80a519a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a519c:	6880      	ldr	r0, [r0, #8]
 80a519e:	b108      	cbz	r0, 80a51a4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a51a0:	f7fe fdb4 	bl	80a3d0c <os_mutex_recursive_destroy>
 80a51a4:	4620      	mov	r0, r4
 80a51a6:	bd10      	pop	{r4, pc}

080a51a8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a51a8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a51aa:	b570      	push	{r4, r5, r6, lr}
 80a51ac:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a51ae:	d901      	bls.n	80a51b4 <pinAvailable+0xc>
    return false;
 80a51b0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a51b2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a51b4:	f1a0 030d 	sub.w	r3, r0, #13
 80a51b8:	2b02      	cmp	r3, #2
 80a51ba:	d90b      	bls.n	80a51d4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a51bc:	2801      	cmp	r0, #1
 80a51be:	d826      	bhi.n	80a520e <pinAvailable+0x66>
 80a51c0:	f000 f8b8 	bl	80a5334 <_Z19__fetch_global_Wirev>
 80a51c4:	2100      	movs	r1, #0
 80a51c6:	7c00      	ldrb	r0, [r0, #16]
 80a51c8:	f7fe fe50 	bl	80a3e6c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a51cc:	f080 0001 	eor.w	r0, r0, #1
 80a51d0:	b2c0      	uxtb	r0, r0
 80a51d2:	e7ee      	b.n	80a51b2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a51d4:	4e13      	ldr	r6, [pc, #76]	; (80a5224 <pinAvailable+0x7c>)
 80a51d6:	7831      	ldrb	r1, [r6, #0]
 80a51d8:	f3bf 8f5b 	dmb	ish
 80a51dc:	f011 0501 	ands.w	r5, r1, #1
 80a51e0:	d10f      	bne.n	80a5202 <pinAvailable+0x5a>
 80a51e2:	4630      	mov	r0, r6
 80a51e4:	f7fa ff5f 	bl	80a00a6 <__cxa_guard_acquire>
 80a51e8:	b158      	cbz	r0, 80a5202 <pinAvailable+0x5a>
 80a51ea:	4629      	mov	r1, r5
 80a51ec:	480e      	ldr	r0, [pc, #56]	; (80a5228 <pinAvailable+0x80>)
 80a51ee:	f7ff fc93 	bl	80a4b18 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a51f2:	4630      	mov	r0, r6
 80a51f4:	f7fa ff5c 	bl	80a00b0 <__cxa_guard_release>
 80a51f8:	4a0c      	ldr	r2, [pc, #48]	; (80a522c <pinAvailable+0x84>)
 80a51fa:	490d      	ldr	r1, [pc, #52]	; (80a5230 <pinAvailable+0x88>)
 80a51fc:	480a      	ldr	r0, [pc, #40]	; (80a5228 <pinAvailable+0x80>)
 80a51fe:	f000 f8d9 	bl	80a53b4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5202:	4b09      	ldr	r3, [pc, #36]	; (80a5228 <pinAvailable+0x80>)
 80a5204:	7818      	ldrb	r0, [r3, #0]
 80a5206:	f7fe fe4b 	bl	80a3ea0 <hal_spi_is_enabled>
 80a520a:	2800      	cmp	r0, #0
 80a520c:	d1d0      	bne.n	80a51b0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a520e:	3c12      	subs	r4, #18
 80a5210:	2c01      	cmp	r4, #1
 80a5212:	d805      	bhi.n	80a5220 <pinAvailable+0x78>
 80a5214:	f7ff fdbc 	bl	80a4d90 <_Z22__fetch_global_Serial1v>
 80a5218:	7c00      	ldrb	r0, [r0, #16]
 80a521a:	f7fe fe79 	bl	80a3f10 <hal_usart_is_enabled>
 80a521e:	e7d5      	b.n	80a51cc <pinAvailable+0x24>
  return true; // 'pin' is available
 80a5220:	2001      	movs	r0, #1
 80a5222:	e7c6      	b.n	80a51b2 <pinAvailable+0xa>
 80a5224:	20000f8c 	.word	0x20000f8c
 80a5228:	20000f90 	.word	0x20000f90
 80a522c:	20000240 	.word	0x20000240
 80a5230:	080a5199 	.word	0x080a5199

080a5234 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5234:	2817      	cmp	r0, #23
{
 80a5236:	b538      	push	{r3, r4, r5, lr}
 80a5238:	4604      	mov	r4, r0
 80a523a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a523c:	d80a      	bhi.n	80a5254 <pinMode+0x20>
 80a523e:	29ff      	cmp	r1, #255	; 0xff
 80a5240:	d008      	beq.n	80a5254 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a5242:	f7ff ffb1 	bl	80a51a8 <pinAvailable>
 80a5246:	b128      	cbz	r0, 80a5254 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a5248:	4629      	mov	r1, r5
 80a524a:	4620      	mov	r0, r4
}
 80a524c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a5250:	f7fe bdbc 	b.w	80a3dcc <HAL_Pin_Mode>
}
 80a5254:	bd38      	pop	{r3, r4, r5, pc}

080a5256 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a5256:	b538      	push	{r3, r4, r5, lr}
 80a5258:	4604      	mov	r4, r0
 80a525a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a525c:	f7fe fdbe 	bl	80a3ddc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a5260:	28ff      	cmp	r0, #255	; 0xff
 80a5262:	d010      	beq.n	80a5286 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a5264:	2806      	cmp	r0, #6
 80a5266:	d804      	bhi.n	80a5272 <digitalWrite+0x1c>
 80a5268:	234d      	movs	r3, #77	; 0x4d
 80a526a:	fa23 f000 	lsr.w	r0, r3, r0
 80a526e:	07c3      	lsls	r3, r0, #31
 80a5270:	d409      	bmi.n	80a5286 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a5272:	4620      	mov	r0, r4
 80a5274:	f7ff ff98 	bl	80a51a8 <pinAvailable>
 80a5278:	b128      	cbz	r0, 80a5286 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a527a:	4629      	mov	r1, r5
 80a527c:	4620      	mov	r0, r4
}
 80a527e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a5282:	f7fe bdb3 	b.w	80a3dec <HAL_GPIO_Write>
}
 80a5286:	bd38      	pop	{r3, r4, r5, pc}

080a5288 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a5288:	b510      	push	{r4, lr}
 80a528a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a528c:	f7fe fda6 	bl	80a3ddc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a5290:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a5292:	b2db      	uxtb	r3, r3
 80a5294:	2b01      	cmp	r3, #1
 80a5296:	d908      	bls.n	80a52aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5298:	4620      	mov	r0, r4
 80a529a:	f7ff ff85 	bl	80a51a8 <pinAvailable>
 80a529e:	b120      	cbz	r0, 80a52aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a52a0:	4620      	mov	r0, r4
}
 80a52a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a52a6:	f7fe bda9 	b.w	80a3dfc <HAL_GPIO_Read>
}
 80a52aa:	2000      	movs	r0, #0
 80a52ac:	bd10      	pop	{r4, pc}

080a52ae <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a52ae:	b510      	push	{r4, lr}
 80a52b0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a52b2:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a52b4:	bf9c      	itt	ls
 80a52b6:	340a      	addls	r4, #10
 80a52b8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a52ba:	4620      	mov	r0, r4
 80a52bc:	f7ff ff74 	bl	80a51a8 <pinAvailable>
 80a52c0:	b150      	cbz	r0, 80a52d8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a52c2:	2103      	movs	r1, #3
 80a52c4:	4620      	mov	r0, r4
 80a52c6:	f7fe fd79 	bl	80a3dbc <HAL_Validate_Pin_Function>
 80a52ca:	2803      	cmp	r0, #3
 80a52cc:	d104      	bne.n	80a52d8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a52ce:	4620      	mov	r0, r4
}
 80a52d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a52d4:	f7fe bd9a 	b.w	80a3e0c <hal_adc_read>
}
 80a52d8:	2000      	movs	r0, #0
 80a52da:	bd10      	pop	{r4, pc}

080a52dc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a52dc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a52de:	4c08      	ldr	r4, [pc, #32]	; (80a5300 <_Z21__fetch_global_EEPROMv+0x24>)
 80a52e0:	7823      	ldrb	r3, [r4, #0]
 80a52e2:	f3bf 8f5b 	dmb	ish
 80a52e6:	07db      	lsls	r3, r3, #31
 80a52e8:	d408      	bmi.n	80a52fc <_Z21__fetch_global_EEPROMv+0x20>
 80a52ea:	4620      	mov	r0, r4
 80a52ec:	f7fa fedb 	bl	80a00a6 <__cxa_guard_acquire>
 80a52f0:	b120      	cbz	r0, 80a52fc <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a52f2:	f7fe fd2b 	bl	80a3d4c <HAL_EEPROM_Init>
 80a52f6:	4620      	mov	r0, r4
 80a52f8:	f7fa feda 	bl	80a00b0 <__cxa_guard_release>
	return eeprom;
}
 80a52fc:	4801      	ldr	r0, [pc, #4]	; (80a5304 <_Z21__fetch_global_EEPROMv+0x28>)
 80a52fe:	bd10      	pop	{r4, pc}
 80a5300:	20000fa0 	.word	0x20000fa0
 80a5304:	20000fa4 	.word	0x20000fa4

080a5308 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a5308:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a530a:	2314      	movs	r3, #20
 80a530c:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a530e:	4e08      	ldr	r6, [pc, #32]	; (80a5330 <_Z17acquireWireBufferv+0x28>)
{
 80a5310:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a5312:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5314:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a5316:	6085      	str	r5, [r0, #8]
 80a5318:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a531a:	4628      	mov	r0, r5
 80a531c:	f000 f851 	bl	80a53c2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5320:	4631      	mov	r1, r6
	};
 80a5322:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5324:	4628      	mov	r0, r5
 80a5326:	f000 f84c 	bl	80a53c2 <_ZnajRKSt9nothrow_t>
	};
 80a532a:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a532c:	4620      	mov	r0, r4
 80a532e:	bd70      	pop	{r4, r5, r6, pc}
 80a5330:	080a9264 	.word	0x080a9264

080a5334 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5334:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5336:	4d0f      	ldr	r5, [pc, #60]	; (80a5374 <_Z19__fetch_global_Wirev+0x40>)
{
 80a5338:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a533a:	7829      	ldrb	r1, [r5, #0]
 80a533c:	f3bf 8f5b 	dmb	ish
 80a5340:	f011 0401 	ands.w	r4, r1, #1
 80a5344:	d113      	bne.n	80a536e <_Z19__fetch_global_Wirev+0x3a>
 80a5346:	4628      	mov	r0, r5
 80a5348:	f7fa fead 	bl	80a00a6 <__cxa_guard_acquire>
 80a534c:	b178      	cbz	r0, 80a536e <_Z19__fetch_global_Wirev+0x3a>
 80a534e:	a801      	add	r0, sp, #4
 80a5350:	f7ff ffda 	bl	80a5308 <_Z17acquireWireBufferv>
 80a5354:	4621      	mov	r1, r4
 80a5356:	aa01      	add	r2, sp, #4
 80a5358:	4807      	ldr	r0, [pc, #28]	; (80a5378 <_Z19__fetch_global_Wirev+0x44>)
 80a535a:	f7ff fa73 	bl	80a4844 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a535e:	4628      	mov	r0, r5
 80a5360:	f7fa fea6 	bl	80a00b0 <__cxa_guard_release>
 80a5364:	4a05      	ldr	r2, [pc, #20]	; (80a537c <_Z19__fetch_global_Wirev+0x48>)
 80a5366:	4906      	ldr	r1, [pc, #24]	; (80a5380 <_Z19__fetch_global_Wirev+0x4c>)
 80a5368:	4803      	ldr	r0, [pc, #12]	; (80a5378 <_Z19__fetch_global_Wirev+0x44>)
 80a536a:	f000 f823 	bl	80a53b4 <__aeabi_atexit>
	return wire;
}
 80a536e:	4802      	ldr	r0, [pc, #8]	; (80a5378 <_Z19__fetch_global_Wirev+0x44>)
 80a5370:	b007      	add	sp, #28
 80a5372:	bd30      	pop	{r4, r5, pc}
 80a5374:	20000fa8 	.word	0x20000fa8
 80a5378:	20000fac 	.word	0x20000fac
 80a537c:	20000240 	.word	0x20000240
 80a5380:	080a47ed 	.word	0x080a47ed

080a5384 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5384:	2300      	movs	r3, #0
 80a5386:	b513      	push	{r0, r1, r4, lr}
 80a5388:	4c07      	ldr	r4, [pc, #28]	; (80a53a8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a538a:	461a      	mov	r2, r3
 80a538c:	4619      	mov	r1, r3
 80a538e:	4620      	mov	r0, r4
 80a5390:	9300      	str	r3, [sp, #0]
 80a5392:	f7ff fac1 	bl	80a4918 <_ZN9IPAddressC1Ehhhh>
 80a5396:	4620      	mov	r0, r4
 80a5398:	4a04      	ldr	r2, [pc, #16]	; (80a53ac <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a539a:	4905      	ldr	r1, [pc, #20]	; (80a53b0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a539c:	b002      	add	sp, #8
 80a539e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a53a2:	f000 b807 	b.w	80a53b4 <__aeabi_atexit>
 80a53a6:	bf00      	nop
 80a53a8:	20000fc0 	.word	0x20000fc0
 80a53ac:	20000240 	.word	0x20000240
 80a53b0:	080a4869 	.word	0x080a4869

080a53b4 <__aeabi_atexit>:
 80a53b4:	460b      	mov	r3, r1
 80a53b6:	4601      	mov	r1, r0
 80a53b8:	4618      	mov	r0, r3
 80a53ba:	f001 b9fd 	b.w	80a67b8 <__cxa_atexit>

080a53be <_ZdlPvj>:
 80a53be:	f7fa be70 	b.w	80a00a2 <_ZdlPv>

080a53c2 <_ZnajRKSt9nothrow_t>:
 80a53c2:	f7fa be6c 	b.w	80a009e <_Znaj>

080a53c6 <_ZSt25__throw_bad_function_callv>:
 80a53c6:	b508      	push	{r3, lr}
 80a53c8:	f7fe ff0e 	bl	80a41e8 <abort>

080a53cc <round>:
 80a53cc:	b538      	push	{r3, r4, r5, lr}
 80a53ce:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80a53d2:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 80a53d6:	2a13      	cmp	r2, #19
 80a53d8:	460b      	mov	r3, r1
 80a53da:	4684      	mov	ip, r0
 80a53dc:	468e      	mov	lr, r1
 80a53de:	4604      	mov	r4, r0
 80a53e0:	dc20      	bgt.n	80a5424 <round+0x58>
 80a53e2:	2a00      	cmp	r2, #0
 80a53e4:	db0e      	blt.n	80a5404 <round+0x38>
 80a53e6:	491e      	ldr	r1, [pc, #120]	; (80a5460 <round+0x94>)
 80a53e8:	4111      	asrs	r1, r2
 80a53ea:	ea03 0001 	and.w	r0, r3, r1
 80a53ee:	4320      	orrs	r0, r4
 80a53f0:	d015      	beq.n	80a541e <round+0x52>
 80a53f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a53f6:	fa43 f202 	asr.w	r2, r3, r2
 80a53fa:	4496      	add	lr, r2
 80a53fc:	2400      	movs	r4, #0
 80a53fe:	ea2e 0e01 	bic.w	lr, lr, r1
 80a5402:	e00a      	b.n	80a541a <round+0x4e>
 80a5404:	3201      	adds	r2, #1
 80a5406:	bf14      	ite	ne
 80a5408:	2400      	movne	r4, #0
 80a540a:	2400      	moveq	r4, #0
 80a540c:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 80a5410:	bf04      	itt	eq
 80a5412:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 80a5416:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 80a541a:	4673      	mov	r3, lr
 80a541c:	46a4      	mov	ip, r4
 80a541e:	4660      	mov	r0, ip
 80a5420:	4619      	mov	r1, r3
 80a5422:	bd38      	pop	{r3, r4, r5, pc}
 80a5424:	2a33      	cmp	r2, #51	; 0x33
 80a5426:	dd08      	ble.n	80a543a <round+0x6e>
 80a5428:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80a542c:	d1f7      	bne.n	80a541e <round+0x52>
 80a542e:	4602      	mov	r2, r0
 80a5430:	f000 f81e 	bl	80a5470 <__adddf3>
 80a5434:	4684      	mov	ip, r0
 80a5436:	460b      	mov	r3, r1
 80a5438:	e7f1      	b.n	80a541e <round+0x52>
 80a543a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a543e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80a5442:	fa21 f505 	lsr.w	r5, r1, r5
 80a5446:	4228      	tst	r0, r5
 80a5448:	d0e9      	beq.n	80a541e <round+0x52>
 80a544a:	2301      	movs	r3, #1
 80a544c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 80a5450:	fa03 f202 	lsl.w	r2, r3, r2
 80a5454:	1884      	adds	r4, r0, r2
 80a5456:	bf28      	it	cs
 80a5458:	449e      	addcs	lr, r3
 80a545a:	ea24 0405 	bic.w	r4, r4, r5
 80a545e:	e7dc      	b.n	80a541a <round+0x4e>
 80a5460:	000fffff 	.word	0x000fffff

080a5464 <__aeabi_drsub>:
 80a5464:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5468:	e002      	b.n	80a5470 <__adddf3>
 80a546a:	bf00      	nop

080a546c <__aeabi_dsub>:
 80a546c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5470 <__adddf3>:
 80a5470:	b530      	push	{r4, r5, lr}
 80a5472:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5476:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a547a:	ea94 0f05 	teq	r4, r5
 80a547e:	bf08      	it	eq
 80a5480:	ea90 0f02 	teqeq	r0, r2
 80a5484:	bf1f      	itttt	ne
 80a5486:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a548a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a548e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5492:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5496:	f000 80e2 	beq.w	80a565e <__adddf3+0x1ee>
 80a549a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a549e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a54a2:	bfb8      	it	lt
 80a54a4:	426d      	neglt	r5, r5
 80a54a6:	dd0c      	ble.n	80a54c2 <__adddf3+0x52>
 80a54a8:	442c      	add	r4, r5
 80a54aa:	ea80 0202 	eor.w	r2, r0, r2
 80a54ae:	ea81 0303 	eor.w	r3, r1, r3
 80a54b2:	ea82 0000 	eor.w	r0, r2, r0
 80a54b6:	ea83 0101 	eor.w	r1, r3, r1
 80a54ba:	ea80 0202 	eor.w	r2, r0, r2
 80a54be:	ea81 0303 	eor.w	r3, r1, r3
 80a54c2:	2d36      	cmp	r5, #54	; 0x36
 80a54c4:	bf88      	it	hi
 80a54c6:	bd30      	pophi	{r4, r5, pc}
 80a54c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a54cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a54d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a54d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a54d8:	d002      	beq.n	80a54e0 <__adddf3+0x70>
 80a54da:	4240      	negs	r0, r0
 80a54dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a54e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a54e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a54e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a54ec:	d002      	beq.n	80a54f4 <__adddf3+0x84>
 80a54ee:	4252      	negs	r2, r2
 80a54f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a54f4:	ea94 0f05 	teq	r4, r5
 80a54f8:	f000 80a7 	beq.w	80a564a <__adddf3+0x1da>
 80a54fc:	f1a4 0401 	sub.w	r4, r4, #1
 80a5500:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5504:	db0d      	blt.n	80a5522 <__adddf3+0xb2>
 80a5506:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a550a:	fa22 f205 	lsr.w	r2, r2, r5
 80a550e:	1880      	adds	r0, r0, r2
 80a5510:	f141 0100 	adc.w	r1, r1, #0
 80a5514:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5518:	1880      	adds	r0, r0, r2
 80a551a:	fa43 f305 	asr.w	r3, r3, r5
 80a551e:	4159      	adcs	r1, r3
 80a5520:	e00e      	b.n	80a5540 <__adddf3+0xd0>
 80a5522:	f1a5 0520 	sub.w	r5, r5, #32
 80a5526:	f10e 0e20 	add.w	lr, lr, #32
 80a552a:	2a01      	cmp	r2, #1
 80a552c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5530:	bf28      	it	cs
 80a5532:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a5536:	fa43 f305 	asr.w	r3, r3, r5
 80a553a:	18c0      	adds	r0, r0, r3
 80a553c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5544:	d507      	bpl.n	80a5556 <__adddf3+0xe6>
 80a5546:	f04f 0e00 	mov.w	lr, #0
 80a554a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a554e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a5552:	eb6e 0101 	sbc.w	r1, lr, r1
 80a5556:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a555a:	d31b      	bcc.n	80a5594 <__adddf3+0x124>
 80a555c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5560:	d30c      	bcc.n	80a557c <__adddf3+0x10c>
 80a5562:	0849      	lsrs	r1, r1, #1
 80a5564:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5568:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a556c:	f104 0401 	add.w	r4, r4, #1
 80a5570:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5574:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5578:	f080 809a 	bcs.w	80a56b0 <__adddf3+0x240>
 80a557c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5580:	bf08      	it	eq
 80a5582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5586:	f150 0000 	adcs.w	r0, r0, #0
 80a558a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a558e:	ea41 0105 	orr.w	r1, r1, r5
 80a5592:	bd30      	pop	{r4, r5, pc}
 80a5594:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5598:	4140      	adcs	r0, r0
 80a559a:	eb41 0101 	adc.w	r1, r1, r1
 80a559e:	3c01      	subs	r4, #1
 80a55a0:	bf28      	it	cs
 80a55a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a55a6:	d2e9      	bcs.n	80a557c <__adddf3+0x10c>
 80a55a8:	f091 0f00 	teq	r1, #0
 80a55ac:	bf04      	itt	eq
 80a55ae:	4601      	moveq	r1, r0
 80a55b0:	2000      	moveq	r0, #0
 80a55b2:	fab1 f381 	clz	r3, r1
 80a55b6:	bf08      	it	eq
 80a55b8:	3320      	addeq	r3, #32
 80a55ba:	f1a3 030b 	sub.w	r3, r3, #11
 80a55be:	f1b3 0220 	subs.w	r2, r3, #32
 80a55c2:	da0c      	bge.n	80a55de <__adddf3+0x16e>
 80a55c4:	320c      	adds	r2, #12
 80a55c6:	dd08      	ble.n	80a55da <__adddf3+0x16a>
 80a55c8:	f102 0c14 	add.w	ip, r2, #20
 80a55cc:	f1c2 020c 	rsb	r2, r2, #12
 80a55d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a55d4:	fa21 f102 	lsr.w	r1, r1, r2
 80a55d8:	e00c      	b.n	80a55f4 <__adddf3+0x184>
 80a55da:	f102 0214 	add.w	r2, r2, #20
 80a55de:	bfd8      	it	le
 80a55e0:	f1c2 0c20 	rsble	ip, r2, #32
 80a55e4:	fa01 f102 	lsl.w	r1, r1, r2
 80a55e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a55ec:	bfdc      	itt	le
 80a55ee:	ea41 010c 	orrle.w	r1, r1, ip
 80a55f2:	4090      	lslle	r0, r2
 80a55f4:	1ae4      	subs	r4, r4, r3
 80a55f6:	bfa2      	ittt	ge
 80a55f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a55fc:	4329      	orrge	r1, r5
 80a55fe:	bd30      	popge	{r4, r5, pc}
 80a5600:	ea6f 0404 	mvn.w	r4, r4
 80a5604:	3c1f      	subs	r4, #31
 80a5606:	da1c      	bge.n	80a5642 <__adddf3+0x1d2>
 80a5608:	340c      	adds	r4, #12
 80a560a:	dc0e      	bgt.n	80a562a <__adddf3+0x1ba>
 80a560c:	f104 0414 	add.w	r4, r4, #20
 80a5610:	f1c4 0220 	rsb	r2, r4, #32
 80a5614:	fa20 f004 	lsr.w	r0, r0, r4
 80a5618:	fa01 f302 	lsl.w	r3, r1, r2
 80a561c:	ea40 0003 	orr.w	r0, r0, r3
 80a5620:	fa21 f304 	lsr.w	r3, r1, r4
 80a5624:	ea45 0103 	orr.w	r1, r5, r3
 80a5628:	bd30      	pop	{r4, r5, pc}
 80a562a:	f1c4 040c 	rsb	r4, r4, #12
 80a562e:	f1c4 0220 	rsb	r2, r4, #32
 80a5632:	fa20 f002 	lsr.w	r0, r0, r2
 80a5636:	fa01 f304 	lsl.w	r3, r1, r4
 80a563a:	ea40 0003 	orr.w	r0, r0, r3
 80a563e:	4629      	mov	r1, r5
 80a5640:	bd30      	pop	{r4, r5, pc}
 80a5642:	fa21 f004 	lsr.w	r0, r1, r4
 80a5646:	4629      	mov	r1, r5
 80a5648:	bd30      	pop	{r4, r5, pc}
 80a564a:	f094 0f00 	teq	r4, #0
 80a564e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5652:	bf06      	itte	eq
 80a5654:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5658:	3401      	addeq	r4, #1
 80a565a:	3d01      	subne	r5, #1
 80a565c:	e74e      	b.n	80a54fc <__adddf3+0x8c>
 80a565e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5662:	bf18      	it	ne
 80a5664:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5668:	d029      	beq.n	80a56be <__adddf3+0x24e>
 80a566a:	ea94 0f05 	teq	r4, r5
 80a566e:	bf08      	it	eq
 80a5670:	ea90 0f02 	teqeq	r0, r2
 80a5674:	d005      	beq.n	80a5682 <__adddf3+0x212>
 80a5676:	ea54 0c00 	orrs.w	ip, r4, r0
 80a567a:	bf04      	itt	eq
 80a567c:	4619      	moveq	r1, r3
 80a567e:	4610      	moveq	r0, r2
 80a5680:	bd30      	pop	{r4, r5, pc}
 80a5682:	ea91 0f03 	teq	r1, r3
 80a5686:	bf1e      	ittt	ne
 80a5688:	2100      	movne	r1, #0
 80a568a:	2000      	movne	r0, #0
 80a568c:	bd30      	popne	{r4, r5, pc}
 80a568e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5692:	d105      	bne.n	80a56a0 <__adddf3+0x230>
 80a5694:	0040      	lsls	r0, r0, #1
 80a5696:	4149      	adcs	r1, r1
 80a5698:	bf28      	it	cs
 80a569a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a569e:	bd30      	pop	{r4, r5, pc}
 80a56a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a56a4:	bf3c      	itt	cc
 80a56a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a56aa:	bd30      	popcc	{r4, r5, pc}
 80a56ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a56b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a56b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a56b8:	f04f 0000 	mov.w	r0, #0
 80a56bc:	bd30      	pop	{r4, r5, pc}
 80a56be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a56c2:	bf1a      	itte	ne
 80a56c4:	4619      	movne	r1, r3
 80a56c6:	4610      	movne	r0, r2
 80a56c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a56cc:	bf1c      	itt	ne
 80a56ce:	460b      	movne	r3, r1
 80a56d0:	4602      	movne	r2, r0
 80a56d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a56d6:	bf06      	itte	eq
 80a56d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a56dc:	ea91 0f03 	teqeq	r1, r3
 80a56e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a56e4:	bd30      	pop	{r4, r5, pc}
 80a56e6:	bf00      	nop

080a56e8 <__aeabi_ui2d>:
 80a56e8:	f090 0f00 	teq	r0, #0
 80a56ec:	bf04      	itt	eq
 80a56ee:	2100      	moveq	r1, #0
 80a56f0:	4770      	bxeq	lr
 80a56f2:	b530      	push	{r4, r5, lr}
 80a56f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a56f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a56fc:	f04f 0500 	mov.w	r5, #0
 80a5700:	f04f 0100 	mov.w	r1, #0
 80a5704:	e750      	b.n	80a55a8 <__adddf3+0x138>
 80a5706:	bf00      	nop

080a5708 <__aeabi_i2d>:
 80a5708:	f090 0f00 	teq	r0, #0
 80a570c:	bf04      	itt	eq
 80a570e:	2100      	moveq	r1, #0
 80a5710:	4770      	bxeq	lr
 80a5712:	b530      	push	{r4, r5, lr}
 80a5714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a571c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5720:	bf48      	it	mi
 80a5722:	4240      	negmi	r0, r0
 80a5724:	f04f 0100 	mov.w	r1, #0
 80a5728:	e73e      	b.n	80a55a8 <__adddf3+0x138>
 80a572a:	bf00      	nop

080a572c <__aeabi_f2d>:
 80a572c:	0042      	lsls	r2, r0, #1
 80a572e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5732:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5736:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a573a:	bf1f      	itttt	ne
 80a573c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5740:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5744:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a5748:	4770      	bxne	lr
 80a574a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a574e:	bf08      	it	eq
 80a5750:	4770      	bxeq	lr
 80a5752:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a5756:	bf04      	itt	eq
 80a5758:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a575c:	4770      	bxeq	lr
 80a575e:	b530      	push	{r4, r5, lr}
 80a5760:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a576c:	e71c      	b.n	80a55a8 <__adddf3+0x138>
 80a576e:	bf00      	nop

080a5770 <__aeabi_ul2d>:
 80a5770:	ea50 0201 	orrs.w	r2, r0, r1
 80a5774:	bf08      	it	eq
 80a5776:	4770      	bxeq	lr
 80a5778:	b530      	push	{r4, r5, lr}
 80a577a:	f04f 0500 	mov.w	r5, #0
 80a577e:	e00a      	b.n	80a5796 <__aeabi_l2d+0x16>

080a5780 <__aeabi_l2d>:
 80a5780:	ea50 0201 	orrs.w	r2, r0, r1
 80a5784:	bf08      	it	eq
 80a5786:	4770      	bxeq	lr
 80a5788:	b530      	push	{r4, r5, lr}
 80a578a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a578e:	d502      	bpl.n	80a5796 <__aeabi_l2d+0x16>
 80a5790:	4240      	negs	r0, r0
 80a5792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5796:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a579a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a579e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a57a2:	f43f aed8 	beq.w	80a5556 <__adddf3+0xe6>
 80a57a6:	f04f 0203 	mov.w	r2, #3
 80a57aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a57ae:	bf18      	it	ne
 80a57b0:	3203      	addne	r2, #3
 80a57b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a57b6:	bf18      	it	ne
 80a57b8:	3203      	addne	r2, #3
 80a57ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a57be:	f1c2 0320 	rsb	r3, r2, #32
 80a57c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a57c6:	fa20 f002 	lsr.w	r0, r0, r2
 80a57ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80a57ce:	ea40 000e 	orr.w	r0, r0, lr
 80a57d2:	fa21 f102 	lsr.w	r1, r1, r2
 80a57d6:	4414      	add	r4, r2
 80a57d8:	e6bd      	b.n	80a5556 <__adddf3+0xe6>
 80a57da:	bf00      	nop

080a57dc <__aeabi_dmul>:
 80a57dc:	b570      	push	{r4, r5, r6, lr}
 80a57de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a57e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a57e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a57ea:	bf1d      	ittte	ne
 80a57ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a57f0:	ea94 0f0c 	teqne	r4, ip
 80a57f4:	ea95 0f0c 	teqne	r5, ip
 80a57f8:	f000 f8de 	bleq	80a59b8 <__aeabi_dmul+0x1dc>
 80a57fc:	442c      	add	r4, r5
 80a57fe:	ea81 0603 	eor.w	r6, r1, r3
 80a5802:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5806:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a580a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a580e:	bf18      	it	ne
 80a5810:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5814:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a581c:	d038      	beq.n	80a5890 <__aeabi_dmul+0xb4>
 80a581e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5822:	f04f 0500 	mov.w	r5, #0
 80a5826:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a582a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a582e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5832:	f04f 0600 	mov.w	r6, #0
 80a5836:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a583a:	f09c 0f00 	teq	ip, #0
 80a583e:	bf18      	it	ne
 80a5840:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5844:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5848:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a584c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5850:	d204      	bcs.n	80a585c <__aeabi_dmul+0x80>
 80a5852:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5856:	416d      	adcs	r5, r5
 80a5858:	eb46 0606 	adc.w	r6, r6, r6
 80a585c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5860:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5864:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5868:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a586c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5870:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5874:	bf88      	it	hi
 80a5876:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a587a:	d81e      	bhi.n	80a58ba <__aeabi_dmul+0xde>
 80a587c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5880:	bf08      	it	eq
 80a5882:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5886:	f150 0000 	adcs.w	r0, r0, #0
 80a588a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a588e:	bd70      	pop	{r4, r5, r6, pc}
 80a5890:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5894:	ea46 0101 	orr.w	r1, r6, r1
 80a5898:	ea40 0002 	orr.w	r0, r0, r2
 80a589c:	ea81 0103 	eor.w	r1, r1, r3
 80a58a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a58a4:	bfc2      	ittt	gt
 80a58a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a58aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a58ae:	bd70      	popgt	{r4, r5, r6, pc}
 80a58b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a58b4:	f04f 0e00 	mov.w	lr, #0
 80a58b8:	3c01      	subs	r4, #1
 80a58ba:	f300 80ab 	bgt.w	80a5a14 <__aeabi_dmul+0x238>
 80a58be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a58c2:	bfde      	ittt	le
 80a58c4:	2000      	movle	r0, #0
 80a58c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a58ca:	bd70      	pople	{r4, r5, r6, pc}
 80a58cc:	f1c4 0400 	rsb	r4, r4, #0
 80a58d0:	3c20      	subs	r4, #32
 80a58d2:	da35      	bge.n	80a5940 <__aeabi_dmul+0x164>
 80a58d4:	340c      	adds	r4, #12
 80a58d6:	dc1b      	bgt.n	80a5910 <__aeabi_dmul+0x134>
 80a58d8:	f104 0414 	add.w	r4, r4, #20
 80a58dc:	f1c4 0520 	rsb	r5, r4, #32
 80a58e0:	fa00 f305 	lsl.w	r3, r0, r5
 80a58e4:	fa20 f004 	lsr.w	r0, r0, r4
 80a58e8:	fa01 f205 	lsl.w	r2, r1, r5
 80a58ec:	ea40 0002 	orr.w	r0, r0, r2
 80a58f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a58f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a58f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a58fc:	fa21 f604 	lsr.w	r6, r1, r4
 80a5900:	eb42 0106 	adc.w	r1, r2, r6
 80a5904:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5908:	bf08      	it	eq
 80a590a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a590e:	bd70      	pop	{r4, r5, r6, pc}
 80a5910:	f1c4 040c 	rsb	r4, r4, #12
 80a5914:	f1c4 0520 	rsb	r5, r4, #32
 80a5918:	fa00 f304 	lsl.w	r3, r0, r4
 80a591c:	fa20 f005 	lsr.w	r0, r0, r5
 80a5920:	fa01 f204 	lsl.w	r2, r1, r4
 80a5924:	ea40 0002 	orr.w	r0, r0, r2
 80a5928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a592c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5930:	f141 0100 	adc.w	r1, r1, #0
 80a5934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5938:	bf08      	it	eq
 80a593a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a593e:	bd70      	pop	{r4, r5, r6, pc}
 80a5940:	f1c4 0520 	rsb	r5, r4, #32
 80a5944:	fa00 f205 	lsl.w	r2, r0, r5
 80a5948:	ea4e 0e02 	orr.w	lr, lr, r2
 80a594c:	fa20 f304 	lsr.w	r3, r0, r4
 80a5950:	fa01 f205 	lsl.w	r2, r1, r5
 80a5954:	ea43 0302 	orr.w	r3, r3, r2
 80a5958:	fa21 f004 	lsr.w	r0, r1, r4
 80a595c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5960:	fa21 f204 	lsr.w	r2, r1, r4
 80a5964:	ea20 0002 	bic.w	r0, r0, r2
 80a5968:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a596c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5970:	bf08      	it	eq
 80a5972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5976:	bd70      	pop	{r4, r5, r6, pc}
 80a5978:	f094 0f00 	teq	r4, #0
 80a597c:	d10f      	bne.n	80a599e <__aeabi_dmul+0x1c2>
 80a597e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5982:	0040      	lsls	r0, r0, #1
 80a5984:	eb41 0101 	adc.w	r1, r1, r1
 80a5988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a598c:	bf08      	it	eq
 80a598e:	3c01      	subeq	r4, #1
 80a5990:	d0f7      	beq.n	80a5982 <__aeabi_dmul+0x1a6>
 80a5992:	ea41 0106 	orr.w	r1, r1, r6
 80a5996:	f095 0f00 	teq	r5, #0
 80a599a:	bf18      	it	ne
 80a599c:	4770      	bxne	lr
 80a599e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a59a2:	0052      	lsls	r2, r2, #1
 80a59a4:	eb43 0303 	adc.w	r3, r3, r3
 80a59a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a59ac:	bf08      	it	eq
 80a59ae:	3d01      	subeq	r5, #1
 80a59b0:	d0f7      	beq.n	80a59a2 <__aeabi_dmul+0x1c6>
 80a59b2:	ea43 0306 	orr.w	r3, r3, r6
 80a59b6:	4770      	bx	lr
 80a59b8:	ea94 0f0c 	teq	r4, ip
 80a59bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a59c0:	bf18      	it	ne
 80a59c2:	ea95 0f0c 	teqne	r5, ip
 80a59c6:	d00c      	beq.n	80a59e2 <__aeabi_dmul+0x206>
 80a59c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a59cc:	bf18      	it	ne
 80a59ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a59d2:	d1d1      	bne.n	80a5978 <__aeabi_dmul+0x19c>
 80a59d4:	ea81 0103 	eor.w	r1, r1, r3
 80a59d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a59dc:	f04f 0000 	mov.w	r0, #0
 80a59e0:	bd70      	pop	{r4, r5, r6, pc}
 80a59e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a59e6:	bf06      	itte	eq
 80a59e8:	4610      	moveq	r0, r2
 80a59ea:	4619      	moveq	r1, r3
 80a59ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a59f0:	d019      	beq.n	80a5a26 <__aeabi_dmul+0x24a>
 80a59f2:	ea94 0f0c 	teq	r4, ip
 80a59f6:	d102      	bne.n	80a59fe <__aeabi_dmul+0x222>
 80a59f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a59fc:	d113      	bne.n	80a5a26 <__aeabi_dmul+0x24a>
 80a59fe:	ea95 0f0c 	teq	r5, ip
 80a5a02:	d105      	bne.n	80a5a10 <__aeabi_dmul+0x234>
 80a5a04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5a08:	bf1c      	itt	ne
 80a5a0a:	4610      	movne	r0, r2
 80a5a0c:	4619      	movne	r1, r3
 80a5a0e:	d10a      	bne.n	80a5a26 <__aeabi_dmul+0x24a>
 80a5a10:	ea81 0103 	eor.w	r1, r1, r3
 80a5a14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5a18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5a1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5a20:	f04f 0000 	mov.w	r0, #0
 80a5a24:	bd70      	pop	{r4, r5, r6, pc}
 80a5a26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5a2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5a2e:	bd70      	pop	{r4, r5, r6, pc}

080a5a30 <__aeabi_ddiv>:
 80a5a30:	b570      	push	{r4, r5, r6, lr}
 80a5a32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5a36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5a3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5a3e:	bf1d      	ittte	ne
 80a5a40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5a44:	ea94 0f0c 	teqne	r4, ip
 80a5a48:	ea95 0f0c 	teqne	r5, ip
 80a5a4c:	f000 f8a7 	bleq	80a5b9e <__aeabi_ddiv+0x16e>
 80a5a50:	eba4 0405 	sub.w	r4, r4, r5
 80a5a54:	ea81 0e03 	eor.w	lr, r1, r3
 80a5a58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5a5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5a60:	f000 8088 	beq.w	80a5b74 <__aeabi_ddiv+0x144>
 80a5a64:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5a68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5a6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5a70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5a74:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5a78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5a7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5a80:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5a84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5a88:	429d      	cmp	r5, r3
 80a5a8a:	bf08      	it	eq
 80a5a8c:	4296      	cmpeq	r6, r2
 80a5a8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5a92:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5a96:	d202      	bcs.n	80a5a9e <__aeabi_ddiv+0x6e>
 80a5a98:	085b      	lsrs	r3, r3, #1
 80a5a9a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5a9e:	1ab6      	subs	r6, r6, r2
 80a5aa0:	eb65 0503 	sbc.w	r5, r5, r3
 80a5aa4:	085b      	lsrs	r3, r3, #1
 80a5aa6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5aaa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5aae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5ab2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5ab6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5aba:	bf22      	ittt	cs
 80a5abc:	1ab6      	subcs	r6, r6, r2
 80a5abe:	4675      	movcs	r5, lr
 80a5ac0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5ac4:	085b      	lsrs	r3, r3, #1
 80a5ac6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5aca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5ace:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5ad2:	bf22      	ittt	cs
 80a5ad4:	1ab6      	subcs	r6, r6, r2
 80a5ad6:	4675      	movcs	r5, lr
 80a5ad8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5adc:	085b      	lsrs	r3, r3, #1
 80a5ade:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5ae2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5ae6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5aea:	bf22      	ittt	cs
 80a5aec:	1ab6      	subcs	r6, r6, r2
 80a5aee:	4675      	movcs	r5, lr
 80a5af0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5af4:	085b      	lsrs	r3, r3, #1
 80a5af6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5afa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5afe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5b02:	bf22      	ittt	cs
 80a5b04:	1ab6      	subcs	r6, r6, r2
 80a5b06:	4675      	movcs	r5, lr
 80a5b08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5b0c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5b10:	d018      	beq.n	80a5b44 <__aeabi_ddiv+0x114>
 80a5b12:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5b16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5b1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5b1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5b22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5b26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5b2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5b2e:	d1c0      	bne.n	80a5ab2 <__aeabi_ddiv+0x82>
 80a5b30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5b34:	d10b      	bne.n	80a5b4e <__aeabi_ddiv+0x11e>
 80a5b36:	ea41 0100 	orr.w	r1, r1, r0
 80a5b3a:	f04f 0000 	mov.w	r0, #0
 80a5b3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5b42:	e7b6      	b.n	80a5ab2 <__aeabi_ddiv+0x82>
 80a5b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5b48:	bf04      	itt	eq
 80a5b4a:	4301      	orreq	r1, r0
 80a5b4c:	2000      	moveq	r0, #0
 80a5b4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5b52:	bf88      	it	hi
 80a5b54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5b58:	f63f aeaf 	bhi.w	80a58ba <__aeabi_dmul+0xde>
 80a5b5c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5b60:	bf04      	itt	eq
 80a5b62:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5b66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5b6a:	f150 0000 	adcs.w	r0, r0, #0
 80a5b6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5b72:	bd70      	pop	{r4, r5, r6, pc}
 80a5b74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5b78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5b7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5b80:	bfc2      	ittt	gt
 80a5b82:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5b86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5b8a:	bd70      	popgt	{r4, r5, r6, pc}
 80a5b8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5b90:	f04f 0e00 	mov.w	lr, #0
 80a5b94:	3c01      	subs	r4, #1
 80a5b96:	e690      	b.n	80a58ba <__aeabi_dmul+0xde>
 80a5b98:	ea45 0e06 	orr.w	lr, r5, r6
 80a5b9c:	e68d      	b.n	80a58ba <__aeabi_dmul+0xde>
 80a5b9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5ba2:	ea94 0f0c 	teq	r4, ip
 80a5ba6:	bf08      	it	eq
 80a5ba8:	ea95 0f0c 	teqeq	r5, ip
 80a5bac:	f43f af3b 	beq.w	80a5a26 <__aeabi_dmul+0x24a>
 80a5bb0:	ea94 0f0c 	teq	r4, ip
 80a5bb4:	d10a      	bne.n	80a5bcc <__aeabi_ddiv+0x19c>
 80a5bb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5bba:	f47f af34 	bne.w	80a5a26 <__aeabi_dmul+0x24a>
 80a5bbe:	ea95 0f0c 	teq	r5, ip
 80a5bc2:	f47f af25 	bne.w	80a5a10 <__aeabi_dmul+0x234>
 80a5bc6:	4610      	mov	r0, r2
 80a5bc8:	4619      	mov	r1, r3
 80a5bca:	e72c      	b.n	80a5a26 <__aeabi_dmul+0x24a>
 80a5bcc:	ea95 0f0c 	teq	r5, ip
 80a5bd0:	d106      	bne.n	80a5be0 <__aeabi_ddiv+0x1b0>
 80a5bd2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5bd6:	f43f aefd 	beq.w	80a59d4 <__aeabi_dmul+0x1f8>
 80a5bda:	4610      	mov	r0, r2
 80a5bdc:	4619      	mov	r1, r3
 80a5bde:	e722      	b.n	80a5a26 <__aeabi_dmul+0x24a>
 80a5be0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5be4:	bf18      	it	ne
 80a5be6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5bea:	f47f aec5 	bne.w	80a5978 <__aeabi_dmul+0x19c>
 80a5bee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5bf2:	f47f af0d 	bne.w	80a5a10 <__aeabi_dmul+0x234>
 80a5bf6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5bfa:	f47f aeeb 	bne.w	80a59d4 <__aeabi_dmul+0x1f8>
 80a5bfe:	e712      	b.n	80a5a26 <__aeabi_dmul+0x24a>

080a5c00 <__gedf2>:
 80a5c00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a5c04:	e006      	b.n	80a5c14 <__cmpdf2+0x4>
 80a5c06:	bf00      	nop

080a5c08 <__ledf2>:
 80a5c08:	f04f 0c01 	mov.w	ip, #1
 80a5c0c:	e002      	b.n	80a5c14 <__cmpdf2+0x4>
 80a5c0e:	bf00      	nop

080a5c10 <__cmpdf2>:
 80a5c10:	f04f 0c01 	mov.w	ip, #1
 80a5c14:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5c18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5c1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5c20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5c24:	bf18      	it	ne
 80a5c26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5c2a:	d01b      	beq.n	80a5c64 <__cmpdf2+0x54>
 80a5c2c:	b001      	add	sp, #4
 80a5c2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5c32:	bf0c      	ite	eq
 80a5c34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5c38:	ea91 0f03 	teqne	r1, r3
 80a5c3c:	bf02      	ittt	eq
 80a5c3e:	ea90 0f02 	teqeq	r0, r2
 80a5c42:	2000      	moveq	r0, #0
 80a5c44:	4770      	bxeq	lr
 80a5c46:	f110 0f00 	cmn.w	r0, #0
 80a5c4a:	ea91 0f03 	teq	r1, r3
 80a5c4e:	bf58      	it	pl
 80a5c50:	4299      	cmppl	r1, r3
 80a5c52:	bf08      	it	eq
 80a5c54:	4290      	cmpeq	r0, r2
 80a5c56:	bf2c      	ite	cs
 80a5c58:	17d8      	asrcs	r0, r3, #31
 80a5c5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5c5e:	f040 0001 	orr.w	r0, r0, #1
 80a5c62:	4770      	bx	lr
 80a5c64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5c6c:	d102      	bne.n	80a5c74 <__cmpdf2+0x64>
 80a5c6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5c72:	d107      	bne.n	80a5c84 <__cmpdf2+0x74>
 80a5c74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5c78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5c7c:	d1d6      	bne.n	80a5c2c <__cmpdf2+0x1c>
 80a5c7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5c82:	d0d3      	beq.n	80a5c2c <__cmpdf2+0x1c>
 80a5c84:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5c88:	4770      	bx	lr
 80a5c8a:	bf00      	nop

080a5c8c <__aeabi_cdrcmple>:
 80a5c8c:	4684      	mov	ip, r0
 80a5c8e:	4610      	mov	r0, r2
 80a5c90:	4662      	mov	r2, ip
 80a5c92:	468c      	mov	ip, r1
 80a5c94:	4619      	mov	r1, r3
 80a5c96:	4663      	mov	r3, ip
 80a5c98:	e000      	b.n	80a5c9c <__aeabi_cdcmpeq>
 80a5c9a:	bf00      	nop

080a5c9c <__aeabi_cdcmpeq>:
 80a5c9c:	b501      	push	{r0, lr}
 80a5c9e:	f7ff ffb7 	bl	80a5c10 <__cmpdf2>
 80a5ca2:	2800      	cmp	r0, #0
 80a5ca4:	bf48      	it	mi
 80a5ca6:	f110 0f00 	cmnmi.w	r0, #0
 80a5caa:	bd01      	pop	{r0, pc}

080a5cac <__aeabi_dcmpeq>:
 80a5cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5cb0:	f7ff fff4 	bl	80a5c9c <__aeabi_cdcmpeq>
 80a5cb4:	bf0c      	ite	eq
 80a5cb6:	2001      	moveq	r0, #1
 80a5cb8:	2000      	movne	r0, #0
 80a5cba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5cbe:	bf00      	nop

080a5cc0 <__aeabi_dcmplt>:
 80a5cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5cc4:	f7ff ffea 	bl	80a5c9c <__aeabi_cdcmpeq>
 80a5cc8:	bf34      	ite	cc
 80a5cca:	2001      	movcc	r0, #1
 80a5ccc:	2000      	movcs	r0, #0
 80a5cce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5cd2:	bf00      	nop

080a5cd4 <__aeabi_dcmple>:
 80a5cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5cd8:	f7ff ffe0 	bl	80a5c9c <__aeabi_cdcmpeq>
 80a5cdc:	bf94      	ite	ls
 80a5cde:	2001      	movls	r0, #1
 80a5ce0:	2000      	movhi	r0, #0
 80a5ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ce6:	bf00      	nop

080a5ce8 <__aeabi_dcmpge>:
 80a5ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5cec:	f7ff ffce 	bl	80a5c8c <__aeabi_cdrcmple>
 80a5cf0:	bf94      	ite	ls
 80a5cf2:	2001      	movls	r0, #1
 80a5cf4:	2000      	movhi	r0, #0
 80a5cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5cfa:	bf00      	nop

080a5cfc <__aeabi_dcmpgt>:
 80a5cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5d00:	f7ff ffc4 	bl	80a5c8c <__aeabi_cdrcmple>
 80a5d04:	bf34      	ite	cc
 80a5d06:	2001      	movcc	r0, #1
 80a5d08:	2000      	movcs	r0, #0
 80a5d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5d0e:	bf00      	nop

080a5d10 <__aeabi_d2iz>:
 80a5d10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5d14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5d18:	d215      	bcs.n	80a5d46 <__aeabi_d2iz+0x36>
 80a5d1a:	d511      	bpl.n	80a5d40 <__aeabi_d2iz+0x30>
 80a5d1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5d20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5d24:	d912      	bls.n	80a5d4c <__aeabi_d2iz+0x3c>
 80a5d26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5d2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5d32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5d36:	fa23 f002 	lsr.w	r0, r3, r2
 80a5d3a:	bf18      	it	ne
 80a5d3c:	4240      	negne	r0, r0
 80a5d3e:	4770      	bx	lr
 80a5d40:	f04f 0000 	mov.w	r0, #0
 80a5d44:	4770      	bx	lr
 80a5d46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5d4a:	d105      	bne.n	80a5d58 <__aeabi_d2iz+0x48>
 80a5d4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5d50:	bf08      	it	eq
 80a5d52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5d56:	4770      	bx	lr
 80a5d58:	f04f 0000 	mov.w	r0, #0
 80a5d5c:	4770      	bx	lr
 80a5d5e:	bf00      	nop

080a5d60 <__aeabi_d2uiz>:
 80a5d60:	004a      	lsls	r2, r1, #1
 80a5d62:	d211      	bcs.n	80a5d88 <__aeabi_d2uiz+0x28>
 80a5d64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5d68:	d211      	bcs.n	80a5d8e <__aeabi_d2uiz+0x2e>
 80a5d6a:	d50d      	bpl.n	80a5d88 <__aeabi_d2uiz+0x28>
 80a5d6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5d70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5d74:	d40e      	bmi.n	80a5d94 <__aeabi_d2uiz+0x34>
 80a5d76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5d7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5d7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5d82:	fa23 f002 	lsr.w	r0, r3, r2
 80a5d86:	4770      	bx	lr
 80a5d88:	f04f 0000 	mov.w	r0, #0
 80a5d8c:	4770      	bx	lr
 80a5d8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5d92:	d102      	bne.n	80a5d9a <__aeabi_d2uiz+0x3a>
 80a5d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a5d98:	4770      	bx	lr
 80a5d9a:	f04f 0000 	mov.w	r0, #0
 80a5d9e:	4770      	bx	lr

080a5da0 <__aeabi_d2f>:
 80a5da0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5da4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a5da8:	bf24      	itt	cs
 80a5daa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5dae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5db2:	d90d      	bls.n	80a5dd0 <__aeabi_d2f+0x30>
 80a5db4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5db8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5dbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5dc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5dc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5dc8:	bf08      	it	eq
 80a5dca:	f020 0001 	biceq.w	r0, r0, #1
 80a5dce:	4770      	bx	lr
 80a5dd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5dd4:	d121      	bne.n	80a5e1a <__aeabi_d2f+0x7a>
 80a5dd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5dda:	bfbc      	itt	lt
 80a5ddc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5de0:	4770      	bxlt	lr
 80a5de2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5de6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5dea:	f1c2 0218 	rsb	r2, r2, #24
 80a5dee:	f1c2 0c20 	rsb	ip, r2, #32
 80a5df2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5df6:	fa20 f002 	lsr.w	r0, r0, r2
 80a5dfa:	bf18      	it	ne
 80a5dfc:	f040 0001 	orrne.w	r0, r0, #1
 80a5e00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5e04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5e08:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5e0c:	ea40 000c 	orr.w	r0, r0, ip
 80a5e10:	fa23 f302 	lsr.w	r3, r3, r2
 80a5e14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5e18:	e7cc      	b.n	80a5db4 <__aeabi_d2f+0x14>
 80a5e1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5e1e:	d107      	bne.n	80a5e30 <__aeabi_d2f+0x90>
 80a5e20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5e24:	bf1e      	ittt	ne
 80a5e26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5e2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5e2e:	4770      	bxne	lr
 80a5e30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5e34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5e38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5e3c:	4770      	bx	lr
 80a5e3e:	bf00      	nop

080a5e40 <__aeabi_frsub>:
 80a5e40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5e44:	e002      	b.n	80a5e4c <__addsf3>
 80a5e46:	bf00      	nop

080a5e48 <__aeabi_fsub>:
 80a5e48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5e4c <__addsf3>:
 80a5e4c:	0042      	lsls	r2, r0, #1
 80a5e4e:	bf1f      	itttt	ne
 80a5e50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5e54:	ea92 0f03 	teqne	r2, r3
 80a5e58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5e5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5e60:	d06a      	beq.n	80a5f38 <__addsf3+0xec>
 80a5e62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5e66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5e6a:	bfc1      	itttt	gt
 80a5e6c:	18d2      	addgt	r2, r2, r3
 80a5e6e:	4041      	eorgt	r1, r0
 80a5e70:	4048      	eorgt	r0, r1
 80a5e72:	4041      	eorgt	r1, r0
 80a5e74:	bfb8      	it	lt
 80a5e76:	425b      	neglt	r3, r3
 80a5e78:	2b19      	cmp	r3, #25
 80a5e7a:	bf88      	it	hi
 80a5e7c:	4770      	bxhi	lr
 80a5e7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5e82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5e86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5e8a:	bf18      	it	ne
 80a5e8c:	4240      	negne	r0, r0
 80a5e8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5e92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5e96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5e9a:	bf18      	it	ne
 80a5e9c:	4249      	negne	r1, r1
 80a5e9e:	ea92 0f03 	teq	r2, r3
 80a5ea2:	d03f      	beq.n	80a5f24 <__addsf3+0xd8>
 80a5ea4:	f1a2 0201 	sub.w	r2, r2, #1
 80a5ea8:	fa41 fc03 	asr.w	ip, r1, r3
 80a5eac:	eb10 000c 	adds.w	r0, r0, ip
 80a5eb0:	f1c3 0320 	rsb	r3, r3, #32
 80a5eb4:	fa01 f103 	lsl.w	r1, r1, r3
 80a5eb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5ebc:	d502      	bpl.n	80a5ec4 <__addsf3+0x78>
 80a5ebe:	4249      	negs	r1, r1
 80a5ec0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5ec4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5ec8:	d313      	bcc.n	80a5ef2 <__addsf3+0xa6>
 80a5eca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5ece:	d306      	bcc.n	80a5ede <__addsf3+0x92>
 80a5ed0:	0840      	lsrs	r0, r0, #1
 80a5ed2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5ed6:	f102 0201 	add.w	r2, r2, #1
 80a5eda:	2afe      	cmp	r2, #254	; 0xfe
 80a5edc:	d251      	bcs.n	80a5f82 <__addsf3+0x136>
 80a5ede:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5ee2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5ee6:	bf08      	it	eq
 80a5ee8:	f020 0001 	biceq.w	r0, r0, #1
 80a5eec:	ea40 0003 	orr.w	r0, r0, r3
 80a5ef0:	4770      	bx	lr
 80a5ef2:	0049      	lsls	r1, r1, #1
 80a5ef4:	eb40 0000 	adc.w	r0, r0, r0
 80a5ef8:	3a01      	subs	r2, #1
 80a5efa:	bf28      	it	cs
 80a5efc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a5f00:	d2ed      	bcs.n	80a5ede <__addsf3+0x92>
 80a5f02:	fab0 fc80 	clz	ip, r0
 80a5f06:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5f0a:	ebb2 020c 	subs.w	r2, r2, ip
 80a5f0e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5f12:	bfaa      	itet	ge
 80a5f14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5f18:	4252      	neglt	r2, r2
 80a5f1a:	4318      	orrge	r0, r3
 80a5f1c:	bfbc      	itt	lt
 80a5f1e:	40d0      	lsrlt	r0, r2
 80a5f20:	4318      	orrlt	r0, r3
 80a5f22:	4770      	bx	lr
 80a5f24:	f092 0f00 	teq	r2, #0
 80a5f28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5f2c:	bf06      	itte	eq
 80a5f2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5f32:	3201      	addeq	r2, #1
 80a5f34:	3b01      	subne	r3, #1
 80a5f36:	e7b5      	b.n	80a5ea4 <__addsf3+0x58>
 80a5f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5f40:	bf18      	it	ne
 80a5f42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5f46:	d021      	beq.n	80a5f8c <__addsf3+0x140>
 80a5f48:	ea92 0f03 	teq	r2, r3
 80a5f4c:	d004      	beq.n	80a5f58 <__addsf3+0x10c>
 80a5f4e:	f092 0f00 	teq	r2, #0
 80a5f52:	bf08      	it	eq
 80a5f54:	4608      	moveq	r0, r1
 80a5f56:	4770      	bx	lr
 80a5f58:	ea90 0f01 	teq	r0, r1
 80a5f5c:	bf1c      	itt	ne
 80a5f5e:	2000      	movne	r0, #0
 80a5f60:	4770      	bxne	lr
 80a5f62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5f66:	d104      	bne.n	80a5f72 <__addsf3+0x126>
 80a5f68:	0040      	lsls	r0, r0, #1
 80a5f6a:	bf28      	it	cs
 80a5f6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5f70:	4770      	bx	lr
 80a5f72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5f76:	bf3c      	itt	cc
 80a5f78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5f7c:	4770      	bxcc	lr
 80a5f7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5f82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5f86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5f8a:	4770      	bx	lr
 80a5f8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5f90:	bf16      	itet	ne
 80a5f92:	4608      	movne	r0, r1
 80a5f94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5f98:	4601      	movne	r1, r0
 80a5f9a:	0242      	lsls	r2, r0, #9
 80a5f9c:	bf06      	itte	eq
 80a5f9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5fa2:	ea90 0f01 	teqeq	r0, r1
 80a5fa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5faa:	4770      	bx	lr

080a5fac <__aeabi_ui2f>:
 80a5fac:	f04f 0300 	mov.w	r3, #0
 80a5fb0:	e004      	b.n	80a5fbc <__aeabi_i2f+0x8>
 80a5fb2:	bf00      	nop

080a5fb4 <__aeabi_i2f>:
 80a5fb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5fb8:	bf48      	it	mi
 80a5fba:	4240      	negmi	r0, r0
 80a5fbc:	ea5f 0c00 	movs.w	ip, r0
 80a5fc0:	bf08      	it	eq
 80a5fc2:	4770      	bxeq	lr
 80a5fc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5fc8:	4601      	mov	r1, r0
 80a5fca:	f04f 0000 	mov.w	r0, #0
 80a5fce:	e01c      	b.n	80a600a <__aeabi_l2f+0x2a>

080a5fd0 <__aeabi_ul2f>:
 80a5fd0:	ea50 0201 	orrs.w	r2, r0, r1
 80a5fd4:	bf08      	it	eq
 80a5fd6:	4770      	bxeq	lr
 80a5fd8:	f04f 0300 	mov.w	r3, #0
 80a5fdc:	e00a      	b.n	80a5ff4 <__aeabi_l2f+0x14>
 80a5fde:	bf00      	nop

080a5fe0 <__aeabi_l2f>:
 80a5fe0:	ea50 0201 	orrs.w	r2, r0, r1
 80a5fe4:	bf08      	it	eq
 80a5fe6:	4770      	bxeq	lr
 80a5fe8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5fec:	d502      	bpl.n	80a5ff4 <__aeabi_l2f+0x14>
 80a5fee:	4240      	negs	r0, r0
 80a5ff0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5ff4:	ea5f 0c01 	movs.w	ip, r1
 80a5ff8:	bf02      	ittt	eq
 80a5ffa:	4684      	moveq	ip, r0
 80a5ffc:	4601      	moveq	r1, r0
 80a5ffe:	2000      	moveq	r0, #0
 80a6000:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6004:	bf08      	it	eq
 80a6006:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a600a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a600e:	fabc f28c 	clz	r2, ip
 80a6012:	3a08      	subs	r2, #8
 80a6014:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a6018:	db10      	blt.n	80a603c <__aeabi_l2f+0x5c>
 80a601a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a601e:	4463      	add	r3, ip
 80a6020:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6024:	f1c2 0220 	rsb	r2, r2, #32
 80a6028:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a602c:	fa20 f202 	lsr.w	r2, r0, r2
 80a6030:	eb43 0002 	adc.w	r0, r3, r2
 80a6034:	bf08      	it	eq
 80a6036:	f020 0001 	biceq.w	r0, r0, #1
 80a603a:	4770      	bx	lr
 80a603c:	f102 0220 	add.w	r2, r2, #32
 80a6040:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6044:	f1c2 0220 	rsb	r2, r2, #32
 80a6048:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a604c:	fa21 f202 	lsr.w	r2, r1, r2
 80a6050:	eb43 0002 	adc.w	r0, r3, r2
 80a6054:	bf08      	it	eq
 80a6056:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a605a:	4770      	bx	lr

080a605c <__aeabi_fmul>:
 80a605c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6060:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6064:	bf1e      	ittt	ne
 80a6066:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a606a:	ea92 0f0c 	teqne	r2, ip
 80a606e:	ea93 0f0c 	teqne	r3, ip
 80a6072:	d06f      	beq.n	80a6154 <__aeabi_fmul+0xf8>
 80a6074:	441a      	add	r2, r3
 80a6076:	ea80 0c01 	eor.w	ip, r0, r1
 80a607a:	0240      	lsls	r0, r0, #9
 80a607c:	bf18      	it	ne
 80a607e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a6082:	d01e      	beq.n	80a60c2 <__aeabi_fmul+0x66>
 80a6084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a6088:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a608c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a6090:	fba0 3101 	umull	r3, r1, r0, r1
 80a6094:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6098:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a609c:	bf3e      	ittt	cc
 80a609e:	0049      	lslcc	r1, r1, #1
 80a60a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a60a4:	005b      	lslcc	r3, r3, #1
 80a60a6:	ea40 0001 	orr.w	r0, r0, r1
 80a60aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a60ae:	2afd      	cmp	r2, #253	; 0xfd
 80a60b0:	d81d      	bhi.n	80a60ee <__aeabi_fmul+0x92>
 80a60b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a60b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a60ba:	bf08      	it	eq
 80a60bc:	f020 0001 	biceq.w	r0, r0, #1
 80a60c0:	4770      	bx	lr
 80a60c2:	f090 0f00 	teq	r0, #0
 80a60c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a60ca:	bf08      	it	eq
 80a60cc:	0249      	lsleq	r1, r1, #9
 80a60ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a60d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a60d6:	3a7f      	subs	r2, #127	; 0x7f
 80a60d8:	bfc2      	ittt	gt
 80a60da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a60de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a60e2:	4770      	bxgt	lr
 80a60e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a60e8:	f04f 0300 	mov.w	r3, #0
 80a60ec:	3a01      	subs	r2, #1
 80a60ee:	dc5d      	bgt.n	80a61ac <__aeabi_fmul+0x150>
 80a60f0:	f112 0f19 	cmn.w	r2, #25
 80a60f4:	bfdc      	itt	le
 80a60f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a60fa:	4770      	bxle	lr
 80a60fc:	f1c2 0200 	rsb	r2, r2, #0
 80a6100:	0041      	lsls	r1, r0, #1
 80a6102:	fa21 f102 	lsr.w	r1, r1, r2
 80a6106:	f1c2 0220 	rsb	r2, r2, #32
 80a610a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a610e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a6112:	f140 0000 	adc.w	r0, r0, #0
 80a6116:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a611a:	bf08      	it	eq
 80a611c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6120:	4770      	bx	lr
 80a6122:	f092 0f00 	teq	r2, #0
 80a6126:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a612a:	bf02      	ittt	eq
 80a612c:	0040      	lsleq	r0, r0, #1
 80a612e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6132:	3a01      	subeq	r2, #1
 80a6134:	d0f9      	beq.n	80a612a <__aeabi_fmul+0xce>
 80a6136:	ea40 000c 	orr.w	r0, r0, ip
 80a613a:	f093 0f00 	teq	r3, #0
 80a613e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6142:	bf02      	ittt	eq
 80a6144:	0049      	lsleq	r1, r1, #1
 80a6146:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a614a:	3b01      	subeq	r3, #1
 80a614c:	d0f9      	beq.n	80a6142 <__aeabi_fmul+0xe6>
 80a614e:	ea41 010c 	orr.w	r1, r1, ip
 80a6152:	e78f      	b.n	80a6074 <__aeabi_fmul+0x18>
 80a6154:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6158:	ea92 0f0c 	teq	r2, ip
 80a615c:	bf18      	it	ne
 80a615e:	ea93 0f0c 	teqne	r3, ip
 80a6162:	d00a      	beq.n	80a617a <__aeabi_fmul+0x11e>
 80a6164:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6168:	bf18      	it	ne
 80a616a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a616e:	d1d8      	bne.n	80a6122 <__aeabi_fmul+0xc6>
 80a6170:	ea80 0001 	eor.w	r0, r0, r1
 80a6174:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6178:	4770      	bx	lr
 80a617a:	f090 0f00 	teq	r0, #0
 80a617e:	bf17      	itett	ne
 80a6180:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a6184:	4608      	moveq	r0, r1
 80a6186:	f091 0f00 	teqne	r1, #0
 80a618a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a618e:	d014      	beq.n	80a61ba <__aeabi_fmul+0x15e>
 80a6190:	ea92 0f0c 	teq	r2, ip
 80a6194:	d101      	bne.n	80a619a <__aeabi_fmul+0x13e>
 80a6196:	0242      	lsls	r2, r0, #9
 80a6198:	d10f      	bne.n	80a61ba <__aeabi_fmul+0x15e>
 80a619a:	ea93 0f0c 	teq	r3, ip
 80a619e:	d103      	bne.n	80a61a8 <__aeabi_fmul+0x14c>
 80a61a0:	024b      	lsls	r3, r1, #9
 80a61a2:	bf18      	it	ne
 80a61a4:	4608      	movne	r0, r1
 80a61a6:	d108      	bne.n	80a61ba <__aeabi_fmul+0x15e>
 80a61a8:	ea80 0001 	eor.w	r0, r0, r1
 80a61ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a61b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a61b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a61b8:	4770      	bx	lr
 80a61ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a61be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a61c2:	4770      	bx	lr

080a61c4 <__aeabi_fdiv>:
 80a61c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a61c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a61cc:	bf1e      	ittt	ne
 80a61ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a61d2:	ea92 0f0c 	teqne	r2, ip
 80a61d6:	ea93 0f0c 	teqne	r3, ip
 80a61da:	d069      	beq.n	80a62b0 <__aeabi_fdiv+0xec>
 80a61dc:	eba2 0203 	sub.w	r2, r2, r3
 80a61e0:	ea80 0c01 	eor.w	ip, r0, r1
 80a61e4:	0249      	lsls	r1, r1, #9
 80a61e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a61ea:	d037      	beq.n	80a625c <__aeabi_fdiv+0x98>
 80a61ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a61f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a61f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a61f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a61fc:	428b      	cmp	r3, r1
 80a61fe:	bf38      	it	cc
 80a6200:	005b      	lslcc	r3, r3, #1
 80a6202:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a6206:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a620a:	428b      	cmp	r3, r1
 80a620c:	bf24      	itt	cs
 80a620e:	1a5b      	subcs	r3, r3, r1
 80a6210:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6214:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6218:	bf24      	itt	cs
 80a621a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a621e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6222:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a6226:	bf24      	itt	cs
 80a6228:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a622c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6230:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6234:	bf24      	itt	cs
 80a6236:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a623a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a623e:	011b      	lsls	r3, r3, #4
 80a6240:	bf18      	it	ne
 80a6242:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a6246:	d1e0      	bne.n	80a620a <__aeabi_fdiv+0x46>
 80a6248:	2afd      	cmp	r2, #253	; 0xfd
 80a624a:	f63f af50 	bhi.w	80a60ee <__aeabi_fmul+0x92>
 80a624e:	428b      	cmp	r3, r1
 80a6250:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6254:	bf08      	it	eq
 80a6256:	f020 0001 	biceq.w	r0, r0, #1
 80a625a:	4770      	bx	lr
 80a625c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6260:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6264:	327f      	adds	r2, #127	; 0x7f
 80a6266:	bfc2      	ittt	gt
 80a6268:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a626c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6270:	4770      	bxgt	lr
 80a6272:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6276:	f04f 0300 	mov.w	r3, #0
 80a627a:	3a01      	subs	r2, #1
 80a627c:	e737      	b.n	80a60ee <__aeabi_fmul+0x92>
 80a627e:	f092 0f00 	teq	r2, #0
 80a6282:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a6286:	bf02      	ittt	eq
 80a6288:	0040      	lsleq	r0, r0, #1
 80a628a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a628e:	3a01      	subeq	r2, #1
 80a6290:	d0f9      	beq.n	80a6286 <__aeabi_fdiv+0xc2>
 80a6292:	ea40 000c 	orr.w	r0, r0, ip
 80a6296:	f093 0f00 	teq	r3, #0
 80a629a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a629e:	bf02      	ittt	eq
 80a62a0:	0049      	lsleq	r1, r1, #1
 80a62a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a62a6:	3b01      	subeq	r3, #1
 80a62a8:	d0f9      	beq.n	80a629e <__aeabi_fdiv+0xda>
 80a62aa:	ea41 010c 	orr.w	r1, r1, ip
 80a62ae:	e795      	b.n	80a61dc <__aeabi_fdiv+0x18>
 80a62b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a62b4:	ea92 0f0c 	teq	r2, ip
 80a62b8:	d108      	bne.n	80a62cc <__aeabi_fdiv+0x108>
 80a62ba:	0242      	lsls	r2, r0, #9
 80a62bc:	f47f af7d 	bne.w	80a61ba <__aeabi_fmul+0x15e>
 80a62c0:	ea93 0f0c 	teq	r3, ip
 80a62c4:	f47f af70 	bne.w	80a61a8 <__aeabi_fmul+0x14c>
 80a62c8:	4608      	mov	r0, r1
 80a62ca:	e776      	b.n	80a61ba <__aeabi_fmul+0x15e>
 80a62cc:	ea93 0f0c 	teq	r3, ip
 80a62d0:	d104      	bne.n	80a62dc <__aeabi_fdiv+0x118>
 80a62d2:	024b      	lsls	r3, r1, #9
 80a62d4:	f43f af4c 	beq.w	80a6170 <__aeabi_fmul+0x114>
 80a62d8:	4608      	mov	r0, r1
 80a62da:	e76e      	b.n	80a61ba <__aeabi_fmul+0x15e>
 80a62dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a62e0:	bf18      	it	ne
 80a62e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a62e6:	d1ca      	bne.n	80a627e <__aeabi_fdiv+0xba>
 80a62e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a62ec:	f47f af5c 	bne.w	80a61a8 <__aeabi_fmul+0x14c>
 80a62f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a62f4:	f47f af3c 	bne.w	80a6170 <__aeabi_fmul+0x114>
 80a62f8:	e75f      	b.n	80a61ba <__aeabi_fmul+0x15e>
 80a62fa:	bf00      	nop

080a62fc <__gesf2>:
 80a62fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a6300:	e006      	b.n	80a6310 <__cmpsf2+0x4>
 80a6302:	bf00      	nop

080a6304 <__lesf2>:
 80a6304:	f04f 0c01 	mov.w	ip, #1
 80a6308:	e002      	b.n	80a6310 <__cmpsf2+0x4>
 80a630a:	bf00      	nop

080a630c <__cmpsf2>:
 80a630c:	f04f 0c01 	mov.w	ip, #1
 80a6310:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6314:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6318:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a631c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6320:	bf18      	it	ne
 80a6322:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6326:	d011      	beq.n	80a634c <__cmpsf2+0x40>
 80a6328:	b001      	add	sp, #4
 80a632a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a632e:	bf18      	it	ne
 80a6330:	ea90 0f01 	teqne	r0, r1
 80a6334:	bf58      	it	pl
 80a6336:	ebb2 0003 	subspl.w	r0, r2, r3
 80a633a:	bf88      	it	hi
 80a633c:	17c8      	asrhi	r0, r1, #31
 80a633e:	bf38      	it	cc
 80a6340:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6344:	bf18      	it	ne
 80a6346:	f040 0001 	orrne.w	r0, r0, #1
 80a634a:	4770      	bx	lr
 80a634c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6350:	d102      	bne.n	80a6358 <__cmpsf2+0x4c>
 80a6352:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a6356:	d105      	bne.n	80a6364 <__cmpsf2+0x58>
 80a6358:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a635c:	d1e4      	bne.n	80a6328 <__cmpsf2+0x1c>
 80a635e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a6362:	d0e1      	beq.n	80a6328 <__cmpsf2+0x1c>
 80a6364:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6368:	4770      	bx	lr
 80a636a:	bf00      	nop

080a636c <__aeabi_cfrcmple>:
 80a636c:	4684      	mov	ip, r0
 80a636e:	4608      	mov	r0, r1
 80a6370:	4661      	mov	r1, ip
 80a6372:	e7ff      	b.n	80a6374 <__aeabi_cfcmpeq>

080a6374 <__aeabi_cfcmpeq>:
 80a6374:	b50f      	push	{r0, r1, r2, r3, lr}
 80a6376:	f7ff ffc9 	bl	80a630c <__cmpsf2>
 80a637a:	2800      	cmp	r0, #0
 80a637c:	bf48      	it	mi
 80a637e:	f110 0f00 	cmnmi.w	r0, #0
 80a6382:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a6384 <__aeabi_fcmpeq>:
 80a6384:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6388:	f7ff fff4 	bl	80a6374 <__aeabi_cfcmpeq>
 80a638c:	bf0c      	ite	eq
 80a638e:	2001      	moveq	r0, #1
 80a6390:	2000      	movne	r0, #0
 80a6392:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6396:	bf00      	nop

080a6398 <__aeabi_fcmplt>:
 80a6398:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a639c:	f7ff ffea 	bl	80a6374 <__aeabi_cfcmpeq>
 80a63a0:	bf34      	ite	cc
 80a63a2:	2001      	movcc	r0, #1
 80a63a4:	2000      	movcs	r0, #0
 80a63a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63aa:	bf00      	nop

080a63ac <__aeabi_fcmple>:
 80a63ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a63b0:	f7ff ffe0 	bl	80a6374 <__aeabi_cfcmpeq>
 80a63b4:	bf94      	ite	ls
 80a63b6:	2001      	movls	r0, #1
 80a63b8:	2000      	movhi	r0, #0
 80a63ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63be:	bf00      	nop

080a63c0 <__aeabi_fcmpge>:
 80a63c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a63c4:	f7ff ffd2 	bl	80a636c <__aeabi_cfrcmple>
 80a63c8:	bf94      	ite	ls
 80a63ca:	2001      	movls	r0, #1
 80a63cc:	2000      	movhi	r0, #0
 80a63ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63d2:	bf00      	nop

080a63d4 <__aeabi_fcmpgt>:
 80a63d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a63d8:	f7ff ffc8 	bl	80a636c <__aeabi_cfrcmple>
 80a63dc:	bf34      	ite	cc
 80a63de:	2001      	movcc	r0, #1
 80a63e0:	2000      	movcs	r0, #0
 80a63e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63e6:	bf00      	nop

080a63e8 <__aeabi_f2iz>:
 80a63e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a63ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a63f0:	d30f      	bcc.n	80a6412 <__aeabi_f2iz+0x2a>
 80a63f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a63f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a63fa:	d90d      	bls.n	80a6418 <__aeabi_f2iz+0x30>
 80a63fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a6400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6404:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6408:	fa23 f002 	lsr.w	r0, r3, r2
 80a640c:	bf18      	it	ne
 80a640e:	4240      	negne	r0, r0
 80a6410:	4770      	bx	lr
 80a6412:	f04f 0000 	mov.w	r0, #0
 80a6416:	4770      	bx	lr
 80a6418:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a641c:	d101      	bne.n	80a6422 <__aeabi_f2iz+0x3a>
 80a641e:	0242      	lsls	r2, r0, #9
 80a6420:	d105      	bne.n	80a642e <__aeabi_f2iz+0x46>
 80a6422:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a6426:	bf08      	it	eq
 80a6428:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a642c:	4770      	bx	lr
 80a642e:	f04f 0000 	mov.w	r0, #0
 80a6432:	4770      	bx	lr

080a6434 <__aeabi_f2lz>:
 80a6434:	b510      	push	{r4, lr}
 80a6436:	2100      	movs	r1, #0
 80a6438:	4604      	mov	r4, r0
 80a643a:	f7ff ffad 	bl	80a6398 <__aeabi_fcmplt>
 80a643e:	b920      	cbnz	r0, 80a644a <__aeabi_f2lz+0x16>
 80a6440:	4620      	mov	r0, r4
 80a6442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a6446:	f000 b809 	b.w	80a645c <__aeabi_f2ulz>
 80a644a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a644e:	f000 f805 	bl	80a645c <__aeabi_f2ulz>
 80a6452:	4240      	negs	r0, r0
 80a6454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6458:	bd10      	pop	{r4, pc}
 80a645a:	bf00      	nop

080a645c <__aeabi_f2ulz>:
 80a645c:	b5d0      	push	{r4, r6, r7, lr}
 80a645e:	f7ff f965 	bl	80a572c <__aeabi_f2d>
 80a6462:	2200      	movs	r2, #0
 80a6464:	4b0b      	ldr	r3, [pc, #44]	; (80a6494 <__aeabi_f2ulz+0x38>)
 80a6466:	4606      	mov	r6, r0
 80a6468:	460f      	mov	r7, r1
 80a646a:	f7ff f9b7 	bl	80a57dc <__aeabi_dmul>
 80a646e:	f7ff fc77 	bl	80a5d60 <__aeabi_d2uiz>
 80a6472:	4604      	mov	r4, r0
 80a6474:	f7ff f938 	bl	80a56e8 <__aeabi_ui2d>
 80a6478:	2200      	movs	r2, #0
 80a647a:	4b07      	ldr	r3, [pc, #28]	; (80a6498 <__aeabi_f2ulz+0x3c>)
 80a647c:	f7ff f9ae 	bl	80a57dc <__aeabi_dmul>
 80a6480:	4602      	mov	r2, r0
 80a6482:	460b      	mov	r3, r1
 80a6484:	4630      	mov	r0, r6
 80a6486:	4639      	mov	r1, r7
 80a6488:	f7fe fff0 	bl	80a546c <__aeabi_dsub>
 80a648c:	f7ff fc68 	bl	80a5d60 <__aeabi_d2uiz>
 80a6490:	4621      	mov	r1, r4
 80a6492:	bdd0      	pop	{r4, r6, r7, pc}
 80a6494:	3df00000 	.word	0x3df00000
 80a6498:	41f00000 	.word	0x41f00000

080a649c <__aeabi_d2ulz>:
 80a649c:	b5d0      	push	{r4, r6, r7, lr}
 80a649e:	2200      	movs	r2, #0
 80a64a0:	4b0b      	ldr	r3, [pc, #44]	; (80a64d0 <__aeabi_d2ulz+0x34>)
 80a64a2:	4606      	mov	r6, r0
 80a64a4:	460f      	mov	r7, r1
 80a64a6:	f7ff f999 	bl	80a57dc <__aeabi_dmul>
 80a64aa:	f7ff fc59 	bl	80a5d60 <__aeabi_d2uiz>
 80a64ae:	4604      	mov	r4, r0
 80a64b0:	f7ff f91a 	bl	80a56e8 <__aeabi_ui2d>
 80a64b4:	2200      	movs	r2, #0
 80a64b6:	4b07      	ldr	r3, [pc, #28]	; (80a64d4 <__aeabi_d2ulz+0x38>)
 80a64b8:	f7ff f990 	bl	80a57dc <__aeabi_dmul>
 80a64bc:	4602      	mov	r2, r0
 80a64be:	460b      	mov	r3, r1
 80a64c0:	4630      	mov	r0, r6
 80a64c2:	4639      	mov	r1, r7
 80a64c4:	f7fe ffd2 	bl	80a546c <__aeabi_dsub>
 80a64c8:	f7ff fc4a 	bl	80a5d60 <__aeabi_d2uiz>
 80a64cc:	4621      	mov	r1, r4
 80a64ce:	bdd0      	pop	{r4, r6, r7, pc}
 80a64d0:	3df00000 	.word	0x3df00000
 80a64d4:	41f00000 	.word	0x41f00000

080a64d8 <__udivmoddi4>:
 80a64d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a64dc:	9e08      	ldr	r6, [sp, #32]
 80a64de:	460d      	mov	r5, r1
 80a64e0:	4604      	mov	r4, r0
 80a64e2:	4688      	mov	r8, r1
 80a64e4:	2b00      	cmp	r3, #0
 80a64e6:	d14d      	bne.n	80a6584 <__udivmoddi4+0xac>
 80a64e8:	428a      	cmp	r2, r1
 80a64ea:	4694      	mov	ip, r2
 80a64ec:	d968      	bls.n	80a65c0 <__udivmoddi4+0xe8>
 80a64ee:	fab2 f282 	clz	r2, r2
 80a64f2:	b152      	cbz	r2, 80a650a <__udivmoddi4+0x32>
 80a64f4:	fa01 f302 	lsl.w	r3, r1, r2
 80a64f8:	f1c2 0120 	rsb	r1, r2, #32
 80a64fc:	fa20 f101 	lsr.w	r1, r0, r1
 80a6500:	fa0c fc02 	lsl.w	ip, ip, r2
 80a6504:	ea41 0803 	orr.w	r8, r1, r3
 80a6508:	4094      	lsls	r4, r2
 80a650a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80a650e:	fbb8 f7f1 	udiv	r7, r8, r1
 80a6512:	fa1f fe8c 	uxth.w	lr, ip
 80a6516:	fb01 8817 	mls	r8, r1, r7, r8
 80a651a:	fb07 f00e 	mul.w	r0, r7, lr
 80a651e:	0c23      	lsrs	r3, r4, #16
 80a6520:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a6524:	4298      	cmp	r0, r3
 80a6526:	d90a      	bls.n	80a653e <__udivmoddi4+0x66>
 80a6528:	eb1c 0303 	adds.w	r3, ip, r3
 80a652c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80a6530:	f080 811e 	bcs.w	80a6770 <__udivmoddi4+0x298>
 80a6534:	4298      	cmp	r0, r3
 80a6536:	f240 811b 	bls.w	80a6770 <__udivmoddi4+0x298>
 80a653a:	3f02      	subs	r7, #2
 80a653c:	4463      	add	r3, ip
 80a653e:	1a1b      	subs	r3, r3, r0
 80a6540:	fbb3 f0f1 	udiv	r0, r3, r1
 80a6544:	fb01 3310 	mls	r3, r1, r0, r3
 80a6548:	fb00 fe0e 	mul.w	lr, r0, lr
 80a654c:	b2a4      	uxth	r4, r4
 80a654e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a6552:	45a6      	cmp	lr, r4
 80a6554:	d90a      	bls.n	80a656c <__udivmoddi4+0x94>
 80a6556:	eb1c 0404 	adds.w	r4, ip, r4
 80a655a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a655e:	f080 8109 	bcs.w	80a6774 <__udivmoddi4+0x29c>
 80a6562:	45a6      	cmp	lr, r4
 80a6564:	f240 8106 	bls.w	80a6774 <__udivmoddi4+0x29c>
 80a6568:	4464      	add	r4, ip
 80a656a:	3802      	subs	r0, #2
 80a656c:	2100      	movs	r1, #0
 80a656e:	eba4 040e 	sub.w	r4, r4, lr
 80a6572:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a6576:	b11e      	cbz	r6, 80a6580 <__udivmoddi4+0xa8>
 80a6578:	2300      	movs	r3, #0
 80a657a:	40d4      	lsrs	r4, r2
 80a657c:	e9c6 4300 	strd	r4, r3, [r6]
 80a6580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6584:	428b      	cmp	r3, r1
 80a6586:	d908      	bls.n	80a659a <__udivmoddi4+0xc2>
 80a6588:	2e00      	cmp	r6, #0
 80a658a:	f000 80ee 	beq.w	80a676a <__udivmoddi4+0x292>
 80a658e:	2100      	movs	r1, #0
 80a6590:	e9c6 0500 	strd	r0, r5, [r6]
 80a6594:	4608      	mov	r0, r1
 80a6596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a659a:	fab3 f183 	clz	r1, r3
 80a659e:	2900      	cmp	r1, #0
 80a65a0:	d14a      	bne.n	80a6638 <__udivmoddi4+0x160>
 80a65a2:	42ab      	cmp	r3, r5
 80a65a4:	d302      	bcc.n	80a65ac <__udivmoddi4+0xd4>
 80a65a6:	4282      	cmp	r2, r0
 80a65a8:	f200 80fc 	bhi.w	80a67a4 <__udivmoddi4+0x2cc>
 80a65ac:	1a84      	subs	r4, r0, r2
 80a65ae:	eb65 0303 	sbc.w	r3, r5, r3
 80a65b2:	2001      	movs	r0, #1
 80a65b4:	4698      	mov	r8, r3
 80a65b6:	2e00      	cmp	r6, #0
 80a65b8:	d0e2      	beq.n	80a6580 <__udivmoddi4+0xa8>
 80a65ba:	e9c6 4800 	strd	r4, r8, [r6]
 80a65be:	e7df      	b.n	80a6580 <__udivmoddi4+0xa8>
 80a65c0:	b902      	cbnz	r2, 80a65c4 <__udivmoddi4+0xec>
 80a65c2:	deff      	udf	#255	; 0xff
 80a65c4:	fab2 f282 	clz	r2, r2
 80a65c8:	2a00      	cmp	r2, #0
 80a65ca:	f040 8091 	bne.w	80a66f0 <__udivmoddi4+0x218>
 80a65ce:	eba1 000c 	sub.w	r0, r1, ip
 80a65d2:	2101      	movs	r1, #1
 80a65d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a65d8:	fa1f fe8c 	uxth.w	lr, ip
 80a65dc:	fbb0 f3f7 	udiv	r3, r0, r7
 80a65e0:	fb07 0013 	mls	r0, r7, r3, r0
 80a65e4:	0c25      	lsrs	r5, r4, #16
 80a65e6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a65ea:	fb0e f003 	mul.w	r0, lr, r3
 80a65ee:	42a8      	cmp	r0, r5
 80a65f0:	d908      	bls.n	80a6604 <__udivmoddi4+0x12c>
 80a65f2:	eb1c 0505 	adds.w	r5, ip, r5
 80a65f6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80a65fa:	d202      	bcs.n	80a6602 <__udivmoddi4+0x12a>
 80a65fc:	42a8      	cmp	r0, r5
 80a65fe:	f200 80ce 	bhi.w	80a679e <__udivmoddi4+0x2c6>
 80a6602:	4643      	mov	r3, r8
 80a6604:	1a2d      	subs	r5, r5, r0
 80a6606:	fbb5 f0f7 	udiv	r0, r5, r7
 80a660a:	fb07 5510 	mls	r5, r7, r0, r5
 80a660e:	fb0e fe00 	mul.w	lr, lr, r0
 80a6612:	b2a4      	uxth	r4, r4
 80a6614:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a6618:	45a6      	cmp	lr, r4
 80a661a:	d908      	bls.n	80a662e <__udivmoddi4+0x156>
 80a661c:	eb1c 0404 	adds.w	r4, ip, r4
 80a6620:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80a6624:	d202      	bcs.n	80a662c <__udivmoddi4+0x154>
 80a6626:	45a6      	cmp	lr, r4
 80a6628:	f200 80b6 	bhi.w	80a6798 <__udivmoddi4+0x2c0>
 80a662c:	4628      	mov	r0, r5
 80a662e:	eba4 040e 	sub.w	r4, r4, lr
 80a6632:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a6636:	e79e      	b.n	80a6576 <__udivmoddi4+0x9e>
 80a6638:	f1c1 0720 	rsb	r7, r1, #32
 80a663c:	408b      	lsls	r3, r1
 80a663e:	fa22 fc07 	lsr.w	ip, r2, r7
 80a6642:	ea4c 0c03 	orr.w	ip, ip, r3
 80a6646:	fa25 fa07 	lsr.w	sl, r5, r7
 80a664a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a664e:	fbba f8f9 	udiv	r8, sl, r9
 80a6652:	fa20 f307 	lsr.w	r3, r0, r7
 80a6656:	fb09 aa18 	mls	sl, r9, r8, sl
 80a665a:	408d      	lsls	r5, r1
 80a665c:	fa1f fe8c 	uxth.w	lr, ip
 80a6660:	431d      	orrs	r5, r3
 80a6662:	fa00 f301 	lsl.w	r3, r0, r1
 80a6666:	fb08 f00e 	mul.w	r0, r8, lr
 80a666a:	0c2c      	lsrs	r4, r5, #16
 80a666c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80a6670:	42a0      	cmp	r0, r4
 80a6672:	fa02 f201 	lsl.w	r2, r2, r1
 80a6676:	d90b      	bls.n	80a6690 <__udivmoddi4+0x1b8>
 80a6678:	eb1c 0404 	adds.w	r4, ip, r4
 80a667c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80a6680:	f080 8088 	bcs.w	80a6794 <__udivmoddi4+0x2bc>
 80a6684:	42a0      	cmp	r0, r4
 80a6686:	f240 8085 	bls.w	80a6794 <__udivmoddi4+0x2bc>
 80a668a:	f1a8 0802 	sub.w	r8, r8, #2
 80a668e:	4464      	add	r4, ip
 80a6690:	1a24      	subs	r4, r4, r0
 80a6692:	fbb4 f0f9 	udiv	r0, r4, r9
 80a6696:	fb09 4410 	mls	r4, r9, r0, r4
 80a669a:	fb00 fe0e 	mul.w	lr, r0, lr
 80a669e:	b2ad      	uxth	r5, r5
 80a66a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a66a4:	45a6      	cmp	lr, r4
 80a66a6:	d908      	bls.n	80a66ba <__udivmoddi4+0x1e2>
 80a66a8:	eb1c 0404 	adds.w	r4, ip, r4
 80a66ac:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80a66b0:	d26c      	bcs.n	80a678c <__udivmoddi4+0x2b4>
 80a66b2:	45a6      	cmp	lr, r4
 80a66b4:	d96a      	bls.n	80a678c <__udivmoddi4+0x2b4>
 80a66b6:	3802      	subs	r0, #2
 80a66b8:	4464      	add	r4, ip
 80a66ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80a66be:	fba0 9502 	umull	r9, r5, r0, r2
 80a66c2:	eba4 040e 	sub.w	r4, r4, lr
 80a66c6:	42ac      	cmp	r4, r5
 80a66c8:	46c8      	mov	r8, r9
 80a66ca:	46ae      	mov	lr, r5
 80a66cc:	d356      	bcc.n	80a677c <__udivmoddi4+0x2a4>
 80a66ce:	d053      	beq.n	80a6778 <__udivmoddi4+0x2a0>
 80a66d0:	2e00      	cmp	r6, #0
 80a66d2:	d069      	beq.n	80a67a8 <__udivmoddi4+0x2d0>
 80a66d4:	ebb3 0208 	subs.w	r2, r3, r8
 80a66d8:	eb64 040e 	sbc.w	r4, r4, lr
 80a66dc:	fa22 f301 	lsr.w	r3, r2, r1
 80a66e0:	fa04 f707 	lsl.w	r7, r4, r7
 80a66e4:	431f      	orrs	r7, r3
 80a66e6:	40cc      	lsrs	r4, r1
 80a66e8:	e9c6 7400 	strd	r7, r4, [r6]
 80a66ec:	2100      	movs	r1, #0
 80a66ee:	e747      	b.n	80a6580 <__udivmoddi4+0xa8>
 80a66f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80a66f4:	f1c2 0120 	rsb	r1, r2, #32
 80a66f8:	fa25 f301 	lsr.w	r3, r5, r1
 80a66fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a6700:	fa20 f101 	lsr.w	r1, r0, r1
 80a6704:	4095      	lsls	r5, r2
 80a6706:	430d      	orrs	r5, r1
 80a6708:	fbb3 f1f7 	udiv	r1, r3, r7
 80a670c:	fb07 3311 	mls	r3, r7, r1, r3
 80a6710:	fa1f fe8c 	uxth.w	lr, ip
 80a6714:	0c28      	lsrs	r0, r5, #16
 80a6716:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a671a:	fb01 f30e 	mul.w	r3, r1, lr
 80a671e:	4283      	cmp	r3, r0
 80a6720:	fa04 f402 	lsl.w	r4, r4, r2
 80a6724:	d908      	bls.n	80a6738 <__udivmoddi4+0x260>
 80a6726:	eb1c 0000 	adds.w	r0, ip, r0
 80a672a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80a672e:	d22f      	bcs.n	80a6790 <__udivmoddi4+0x2b8>
 80a6730:	4283      	cmp	r3, r0
 80a6732:	d92d      	bls.n	80a6790 <__udivmoddi4+0x2b8>
 80a6734:	3902      	subs	r1, #2
 80a6736:	4460      	add	r0, ip
 80a6738:	1ac0      	subs	r0, r0, r3
 80a673a:	fbb0 f3f7 	udiv	r3, r0, r7
 80a673e:	fb07 0013 	mls	r0, r7, r3, r0
 80a6742:	b2ad      	uxth	r5, r5
 80a6744:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a6748:	fb03 f00e 	mul.w	r0, r3, lr
 80a674c:	42a8      	cmp	r0, r5
 80a674e:	d908      	bls.n	80a6762 <__udivmoddi4+0x28a>
 80a6750:	eb1c 0505 	adds.w	r5, ip, r5
 80a6754:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80a6758:	d216      	bcs.n	80a6788 <__udivmoddi4+0x2b0>
 80a675a:	42a8      	cmp	r0, r5
 80a675c:	d914      	bls.n	80a6788 <__udivmoddi4+0x2b0>
 80a675e:	3b02      	subs	r3, #2
 80a6760:	4465      	add	r5, ip
 80a6762:	1a28      	subs	r0, r5, r0
 80a6764:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a6768:	e738      	b.n	80a65dc <__udivmoddi4+0x104>
 80a676a:	4631      	mov	r1, r6
 80a676c:	4630      	mov	r0, r6
 80a676e:	e707      	b.n	80a6580 <__udivmoddi4+0xa8>
 80a6770:	462f      	mov	r7, r5
 80a6772:	e6e4      	b.n	80a653e <__udivmoddi4+0x66>
 80a6774:	4618      	mov	r0, r3
 80a6776:	e6f9      	b.n	80a656c <__udivmoddi4+0x94>
 80a6778:	454b      	cmp	r3, r9
 80a677a:	d2a9      	bcs.n	80a66d0 <__udivmoddi4+0x1f8>
 80a677c:	ebb9 0802 	subs.w	r8, r9, r2
 80a6780:	eb65 0e0c 	sbc.w	lr, r5, ip
 80a6784:	3801      	subs	r0, #1
 80a6786:	e7a3      	b.n	80a66d0 <__udivmoddi4+0x1f8>
 80a6788:	4643      	mov	r3, r8
 80a678a:	e7ea      	b.n	80a6762 <__udivmoddi4+0x28a>
 80a678c:	4628      	mov	r0, r5
 80a678e:	e794      	b.n	80a66ba <__udivmoddi4+0x1e2>
 80a6790:	4641      	mov	r1, r8
 80a6792:	e7d1      	b.n	80a6738 <__udivmoddi4+0x260>
 80a6794:	46d0      	mov	r8, sl
 80a6796:	e77b      	b.n	80a6690 <__udivmoddi4+0x1b8>
 80a6798:	4464      	add	r4, ip
 80a679a:	3802      	subs	r0, #2
 80a679c:	e747      	b.n	80a662e <__udivmoddi4+0x156>
 80a679e:	3b02      	subs	r3, #2
 80a67a0:	4465      	add	r5, ip
 80a67a2:	e72f      	b.n	80a6604 <__udivmoddi4+0x12c>
 80a67a4:	4608      	mov	r0, r1
 80a67a6:	e706      	b.n	80a65b6 <__udivmoddi4+0xde>
 80a67a8:	4631      	mov	r1, r6
 80a67aa:	e6e9      	b.n	80a6580 <__udivmoddi4+0xa8>

080a67ac <__aeabi_idiv0>:
 80a67ac:	4770      	bx	lr
 80a67ae:	bf00      	nop

080a67b0 <atof>:
 80a67b0:	2100      	movs	r1, #0
 80a67b2:	f000 bf99 	b.w	80a76e8 <strtod>
	...

080a67b8 <__cxa_atexit>:
 80a67b8:	b510      	push	{r4, lr}
 80a67ba:	4604      	mov	r4, r0
 80a67bc:	4804      	ldr	r0, [pc, #16]	; (80a67d0 <__cxa_atexit+0x18>)
 80a67be:	4613      	mov	r3, r2
 80a67c0:	b120      	cbz	r0, 80a67cc <__cxa_atexit+0x14>
 80a67c2:	460a      	mov	r2, r1
 80a67c4:	2002      	movs	r0, #2
 80a67c6:	4621      	mov	r1, r4
 80a67c8:	f3af 8000 	nop.w
 80a67cc:	bd10      	pop	{r4, pc}
 80a67ce:	bf00      	nop
 80a67d0:	00000000 	.word	0x00000000

080a67d4 <localtime_r>:
 80a67d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a67d8:	460c      	mov	r4, r1
 80a67da:	4680      	mov	r8, r0
 80a67dc:	f001 fdee 	bl	80a83bc <__gettzinfo>
 80a67e0:	4621      	mov	r1, r4
 80a67e2:	4605      	mov	r5, r0
 80a67e4:	4640      	mov	r0, r8
 80a67e6:	f001 fded 	bl	80a83c4 <gmtime_r>
 80a67ea:	6943      	ldr	r3, [r0, #20]
 80a67ec:	4604      	mov	r4, r0
 80a67ee:	0799      	lsls	r1, r3, #30
 80a67f0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80a67f4:	d105      	bne.n	80a6802 <localtime_r+0x2e>
 80a67f6:	2264      	movs	r2, #100	; 0x64
 80a67f8:	fb97 f3f2 	sdiv	r3, r7, r2
 80a67fc:	fb02 7313 	mls	r3, r2, r3, r7
 80a6800:	bb73      	cbnz	r3, 80a6860 <localtime_r+0x8c>
 80a6802:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6806:	fb97 f6f3 	sdiv	r6, r7, r3
 80a680a:	fb03 7616 	mls	r6, r3, r6, r7
 80a680e:	fab6 f386 	clz	r3, r6
 80a6812:	095b      	lsrs	r3, r3, #5
 80a6814:	2230      	movs	r2, #48	; 0x30
 80a6816:	4e66      	ldr	r6, [pc, #408]	; (80a69b0 <localtime_r+0x1dc>)
 80a6818:	fb02 6603 	mla	r6, r2, r3, r6
 80a681c:	f001 f890 	bl	80a7940 <__tz_lock>
 80a6820:	f001 f89a 	bl	80a7958 <_tzset_unlocked>
 80a6824:	4b63      	ldr	r3, [pc, #396]	; (80a69b4 <localtime_r+0x1e0>)
 80a6826:	681b      	ldr	r3, [r3, #0]
 80a6828:	b34b      	cbz	r3, 80a687e <localtime_r+0xaa>
 80a682a:	686b      	ldr	r3, [r5, #4]
 80a682c:	42bb      	cmp	r3, r7
 80a682e:	d119      	bne.n	80a6864 <localtime_r+0x90>
 80a6830:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a6834:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80a6838:	682f      	ldr	r7, [r5, #0]
 80a683a:	b9df      	cbnz	r7, 80a6874 <localtime_r+0xa0>
 80a683c:	4282      	cmp	r2, r0
 80a683e:	eb73 0101 	sbcs.w	r1, r3, r1
 80a6842:	da23      	bge.n	80a688c <localtime_r+0xb8>
 80a6844:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a6848:	4282      	cmp	r2, r0
 80a684a:	eb73 0701 	sbcs.w	r7, r3, r1
 80a684e:	bfb4      	ite	lt
 80a6850:	2701      	movlt	r7, #1
 80a6852:	2700      	movge	r7, #0
 80a6854:	4282      	cmp	r2, r0
 80a6856:	418b      	sbcs	r3, r1
 80a6858:	6227      	str	r7, [r4, #32]
 80a685a:	db19      	blt.n	80a6890 <localtime_r+0xbc>
 80a685c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a685e:	e018      	b.n	80a6892 <localtime_r+0xbe>
 80a6860:	2301      	movs	r3, #1
 80a6862:	e7d7      	b.n	80a6814 <localtime_r+0x40>
 80a6864:	4638      	mov	r0, r7
 80a6866:	f000 ffc7 	bl	80a77f8 <__tzcalc_limits>
 80a686a:	2800      	cmp	r0, #0
 80a686c:	d1e0      	bne.n	80a6830 <localtime_r+0x5c>
 80a686e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a6872:	e004      	b.n	80a687e <localtime_r+0xaa>
 80a6874:	4282      	cmp	r2, r0
 80a6876:	eb73 0101 	sbcs.w	r1, r3, r1
 80a687a:	da02      	bge.n	80a6882 <localtime_r+0xae>
 80a687c:	2300      	movs	r3, #0
 80a687e:	6223      	str	r3, [r4, #32]
 80a6880:	e7ec      	b.n	80a685c <localtime_r+0x88>
 80a6882:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a6886:	4282      	cmp	r2, r0
 80a6888:	418b      	sbcs	r3, r1
 80a688a:	daf7      	bge.n	80a687c <localtime_r+0xa8>
 80a688c:	2301      	movs	r3, #1
 80a688e:	6223      	str	r3, [r4, #32]
 80a6890:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a6892:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80a6896:	fb93 f5f2 	sdiv	r5, r3, r2
 80a689a:	203c      	movs	r0, #60	; 0x3c
 80a689c:	fb02 3315 	mls	r3, r2, r5, r3
 80a68a0:	fb93 f2f0 	sdiv	r2, r3, r0
 80a68a4:	fb00 3012 	mls	r0, r0, r2, r3
 80a68a8:	6861      	ldr	r1, [r4, #4]
 80a68aa:	6823      	ldr	r3, [r4, #0]
 80a68ac:	1a89      	subs	r1, r1, r2
 80a68ae:	68a2      	ldr	r2, [r4, #8]
 80a68b0:	1a1b      	subs	r3, r3, r0
 80a68b2:	1b52      	subs	r2, r2, r5
 80a68b4:	2b3b      	cmp	r3, #59	; 0x3b
 80a68b6:	6023      	str	r3, [r4, #0]
 80a68b8:	6061      	str	r1, [r4, #4]
 80a68ba:	60a2      	str	r2, [r4, #8]
 80a68bc:	dd34      	ble.n	80a6928 <localtime_r+0x154>
 80a68be:	3101      	adds	r1, #1
 80a68c0:	6061      	str	r1, [r4, #4]
 80a68c2:	3b3c      	subs	r3, #60	; 0x3c
 80a68c4:	6023      	str	r3, [r4, #0]
 80a68c6:	6863      	ldr	r3, [r4, #4]
 80a68c8:	2b3b      	cmp	r3, #59	; 0x3b
 80a68ca:	dd33      	ble.n	80a6934 <localtime_r+0x160>
 80a68cc:	3201      	adds	r2, #1
 80a68ce:	60a2      	str	r2, [r4, #8]
 80a68d0:	3b3c      	subs	r3, #60	; 0x3c
 80a68d2:	6063      	str	r3, [r4, #4]
 80a68d4:	68a3      	ldr	r3, [r4, #8]
 80a68d6:	2b17      	cmp	r3, #23
 80a68d8:	dd32      	ble.n	80a6940 <localtime_r+0x16c>
 80a68da:	69e2      	ldr	r2, [r4, #28]
 80a68dc:	3b18      	subs	r3, #24
 80a68de:	3201      	adds	r2, #1
 80a68e0:	61e2      	str	r2, [r4, #28]
 80a68e2:	69a2      	ldr	r2, [r4, #24]
 80a68e4:	60a3      	str	r3, [r4, #8]
 80a68e6:	3201      	adds	r2, #1
 80a68e8:	2a06      	cmp	r2, #6
 80a68ea:	bfc8      	it	gt
 80a68ec:	2200      	movgt	r2, #0
 80a68ee:	61a2      	str	r2, [r4, #24]
 80a68f0:	68e2      	ldr	r2, [r4, #12]
 80a68f2:	6923      	ldr	r3, [r4, #16]
 80a68f4:	3201      	adds	r2, #1
 80a68f6:	60e2      	str	r2, [r4, #12]
 80a68f8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80a68fc:	428a      	cmp	r2, r1
 80a68fe:	dd0e      	ble.n	80a691e <localtime_r+0x14a>
 80a6900:	2b0b      	cmp	r3, #11
 80a6902:	eba2 0201 	sub.w	r2, r2, r1
 80a6906:	60e2      	str	r2, [r4, #12]
 80a6908:	f103 0201 	add.w	r2, r3, #1
 80a690c:	bf05      	ittet	eq
 80a690e:	2200      	moveq	r2, #0
 80a6910:	6963      	ldreq	r3, [r4, #20]
 80a6912:	6122      	strne	r2, [r4, #16]
 80a6914:	3301      	addeq	r3, #1
 80a6916:	bf02      	ittt	eq
 80a6918:	6122      	streq	r2, [r4, #16]
 80a691a:	6163      	streq	r3, [r4, #20]
 80a691c:	61e2      	streq	r2, [r4, #28]
 80a691e:	f001 f815 	bl	80a794c <__tz_unlock>
 80a6922:	4620      	mov	r0, r4
 80a6924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6928:	2b00      	cmp	r3, #0
 80a692a:	dacc      	bge.n	80a68c6 <localtime_r+0xf2>
 80a692c:	3901      	subs	r1, #1
 80a692e:	6061      	str	r1, [r4, #4]
 80a6930:	333c      	adds	r3, #60	; 0x3c
 80a6932:	e7c7      	b.n	80a68c4 <localtime_r+0xf0>
 80a6934:	2b00      	cmp	r3, #0
 80a6936:	dacd      	bge.n	80a68d4 <localtime_r+0x100>
 80a6938:	3a01      	subs	r2, #1
 80a693a:	60a2      	str	r2, [r4, #8]
 80a693c:	333c      	adds	r3, #60	; 0x3c
 80a693e:	e7c8      	b.n	80a68d2 <localtime_r+0xfe>
 80a6940:	2b00      	cmp	r3, #0
 80a6942:	daec      	bge.n	80a691e <localtime_r+0x14a>
 80a6944:	69e2      	ldr	r2, [r4, #28]
 80a6946:	3318      	adds	r3, #24
 80a6948:	3a01      	subs	r2, #1
 80a694a:	61e2      	str	r2, [r4, #28]
 80a694c:	69a2      	ldr	r2, [r4, #24]
 80a694e:	60a3      	str	r3, [r4, #8]
 80a6950:	3a01      	subs	r2, #1
 80a6952:	bf48      	it	mi
 80a6954:	2206      	movmi	r2, #6
 80a6956:	61a2      	str	r2, [r4, #24]
 80a6958:	68e2      	ldr	r2, [r4, #12]
 80a695a:	3a01      	subs	r2, #1
 80a695c:	60e2      	str	r2, [r4, #12]
 80a695e:	2a00      	cmp	r2, #0
 80a6960:	d1dd      	bne.n	80a691e <localtime_r+0x14a>
 80a6962:	6923      	ldr	r3, [r4, #16]
 80a6964:	3b01      	subs	r3, #1
 80a6966:	d405      	bmi.n	80a6974 <localtime_r+0x1a0>
 80a6968:	6123      	str	r3, [r4, #16]
 80a696a:	6923      	ldr	r3, [r4, #16]
 80a696c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a6970:	60e3      	str	r3, [r4, #12]
 80a6972:	e7d4      	b.n	80a691e <localtime_r+0x14a>
 80a6974:	230b      	movs	r3, #11
 80a6976:	6123      	str	r3, [r4, #16]
 80a6978:	6963      	ldr	r3, [r4, #20]
 80a697a:	1e5a      	subs	r2, r3, #1
 80a697c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a6980:	6162      	str	r2, [r4, #20]
 80a6982:	079a      	lsls	r2, r3, #30
 80a6984:	d105      	bne.n	80a6992 <localtime_r+0x1be>
 80a6986:	2164      	movs	r1, #100	; 0x64
 80a6988:	fb93 f2f1 	sdiv	r2, r3, r1
 80a698c:	fb01 3212 	mls	r2, r1, r2, r3
 80a6990:	b962      	cbnz	r2, 80a69ac <localtime_r+0x1d8>
 80a6992:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6996:	fb93 f1f2 	sdiv	r1, r3, r2
 80a699a:	fb02 3311 	mls	r3, r2, r1, r3
 80a699e:	fab3 f383 	clz	r3, r3
 80a69a2:	095b      	lsrs	r3, r3, #5
 80a69a4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a69a8:	61e3      	str	r3, [r4, #28]
 80a69aa:	e7de      	b.n	80a696a <localtime_r+0x196>
 80a69ac:	2301      	movs	r3, #1
 80a69ae:	e7f9      	b.n	80a69a4 <localtime_r+0x1d0>
 80a69b0:	080a9268 	.word	0x080a9268
 80a69b4:	20000ff4 	.word	0x20000ff4

080a69b8 <memcpy>:
 80a69b8:	440a      	add	r2, r1
 80a69ba:	4291      	cmp	r1, r2
 80a69bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a69c0:	d100      	bne.n	80a69c4 <memcpy+0xc>
 80a69c2:	4770      	bx	lr
 80a69c4:	b510      	push	{r4, lr}
 80a69c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a69ca:	4291      	cmp	r1, r2
 80a69cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a69d0:	d1f9      	bne.n	80a69c6 <memcpy+0xe>
 80a69d2:	bd10      	pop	{r4, pc}

080a69d4 <memset>:
 80a69d4:	4603      	mov	r3, r0
 80a69d6:	4402      	add	r2, r0
 80a69d8:	4293      	cmp	r3, r2
 80a69da:	d100      	bne.n	80a69de <memset+0xa>
 80a69dc:	4770      	bx	lr
 80a69de:	f803 1b01 	strb.w	r1, [r3], #1
 80a69e2:	e7f9      	b.n	80a69d8 <memset+0x4>

080a69e4 <srand>:
 80a69e4:	b538      	push	{r3, r4, r5, lr}
 80a69e6:	4b10      	ldr	r3, [pc, #64]	; (80a6a28 <srand+0x44>)
 80a69e8:	4604      	mov	r4, r0
 80a69ea:	681d      	ldr	r5, [r3, #0]
 80a69ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a69ee:	b9b3      	cbnz	r3, 80a6a1e <srand+0x3a>
 80a69f0:	2018      	movs	r0, #24
 80a69f2:	f7fd fbe1 	bl	80a41b8 <malloc>
 80a69f6:	4602      	mov	r2, r0
 80a69f8:	63a8      	str	r0, [r5, #56]	; 0x38
 80a69fa:	b920      	cbnz	r0, 80a6a06 <srand+0x22>
 80a69fc:	2142      	movs	r1, #66	; 0x42
 80a69fe:	4b0b      	ldr	r3, [pc, #44]	; (80a6a2c <srand+0x48>)
 80a6a00:	480b      	ldr	r0, [pc, #44]	; (80a6a30 <srand+0x4c>)
 80a6a02:	f7fd fc01 	bl	80a4208 <__assert_func>
 80a6a06:	490b      	ldr	r1, [pc, #44]	; (80a6a34 <srand+0x50>)
 80a6a08:	4b0b      	ldr	r3, [pc, #44]	; (80a6a38 <srand+0x54>)
 80a6a0a:	e9c0 1300 	strd	r1, r3, [r0]
 80a6a0e:	4b0b      	ldr	r3, [pc, #44]	; (80a6a3c <srand+0x58>)
 80a6a10:	2100      	movs	r1, #0
 80a6a12:	6083      	str	r3, [r0, #8]
 80a6a14:	230b      	movs	r3, #11
 80a6a16:	8183      	strh	r3, [r0, #12]
 80a6a18:	2001      	movs	r0, #1
 80a6a1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a6a1e:	2200      	movs	r2, #0
 80a6a20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6a22:	611c      	str	r4, [r3, #16]
 80a6a24:	615a      	str	r2, [r3, #20]
 80a6a26:	bd38      	pop	{r3, r4, r5, pc}
 80a6a28:	20000004 	.word	0x20000004
 80a6a2c:	080a92c8 	.word	0x080a92c8
 80a6a30:	080a92df 	.word	0x080a92df
 80a6a34:	abcd330e 	.word	0xabcd330e
 80a6a38:	e66d1234 	.word	0xe66d1234
 80a6a3c:	0005deec 	.word	0x0005deec

080a6a40 <strcmp>:
 80a6a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6a48:	2a01      	cmp	r2, #1
 80a6a4a:	bf28      	it	cs
 80a6a4c:	429a      	cmpcs	r2, r3
 80a6a4e:	d0f7      	beq.n	80a6a40 <strcmp>
 80a6a50:	1ad0      	subs	r0, r2, r3
 80a6a52:	4770      	bx	lr

080a6a54 <strcpy>:
 80a6a54:	4603      	mov	r3, r0
 80a6a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6a5a:	f803 2b01 	strb.w	r2, [r3], #1
 80a6a5e:	2a00      	cmp	r2, #0
 80a6a60:	d1f9      	bne.n	80a6a56 <strcpy+0x2>
 80a6a62:	4770      	bx	lr

080a6a64 <strdup>:
 80a6a64:	4b02      	ldr	r3, [pc, #8]	; (80a6a70 <strdup+0xc>)
 80a6a66:	4601      	mov	r1, r0
 80a6a68:	6818      	ldr	r0, [r3, #0]
 80a6a6a:	f000 b803 	b.w	80a6a74 <_strdup_r>
 80a6a6e:	bf00      	nop
 80a6a70:	20000004 	.word	0x20000004

080a6a74 <_strdup_r>:
 80a6a74:	b570      	push	{r4, r5, r6, lr}
 80a6a76:	4604      	mov	r4, r0
 80a6a78:	4608      	mov	r0, r1
 80a6a7a:	460d      	mov	r5, r1
 80a6a7c:	f000 f80d 	bl	80a6a9a <strlen>
 80a6a80:	1c46      	adds	r6, r0, #1
 80a6a82:	4631      	mov	r1, r6
 80a6a84:	4620      	mov	r0, r4
 80a6a86:	f7fd fbb7 	bl	80a41f8 <_malloc_r>
 80a6a8a:	4604      	mov	r4, r0
 80a6a8c:	b118      	cbz	r0, 80a6a96 <_strdup_r+0x22>
 80a6a8e:	4632      	mov	r2, r6
 80a6a90:	4629      	mov	r1, r5
 80a6a92:	f7ff ff91 	bl	80a69b8 <memcpy>
 80a6a96:	4620      	mov	r0, r4
 80a6a98:	bd70      	pop	{r4, r5, r6, pc}

080a6a9a <strlen>:
 80a6a9a:	4603      	mov	r3, r0
 80a6a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6aa0:	2a00      	cmp	r2, #0
 80a6aa2:	d1fb      	bne.n	80a6a9c <strlen+0x2>
 80a6aa4:	1a18      	subs	r0, r3, r0
 80a6aa6:	3801      	subs	r0, #1
 80a6aa8:	4770      	bx	lr

080a6aaa <strncmp>:
 80a6aaa:	4603      	mov	r3, r0
 80a6aac:	b510      	push	{r4, lr}
 80a6aae:	b172      	cbz	r2, 80a6ace <strncmp+0x24>
 80a6ab0:	3901      	subs	r1, #1
 80a6ab2:	1884      	adds	r4, r0, r2
 80a6ab4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a6ab8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a6abc:	4290      	cmp	r0, r2
 80a6abe:	d101      	bne.n	80a6ac4 <strncmp+0x1a>
 80a6ac0:	42a3      	cmp	r3, r4
 80a6ac2:	d101      	bne.n	80a6ac8 <strncmp+0x1e>
 80a6ac4:	1a80      	subs	r0, r0, r2
 80a6ac6:	bd10      	pop	{r4, pc}
 80a6ac8:	2800      	cmp	r0, #0
 80a6aca:	d1f3      	bne.n	80a6ab4 <strncmp+0xa>
 80a6acc:	e7fa      	b.n	80a6ac4 <strncmp+0x1a>
 80a6ace:	4610      	mov	r0, r2
 80a6ad0:	e7f9      	b.n	80a6ac6 <strncmp+0x1c>

080a6ad2 <sulp>:
 80a6ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6ad6:	460f      	mov	r7, r1
 80a6ad8:	4690      	mov	r8, r2
 80a6ada:	f002 f8a7 	bl	80a8c2c <__ulp>
 80a6ade:	4604      	mov	r4, r0
 80a6ae0:	460d      	mov	r5, r1
 80a6ae2:	f1b8 0f00 	cmp.w	r8, #0
 80a6ae6:	d011      	beq.n	80a6b0c <sulp+0x3a>
 80a6ae8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a6aec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a6af0:	2b00      	cmp	r3, #0
 80a6af2:	dd0b      	ble.n	80a6b0c <sulp+0x3a>
 80a6af4:	2400      	movs	r4, #0
 80a6af6:	051b      	lsls	r3, r3, #20
 80a6af8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a6afc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a6b00:	4622      	mov	r2, r4
 80a6b02:	462b      	mov	r3, r5
 80a6b04:	f7fe fe6a 	bl	80a57dc <__aeabi_dmul>
 80a6b08:	4604      	mov	r4, r0
 80a6b0a:	460d      	mov	r5, r1
 80a6b0c:	4620      	mov	r0, r4
 80a6b0e:	4629      	mov	r1, r5
 80a6b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6b14:	0000      	movs	r0, r0
	...

080a6b18 <_strtod_l>:
 80a6b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6b1c:	469b      	mov	fp, r3
 80a6b1e:	2300      	movs	r3, #0
 80a6b20:	b09f      	sub	sp, #124	; 0x7c
 80a6b22:	931a      	str	r3, [sp, #104]	; 0x68
 80a6b24:	4b9e      	ldr	r3, [pc, #632]	; (80a6da0 <_strtod_l+0x288>)
 80a6b26:	4682      	mov	sl, r0
 80a6b28:	681f      	ldr	r7, [r3, #0]
 80a6b2a:	460e      	mov	r6, r1
 80a6b2c:	4638      	mov	r0, r7
 80a6b2e:	9215      	str	r2, [sp, #84]	; 0x54
 80a6b30:	f7ff ffb3 	bl	80a6a9a <strlen>
 80a6b34:	f04f 0800 	mov.w	r8, #0
 80a6b38:	4604      	mov	r4, r0
 80a6b3a:	f04f 0900 	mov.w	r9, #0
 80a6b3e:	9619      	str	r6, [sp, #100]	; 0x64
 80a6b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6b42:	781a      	ldrb	r2, [r3, #0]
 80a6b44:	2a2b      	cmp	r2, #43	; 0x2b
 80a6b46:	d04c      	beq.n	80a6be2 <_strtod_l+0xca>
 80a6b48:	d83a      	bhi.n	80a6bc0 <_strtod_l+0xa8>
 80a6b4a:	2a0d      	cmp	r2, #13
 80a6b4c:	d833      	bhi.n	80a6bb6 <_strtod_l+0x9e>
 80a6b4e:	2a08      	cmp	r2, #8
 80a6b50:	d833      	bhi.n	80a6bba <_strtod_l+0xa2>
 80a6b52:	2a00      	cmp	r2, #0
 80a6b54:	d03d      	beq.n	80a6bd2 <_strtod_l+0xba>
 80a6b56:	2300      	movs	r3, #0
 80a6b58:	930a      	str	r3, [sp, #40]	; 0x28
 80a6b5a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80a6b5c:	782b      	ldrb	r3, [r5, #0]
 80a6b5e:	2b30      	cmp	r3, #48	; 0x30
 80a6b60:	f040 80aa 	bne.w	80a6cb8 <_strtod_l+0x1a0>
 80a6b64:	786b      	ldrb	r3, [r5, #1]
 80a6b66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a6b6a:	2b58      	cmp	r3, #88	; 0x58
 80a6b6c:	d166      	bne.n	80a6c3c <_strtod_l+0x124>
 80a6b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6b70:	4650      	mov	r0, sl
 80a6b72:	9301      	str	r3, [sp, #4]
 80a6b74:	ab1a      	add	r3, sp, #104	; 0x68
 80a6b76:	9300      	str	r3, [sp, #0]
 80a6b78:	4a8a      	ldr	r2, [pc, #552]	; (80a6da4 <_strtod_l+0x28c>)
 80a6b7a:	f8cd b008 	str.w	fp, [sp, #8]
 80a6b7e:	ab1b      	add	r3, sp, #108	; 0x6c
 80a6b80:	a919      	add	r1, sp, #100	; 0x64
 80a6b82:	f001 f8d9 	bl	80a7d38 <__gethex>
 80a6b86:	f010 0607 	ands.w	r6, r0, #7
 80a6b8a:	4604      	mov	r4, r0
 80a6b8c:	d005      	beq.n	80a6b9a <_strtod_l+0x82>
 80a6b8e:	2e06      	cmp	r6, #6
 80a6b90:	d129      	bne.n	80a6be6 <_strtod_l+0xce>
 80a6b92:	2300      	movs	r3, #0
 80a6b94:	3501      	adds	r5, #1
 80a6b96:	9519      	str	r5, [sp, #100]	; 0x64
 80a6b98:	930a      	str	r3, [sp, #40]	; 0x28
 80a6b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6b9c:	2b00      	cmp	r3, #0
 80a6b9e:	f040 858a 	bne.w	80a76b6 <_strtod_l+0xb9e>
 80a6ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6ba4:	b1d3      	cbz	r3, 80a6bdc <_strtod_l+0xc4>
 80a6ba6:	4642      	mov	r2, r8
 80a6ba8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a6bac:	4610      	mov	r0, r2
 80a6bae:	4619      	mov	r1, r3
 80a6bb0:	b01f      	add	sp, #124	; 0x7c
 80a6bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6bb6:	2a20      	cmp	r2, #32
 80a6bb8:	d1cd      	bne.n	80a6b56 <_strtod_l+0x3e>
 80a6bba:	3301      	adds	r3, #1
 80a6bbc:	9319      	str	r3, [sp, #100]	; 0x64
 80a6bbe:	e7bf      	b.n	80a6b40 <_strtod_l+0x28>
 80a6bc0:	2a2d      	cmp	r2, #45	; 0x2d
 80a6bc2:	d1c8      	bne.n	80a6b56 <_strtod_l+0x3e>
 80a6bc4:	2201      	movs	r2, #1
 80a6bc6:	920a      	str	r2, [sp, #40]	; 0x28
 80a6bc8:	1c5a      	adds	r2, r3, #1
 80a6bca:	9219      	str	r2, [sp, #100]	; 0x64
 80a6bcc:	785b      	ldrb	r3, [r3, #1]
 80a6bce:	2b00      	cmp	r3, #0
 80a6bd0:	d1c3      	bne.n	80a6b5a <_strtod_l+0x42>
 80a6bd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6bd4:	9619      	str	r6, [sp, #100]	; 0x64
 80a6bd6:	2b00      	cmp	r3, #0
 80a6bd8:	f040 856b 	bne.w	80a76b2 <_strtod_l+0xb9a>
 80a6bdc:	4642      	mov	r2, r8
 80a6bde:	464b      	mov	r3, r9
 80a6be0:	e7e4      	b.n	80a6bac <_strtod_l+0x94>
 80a6be2:	2200      	movs	r2, #0
 80a6be4:	e7ef      	b.n	80a6bc6 <_strtod_l+0xae>
 80a6be6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80a6be8:	b13a      	cbz	r2, 80a6bfa <_strtod_l+0xe2>
 80a6bea:	2135      	movs	r1, #53	; 0x35
 80a6bec:	a81c      	add	r0, sp, #112	; 0x70
 80a6bee:	f002 f921 	bl	80a8e34 <__copybits>
 80a6bf2:	4650      	mov	r0, sl
 80a6bf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a6bf6:	f001 fce9 	bl	80a85cc <_Bfree>
 80a6bfa:	3e01      	subs	r6, #1
 80a6bfc:	2e04      	cmp	r6, #4
 80a6bfe:	d806      	bhi.n	80a6c0e <_strtod_l+0xf6>
 80a6c00:	e8df f006 	tbb	[pc, r6]
 80a6c04:	1714030a 	.word	0x1714030a
 80a6c08:	0a          	.byte	0x0a
 80a6c09:	00          	.byte	0x00
 80a6c0a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80a6c0e:	0721      	lsls	r1, r4, #28
 80a6c10:	d5c3      	bpl.n	80a6b9a <_strtod_l+0x82>
 80a6c12:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a6c16:	e7c0      	b.n	80a6b9a <_strtod_l+0x82>
 80a6c18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80a6c1a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80a6c1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a6c22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a6c26:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a6c2a:	e7f0      	b.n	80a6c0e <_strtod_l+0xf6>
 80a6c2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a6da8 <_strtod_l+0x290>
 80a6c30:	e7ed      	b.n	80a6c0e <_strtod_l+0xf6>
 80a6c32:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a6c36:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a6c3a:	e7e8      	b.n	80a6c0e <_strtod_l+0xf6>
 80a6c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6c3e:	1c5a      	adds	r2, r3, #1
 80a6c40:	9219      	str	r2, [sp, #100]	; 0x64
 80a6c42:	785b      	ldrb	r3, [r3, #1]
 80a6c44:	2b30      	cmp	r3, #48	; 0x30
 80a6c46:	d0f9      	beq.n	80a6c3c <_strtod_l+0x124>
 80a6c48:	2b00      	cmp	r3, #0
 80a6c4a:	d0a6      	beq.n	80a6b9a <_strtod_l+0x82>
 80a6c4c:	2301      	movs	r3, #1
 80a6c4e:	9307      	str	r3, [sp, #28]
 80a6c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6c52:	220a      	movs	r2, #10
 80a6c54:	9308      	str	r3, [sp, #32]
 80a6c56:	2300      	movs	r3, #0
 80a6c58:	469b      	mov	fp, r3
 80a6c5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80a6c5e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80a6c60:	7805      	ldrb	r5, [r0, #0]
 80a6c62:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80a6c66:	b2d9      	uxtb	r1, r3
 80a6c68:	2909      	cmp	r1, #9
 80a6c6a:	d927      	bls.n	80a6cbc <_strtod_l+0x1a4>
 80a6c6c:	4622      	mov	r2, r4
 80a6c6e:	4639      	mov	r1, r7
 80a6c70:	f7ff ff1b 	bl	80a6aaa <strncmp>
 80a6c74:	2800      	cmp	r0, #0
 80a6c76:	d033      	beq.n	80a6ce0 <_strtod_l+0x1c8>
 80a6c78:	2000      	movs	r0, #0
 80a6c7a:	462a      	mov	r2, r5
 80a6c7c:	465c      	mov	r4, fp
 80a6c7e:	4603      	mov	r3, r0
 80a6c80:	9004      	str	r0, [sp, #16]
 80a6c82:	2a65      	cmp	r2, #101	; 0x65
 80a6c84:	d001      	beq.n	80a6c8a <_strtod_l+0x172>
 80a6c86:	2a45      	cmp	r2, #69	; 0x45
 80a6c88:	d114      	bne.n	80a6cb4 <_strtod_l+0x19c>
 80a6c8a:	b91c      	cbnz	r4, 80a6c94 <_strtod_l+0x17c>
 80a6c8c:	9a07      	ldr	r2, [sp, #28]
 80a6c8e:	4302      	orrs	r2, r0
 80a6c90:	d09f      	beq.n	80a6bd2 <_strtod_l+0xba>
 80a6c92:	2400      	movs	r4, #0
 80a6c94:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80a6c96:	1c72      	adds	r2, r6, #1
 80a6c98:	9219      	str	r2, [sp, #100]	; 0x64
 80a6c9a:	7872      	ldrb	r2, [r6, #1]
 80a6c9c:	2a2b      	cmp	r2, #43	; 0x2b
 80a6c9e:	d079      	beq.n	80a6d94 <_strtod_l+0x27c>
 80a6ca0:	2a2d      	cmp	r2, #45	; 0x2d
 80a6ca2:	f000 8083 	beq.w	80a6dac <_strtod_l+0x294>
 80a6ca6:	2700      	movs	r7, #0
 80a6ca8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80a6cac:	2909      	cmp	r1, #9
 80a6cae:	f240 8083 	bls.w	80a6db8 <_strtod_l+0x2a0>
 80a6cb2:	9619      	str	r6, [sp, #100]	; 0x64
 80a6cb4:	2500      	movs	r5, #0
 80a6cb6:	e09f      	b.n	80a6df8 <_strtod_l+0x2e0>
 80a6cb8:	2300      	movs	r3, #0
 80a6cba:	e7c8      	b.n	80a6c4e <_strtod_l+0x136>
 80a6cbc:	f1bb 0f08 	cmp.w	fp, #8
 80a6cc0:	bfd5      	itete	le
 80a6cc2:	9906      	ldrle	r1, [sp, #24]
 80a6cc4:	9905      	ldrgt	r1, [sp, #20]
 80a6cc6:	fb02 3301 	mlale	r3, r2, r1, r3
 80a6cca:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a6cce:	f100 0001 	add.w	r0, r0, #1
 80a6cd2:	bfd4      	ite	le
 80a6cd4:	9306      	strle	r3, [sp, #24]
 80a6cd6:	9305      	strgt	r3, [sp, #20]
 80a6cd8:	f10b 0b01 	add.w	fp, fp, #1
 80a6cdc:	9019      	str	r0, [sp, #100]	; 0x64
 80a6cde:	e7be      	b.n	80a6c5e <_strtod_l+0x146>
 80a6ce0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6ce2:	191a      	adds	r2, r3, r4
 80a6ce4:	9219      	str	r2, [sp, #100]	; 0x64
 80a6ce6:	5d1a      	ldrb	r2, [r3, r4]
 80a6ce8:	f1bb 0f00 	cmp.w	fp, #0
 80a6cec:	d036      	beq.n	80a6d5c <_strtod_l+0x244>
 80a6cee:	465c      	mov	r4, fp
 80a6cf0:	9004      	str	r0, [sp, #16]
 80a6cf2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80a6cf6:	2b09      	cmp	r3, #9
 80a6cf8:	d912      	bls.n	80a6d20 <_strtod_l+0x208>
 80a6cfa:	2301      	movs	r3, #1
 80a6cfc:	e7c1      	b.n	80a6c82 <_strtod_l+0x16a>
 80a6cfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6d00:	3001      	adds	r0, #1
 80a6d02:	1c5a      	adds	r2, r3, #1
 80a6d04:	9219      	str	r2, [sp, #100]	; 0x64
 80a6d06:	785a      	ldrb	r2, [r3, #1]
 80a6d08:	2a30      	cmp	r2, #48	; 0x30
 80a6d0a:	d0f8      	beq.n	80a6cfe <_strtod_l+0x1e6>
 80a6d0c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80a6d10:	2b08      	cmp	r3, #8
 80a6d12:	f200 84d5 	bhi.w	80a76c0 <_strtod_l+0xba8>
 80a6d16:	9004      	str	r0, [sp, #16]
 80a6d18:	2000      	movs	r0, #0
 80a6d1a:	4604      	mov	r4, r0
 80a6d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6d1e:	9308      	str	r3, [sp, #32]
 80a6d20:	3a30      	subs	r2, #48	; 0x30
 80a6d22:	f100 0301 	add.w	r3, r0, #1
 80a6d26:	d013      	beq.n	80a6d50 <_strtod_l+0x238>
 80a6d28:	9904      	ldr	r1, [sp, #16]
 80a6d2a:	1905      	adds	r5, r0, r4
 80a6d2c:	4419      	add	r1, r3
 80a6d2e:	9104      	str	r1, [sp, #16]
 80a6d30:	4623      	mov	r3, r4
 80a6d32:	210a      	movs	r1, #10
 80a6d34:	42ab      	cmp	r3, r5
 80a6d36:	d113      	bne.n	80a6d60 <_strtod_l+0x248>
 80a6d38:	1823      	adds	r3, r4, r0
 80a6d3a:	2b08      	cmp	r3, #8
 80a6d3c:	f104 0401 	add.w	r4, r4, #1
 80a6d40:	4404      	add	r4, r0
 80a6d42:	dc1b      	bgt.n	80a6d7c <_strtod_l+0x264>
 80a6d44:	230a      	movs	r3, #10
 80a6d46:	9906      	ldr	r1, [sp, #24]
 80a6d48:	fb03 2301 	mla	r3, r3, r1, r2
 80a6d4c:	9306      	str	r3, [sp, #24]
 80a6d4e:	2300      	movs	r3, #0
 80a6d50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a6d52:	4618      	mov	r0, r3
 80a6d54:	1c51      	adds	r1, r2, #1
 80a6d56:	9119      	str	r1, [sp, #100]	; 0x64
 80a6d58:	7852      	ldrb	r2, [r2, #1]
 80a6d5a:	e7ca      	b.n	80a6cf2 <_strtod_l+0x1da>
 80a6d5c:	4658      	mov	r0, fp
 80a6d5e:	e7d3      	b.n	80a6d08 <_strtod_l+0x1f0>
 80a6d60:	2b08      	cmp	r3, #8
 80a6d62:	dc04      	bgt.n	80a6d6e <_strtod_l+0x256>
 80a6d64:	9f06      	ldr	r7, [sp, #24]
 80a6d66:	434f      	muls	r7, r1
 80a6d68:	9706      	str	r7, [sp, #24]
 80a6d6a:	3301      	adds	r3, #1
 80a6d6c:	e7e2      	b.n	80a6d34 <_strtod_l+0x21c>
 80a6d6e:	1c5f      	adds	r7, r3, #1
 80a6d70:	2f10      	cmp	r7, #16
 80a6d72:	bfde      	ittt	le
 80a6d74:	9f05      	ldrle	r7, [sp, #20]
 80a6d76:	434f      	mulle	r7, r1
 80a6d78:	9705      	strle	r7, [sp, #20]
 80a6d7a:	e7f6      	b.n	80a6d6a <_strtod_l+0x252>
 80a6d7c:	2c10      	cmp	r4, #16
 80a6d7e:	bfdf      	itttt	le
 80a6d80:	230a      	movle	r3, #10
 80a6d82:	9905      	ldrle	r1, [sp, #20]
 80a6d84:	fb03 2301 	mlale	r3, r3, r1, r2
 80a6d88:	9305      	strle	r3, [sp, #20]
 80a6d8a:	e7e0      	b.n	80a6d4e <_strtod_l+0x236>
 80a6d8c:	2300      	movs	r3, #0
 80a6d8e:	9304      	str	r3, [sp, #16]
 80a6d90:	2301      	movs	r3, #1
 80a6d92:	e77b      	b.n	80a6c8c <_strtod_l+0x174>
 80a6d94:	2700      	movs	r7, #0
 80a6d96:	1cb2      	adds	r2, r6, #2
 80a6d98:	9219      	str	r2, [sp, #100]	; 0x64
 80a6d9a:	78b2      	ldrb	r2, [r6, #2]
 80a6d9c:	e784      	b.n	80a6ca8 <_strtod_l+0x190>
 80a6d9e:	bf00      	nop
 80a6da0:	080a954c 	.word	0x080a954c
 80a6da4:	080a9344 	.word	0x080a9344
 80a6da8:	7ff00000 	.word	0x7ff00000
 80a6dac:	2701      	movs	r7, #1
 80a6dae:	e7f2      	b.n	80a6d96 <_strtod_l+0x27e>
 80a6db0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a6db2:	1c51      	adds	r1, r2, #1
 80a6db4:	9119      	str	r1, [sp, #100]	; 0x64
 80a6db6:	7852      	ldrb	r2, [r2, #1]
 80a6db8:	2a30      	cmp	r2, #48	; 0x30
 80a6dba:	d0f9      	beq.n	80a6db0 <_strtod_l+0x298>
 80a6dbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80a6dc0:	2908      	cmp	r1, #8
 80a6dc2:	f63f af77 	bhi.w	80a6cb4 <_strtod_l+0x19c>
 80a6dc6:	f04f 0e0a 	mov.w	lr, #10
 80a6dca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80a6dce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a6dd0:	9209      	str	r2, [sp, #36]	; 0x24
 80a6dd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a6dd4:	1c51      	adds	r1, r2, #1
 80a6dd6:	9119      	str	r1, [sp, #100]	; 0x64
 80a6dd8:	7852      	ldrb	r2, [r2, #1]
 80a6dda:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80a6dde:	2d09      	cmp	r5, #9
 80a6de0:	d935      	bls.n	80a6e4e <_strtod_l+0x336>
 80a6de2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a6de4:	1b49      	subs	r1, r1, r5
 80a6de6:	2908      	cmp	r1, #8
 80a6de8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80a6dec:	dc02      	bgt.n	80a6df4 <_strtod_l+0x2dc>
 80a6dee:	4565      	cmp	r5, ip
 80a6df0:	bfa8      	it	ge
 80a6df2:	4665      	movge	r5, ip
 80a6df4:	b107      	cbz	r7, 80a6df8 <_strtod_l+0x2e0>
 80a6df6:	426d      	negs	r5, r5
 80a6df8:	2c00      	cmp	r4, #0
 80a6dfa:	d14c      	bne.n	80a6e96 <_strtod_l+0x37e>
 80a6dfc:	9907      	ldr	r1, [sp, #28]
 80a6dfe:	4301      	orrs	r1, r0
 80a6e00:	f47f aecb 	bne.w	80a6b9a <_strtod_l+0x82>
 80a6e04:	2b00      	cmp	r3, #0
 80a6e06:	f47f aee4 	bne.w	80a6bd2 <_strtod_l+0xba>
 80a6e0a:	2a69      	cmp	r2, #105	; 0x69
 80a6e0c:	d026      	beq.n	80a6e5c <_strtod_l+0x344>
 80a6e0e:	dc23      	bgt.n	80a6e58 <_strtod_l+0x340>
 80a6e10:	2a49      	cmp	r2, #73	; 0x49
 80a6e12:	d023      	beq.n	80a6e5c <_strtod_l+0x344>
 80a6e14:	2a4e      	cmp	r2, #78	; 0x4e
 80a6e16:	f47f aedc 	bne.w	80a6bd2 <_strtod_l+0xba>
 80a6e1a:	499d      	ldr	r1, [pc, #628]	; (80a7090 <_strtod_l+0x578>)
 80a6e1c:	a819      	add	r0, sp, #100	; 0x64
 80a6e1e:	f001 f9d9 	bl	80a81d4 <__match>
 80a6e22:	2800      	cmp	r0, #0
 80a6e24:	f43f aed5 	beq.w	80a6bd2 <_strtod_l+0xba>
 80a6e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6e2a:	781b      	ldrb	r3, [r3, #0]
 80a6e2c:	2b28      	cmp	r3, #40	; 0x28
 80a6e2e:	d12c      	bne.n	80a6e8a <_strtod_l+0x372>
 80a6e30:	4998      	ldr	r1, [pc, #608]	; (80a7094 <_strtod_l+0x57c>)
 80a6e32:	aa1c      	add	r2, sp, #112	; 0x70
 80a6e34:	a819      	add	r0, sp, #100	; 0x64
 80a6e36:	f001 f9e1 	bl	80a81fc <__hexnan>
 80a6e3a:	2805      	cmp	r0, #5
 80a6e3c:	d125      	bne.n	80a6e8a <_strtod_l+0x372>
 80a6e3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80a6e40:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80a6e44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a6e48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a6e4c:	e6a5      	b.n	80a6b9a <_strtod_l+0x82>
 80a6e4e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80a6e52:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80a6e56:	e7bc      	b.n	80a6dd2 <_strtod_l+0x2ba>
 80a6e58:	2a6e      	cmp	r2, #110	; 0x6e
 80a6e5a:	e7dc      	b.n	80a6e16 <_strtod_l+0x2fe>
 80a6e5c:	498e      	ldr	r1, [pc, #568]	; (80a7098 <_strtod_l+0x580>)
 80a6e5e:	a819      	add	r0, sp, #100	; 0x64
 80a6e60:	f001 f9b8 	bl	80a81d4 <__match>
 80a6e64:	2800      	cmp	r0, #0
 80a6e66:	f43f aeb4 	beq.w	80a6bd2 <_strtod_l+0xba>
 80a6e6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6e6c:	498b      	ldr	r1, [pc, #556]	; (80a709c <_strtod_l+0x584>)
 80a6e6e:	3b01      	subs	r3, #1
 80a6e70:	a819      	add	r0, sp, #100	; 0x64
 80a6e72:	9319      	str	r3, [sp, #100]	; 0x64
 80a6e74:	f001 f9ae 	bl	80a81d4 <__match>
 80a6e78:	b910      	cbnz	r0, 80a6e80 <_strtod_l+0x368>
 80a6e7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a6e7c:	3301      	adds	r3, #1
 80a6e7e:	9319      	str	r3, [sp, #100]	; 0x64
 80a6e80:	f04f 0800 	mov.w	r8, #0
 80a6e84:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80a70a0 <_strtod_l+0x588>
 80a6e88:	e687      	b.n	80a6b9a <_strtod_l+0x82>
 80a6e8a:	4886      	ldr	r0, [pc, #536]	; (80a70a4 <_strtod_l+0x58c>)
 80a6e8c:	f002 f824 	bl	80a8ed8 <nan>
 80a6e90:	4680      	mov	r8, r0
 80a6e92:	4689      	mov	r9, r1
 80a6e94:	e681      	b.n	80a6b9a <_strtod_l+0x82>
 80a6e96:	9b04      	ldr	r3, [sp, #16]
 80a6e98:	f1bb 0f00 	cmp.w	fp, #0
 80a6e9c:	bf08      	it	eq
 80a6e9e:	46a3      	moveq	fp, r4
 80a6ea0:	1aeb      	subs	r3, r5, r3
 80a6ea2:	2c10      	cmp	r4, #16
 80a6ea4:	9806      	ldr	r0, [sp, #24]
 80a6ea6:	4626      	mov	r6, r4
 80a6ea8:	9307      	str	r3, [sp, #28]
 80a6eaa:	bfa8      	it	ge
 80a6eac:	2610      	movge	r6, #16
 80a6eae:	f7fe fc1b 	bl	80a56e8 <__aeabi_ui2d>
 80a6eb2:	2c09      	cmp	r4, #9
 80a6eb4:	4680      	mov	r8, r0
 80a6eb6:	4689      	mov	r9, r1
 80a6eb8:	dd13      	ble.n	80a6ee2 <_strtod_l+0x3ca>
 80a6eba:	4b7b      	ldr	r3, [pc, #492]	; (80a70a8 <_strtod_l+0x590>)
 80a6ebc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a6ec0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a6ec4:	f7fe fc8a 	bl	80a57dc <__aeabi_dmul>
 80a6ec8:	4680      	mov	r8, r0
 80a6eca:	9805      	ldr	r0, [sp, #20]
 80a6ecc:	4689      	mov	r9, r1
 80a6ece:	f7fe fc0b 	bl	80a56e8 <__aeabi_ui2d>
 80a6ed2:	4602      	mov	r2, r0
 80a6ed4:	460b      	mov	r3, r1
 80a6ed6:	4640      	mov	r0, r8
 80a6ed8:	4649      	mov	r1, r9
 80a6eda:	f7fe fac9 	bl	80a5470 <__adddf3>
 80a6ede:	4680      	mov	r8, r0
 80a6ee0:	4689      	mov	r9, r1
 80a6ee2:	2c0f      	cmp	r4, #15
 80a6ee4:	dc36      	bgt.n	80a6f54 <_strtod_l+0x43c>
 80a6ee6:	9b07      	ldr	r3, [sp, #28]
 80a6ee8:	2b00      	cmp	r3, #0
 80a6eea:	f43f ae56 	beq.w	80a6b9a <_strtod_l+0x82>
 80a6eee:	dd22      	ble.n	80a6f36 <_strtod_l+0x41e>
 80a6ef0:	2b16      	cmp	r3, #22
 80a6ef2:	dc09      	bgt.n	80a6f08 <_strtod_l+0x3f0>
 80a6ef4:	496c      	ldr	r1, [pc, #432]	; (80a70a8 <_strtod_l+0x590>)
 80a6ef6:	4642      	mov	r2, r8
 80a6ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a6efc:	464b      	mov	r3, r9
 80a6efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a6f02:	f7fe fc6b 	bl	80a57dc <__aeabi_dmul>
 80a6f06:	e7c3      	b.n	80a6e90 <_strtod_l+0x378>
 80a6f08:	9a07      	ldr	r2, [sp, #28]
 80a6f0a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80a6f0e:	4293      	cmp	r3, r2
 80a6f10:	db20      	blt.n	80a6f54 <_strtod_l+0x43c>
 80a6f12:	4d65      	ldr	r5, [pc, #404]	; (80a70a8 <_strtod_l+0x590>)
 80a6f14:	f1c4 040f 	rsb	r4, r4, #15
 80a6f18:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80a6f1c:	4642      	mov	r2, r8
 80a6f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a6f22:	464b      	mov	r3, r9
 80a6f24:	f7fe fc5a 	bl	80a57dc <__aeabi_dmul>
 80a6f28:	9b07      	ldr	r3, [sp, #28]
 80a6f2a:	1b1c      	subs	r4, r3, r4
 80a6f2c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80a6f30:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a6f34:	e7e5      	b.n	80a6f02 <_strtod_l+0x3ea>
 80a6f36:	9b07      	ldr	r3, [sp, #28]
 80a6f38:	3316      	adds	r3, #22
 80a6f3a:	db0b      	blt.n	80a6f54 <_strtod_l+0x43c>
 80a6f3c:	9b04      	ldr	r3, [sp, #16]
 80a6f3e:	4640      	mov	r0, r8
 80a6f40:	1b5d      	subs	r5, r3, r5
 80a6f42:	4b59      	ldr	r3, [pc, #356]	; (80a70a8 <_strtod_l+0x590>)
 80a6f44:	4649      	mov	r1, r9
 80a6f46:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a6f4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a6f4e:	f7fe fd6f 	bl	80a5a30 <__aeabi_ddiv>
 80a6f52:	e79d      	b.n	80a6e90 <_strtod_l+0x378>
 80a6f54:	9b07      	ldr	r3, [sp, #28]
 80a6f56:	1ba6      	subs	r6, r4, r6
 80a6f58:	441e      	add	r6, r3
 80a6f5a:	2e00      	cmp	r6, #0
 80a6f5c:	dd74      	ble.n	80a7048 <_strtod_l+0x530>
 80a6f5e:	f016 030f 	ands.w	r3, r6, #15
 80a6f62:	d00a      	beq.n	80a6f7a <_strtod_l+0x462>
 80a6f64:	4950      	ldr	r1, [pc, #320]	; (80a70a8 <_strtod_l+0x590>)
 80a6f66:	4642      	mov	r2, r8
 80a6f68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a6f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a6f70:	464b      	mov	r3, r9
 80a6f72:	f7fe fc33 	bl	80a57dc <__aeabi_dmul>
 80a6f76:	4680      	mov	r8, r0
 80a6f78:	4689      	mov	r9, r1
 80a6f7a:	f036 060f 	bics.w	r6, r6, #15
 80a6f7e:	d052      	beq.n	80a7026 <_strtod_l+0x50e>
 80a6f80:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80a6f84:	dd27      	ble.n	80a6fd6 <_strtod_l+0x4be>
 80a6f86:	f04f 0b00 	mov.w	fp, #0
 80a6f8a:	f8cd b010 	str.w	fp, [sp, #16]
 80a6f8e:	f8cd b020 	str.w	fp, [sp, #32]
 80a6f92:	f8cd b018 	str.w	fp, [sp, #24]
 80a6f96:	2322      	movs	r3, #34	; 0x22
 80a6f98:	f04f 0800 	mov.w	r8, #0
 80a6f9c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80a70a0 <_strtod_l+0x588>
 80a6fa0:	f8ca 3000 	str.w	r3, [sl]
 80a6fa4:	9b08      	ldr	r3, [sp, #32]
 80a6fa6:	2b00      	cmp	r3, #0
 80a6fa8:	f43f adf7 	beq.w	80a6b9a <_strtod_l+0x82>
 80a6fac:	4650      	mov	r0, sl
 80a6fae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a6fb0:	f001 fb0c 	bl	80a85cc <_Bfree>
 80a6fb4:	4650      	mov	r0, sl
 80a6fb6:	9906      	ldr	r1, [sp, #24]
 80a6fb8:	f001 fb08 	bl	80a85cc <_Bfree>
 80a6fbc:	4650      	mov	r0, sl
 80a6fbe:	9904      	ldr	r1, [sp, #16]
 80a6fc0:	f001 fb04 	bl	80a85cc <_Bfree>
 80a6fc4:	4650      	mov	r0, sl
 80a6fc6:	9908      	ldr	r1, [sp, #32]
 80a6fc8:	f001 fb00 	bl	80a85cc <_Bfree>
 80a6fcc:	4659      	mov	r1, fp
 80a6fce:	4650      	mov	r0, sl
 80a6fd0:	f001 fafc 	bl	80a85cc <_Bfree>
 80a6fd4:	e5e1      	b.n	80a6b9a <_strtod_l+0x82>
 80a6fd6:	4b35      	ldr	r3, [pc, #212]	; (80a70ac <_strtod_l+0x594>)
 80a6fd8:	4640      	mov	r0, r8
 80a6fda:	9305      	str	r3, [sp, #20]
 80a6fdc:	2300      	movs	r3, #0
 80a6fde:	4649      	mov	r1, r9
 80a6fe0:	461f      	mov	r7, r3
 80a6fe2:	1136      	asrs	r6, r6, #4
 80a6fe4:	2e01      	cmp	r6, #1
 80a6fe6:	dc21      	bgt.n	80a702c <_strtod_l+0x514>
 80a6fe8:	b10b      	cbz	r3, 80a6fee <_strtod_l+0x4d6>
 80a6fea:	4680      	mov	r8, r0
 80a6fec:	4689      	mov	r9, r1
 80a6fee:	4b2f      	ldr	r3, [pc, #188]	; (80a70ac <_strtod_l+0x594>)
 80a6ff0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a6ff4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a6ff8:	4642      	mov	r2, r8
 80a6ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a6ffe:	464b      	mov	r3, r9
 80a7000:	f7fe fbec 	bl	80a57dc <__aeabi_dmul>
 80a7004:	4b26      	ldr	r3, [pc, #152]	; (80a70a0 <_strtod_l+0x588>)
 80a7006:	460a      	mov	r2, r1
 80a7008:	400b      	ands	r3, r1
 80a700a:	4929      	ldr	r1, [pc, #164]	; (80a70b0 <_strtod_l+0x598>)
 80a700c:	4680      	mov	r8, r0
 80a700e:	428b      	cmp	r3, r1
 80a7010:	d8b9      	bhi.n	80a6f86 <_strtod_l+0x46e>
 80a7012:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a7016:	428b      	cmp	r3, r1
 80a7018:	bf86      	itte	hi
 80a701a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80a701e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80a70b4 <_strtod_l+0x59c>
 80a7022:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a7026:	2300      	movs	r3, #0
 80a7028:	9305      	str	r3, [sp, #20]
 80a702a:	e07f      	b.n	80a712c <_strtod_l+0x614>
 80a702c:	07f2      	lsls	r2, r6, #31
 80a702e:	d505      	bpl.n	80a703c <_strtod_l+0x524>
 80a7030:	9b05      	ldr	r3, [sp, #20]
 80a7032:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7036:	f7fe fbd1 	bl	80a57dc <__aeabi_dmul>
 80a703a:	2301      	movs	r3, #1
 80a703c:	9a05      	ldr	r2, [sp, #20]
 80a703e:	3701      	adds	r7, #1
 80a7040:	3208      	adds	r2, #8
 80a7042:	1076      	asrs	r6, r6, #1
 80a7044:	9205      	str	r2, [sp, #20]
 80a7046:	e7cd      	b.n	80a6fe4 <_strtod_l+0x4cc>
 80a7048:	d0ed      	beq.n	80a7026 <_strtod_l+0x50e>
 80a704a:	4276      	negs	r6, r6
 80a704c:	f016 020f 	ands.w	r2, r6, #15
 80a7050:	d00a      	beq.n	80a7068 <_strtod_l+0x550>
 80a7052:	4b15      	ldr	r3, [pc, #84]	; (80a70a8 <_strtod_l+0x590>)
 80a7054:	4640      	mov	r0, r8
 80a7056:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a705a:	4649      	mov	r1, r9
 80a705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7060:	f7fe fce6 	bl	80a5a30 <__aeabi_ddiv>
 80a7064:	4680      	mov	r8, r0
 80a7066:	4689      	mov	r9, r1
 80a7068:	1136      	asrs	r6, r6, #4
 80a706a:	d0dc      	beq.n	80a7026 <_strtod_l+0x50e>
 80a706c:	2e1f      	cmp	r6, #31
 80a706e:	dd23      	ble.n	80a70b8 <_strtod_l+0x5a0>
 80a7070:	f04f 0b00 	mov.w	fp, #0
 80a7074:	f8cd b010 	str.w	fp, [sp, #16]
 80a7078:	f8cd b020 	str.w	fp, [sp, #32]
 80a707c:	f8cd b018 	str.w	fp, [sp, #24]
 80a7080:	2322      	movs	r3, #34	; 0x22
 80a7082:	f04f 0800 	mov.w	r8, #0
 80a7086:	f04f 0900 	mov.w	r9, #0
 80a708a:	f8ca 3000 	str.w	r3, [sl]
 80a708e:	e789      	b.n	80a6fa4 <_strtod_l+0x48c>
 80a7090:	080a9341 	.word	0x080a9341
 80a7094:	080a9358 	.word	0x080a9358
 80a7098:	080a9338 	.word	0x080a9338
 80a709c:	080a933b 	.word	0x080a933b
 80a70a0:	7ff00000 	.word	0x7ff00000
 80a70a4:	080a9548 	.word	0x080a9548
 80a70a8:	080a95e8 	.word	0x080a95e8
 80a70ac:	080a95c0 	.word	0x080a95c0
 80a70b0:	7ca00000 	.word	0x7ca00000
 80a70b4:	7fefffff 	.word	0x7fefffff
 80a70b8:	f016 0310 	ands.w	r3, r6, #16
 80a70bc:	bf18      	it	ne
 80a70be:	236a      	movne	r3, #106	; 0x6a
 80a70c0:	4640      	mov	r0, r8
 80a70c2:	9305      	str	r3, [sp, #20]
 80a70c4:	4649      	mov	r1, r9
 80a70c6:	2300      	movs	r3, #0
 80a70c8:	4fb0      	ldr	r7, [pc, #704]	; (80a738c <_strtod_l+0x874>)
 80a70ca:	07f2      	lsls	r2, r6, #31
 80a70cc:	d504      	bpl.n	80a70d8 <_strtod_l+0x5c0>
 80a70ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a70d2:	f7fe fb83 	bl	80a57dc <__aeabi_dmul>
 80a70d6:	2301      	movs	r3, #1
 80a70d8:	1076      	asrs	r6, r6, #1
 80a70da:	f107 0708 	add.w	r7, r7, #8
 80a70de:	d1f4      	bne.n	80a70ca <_strtod_l+0x5b2>
 80a70e0:	b10b      	cbz	r3, 80a70e6 <_strtod_l+0x5ce>
 80a70e2:	4680      	mov	r8, r0
 80a70e4:	4689      	mov	r9, r1
 80a70e6:	9b05      	ldr	r3, [sp, #20]
 80a70e8:	b1c3      	cbz	r3, 80a711c <_strtod_l+0x604>
 80a70ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80a70ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80a70f2:	2b00      	cmp	r3, #0
 80a70f4:	4649      	mov	r1, r9
 80a70f6:	dd11      	ble.n	80a711c <_strtod_l+0x604>
 80a70f8:	2b1f      	cmp	r3, #31
 80a70fa:	f340 8127 	ble.w	80a734c <_strtod_l+0x834>
 80a70fe:	2b34      	cmp	r3, #52	; 0x34
 80a7100:	bfd8      	it	le
 80a7102:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80a7106:	f04f 0800 	mov.w	r8, #0
 80a710a:	bfcf      	iteee	gt
 80a710c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a7110:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80a7114:	fa03 f202 	lslle.w	r2, r3, r2
 80a7118:	ea02 0901 	andle.w	r9, r2, r1
 80a711c:	2200      	movs	r2, #0
 80a711e:	2300      	movs	r3, #0
 80a7120:	4640      	mov	r0, r8
 80a7122:	4649      	mov	r1, r9
 80a7124:	f7fe fdc2 	bl	80a5cac <__aeabi_dcmpeq>
 80a7128:	2800      	cmp	r0, #0
 80a712a:	d1a1      	bne.n	80a7070 <_strtod_l+0x558>
 80a712c:	9b06      	ldr	r3, [sp, #24]
 80a712e:	465a      	mov	r2, fp
 80a7130:	9300      	str	r3, [sp, #0]
 80a7132:	4650      	mov	r0, sl
 80a7134:	4623      	mov	r3, r4
 80a7136:	9908      	ldr	r1, [sp, #32]
 80a7138:	f001 fab0 	bl	80a869c <__s2b>
 80a713c:	9008      	str	r0, [sp, #32]
 80a713e:	2800      	cmp	r0, #0
 80a7140:	f43f af21 	beq.w	80a6f86 <_strtod_l+0x46e>
 80a7144:	9b04      	ldr	r3, [sp, #16]
 80a7146:	f04f 0b00 	mov.w	fp, #0
 80a714a:	1b5d      	subs	r5, r3, r5
 80a714c:	9b07      	ldr	r3, [sp, #28]
 80a714e:	f8cd b010 	str.w	fp, [sp, #16]
 80a7152:	2b00      	cmp	r3, #0
 80a7154:	bfb4      	ite	lt
 80a7156:	462b      	movlt	r3, r5
 80a7158:	2300      	movge	r3, #0
 80a715a:	930e      	str	r3, [sp, #56]	; 0x38
 80a715c:	9b07      	ldr	r3, [sp, #28]
 80a715e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a7162:	9314      	str	r3, [sp, #80]	; 0x50
 80a7164:	9b08      	ldr	r3, [sp, #32]
 80a7166:	4650      	mov	r0, sl
 80a7168:	6859      	ldr	r1, [r3, #4]
 80a716a:	f001 f9ef 	bl	80a854c <_Balloc>
 80a716e:	9006      	str	r0, [sp, #24]
 80a7170:	2800      	cmp	r0, #0
 80a7172:	f43f af10 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a7176:	9b08      	ldr	r3, [sp, #32]
 80a7178:	300c      	adds	r0, #12
 80a717a:	691a      	ldr	r2, [r3, #16]
 80a717c:	f103 010c 	add.w	r1, r3, #12
 80a7180:	3202      	adds	r2, #2
 80a7182:	0092      	lsls	r2, r2, #2
 80a7184:	f7ff fc18 	bl	80a69b8 <memcpy>
 80a7188:	ab1c      	add	r3, sp, #112	; 0x70
 80a718a:	9301      	str	r3, [sp, #4]
 80a718c:	ab1b      	add	r3, sp, #108	; 0x6c
 80a718e:	9300      	str	r3, [sp, #0]
 80a7190:	4642      	mov	r2, r8
 80a7192:	464b      	mov	r3, r9
 80a7194:	4650      	mov	r0, sl
 80a7196:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80a719a:	f001 fdc1 	bl	80a8d20 <__d2b>
 80a719e:	901a      	str	r0, [sp, #104]	; 0x68
 80a71a0:	2800      	cmp	r0, #0
 80a71a2:	f43f aef8 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a71a6:	2101      	movs	r1, #1
 80a71a8:	4650      	mov	r0, sl
 80a71aa:	f001 fb0f 	bl	80a87cc <__i2b>
 80a71ae:	4603      	mov	r3, r0
 80a71b0:	9004      	str	r0, [sp, #16]
 80a71b2:	2800      	cmp	r0, #0
 80a71b4:	f43f aeef 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a71b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80a71ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a71bc:	2d00      	cmp	r5, #0
 80a71be:	bfab      	itete	ge
 80a71c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80a71c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80a71c4:	18ee      	addge	r6, r5, r3
 80a71c6:	1b5c      	sublt	r4, r3, r5
 80a71c8:	9b05      	ldr	r3, [sp, #20]
 80a71ca:	bfa8      	it	ge
 80a71cc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80a71ce:	eba5 0503 	sub.w	r5, r5, r3
 80a71d2:	4415      	add	r5, r2
 80a71d4:	4b6e      	ldr	r3, [pc, #440]	; (80a7390 <_strtod_l+0x878>)
 80a71d6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80a71da:	bfb8      	it	lt
 80a71dc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80a71de:	429d      	cmp	r5, r3
 80a71e0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80a71e4:	f280 80c4 	bge.w	80a7370 <_strtod_l+0x858>
 80a71e8:	1b5b      	subs	r3, r3, r5
 80a71ea:	2b1f      	cmp	r3, #31
 80a71ec:	f04f 0701 	mov.w	r7, #1
 80a71f0:	eba2 0203 	sub.w	r2, r2, r3
 80a71f4:	f300 80b1 	bgt.w	80a735a <_strtod_l+0x842>
 80a71f8:	2500      	movs	r5, #0
 80a71fa:	fa07 f303 	lsl.w	r3, r7, r3
 80a71fe:	930f      	str	r3, [sp, #60]	; 0x3c
 80a7200:	18b7      	adds	r7, r6, r2
 80a7202:	9b05      	ldr	r3, [sp, #20]
 80a7204:	42be      	cmp	r6, r7
 80a7206:	4414      	add	r4, r2
 80a7208:	441c      	add	r4, r3
 80a720a:	4633      	mov	r3, r6
 80a720c:	bfa8      	it	ge
 80a720e:	463b      	movge	r3, r7
 80a7210:	42a3      	cmp	r3, r4
 80a7212:	bfa8      	it	ge
 80a7214:	4623      	movge	r3, r4
 80a7216:	2b00      	cmp	r3, #0
 80a7218:	bfc2      	ittt	gt
 80a721a:	1aff      	subgt	r7, r7, r3
 80a721c:	1ae4      	subgt	r4, r4, r3
 80a721e:	1af6      	subgt	r6, r6, r3
 80a7220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a7222:	2b00      	cmp	r3, #0
 80a7224:	dd17      	ble.n	80a7256 <_strtod_l+0x73e>
 80a7226:	461a      	mov	r2, r3
 80a7228:	4650      	mov	r0, sl
 80a722a:	9904      	ldr	r1, [sp, #16]
 80a722c:	f001 fb8c 	bl	80a8948 <__pow5mult>
 80a7230:	9004      	str	r0, [sp, #16]
 80a7232:	2800      	cmp	r0, #0
 80a7234:	f43f aeaf 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a7238:	4601      	mov	r1, r0
 80a723a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80a723c:	4650      	mov	r0, sl
 80a723e:	f001 fadb 	bl	80a87f8 <__multiply>
 80a7242:	9009      	str	r0, [sp, #36]	; 0x24
 80a7244:	2800      	cmp	r0, #0
 80a7246:	f43f aea6 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a724a:	4650      	mov	r0, sl
 80a724c:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a724e:	f001 f9bd 	bl	80a85cc <_Bfree>
 80a7252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7254:	931a      	str	r3, [sp, #104]	; 0x68
 80a7256:	2f00      	cmp	r7, #0
 80a7258:	f300 808e 	bgt.w	80a7378 <_strtod_l+0x860>
 80a725c:	9b07      	ldr	r3, [sp, #28]
 80a725e:	2b00      	cmp	r3, #0
 80a7260:	dd08      	ble.n	80a7274 <_strtod_l+0x75c>
 80a7262:	4650      	mov	r0, sl
 80a7264:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a7266:	9906      	ldr	r1, [sp, #24]
 80a7268:	f001 fb6e 	bl	80a8948 <__pow5mult>
 80a726c:	9006      	str	r0, [sp, #24]
 80a726e:	2800      	cmp	r0, #0
 80a7270:	f43f ae91 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a7274:	2c00      	cmp	r4, #0
 80a7276:	dd08      	ble.n	80a728a <_strtod_l+0x772>
 80a7278:	4622      	mov	r2, r4
 80a727a:	4650      	mov	r0, sl
 80a727c:	9906      	ldr	r1, [sp, #24]
 80a727e:	f001 fbbd 	bl	80a89fc <__lshift>
 80a7282:	9006      	str	r0, [sp, #24]
 80a7284:	2800      	cmp	r0, #0
 80a7286:	f43f ae86 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a728a:	2e00      	cmp	r6, #0
 80a728c:	dd08      	ble.n	80a72a0 <_strtod_l+0x788>
 80a728e:	4632      	mov	r2, r6
 80a7290:	4650      	mov	r0, sl
 80a7292:	9904      	ldr	r1, [sp, #16]
 80a7294:	f001 fbb2 	bl	80a89fc <__lshift>
 80a7298:	9004      	str	r0, [sp, #16]
 80a729a:	2800      	cmp	r0, #0
 80a729c:	f43f ae7b 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a72a0:	4650      	mov	r0, sl
 80a72a2:	9a06      	ldr	r2, [sp, #24]
 80a72a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a72a6:	f001 fc35 	bl	80a8b14 <__mdiff>
 80a72aa:	4683      	mov	fp, r0
 80a72ac:	2800      	cmp	r0, #0
 80a72ae:	f43f ae72 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a72b2:	2400      	movs	r4, #0
 80a72b4:	68c3      	ldr	r3, [r0, #12]
 80a72b6:	9904      	ldr	r1, [sp, #16]
 80a72b8:	60c4      	str	r4, [r0, #12]
 80a72ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80a72bc:	f001 fc0e 	bl	80a8adc <__mcmp>
 80a72c0:	42a0      	cmp	r0, r4
 80a72c2:	da6b      	bge.n	80a739c <_strtod_l+0x884>
 80a72c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a72c6:	ea53 0308 	orrs.w	r3, r3, r8
 80a72ca:	f040 8091 	bne.w	80a73f0 <_strtod_l+0x8d8>
 80a72ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a72d2:	2b00      	cmp	r3, #0
 80a72d4:	f040 808c 	bne.w	80a73f0 <_strtod_l+0x8d8>
 80a72d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a72dc:	0d1b      	lsrs	r3, r3, #20
 80a72de:	051b      	lsls	r3, r3, #20
 80a72e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a72e4:	f240 8084 	bls.w	80a73f0 <_strtod_l+0x8d8>
 80a72e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a72ec:	b91b      	cbnz	r3, 80a72f6 <_strtod_l+0x7de>
 80a72ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a72f2:	2b01      	cmp	r3, #1
 80a72f4:	dd7c      	ble.n	80a73f0 <_strtod_l+0x8d8>
 80a72f6:	4659      	mov	r1, fp
 80a72f8:	2201      	movs	r2, #1
 80a72fa:	4650      	mov	r0, sl
 80a72fc:	f001 fb7e 	bl	80a89fc <__lshift>
 80a7300:	9904      	ldr	r1, [sp, #16]
 80a7302:	4683      	mov	fp, r0
 80a7304:	f001 fbea 	bl	80a8adc <__mcmp>
 80a7308:	2800      	cmp	r0, #0
 80a730a:	dd71      	ble.n	80a73f0 <_strtod_l+0x8d8>
 80a730c:	9905      	ldr	r1, [sp, #20]
 80a730e:	464b      	mov	r3, r9
 80a7310:	4a20      	ldr	r2, [pc, #128]	; (80a7394 <_strtod_l+0x87c>)
 80a7312:	2900      	cmp	r1, #0
 80a7314:	f000 808c 	beq.w	80a7430 <_strtod_l+0x918>
 80a7318:	ea02 0109 	and.w	r1, r2, r9
 80a731c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80a7320:	f300 8086 	bgt.w	80a7430 <_strtod_l+0x918>
 80a7324:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80a7328:	f77f aeaa 	ble.w	80a7080 <_strtod_l+0x568>
 80a732c:	4640      	mov	r0, r8
 80a732e:	4649      	mov	r1, r9
 80a7330:	4b19      	ldr	r3, [pc, #100]	; (80a7398 <_strtod_l+0x880>)
 80a7332:	2200      	movs	r2, #0
 80a7334:	f7fe fa52 	bl	80a57dc <__aeabi_dmul>
 80a7338:	460b      	mov	r3, r1
 80a733a:	4303      	orrs	r3, r0
 80a733c:	bf08      	it	eq
 80a733e:	2322      	moveq	r3, #34	; 0x22
 80a7340:	4680      	mov	r8, r0
 80a7342:	4689      	mov	r9, r1
 80a7344:	bf08      	it	eq
 80a7346:	f8ca 3000 	streq.w	r3, [sl]
 80a734a:	e62f      	b.n	80a6fac <_strtod_l+0x494>
 80a734c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a7350:	fa02 f303 	lsl.w	r3, r2, r3
 80a7354:	ea03 0808 	and.w	r8, r3, r8
 80a7358:	e6e0      	b.n	80a711c <_strtod_l+0x604>
 80a735a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80a735e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80a7362:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80a7366:	35e2      	adds	r5, #226	; 0xe2
 80a7368:	fa07 f505 	lsl.w	r5, r7, r5
 80a736c:	970f      	str	r7, [sp, #60]	; 0x3c
 80a736e:	e747      	b.n	80a7200 <_strtod_l+0x6e8>
 80a7370:	2301      	movs	r3, #1
 80a7372:	2500      	movs	r5, #0
 80a7374:	930f      	str	r3, [sp, #60]	; 0x3c
 80a7376:	e743      	b.n	80a7200 <_strtod_l+0x6e8>
 80a7378:	463a      	mov	r2, r7
 80a737a:	4650      	mov	r0, sl
 80a737c:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a737e:	f001 fb3d 	bl	80a89fc <__lshift>
 80a7382:	901a      	str	r0, [sp, #104]	; 0x68
 80a7384:	2800      	cmp	r0, #0
 80a7386:	f47f af69 	bne.w	80a725c <_strtod_l+0x744>
 80a738a:	e604      	b.n	80a6f96 <_strtod_l+0x47e>
 80a738c:	080a9370 	.word	0x080a9370
 80a7390:	fffffc02 	.word	0xfffffc02
 80a7394:	7ff00000 	.word	0x7ff00000
 80a7398:	39500000 	.word	0x39500000
 80a739c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a73a0:	d165      	bne.n	80a746e <_strtod_l+0x956>
 80a73a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a73a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a73a8:	b35a      	cbz	r2, 80a7402 <_strtod_l+0x8ea>
 80a73aa:	4a99      	ldr	r2, [pc, #612]	; (80a7610 <_strtod_l+0xaf8>)
 80a73ac:	4293      	cmp	r3, r2
 80a73ae:	d12b      	bne.n	80a7408 <_strtod_l+0x8f0>
 80a73b0:	9b05      	ldr	r3, [sp, #20]
 80a73b2:	4641      	mov	r1, r8
 80a73b4:	b303      	cbz	r3, 80a73f8 <_strtod_l+0x8e0>
 80a73b6:	464a      	mov	r2, r9
 80a73b8:	4b96      	ldr	r3, [pc, #600]	; (80a7614 <_strtod_l+0xafc>)
 80a73ba:	4013      	ands	r3, r2
 80a73bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a73c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a73c4:	d81b      	bhi.n	80a73fe <_strtod_l+0x8e6>
 80a73c6:	0d1b      	lsrs	r3, r3, #20
 80a73c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a73cc:	fa02 f303 	lsl.w	r3, r2, r3
 80a73d0:	4299      	cmp	r1, r3
 80a73d2:	d119      	bne.n	80a7408 <_strtod_l+0x8f0>
 80a73d4:	4b90      	ldr	r3, [pc, #576]	; (80a7618 <_strtod_l+0xb00>)
 80a73d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a73d8:	429a      	cmp	r2, r3
 80a73da:	d102      	bne.n	80a73e2 <_strtod_l+0x8ca>
 80a73dc:	3101      	adds	r1, #1
 80a73de:	f43f adda 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a73e2:	f04f 0800 	mov.w	r8, #0
 80a73e6:	4b8b      	ldr	r3, [pc, #556]	; (80a7614 <_strtod_l+0xafc>)
 80a73e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a73ea:	401a      	ands	r2, r3
 80a73ec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80a73f0:	9b05      	ldr	r3, [sp, #20]
 80a73f2:	2b00      	cmp	r3, #0
 80a73f4:	d19a      	bne.n	80a732c <_strtod_l+0x814>
 80a73f6:	e5d9      	b.n	80a6fac <_strtod_l+0x494>
 80a73f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a73fc:	e7e8      	b.n	80a73d0 <_strtod_l+0x8b8>
 80a73fe:	4613      	mov	r3, r2
 80a7400:	e7e6      	b.n	80a73d0 <_strtod_l+0x8b8>
 80a7402:	ea53 0308 	orrs.w	r3, r3, r8
 80a7406:	d081      	beq.n	80a730c <_strtod_l+0x7f4>
 80a7408:	b1e5      	cbz	r5, 80a7444 <_strtod_l+0x92c>
 80a740a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a740c:	421d      	tst	r5, r3
 80a740e:	d0ef      	beq.n	80a73f0 <_strtod_l+0x8d8>
 80a7410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a7412:	4640      	mov	r0, r8
 80a7414:	4649      	mov	r1, r9
 80a7416:	9a05      	ldr	r2, [sp, #20]
 80a7418:	b1c3      	cbz	r3, 80a744c <_strtod_l+0x934>
 80a741a:	f7ff fb5a 	bl	80a6ad2 <sulp>
 80a741e:	4602      	mov	r2, r0
 80a7420:	460b      	mov	r3, r1
 80a7422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a7426:	f7fe f823 	bl	80a5470 <__adddf3>
 80a742a:	4680      	mov	r8, r0
 80a742c:	4689      	mov	r9, r1
 80a742e:	e7df      	b.n	80a73f0 <_strtod_l+0x8d8>
 80a7430:	4013      	ands	r3, r2
 80a7432:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a7436:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a743a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a743e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a7442:	e7d5      	b.n	80a73f0 <_strtod_l+0x8d8>
 80a7444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a7446:	ea13 0f08 	tst.w	r3, r8
 80a744a:	e7e0      	b.n	80a740e <_strtod_l+0x8f6>
 80a744c:	f7ff fb41 	bl	80a6ad2 <sulp>
 80a7450:	4602      	mov	r2, r0
 80a7452:	460b      	mov	r3, r1
 80a7454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a7458:	f7fe f808 	bl	80a546c <__aeabi_dsub>
 80a745c:	2200      	movs	r2, #0
 80a745e:	2300      	movs	r3, #0
 80a7460:	4680      	mov	r8, r0
 80a7462:	4689      	mov	r9, r1
 80a7464:	f7fe fc22 	bl	80a5cac <__aeabi_dcmpeq>
 80a7468:	2800      	cmp	r0, #0
 80a746a:	d0c1      	beq.n	80a73f0 <_strtod_l+0x8d8>
 80a746c:	e608      	b.n	80a7080 <_strtod_l+0x568>
 80a746e:	4658      	mov	r0, fp
 80a7470:	9904      	ldr	r1, [sp, #16]
 80a7472:	f001 fcb1 	bl	80a8dd8 <__ratio>
 80a7476:	2200      	movs	r2, #0
 80a7478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a747c:	4606      	mov	r6, r0
 80a747e:	460f      	mov	r7, r1
 80a7480:	f7fe fc28 	bl	80a5cd4 <__aeabi_dcmple>
 80a7484:	2800      	cmp	r0, #0
 80a7486:	d070      	beq.n	80a756a <_strtod_l+0xa52>
 80a7488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a748a:	2b00      	cmp	r3, #0
 80a748c:	d042      	beq.n	80a7514 <_strtod_l+0x9fc>
 80a748e:	2600      	movs	r6, #0
 80a7490:	4f62      	ldr	r7, [pc, #392]	; (80a761c <_strtod_l+0xb04>)
 80a7492:	4d62      	ldr	r5, [pc, #392]	; (80a761c <_strtod_l+0xb04>)
 80a7494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80a749a:	0d1b      	lsrs	r3, r3, #20
 80a749c:	051b      	lsls	r3, r3, #20
 80a749e:	930f      	str	r3, [sp, #60]	; 0x3c
 80a74a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a74a2:	4b5f      	ldr	r3, [pc, #380]	; (80a7620 <_strtod_l+0xb08>)
 80a74a4:	429a      	cmp	r2, r3
 80a74a6:	f040 80c3 	bne.w	80a7630 <_strtod_l+0xb18>
 80a74aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a74ac:	4640      	mov	r0, r8
 80a74ae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80a74b2:	4649      	mov	r1, r9
 80a74b4:	f001 fbba 	bl	80a8c2c <__ulp>
 80a74b8:	4602      	mov	r2, r0
 80a74ba:	460b      	mov	r3, r1
 80a74bc:	4630      	mov	r0, r6
 80a74be:	4639      	mov	r1, r7
 80a74c0:	f7fe f98c 	bl	80a57dc <__aeabi_dmul>
 80a74c4:	4642      	mov	r2, r8
 80a74c6:	464b      	mov	r3, r9
 80a74c8:	f7fd ffd2 	bl	80a5470 <__adddf3>
 80a74cc:	460b      	mov	r3, r1
 80a74ce:	4951      	ldr	r1, [pc, #324]	; (80a7614 <_strtod_l+0xafc>)
 80a74d0:	4a54      	ldr	r2, [pc, #336]	; (80a7624 <_strtod_l+0xb0c>)
 80a74d2:	4019      	ands	r1, r3
 80a74d4:	4291      	cmp	r1, r2
 80a74d6:	4680      	mov	r8, r0
 80a74d8:	d95d      	bls.n	80a7596 <_strtod_l+0xa7e>
 80a74da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a74dc:	4b4e      	ldr	r3, [pc, #312]	; (80a7618 <_strtod_l+0xb00>)
 80a74de:	429a      	cmp	r2, r3
 80a74e0:	d103      	bne.n	80a74ea <_strtod_l+0x9d2>
 80a74e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a74e4:	3301      	adds	r3, #1
 80a74e6:	f43f ad56 	beq.w	80a6f96 <_strtod_l+0x47e>
 80a74ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a74ee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80a7618 <_strtod_l+0xb00>
 80a74f2:	4650      	mov	r0, sl
 80a74f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a74f6:	f001 f869 	bl	80a85cc <_Bfree>
 80a74fa:	4650      	mov	r0, sl
 80a74fc:	9906      	ldr	r1, [sp, #24]
 80a74fe:	f001 f865 	bl	80a85cc <_Bfree>
 80a7502:	4650      	mov	r0, sl
 80a7504:	9904      	ldr	r1, [sp, #16]
 80a7506:	f001 f861 	bl	80a85cc <_Bfree>
 80a750a:	4659      	mov	r1, fp
 80a750c:	4650      	mov	r0, sl
 80a750e:	f001 f85d 	bl	80a85cc <_Bfree>
 80a7512:	e627      	b.n	80a7164 <_strtod_l+0x64c>
 80a7514:	f1b8 0f00 	cmp.w	r8, #0
 80a7518:	d119      	bne.n	80a754e <_strtod_l+0xa36>
 80a751a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a751c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a7520:	b9e3      	cbnz	r3, 80a755c <_strtod_l+0xa44>
 80a7522:	2200      	movs	r2, #0
 80a7524:	4630      	mov	r0, r6
 80a7526:	4639      	mov	r1, r7
 80a7528:	4b3c      	ldr	r3, [pc, #240]	; (80a761c <_strtod_l+0xb04>)
 80a752a:	f7fe fbc9 	bl	80a5cc0 <__aeabi_dcmplt>
 80a752e:	b9c8      	cbnz	r0, 80a7564 <_strtod_l+0xa4c>
 80a7530:	2200      	movs	r2, #0
 80a7532:	4630      	mov	r0, r6
 80a7534:	4639      	mov	r1, r7
 80a7536:	4b3c      	ldr	r3, [pc, #240]	; (80a7628 <_strtod_l+0xb10>)
 80a7538:	f7fe f950 	bl	80a57dc <__aeabi_dmul>
 80a753c:	4604      	mov	r4, r0
 80a753e:	460d      	mov	r5, r1
 80a7540:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a7544:	9416      	str	r4, [sp, #88]	; 0x58
 80a7546:	9317      	str	r3, [sp, #92]	; 0x5c
 80a7548:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80a754c:	e7a2      	b.n	80a7494 <_strtod_l+0x97c>
 80a754e:	f1b8 0f01 	cmp.w	r8, #1
 80a7552:	d103      	bne.n	80a755c <_strtod_l+0xa44>
 80a7554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7556:	2b00      	cmp	r3, #0
 80a7558:	f43f ad92 	beq.w	80a7080 <_strtod_l+0x568>
 80a755c:	2600      	movs	r6, #0
 80a755e:	2400      	movs	r4, #0
 80a7560:	4f32      	ldr	r7, [pc, #200]	; (80a762c <_strtod_l+0xb14>)
 80a7562:	e796      	b.n	80a7492 <_strtod_l+0x97a>
 80a7564:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a7566:	4d30      	ldr	r5, [pc, #192]	; (80a7628 <_strtod_l+0xb10>)
 80a7568:	e7ea      	b.n	80a7540 <_strtod_l+0xa28>
 80a756a:	4b2f      	ldr	r3, [pc, #188]	; (80a7628 <_strtod_l+0xb10>)
 80a756c:	2200      	movs	r2, #0
 80a756e:	4630      	mov	r0, r6
 80a7570:	4639      	mov	r1, r7
 80a7572:	f7fe f933 	bl	80a57dc <__aeabi_dmul>
 80a7576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a7578:	4604      	mov	r4, r0
 80a757a:	460d      	mov	r5, r1
 80a757c:	b933      	cbnz	r3, 80a758c <_strtod_l+0xa74>
 80a757e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7582:	9010      	str	r0, [sp, #64]	; 0x40
 80a7584:	9311      	str	r3, [sp, #68]	; 0x44
 80a7586:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a758a:	e783      	b.n	80a7494 <_strtod_l+0x97c>
 80a758c:	4602      	mov	r2, r0
 80a758e:	460b      	mov	r3, r1
 80a7590:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a7594:	e7f7      	b.n	80a7586 <_strtod_l+0xa6e>
 80a7596:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80a759a:	9b05      	ldr	r3, [sp, #20]
 80a759c:	2b00      	cmp	r3, #0
 80a759e:	d1a8      	bne.n	80a74f2 <_strtod_l+0x9da>
 80a75a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a75a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a75a6:	0d1b      	lsrs	r3, r3, #20
 80a75a8:	051b      	lsls	r3, r3, #20
 80a75aa:	429a      	cmp	r2, r3
 80a75ac:	d1a1      	bne.n	80a74f2 <_strtod_l+0x9da>
 80a75ae:	4620      	mov	r0, r4
 80a75b0:	4629      	mov	r1, r5
 80a75b2:	f001 fd01 	bl	80a8fb8 <__aeabi_d2lz>
 80a75b6:	f7fe f8e3 	bl	80a5780 <__aeabi_l2d>
 80a75ba:	4602      	mov	r2, r0
 80a75bc:	460b      	mov	r3, r1
 80a75be:	4620      	mov	r0, r4
 80a75c0:	4629      	mov	r1, r5
 80a75c2:	f7fd ff53 	bl	80a546c <__aeabi_dsub>
 80a75c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a75c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a75cc:	ea43 0308 	orr.w	r3, r3, r8
 80a75d0:	4313      	orrs	r3, r2
 80a75d2:	4604      	mov	r4, r0
 80a75d4:	460d      	mov	r5, r1
 80a75d6:	d066      	beq.n	80a76a6 <_strtod_l+0xb8e>
 80a75d8:	a309      	add	r3, pc, #36	; (adr r3, 80a7600 <_strtod_l+0xae8>)
 80a75da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a75de:	f7fe fb6f 	bl	80a5cc0 <__aeabi_dcmplt>
 80a75e2:	2800      	cmp	r0, #0
 80a75e4:	f47f ace2 	bne.w	80a6fac <_strtod_l+0x494>
 80a75e8:	a307      	add	r3, pc, #28	; (adr r3, 80a7608 <_strtod_l+0xaf0>)
 80a75ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a75ee:	4620      	mov	r0, r4
 80a75f0:	4629      	mov	r1, r5
 80a75f2:	f7fe fb83 	bl	80a5cfc <__aeabi_dcmpgt>
 80a75f6:	2800      	cmp	r0, #0
 80a75f8:	f43f af7b 	beq.w	80a74f2 <_strtod_l+0x9da>
 80a75fc:	e4d6      	b.n	80a6fac <_strtod_l+0x494>
 80a75fe:	bf00      	nop
 80a7600:	94a03595 	.word	0x94a03595
 80a7604:	3fdfffff 	.word	0x3fdfffff
 80a7608:	35afe535 	.word	0x35afe535
 80a760c:	3fe00000 	.word	0x3fe00000
 80a7610:	000fffff 	.word	0x000fffff
 80a7614:	7ff00000 	.word	0x7ff00000
 80a7618:	7fefffff 	.word	0x7fefffff
 80a761c:	3ff00000 	.word	0x3ff00000
 80a7620:	7fe00000 	.word	0x7fe00000
 80a7624:	7c9fffff 	.word	0x7c9fffff
 80a7628:	3fe00000 	.word	0x3fe00000
 80a762c:	bff00000 	.word	0xbff00000
 80a7630:	9b05      	ldr	r3, [sp, #20]
 80a7632:	b313      	cbz	r3, 80a767a <_strtod_l+0xb62>
 80a7634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a7636:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a763a:	d81e      	bhi.n	80a767a <_strtod_l+0xb62>
 80a763c:	a326      	add	r3, pc, #152	; (adr r3, 80a76d8 <_strtod_l+0xbc0>)
 80a763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7642:	4620      	mov	r0, r4
 80a7644:	4629      	mov	r1, r5
 80a7646:	f7fe fb45 	bl	80a5cd4 <__aeabi_dcmple>
 80a764a:	b190      	cbz	r0, 80a7672 <_strtod_l+0xb5a>
 80a764c:	4629      	mov	r1, r5
 80a764e:	4620      	mov	r0, r4
 80a7650:	f7fe fb86 	bl	80a5d60 <__aeabi_d2uiz>
 80a7654:	2801      	cmp	r0, #1
 80a7656:	bf38      	it	cc
 80a7658:	2001      	movcc	r0, #1
 80a765a:	f7fe f845 	bl	80a56e8 <__aeabi_ui2d>
 80a765e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a7660:	4604      	mov	r4, r0
 80a7662:	460d      	mov	r5, r1
 80a7664:	b9d3      	cbnz	r3, 80a769c <_strtod_l+0xb84>
 80a7666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a766a:	9012      	str	r0, [sp, #72]	; 0x48
 80a766c:	9313      	str	r3, [sp, #76]	; 0x4c
 80a766e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80a7672:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a7674:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a7678:	1a9f      	subs	r7, r3, r2
 80a767a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a767e:	f001 fad5 	bl	80a8c2c <__ulp>
 80a7682:	4602      	mov	r2, r0
 80a7684:	460b      	mov	r3, r1
 80a7686:	4630      	mov	r0, r6
 80a7688:	4639      	mov	r1, r7
 80a768a:	f7fe f8a7 	bl	80a57dc <__aeabi_dmul>
 80a768e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a7692:	f7fd feed 	bl	80a5470 <__adddf3>
 80a7696:	4680      	mov	r8, r0
 80a7698:	4689      	mov	r9, r1
 80a769a:	e77e      	b.n	80a759a <_strtod_l+0xa82>
 80a769c:	4602      	mov	r2, r0
 80a769e:	460b      	mov	r3, r1
 80a76a0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80a76a4:	e7e3      	b.n	80a766e <_strtod_l+0xb56>
 80a76a6:	a30e      	add	r3, pc, #56	; (adr r3, 80a76e0 <_strtod_l+0xbc8>)
 80a76a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a76ac:	f7fe fb08 	bl	80a5cc0 <__aeabi_dcmplt>
 80a76b0:	e7a1      	b.n	80a75f6 <_strtod_l+0xade>
 80a76b2:	2300      	movs	r3, #0
 80a76b4:	930a      	str	r3, [sp, #40]	; 0x28
 80a76b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a76b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a76ba:	6013      	str	r3, [r2, #0]
 80a76bc:	f7ff ba71 	b.w	80a6ba2 <_strtod_l+0x8a>
 80a76c0:	2a65      	cmp	r2, #101	; 0x65
 80a76c2:	f43f ab63 	beq.w	80a6d8c <_strtod_l+0x274>
 80a76c6:	2a45      	cmp	r2, #69	; 0x45
 80a76c8:	f43f ab60 	beq.w	80a6d8c <_strtod_l+0x274>
 80a76cc:	2301      	movs	r3, #1
 80a76ce:	f7ff bb95 	b.w	80a6dfc <_strtod_l+0x2e4>
 80a76d2:	bf00      	nop
 80a76d4:	f3af 8000 	nop.w
 80a76d8:	ffc00000 	.word	0xffc00000
 80a76dc:	41dfffff 	.word	0x41dfffff
 80a76e0:	94a03595 	.word	0x94a03595
 80a76e4:	3fcfffff 	.word	0x3fcfffff

080a76e8 <strtod>:
 80a76e8:	460a      	mov	r2, r1
 80a76ea:	4601      	mov	r1, r0
 80a76ec:	4802      	ldr	r0, [pc, #8]	; (80a76f8 <strtod+0x10>)
 80a76ee:	4b03      	ldr	r3, [pc, #12]	; (80a76fc <strtod+0x14>)
 80a76f0:	6800      	ldr	r0, [r0, #0]
 80a76f2:	f7ff ba11 	b.w	80a6b18 <_strtod_l>
 80a76f6:	bf00      	nop
 80a76f8:	20000004 	.word	0x20000004
 80a76fc:	200000cc 	.word	0x200000cc

080a7700 <_strtoul_l.constprop.0>:
 80a7700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a7704:	4686      	mov	lr, r0
 80a7706:	460d      	mov	r5, r1
 80a7708:	4f35      	ldr	r7, [pc, #212]	; (80a77e0 <_strtoul_l.constprop.0+0xe0>)
 80a770a:	4628      	mov	r0, r5
 80a770c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7710:	5de6      	ldrb	r6, [r4, r7]
 80a7712:	f016 0608 	ands.w	r6, r6, #8
 80a7716:	d1f8      	bne.n	80a770a <_strtoul_l.constprop.0+0xa>
 80a7718:	2c2d      	cmp	r4, #45	; 0x2d
 80a771a:	d12f      	bne.n	80a777c <_strtoul_l.constprop.0+0x7c>
 80a771c:	2601      	movs	r6, #1
 80a771e:	782c      	ldrb	r4, [r5, #0]
 80a7720:	1c85      	adds	r5, r0, #2
 80a7722:	2b00      	cmp	r3, #0
 80a7724:	d057      	beq.n	80a77d6 <_strtoul_l.constprop.0+0xd6>
 80a7726:	2b10      	cmp	r3, #16
 80a7728:	d109      	bne.n	80a773e <_strtoul_l.constprop.0+0x3e>
 80a772a:	2c30      	cmp	r4, #48	; 0x30
 80a772c:	d107      	bne.n	80a773e <_strtoul_l.constprop.0+0x3e>
 80a772e:	7828      	ldrb	r0, [r5, #0]
 80a7730:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7734:	2858      	cmp	r0, #88	; 0x58
 80a7736:	d149      	bne.n	80a77cc <_strtoul_l.constprop.0+0xcc>
 80a7738:	2310      	movs	r3, #16
 80a773a:	786c      	ldrb	r4, [r5, #1]
 80a773c:	3502      	adds	r5, #2
 80a773e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a7742:	fbb8 f8f3 	udiv	r8, r8, r3
 80a7746:	2700      	movs	r7, #0
 80a7748:	fb03 f908 	mul.w	r9, r3, r8
 80a774c:	4638      	mov	r0, r7
 80a774e:	ea6f 0909 	mvn.w	r9, r9
 80a7752:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a7756:	f1bc 0f09 	cmp.w	ip, #9
 80a775a:	d814      	bhi.n	80a7786 <_strtoul_l.constprop.0+0x86>
 80a775c:	4664      	mov	r4, ip
 80a775e:	42a3      	cmp	r3, r4
 80a7760:	dd22      	ble.n	80a77a8 <_strtoul_l.constprop.0+0xa8>
 80a7762:	2f00      	cmp	r7, #0
 80a7764:	db1d      	blt.n	80a77a2 <_strtoul_l.constprop.0+0xa2>
 80a7766:	4580      	cmp	r8, r0
 80a7768:	d31b      	bcc.n	80a77a2 <_strtoul_l.constprop.0+0xa2>
 80a776a:	d101      	bne.n	80a7770 <_strtoul_l.constprop.0+0x70>
 80a776c:	45a1      	cmp	r9, r4
 80a776e:	db18      	blt.n	80a77a2 <_strtoul_l.constprop.0+0xa2>
 80a7770:	2701      	movs	r7, #1
 80a7772:	fb00 4003 	mla	r0, r0, r3, r4
 80a7776:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a777a:	e7ea      	b.n	80a7752 <_strtoul_l.constprop.0+0x52>
 80a777c:	2c2b      	cmp	r4, #43	; 0x2b
 80a777e:	bf04      	itt	eq
 80a7780:	782c      	ldrbeq	r4, [r5, #0]
 80a7782:	1c85      	addeq	r5, r0, #2
 80a7784:	e7cd      	b.n	80a7722 <_strtoul_l.constprop.0+0x22>
 80a7786:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a778a:	f1bc 0f19 	cmp.w	ip, #25
 80a778e:	d801      	bhi.n	80a7794 <_strtoul_l.constprop.0+0x94>
 80a7790:	3c37      	subs	r4, #55	; 0x37
 80a7792:	e7e4      	b.n	80a775e <_strtoul_l.constprop.0+0x5e>
 80a7794:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a7798:	f1bc 0f19 	cmp.w	ip, #25
 80a779c:	d804      	bhi.n	80a77a8 <_strtoul_l.constprop.0+0xa8>
 80a779e:	3c57      	subs	r4, #87	; 0x57
 80a77a0:	e7dd      	b.n	80a775e <_strtoul_l.constprop.0+0x5e>
 80a77a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a77a6:	e7e6      	b.n	80a7776 <_strtoul_l.constprop.0+0x76>
 80a77a8:	2f00      	cmp	r7, #0
 80a77aa:	da07      	bge.n	80a77bc <_strtoul_l.constprop.0+0xbc>
 80a77ac:	2322      	movs	r3, #34	; 0x22
 80a77ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a77b2:	f8ce 3000 	str.w	r3, [lr]
 80a77b6:	b932      	cbnz	r2, 80a77c6 <_strtoul_l.constprop.0+0xc6>
 80a77b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a77bc:	b106      	cbz	r6, 80a77c0 <_strtoul_l.constprop.0+0xc0>
 80a77be:	4240      	negs	r0, r0
 80a77c0:	2a00      	cmp	r2, #0
 80a77c2:	d0f9      	beq.n	80a77b8 <_strtoul_l.constprop.0+0xb8>
 80a77c4:	b107      	cbz	r7, 80a77c8 <_strtoul_l.constprop.0+0xc8>
 80a77c6:	1e69      	subs	r1, r5, #1
 80a77c8:	6011      	str	r1, [r2, #0]
 80a77ca:	e7f5      	b.n	80a77b8 <_strtoul_l.constprop.0+0xb8>
 80a77cc:	2430      	movs	r4, #48	; 0x30
 80a77ce:	2b00      	cmp	r3, #0
 80a77d0:	d1b5      	bne.n	80a773e <_strtoul_l.constprop.0+0x3e>
 80a77d2:	2308      	movs	r3, #8
 80a77d4:	e7b3      	b.n	80a773e <_strtoul_l.constprop.0+0x3e>
 80a77d6:	2c30      	cmp	r4, #48	; 0x30
 80a77d8:	d0a9      	beq.n	80a772e <_strtoul_l.constprop.0+0x2e>
 80a77da:	230a      	movs	r3, #10
 80a77dc:	e7af      	b.n	80a773e <_strtoul_l.constprop.0+0x3e>
 80a77de:	bf00      	nop
 80a77e0:	080a93d5 	.word	0x080a93d5

080a77e4 <strtoul>:
 80a77e4:	4613      	mov	r3, r2
 80a77e6:	460a      	mov	r2, r1
 80a77e8:	4601      	mov	r1, r0
 80a77ea:	4802      	ldr	r0, [pc, #8]	; (80a77f4 <strtoul+0x10>)
 80a77ec:	6800      	ldr	r0, [r0, #0]
 80a77ee:	f7ff bf87 	b.w	80a7700 <_strtoul_l.constprop.0>
 80a77f2:	bf00      	nop
 80a77f4:	20000004 	.word	0x20000004

080a77f8 <__tzcalc_limits>:
 80a77f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a77fc:	4605      	mov	r5, r0
 80a77fe:	f000 fddd 	bl	80a83bc <__gettzinfo>
 80a7802:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a7806:	429d      	cmp	r5, r3
 80a7808:	f340 8094 	ble.w	80a7934 <__tzcalc_limits+0x13c>
 80a780c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80a7810:	18ac      	adds	r4, r5, r2
 80a7812:	f240 126d 	movw	r2, #365	; 0x16d
 80a7816:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80a781a:	10a4      	asrs	r4, r4, #2
 80a781c:	fb02 4403 	mla	r4, r2, r3, r4
 80a7820:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a7824:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80a7828:	fb93 f3f2 	sdiv	r3, r3, r2
 80a782c:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80a7830:	441c      	add	r4, r3
 80a7832:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7836:	186a      	adds	r2, r5, r1
 80a7838:	fbb2 f2f3 	udiv	r2, r2, r3
 80a783c:	fb95 fef3 	sdiv	lr, r5, r3
 80a7840:	4414      	add	r4, r2
 80a7842:	2264      	movs	r2, #100	; 0x64
 80a7844:	fb03 5e1e 	mls	lr, r3, lr, r5
 80a7848:	fb95 fcf2 	sdiv	ip, r5, r2
 80a784c:	fabe f78e 	clz	r7, lr
 80a7850:	4601      	mov	r1, r0
 80a7852:	fb02 5c1c 	mls	ip, r2, ip, r5
 80a7856:	6045      	str	r5, [r0, #4]
 80a7858:	097f      	lsrs	r7, r7, #5
 80a785a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a785e:	f005 0303 	and.w	r3, r5, #3
 80a7862:	7a0a      	ldrb	r2, [r1, #8]
 80a7864:	694d      	ldr	r5, [r1, #20]
 80a7866:	2a4a      	cmp	r2, #74	; 0x4a
 80a7868:	d12a      	bne.n	80a78c0 <__tzcalc_limits+0xc8>
 80a786a:	1962      	adds	r2, r4, r5
 80a786c:	b913      	cbnz	r3, 80a7874 <__tzcalc_limits+0x7c>
 80a786e:	f1bc 0f00 	cmp.w	ip, #0
 80a7872:	d102      	bne.n	80a787a <__tzcalc_limits+0x82>
 80a7874:	f1be 0f00 	cmp.w	lr, #0
 80a7878:	d120      	bne.n	80a78bc <__tzcalc_limits+0xc4>
 80a787a:	2d3b      	cmp	r5, #59	; 0x3b
 80a787c:	bfd4      	ite	le
 80a787e:	2500      	movle	r5, #0
 80a7880:	2501      	movgt	r5, #1
 80a7882:	4415      	add	r5, r2
 80a7884:	3d01      	subs	r5, #1
 80a7886:	698e      	ldr	r6, [r1, #24]
 80a7888:	4a2b      	ldr	r2, [pc, #172]	; (80a7938 <__tzcalc_limits+0x140>)
 80a788a:	fb02 6505 	mla	r5, r2, r5, r6
 80a788e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a7890:	4415      	add	r5, r2
 80a7892:	17ea      	asrs	r2, r5, #31
 80a7894:	e9c1 5208 	strd	r5, r2, [r1, #32]
 80a7898:	3128      	adds	r1, #40	; 0x28
 80a789a:	458b      	cmp	fp, r1
 80a789c:	d1e1      	bne.n	80a7862 <__tzcalc_limits+0x6a>
 80a789e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80a78a2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80a78a6:	428c      	cmp	r4, r1
 80a78a8:	eb72 0303 	sbcs.w	r3, r2, r3
 80a78ac:	bfb4      	ite	lt
 80a78ae:	2301      	movlt	r3, #1
 80a78b0:	2300      	movge	r3, #0
 80a78b2:	6003      	str	r3, [r0, #0]
 80a78b4:	2001      	movs	r0, #1
 80a78b6:	b003      	add	sp, #12
 80a78b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a78bc:	2500      	movs	r5, #0
 80a78be:	e7e0      	b.n	80a7882 <__tzcalc_limits+0x8a>
 80a78c0:	2a44      	cmp	r2, #68	; 0x44
 80a78c2:	d101      	bne.n	80a78c8 <__tzcalc_limits+0xd0>
 80a78c4:	4425      	add	r5, r4
 80a78c6:	e7de      	b.n	80a7886 <__tzcalc_limits+0x8e>
 80a78c8:	bb73      	cbnz	r3, 80a7928 <__tzcalc_limits+0x130>
 80a78ca:	f1bc 0f00 	cmp.w	ip, #0
 80a78ce:	bf0c      	ite	eq
 80a78d0:	463e      	moveq	r6, r7
 80a78d2:	2601      	movne	r6, #1
 80a78d4:	f04f 0830 	mov.w	r8, #48	; 0x30
 80a78d8:	68ca      	ldr	r2, [r1, #12]
 80a78da:	f04f 0900 	mov.w	r9, #0
 80a78de:	9201      	str	r2, [sp, #4]
 80a78e0:	4622      	mov	r2, r4
 80a78e2:	f8df a058 	ldr.w	sl, [pc, #88]	; 80a793c <__tzcalc_limits+0x144>
 80a78e6:	fb08 a606 	mla	r6, r8, r6, sl
 80a78ea:	3e04      	subs	r6, #4
 80a78ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a78f0:	f109 0901 	add.w	r9, r9, #1
 80a78f4:	45c8      	cmp	r8, r9
 80a78f6:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 80a78fa:	dc17      	bgt.n	80a792c <__tzcalc_limits+0x134>
 80a78fc:	f04f 0807 	mov.w	r8, #7
 80a7900:	1d16      	adds	r6, r2, #4
 80a7902:	fb96 f9f8 	sdiv	r9, r6, r8
 80a7906:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a790a:	eba6 0909 	sub.w	r9, r6, r9
 80a790e:	ebb5 0909 	subs.w	r9, r5, r9
 80a7912:	690d      	ldr	r5, [r1, #16]
 80a7914:	bf48      	it	mi
 80a7916:	44c1      	addmi	r9, r8
 80a7918:	3d01      	subs	r5, #1
 80a791a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80a791e:	444d      	add	r5, r9
 80a7920:	4555      	cmp	r5, sl
 80a7922:	da05      	bge.n	80a7930 <__tzcalc_limits+0x138>
 80a7924:	4415      	add	r5, r2
 80a7926:	e7ae      	b.n	80a7886 <__tzcalc_limits+0x8e>
 80a7928:	463e      	mov	r6, r7
 80a792a:	e7d3      	b.n	80a78d4 <__tzcalc_limits+0xdc>
 80a792c:	4452      	add	r2, sl
 80a792e:	e7dd      	b.n	80a78ec <__tzcalc_limits+0xf4>
 80a7930:	3d07      	subs	r5, #7
 80a7932:	e7f5      	b.n	80a7920 <__tzcalc_limits+0x128>
 80a7934:	2000      	movs	r0, #0
 80a7936:	e7be      	b.n	80a78b6 <__tzcalc_limits+0xbe>
 80a7938:	00015180 	.word	0x00015180
 80a793c:	080a9268 	.word	0x080a9268

080a7940 <__tz_lock>:
 80a7940:	4801      	ldr	r0, [pc, #4]	; (80a7948 <__tz_lock+0x8>)
 80a7942:	f000 bded 	b.w	80a8520 <__retarget_lock_acquire>
 80a7946:	bf00      	nop
 80a7948:	20000ffd 	.word	0x20000ffd

080a794c <__tz_unlock>:
 80a794c:	4801      	ldr	r0, [pc, #4]	; (80a7954 <__tz_unlock+0x8>)
 80a794e:	f000 bde9 	b.w	80a8524 <__retarget_lock_release>
 80a7952:	bf00      	nop
 80a7954:	20000ffd 	.word	0x20000ffd

080a7958 <_tzset_unlocked>:
 80a7958:	4b01      	ldr	r3, [pc, #4]	; (80a7960 <_tzset_unlocked+0x8>)
 80a795a:	6818      	ldr	r0, [r3, #0]
 80a795c:	f000 b802 	b.w	80a7964 <_tzset_unlocked_r>
 80a7960:	20000004 	.word	0x20000004

080a7964 <_tzset_unlocked_r>:
 80a7964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7968:	b08d      	sub	sp, #52	; 0x34
 80a796a:	4607      	mov	r7, r0
 80a796c:	f000 fd26 	bl	80a83bc <__gettzinfo>
 80a7970:	49b1      	ldr	r1, [pc, #708]	; (80a7c38 <_tzset_unlocked_r+0x2d4>)
 80a7972:	4605      	mov	r5, r0
 80a7974:	4638      	mov	r0, r7
 80a7976:	f000 fd19 	bl	80a83ac <_getenv_r>
 80a797a:	4eb0      	ldr	r6, [pc, #704]	; (80a7c3c <_tzset_unlocked_r+0x2d8>)
 80a797c:	4604      	mov	r4, r0
 80a797e:	b970      	cbnz	r0, 80a799e <_tzset_unlocked_r+0x3a>
 80a7980:	4baf      	ldr	r3, [pc, #700]	; (80a7c40 <_tzset_unlocked_r+0x2dc>)
 80a7982:	4ab0      	ldr	r2, [pc, #704]	; (80a7c44 <_tzset_unlocked_r+0x2e0>)
 80a7984:	6018      	str	r0, [r3, #0]
 80a7986:	4bb0      	ldr	r3, [pc, #704]	; (80a7c48 <_tzset_unlocked_r+0x2e4>)
 80a7988:	6018      	str	r0, [r3, #0]
 80a798a:	4bb0      	ldr	r3, [pc, #704]	; (80a7c4c <_tzset_unlocked_r+0x2e8>)
 80a798c:	6830      	ldr	r0, [r6, #0]
 80a798e:	e9c3 2200 	strd	r2, r2, [r3]
 80a7992:	f7fc fc19 	bl	80a41c8 <free>
 80a7996:	6034      	str	r4, [r6, #0]
 80a7998:	b00d      	add	sp, #52	; 0x34
 80a799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a799e:	6831      	ldr	r1, [r6, #0]
 80a79a0:	2900      	cmp	r1, #0
 80a79a2:	d162      	bne.n	80a7a6a <_tzset_unlocked_r+0x106>
 80a79a4:	6830      	ldr	r0, [r6, #0]
 80a79a6:	f7fc fc0f 	bl	80a41c8 <free>
 80a79aa:	4620      	mov	r0, r4
 80a79ac:	f7ff f875 	bl	80a6a9a <strlen>
 80a79b0:	1c41      	adds	r1, r0, #1
 80a79b2:	4638      	mov	r0, r7
 80a79b4:	f7fc fc20 	bl	80a41f8 <_malloc_r>
 80a79b8:	6030      	str	r0, [r6, #0]
 80a79ba:	2800      	cmp	r0, #0
 80a79bc:	d15a      	bne.n	80a7a74 <_tzset_unlocked_r+0x110>
 80a79be:	7823      	ldrb	r3, [r4, #0]
 80a79c0:	ae0a      	add	r6, sp, #40	; 0x28
 80a79c2:	2b3a      	cmp	r3, #58	; 0x3a
 80a79c4:	bf08      	it	eq
 80a79c6:	3401      	addeq	r4, #1
 80a79c8:	4633      	mov	r3, r6
 80a79ca:	4620      	mov	r0, r4
 80a79cc:	4aa0      	ldr	r2, [pc, #640]	; (80a7c50 <_tzset_unlocked_r+0x2ec>)
 80a79ce:	49a1      	ldr	r1, [pc, #644]	; (80a7c54 <_tzset_unlocked_r+0x2f0>)
 80a79d0:	f7fc fc02 	bl	80a41d8 <siscanf>
 80a79d4:	2800      	cmp	r0, #0
 80a79d6:	dddf      	ble.n	80a7998 <_tzset_unlocked_r+0x34>
 80a79d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a79da:	18e7      	adds	r7, r4, r3
 80a79dc:	5ce3      	ldrb	r3, [r4, r3]
 80a79de:	2b2d      	cmp	r3, #45	; 0x2d
 80a79e0:	d14c      	bne.n	80a7a7c <_tzset_unlocked_r+0x118>
 80a79e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a79e6:	3701      	adds	r7, #1
 80a79e8:	2400      	movs	r4, #0
 80a79ea:	f10d 0a20 	add.w	sl, sp, #32
 80a79ee:	f10d 0b1e 	add.w	fp, sp, #30
 80a79f2:	4633      	mov	r3, r6
 80a79f4:	4638      	mov	r0, r7
 80a79f6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a79fa:	4997      	ldr	r1, [pc, #604]	; (80a7c58 <_tzset_unlocked_r+0x2f4>)
 80a79fc:	9603      	str	r6, [sp, #12]
 80a79fe:	f8cd b000 	str.w	fp, [sp]
 80a7a02:	aa07      	add	r2, sp, #28
 80a7a04:	f8ad 401e 	strh.w	r4, [sp, #30]
 80a7a08:	f8ad 4020 	strh.w	r4, [sp, #32]
 80a7a0c:	f7fc fbe4 	bl	80a41d8 <siscanf>
 80a7a10:	42a0      	cmp	r0, r4
 80a7a12:	ddc1      	ble.n	80a7998 <_tzset_unlocked_r+0x34>
 80a7a14:	213c      	movs	r1, #60	; 0x3c
 80a7a16:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7a1a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7a1e:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a7c5c <_tzset_unlocked_r+0x2f8>
 80a7a22:	fb01 3302 	mla	r3, r1, r2, r3
 80a7a26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7a2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7a2e:	fb01 3302 	mla	r3, r1, r2, r3
 80a7a32:	fb08 f303 	mul.w	r3, r8, r3
 80a7a36:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a7c4c <_tzset_unlocked_r+0x2e8>
 80a7a3a:	62ab      	str	r3, [r5, #40]	; 0x28
 80a7a3c:	4b84      	ldr	r3, [pc, #528]	; (80a7c50 <_tzset_unlocked_r+0x2ec>)
 80a7a3e:	464a      	mov	r2, r9
 80a7a40:	f8c8 3000 	str.w	r3, [r8]
 80a7a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7a46:	4983      	ldr	r1, [pc, #524]	; (80a7c54 <_tzset_unlocked_r+0x2f0>)
 80a7a48:	441f      	add	r7, r3
 80a7a4a:	4638      	mov	r0, r7
 80a7a4c:	4633      	mov	r3, r6
 80a7a4e:	f7fc fbc3 	bl	80a41d8 <siscanf>
 80a7a52:	42a0      	cmp	r0, r4
 80a7a54:	dc18      	bgt.n	80a7a88 <_tzset_unlocked_r+0x124>
 80a7a56:	f8d8 3000 	ldr.w	r3, [r8]
 80a7a5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7a5c:	f8c8 3004 	str.w	r3, [r8, #4]
 80a7a60:	4b77      	ldr	r3, [pc, #476]	; (80a7c40 <_tzset_unlocked_r+0x2dc>)
 80a7a62:	601a      	str	r2, [r3, #0]
 80a7a64:	4b78      	ldr	r3, [pc, #480]	; (80a7c48 <_tzset_unlocked_r+0x2e4>)
 80a7a66:	601c      	str	r4, [r3, #0]
 80a7a68:	e796      	b.n	80a7998 <_tzset_unlocked_r+0x34>
 80a7a6a:	f7fe ffe9 	bl	80a6a40 <strcmp>
 80a7a6e:	2800      	cmp	r0, #0
 80a7a70:	d198      	bne.n	80a79a4 <_tzset_unlocked_r+0x40>
 80a7a72:	e791      	b.n	80a7998 <_tzset_unlocked_r+0x34>
 80a7a74:	4621      	mov	r1, r4
 80a7a76:	f7fe ffed 	bl	80a6a54 <strcpy>
 80a7a7a:	e7a0      	b.n	80a79be <_tzset_unlocked_r+0x5a>
 80a7a7c:	2b2b      	cmp	r3, #43	; 0x2b
 80a7a7e:	f04f 0801 	mov.w	r8, #1
 80a7a82:	bf08      	it	eq
 80a7a84:	3701      	addeq	r7, #1
 80a7a86:	e7af      	b.n	80a79e8 <_tzset_unlocked_r+0x84>
 80a7a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7a8a:	f8c8 9004 	str.w	r9, [r8, #4]
 80a7a8e:	18fc      	adds	r4, r7, r3
 80a7a90:	5cfb      	ldrb	r3, [r7, r3]
 80a7a92:	2b2d      	cmp	r3, #45	; 0x2d
 80a7a94:	f040 808c 	bne.w	80a7bb0 <_tzset_unlocked_r+0x24c>
 80a7a98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a7a9c:	3401      	adds	r4, #1
 80a7a9e:	2300      	movs	r3, #0
 80a7aa0:	4620      	mov	r0, r4
 80a7aa2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7aa6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7aaa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7aae:	930a      	str	r3, [sp, #40]	; 0x28
 80a7ab0:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7ab4:	4633      	mov	r3, r6
 80a7ab6:	e9cd b600 	strd	fp, r6, [sp]
 80a7aba:	4967      	ldr	r1, [pc, #412]	; (80a7c58 <_tzset_unlocked_r+0x2f4>)
 80a7abc:	aa07      	add	r2, sp, #28
 80a7abe:	f7fc fb8b 	bl	80a41d8 <siscanf>
 80a7ac2:	2800      	cmp	r0, #0
 80a7ac4:	dc7a      	bgt.n	80a7bbc <_tzset_unlocked_r+0x258>
 80a7ac6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a7ac8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a7acc:	462f      	mov	r7, r5
 80a7ace:	f04f 0900 	mov.w	r9, #0
 80a7ad2:	652b      	str	r3, [r5, #80]	; 0x50
 80a7ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7ad6:	441c      	add	r4, r3
 80a7ad8:	7823      	ldrb	r3, [r4, #0]
 80a7ada:	2b2c      	cmp	r3, #44	; 0x2c
 80a7adc:	bf08      	it	eq
 80a7ade:	3401      	addeq	r4, #1
 80a7ae0:	f894 8000 	ldrb.w	r8, [r4]
 80a7ae4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a7ae8:	d17a      	bne.n	80a7be0 <_tzset_unlocked_r+0x27c>
 80a7aea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a7aee:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a7af2:	ab09      	add	r3, sp, #36	; 0x24
 80a7af4:	9300      	str	r3, [sp, #0]
 80a7af6:	4620      	mov	r0, r4
 80a7af8:	4633      	mov	r3, r6
 80a7afa:	4959      	ldr	r1, [pc, #356]	; (80a7c60 <_tzset_unlocked_r+0x2fc>)
 80a7afc:	9603      	str	r6, [sp, #12]
 80a7afe:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a7b02:	f7fc fb69 	bl	80a41d8 <siscanf>
 80a7b06:	2803      	cmp	r0, #3
 80a7b08:	f47f af46 	bne.w	80a7998 <_tzset_unlocked_r+0x34>
 80a7b0c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a7b10:	1e4b      	subs	r3, r1, #1
 80a7b12:	2b0b      	cmp	r3, #11
 80a7b14:	f63f af40 	bhi.w	80a7998 <_tzset_unlocked_r+0x34>
 80a7b18:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7b1c:	1e53      	subs	r3, r2, #1
 80a7b1e:	2b04      	cmp	r3, #4
 80a7b20:	f63f af3a 	bhi.w	80a7998 <_tzset_unlocked_r+0x34>
 80a7b24:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7b28:	2b06      	cmp	r3, #6
 80a7b2a:	f63f af35 	bhi.w	80a7998 <_tzset_unlocked_r+0x34>
 80a7b2e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a7b32:	f887 8008 	strb.w	r8, [r7, #8]
 80a7b36:	617b      	str	r3, [r7, #20]
 80a7b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b3a:	eb04 0803 	add.w	r8, r4, r3
 80a7b3e:	2302      	movs	r3, #2
 80a7b40:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7b44:	2300      	movs	r3, #0
 80a7b46:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7b4a:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7b4e:	930a      	str	r3, [sp, #40]	; 0x28
 80a7b50:	f898 3000 	ldrb.w	r3, [r8]
 80a7b54:	2b2f      	cmp	r3, #47	; 0x2f
 80a7b56:	d109      	bne.n	80a7b6c <_tzset_unlocked_r+0x208>
 80a7b58:	4633      	mov	r3, r6
 80a7b5a:	4640      	mov	r0, r8
 80a7b5c:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7b60:	e9cd b600 	strd	fp, r6, [sp]
 80a7b64:	493f      	ldr	r1, [pc, #252]	; (80a7c64 <_tzset_unlocked_r+0x300>)
 80a7b66:	aa07      	add	r2, sp, #28
 80a7b68:	f7fc fb36 	bl	80a41d8 <siscanf>
 80a7b6c:	213c      	movs	r1, #60	; 0x3c
 80a7b6e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7b72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7b76:	3728      	adds	r7, #40	; 0x28
 80a7b78:	fb01 3302 	mla	r3, r1, r2, r3
 80a7b7c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7b80:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7b84:	fb01 3302 	mla	r3, r1, r2, r3
 80a7b88:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7b8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a7b8e:	4444      	add	r4, r8
 80a7b90:	f1b9 0f00 	cmp.w	r9, #0
 80a7b94:	d021      	beq.n	80a7bda <_tzset_unlocked_r+0x276>
 80a7b96:	6868      	ldr	r0, [r5, #4]
 80a7b98:	f7ff fe2e 	bl	80a77f8 <__tzcalc_limits>
 80a7b9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7b9e:	4b28      	ldr	r3, [pc, #160]	; (80a7c40 <_tzset_unlocked_r+0x2dc>)
 80a7ba0:	601a      	str	r2, [r3, #0]
 80a7ba2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a7ba4:	1a9b      	subs	r3, r3, r2
 80a7ba6:	bf18      	it	ne
 80a7ba8:	2301      	movne	r3, #1
 80a7baa:	4a27      	ldr	r2, [pc, #156]	; (80a7c48 <_tzset_unlocked_r+0x2e4>)
 80a7bac:	6013      	str	r3, [r2, #0]
 80a7bae:	e6f3      	b.n	80a7998 <_tzset_unlocked_r+0x34>
 80a7bb0:	2b2b      	cmp	r3, #43	; 0x2b
 80a7bb2:	f04f 0701 	mov.w	r7, #1
 80a7bb6:	bf08      	it	eq
 80a7bb8:	3401      	addeq	r4, #1
 80a7bba:	e770      	b.n	80a7a9e <_tzset_unlocked_r+0x13a>
 80a7bbc:	213c      	movs	r1, #60	; 0x3c
 80a7bbe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7bc2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7bc6:	fb01 3302 	mla	r3, r1, r2, r3
 80a7bca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7bce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7bd2:	fb01 3302 	mla	r3, r1, r2, r3
 80a7bd6:	437b      	muls	r3, r7
 80a7bd8:	e778      	b.n	80a7acc <_tzset_unlocked_r+0x168>
 80a7bda:	f04f 0901 	mov.w	r9, #1
 80a7bde:	e77b      	b.n	80a7ad8 <_tzset_unlocked_r+0x174>
 80a7be0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a7be4:	bf0a      	itet	eq
 80a7be6:	4643      	moveq	r3, r8
 80a7be8:	2344      	movne	r3, #68	; 0x44
 80a7bea:	3401      	addeq	r4, #1
 80a7bec:	220a      	movs	r2, #10
 80a7bee:	4620      	mov	r0, r4
 80a7bf0:	a90b      	add	r1, sp, #44	; 0x2c
 80a7bf2:	9305      	str	r3, [sp, #20]
 80a7bf4:	f7ff fdf6 	bl	80a77e4 <strtoul>
 80a7bf8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7bfc:	9b05      	ldr	r3, [sp, #20]
 80a7bfe:	45a0      	cmp	r8, r4
 80a7c00:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7c04:	d114      	bne.n	80a7c30 <_tzset_unlocked_r+0x2cc>
 80a7c06:	234d      	movs	r3, #77	; 0x4d
 80a7c08:	f1b9 0f00 	cmp.w	r9, #0
 80a7c0c:	d107      	bne.n	80a7c1e <_tzset_unlocked_r+0x2ba>
 80a7c0e:	2103      	movs	r1, #3
 80a7c10:	722b      	strb	r3, [r5, #8]
 80a7c12:	2302      	movs	r3, #2
 80a7c14:	f8c5 9014 	str.w	r9, [r5, #20]
 80a7c18:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a7c1c:	e78f      	b.n	80a7b3e <_tzset_unlocked_r+0x1da>
 80a7c1e:	220b      	movs	r2, #11
 80a7c20:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a7c24:	2301      	movs	r3, #1
 80a7c26:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a7c2a:	2300      	movs	r3, #0
 80a7c2c:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a7c2e:	e786      	b.n	80a7b3e <_tzset_unlocked_r+0x1da>
 80a7c30:	b280      	uxth	r0, r0
 80a7c32:	723b      	strb	r3, [r7, #8]
 80a7c34:	6178      	str	r0, [r7, #20]
 80a7c36:	e782      	b.n	80a7b3e <_tzset_unlocked_r+0x1da>
 80a7c38:	080a9398 	.word	0x080a9398
 80a7c3c:	20000ff0 	.word	0x20000ff0
 80a7c40:	20000ff8 	.word	0x20000ff8
 80a7c44:	080a939b 	.word	0x080a939b
 80a7c48:	20000ff4 	.word	0x20000ff4
 80a7c4c:	20000068 	.word	0x20000068
 80a7c50:	20000fe3 	.word	0x20000fe3
 80a7c54:	080a939f 	.word	0x080a939f
 80a7c58:	080a93c2 	.word	0x080a93c2
 80a7c5c:	20000fd8 	.word	0x20000fd8
 80a7c60:	080a93ae 	.word	0x080a93ae
 80a7c64:	080a93c1 	.word	0x080a93c1

080a7c68 <rshift>:
 80a7c68:	6903      	ldr	r3, [r0, #16]
 80a7c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a7c6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80a7c72:	f100 0414 	add.w	r4, r0, #20
 80a7c76:	ea4f 1261 	mov.w	r2, r1, asr #5
 80a7c7a:	dd46      	ble.n	80a7d0a <rshift+0xa2>
 80a7c7c:	f011 011f 	ands.w	r1, r1, #31
 80a7c80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80a7c84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80a7c88:	d10c      	bne.n	80a7ca4 <rshift+0x3c>
 80a7c8a:	4629      	mov	r1, r5
 80a7c8c:	f100 0710 	add.w	r7, r0, #16
 80a7c90:	42b1      	cmp	r1, r6
 80a7c92:	d335      	bcc.n	80a7d00 <rshift+0x98>
 80a7c94:	1a9b      	subs	r3, r3, r2
 80a7c96:	009b      	lsls	r3, r3, #2
 80a7c98:	1eea      	subs	r2, r5, #3
 80a7c9a:	4296      	cmp	r6, r2
 80a7c9c:	bf38      	it	cc
 80a7c9e:	2300      	movcc	r3, #0
 80a7ca0:	4423      	add	r3, r4
 80a7ca2:	e015      	b.n	80a7cd0 <rshift+0x68>
 80a7ca4:	46a1      	mov	r9, r4
 80a7ca6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80a7caa:	f1c1 0820 	rsb	r8, r1, #32
 80a7cae:	40cf      	lsrs	r7, r1
 80a7cb0:	f105 0e04 	add.w	lr, r5, #4
 80a7cb4:	4576      	cmp	r6, lr
 80a7cb6:	46f4      	mov	ip, lr
 80a7cb8:	d816      	bhi.n	80a7ce8 <rshift+0x80>
 80a7cba:	1a9a      	subs	r2, r3, r2
 80a7cbc:	0092      	lsls	r2, r2, #2
 80a7cbe:	3a04      	subs	r2, #4
 80a7cc0:	3501      	adds	r5, #1
 80a7cc2:	42ae      	cmp	r6, r5
 80a7cc4:	bf38      	it	cc
 80a7cc6:	2200      	movcc	r2, #0
 80a7cc8:	18a3      	adds	r3, r4, r2
 80a7cca:	50a7      	str	r7, [r4, r2]
 80a7ccc:	b107      	cbz	r7, 80a7cd0 <rshift+0x68>
 80a7cce:	3304      	adds	r3, #4
 80a7cd0:	42a3      	cmp	r3, r4
 80a7cd2:	eba3 0204 	sub.w	r2, r3, r4
 80a7cd6:	bf08      	it	eq
 80a7cd8:	2300      	moveq	r3, #0
 80a7cda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80a7cde:	6102      	str	r2, [r0, #16]
 80a7ce0:	bf08      	it	eq
 80a7ce2:	6143      	streq	r3, [r0, #20]
 80a7ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a7ce8:	f8dc c000 	ldr.w	ip, [ip]
 80a7cec:	fa0c fc08 	lsl.w	ip, ip, r8
 80a7cf0:	ea4c 0707 	orr.w	r7, ip, r7
 80a7cf4:	f849 7b04 	str.w	r7, [r9], #4
 80a7cf8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80a7cfc:	40cf      	lsrs	r7, r1
 80a7cfe:	e7d9      	b.n	80a7cb4 <rshift+0x4c>
 80a7d00:	f851 cb04 	ldr.w	ip, [r1], #4
 80a7d04:	f847 cf04 	str.w	ip, [r7, #4]!
 80a7d08:	e7c2      	b.n	80a7c90 <rshift+0x28>
 80a7d0a:	4623      	mov	r3, r4
 80a7d0c:	e7e0      	b.n	80a7cd0 <rshift+0x68>

080a7d0e <__hexdig_fun>:
 80a7d0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a7d12:	2b09      	cmp	r3, #9
 80a7d14:	d802      	bhi.n	80a7d1c <__hexdig_fun+0xe>
 80a7d16:	3820      	subs	r0, #32
 80a7d18:	b2c0      	uxtb	r0, r0
 80a7d1a:	4770      	bx	lr
 80a7d1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a7d20:	2b05      	cmp	r3, #5
 80a7d22:	d801      	bhi.n	80a7d28 <__hexdig_fun+0x1a>
 80a7d24:	3847      	subs	r0, #71	; 0x47
 80a7d26:	e7f7      	b.n	80a7d18 <__hexdig_fun+0xa>
 80a7d28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a7d2c:	2b05      	cmp	r3, #5
 80a7d2e:	d801      	bhi.n	80a7d34 <__hexdig_fun+0x26>
 80a7d30:	3827      	subs	r0, #39	; 0x27
 80a7d32:	e7f1      	b.n	80a7d18 <__hexdig_fun+0xa>
 80a7d34:	2000      	movs	r0, #0
 80a7d36:	4770      	bx	lr

080a7d38 <__gethex>:
 80a7d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7d3c:	b08b      	sub	sp, #44	; 0x2c
 80a7d3e:	9305      	str	r3, [sp, #20]
 80a7d40:	4bb2      	ldr	r3, [pc, #712]	; (80a800c <__gethex+0x2d4>)
 80a7d42:	9002      	str	r0, [sp, #8]
 80a7d44:	681b      	ldr	r3, [r3, #0]
 80a7d46:	468b      	mov	fp, r1
 80a7d48:	4618      	mov	r0, r3
 80a7d4a:	4690      	mov	r8, r2
 80a7d4c:	9303      	str	r3, [sp, #12]
 80a7d4e:	f7fe fea4 	bl	80a6a9a <strlen>
 80a7d52:	4682      	mov	sl, r0
 80a7d54:	9b03      	ldr	r3, [sp, #12]
 80a7d56:	f8db 2000 	ldr.w	r2, [fp]
 80a7d5a:	4403      	add	r3, r0
 80a7d5c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a7d60:	9306      	str	r3, [sp, #24]
 80a7d62:	1c93      	adds	r3, r2, #2
 80a7d64:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80a7d68:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80a7d6c:	32fe      	adds	r2, #254	; 0xfe
 80a7d6e:	18d1      	adds	r1, r2, r3
 80a7d70:	461f      	mov	r7, r3
 80a7d72:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a7d76:	9101      	str	r1, [sp, #4]
 80a7d78:	2830      	cmp	r0, #48	; 0x30
 80a7d7a:	d0f8      	beq.n	80a7d6e <__gethex+0x36>
 80a7d7c:	f7ff ffc7 	bl	80a7d0e <__hexdig_fun>
 80a7d80:	4604      	mov	r4, r0
 80a7d82:	2800      	cmp	r0, #0
 80a7d84:	d13a      	bne.n	80a7dfc <__gethex+0xc4>
 80a7d86:	4652      	mov	r2, sl
 80a7d88:	4638      	mov	r0, r7
 80a7d8a:	9903      	ldr	r1, [sp, #12]
 80a7d8c:	f7fe fe8d 	bl	80a6aaa <strncmp>
 80a7d90:	4605      	mov	r5, r0
 80a7d92:	2800      	cmp	r0, #0
 80a7d94:	d166      	bne.n	80a7e64 <__gethex+0x12c>
 80a7d96:	f817 000a 	ldrb.w	r0, [r7, sl]
 80a7d9a:	eb07 060a 	add.w	r6, r7, sl
 80a7d9e:	f7ff ffb6 	bl	80a7d0e <__hexdig_fun>
 80a7da2:	2800      	cmp	r0, #0
 80a7da4:	d060      	beq.n	80a7e68 <__gethex+0x130>
 80a7da6:	4633      	mov	r3, r6
 80a7da8:	7818      	ldrb	r0, [r3, #0]
 80a7daa:	461f      	mov	r7, r3
 80a7dac:	2830      	cmp	r0, #48	; 0x30
 80a7dae:	f103 0301 	add.w	r3, r3, #1
 80a7db2:	d0f9      	beq.n	80a7da8 <__gethex+0x70>
 80a7db4:	f7ff ffab 	bl	80a7d0e <__hexdig_fun>
 80a7db8:	2301      	movs	r3, #1
 80a7dba:	fab0 f480 	clz	r4, r0
 80a7dbe:	4635      	mov	r5, r6
 80a7dc0:	0964      	lsrs	r4, r4, #5
 80a7dc2:	9301      	str	r3, [sp, #4]
 80a7dc4:	463a      	mov	r2, r7
 80a7dc6:	4616      	mov	r6, r2
 80a7dc8:	7830      	ldrb	r0, [r6, #0]
 80a7dca:	3201      	adds	r2, #1
 80a7dcc:	f7ff ff9f 	bl	80a7d0e <__hexdig_fun>
 80a7dd0:	2800      	cmp	r0, #0
 80a7dd2:	d1f8      	bne.n	80a7dc6 <__gethex+0x8e>
 80a7dd4:	4652      	mov	r2, sl
 80a7dd6:	4630      	mov	r0, r6
 80a7dd8:	9903      	ldr	r1, [sp, #12]
 80a7dda:	f7fe fe66 	bl	80a6aaa <strncmp>
 80a7dde:	b980      	cbnz	r0, 80a7e02 <__gethex+0xca>
 80a7de0:	b94d      	cbnz	r5, 80a7df6 <__gethex+0xbe>
 80a7de2:	eb06 050a 	add.w	r5, r6, sl
 80a7de6:	462a      	mov	r2, r5
 80a7de8:	4616      	mov	r6, r2
 80a7dea:	7830      	ldrb	r0, [r6, #0]
 80a7dec:	3201      	adds	r2, #1
 80a7dee:	f7ff ff8e 	bl	80a7d0e <__hexdig_fun>
 80a7df2:	2800      	cmp	r0, #0
 80a7df4:	d1f8      	bne.n	80a7de8 <__gethex+0xb0>
 80a7df6:	1bad      	subs	r5, r5, r6
 80a7df8:	00ad      	lsls	r5, r5, #2
 80a7dfa:	e004      	b.n	80a7e06 <__gethex+0xce>
 80a7dfc:	2400      	movs	r4, #0
 80a7dfe:	4625      	mov	r5, r4
 80a7e00:	e7e0      	b.n	80a7dc4 <__gethex+0x8c>
 80a7e02:	2d00      	cmp	r5, #0
 80a7e04:	d1f7      	bne.n	80a7df6 <__gethex+0xbe>
 80a7e06:	7833      	ldrb	r3, [r6, #0]
 80a7e08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a7e0c:	2b50      	cmp	r3, #80	; 0x50
 80a7e0e:	d139      	bne.n	80a7e84 <__gethex+0x14c>
 80a7e10:	7873      	ldrb	r3, [r6, #1]
 80a7e12:	2b2b      	cmp	r3, #43	; 0x2b
 80a7e14:	d02a      	beq.n	80a7e6c <__gethex+0x134>
 80a7e16:	2b2d      	cmp	r3, #45	; 0x2d
 80a7e18:	d02c      	beq.n	80a7e74 <__gethex+0x13c>
 80a7e1a:	f04f 0900 	mov.w	r9, #0
 80a7e1e:	1c71      	adds	r1, r6, #1
 80a7e20:	7808      	ldrb	r0, [r1, #0]
 80a7e22:	f7ff ff74 	bl	80a7d0e <__hexdig_fun>
 80a7e26:	1e43      	subs	r3, r0, #1
 80a7e28:	b2db      	uxtb	r3, r3
 80a7e2a:	2b18      	cmp	r3, #24
 80a7e2c:	d82a      	bhi.n	80a7e84 <__gethex+0x14c>
 80a7e2e:	f1a0 0210 	sub.w	r2, r0, #16
 80a7e32:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a7e36:	f7ff ff6a 	bl	80a7d0e <__hexdig_fun>
 80a7e3a:	1e43      	subs	r3, r0, #1
 80a7e3c:	b2db      	uxtb	r3, r3
 80a7e3e:	2b18      	cmp	r3, #24
 80a7e40:	d91b      	bls.n	80a7e7a <__gethex+0x142>
 80a7e42:	f1b9 0f00 	cmp.w	r9, #0
 80a7e46:	d000      	beq.n	80a7e4a <__gethex+0x112>
 80a7e48:	4252      	negs	r2, r2
 80a7e4a:	4415      	add	r5, r2
 80a7e4c:	f8cb 1000 	str.w	r1, [fp]
 80a7e50:	b1d4      	cbz	r4, 80a7e88 <__gethex+0x150>
 80a7e52:	9b01      	ldr	r3, [sp, #4]
 80a7e54:	2b00      	cmp	r3, #0
 80a7e56:	bf14      	ite	ne
 80a7e58:	2700      	movne	r7, #0
 80a7e5a:	2706      	moveq	r7, #6
 80a7e5c:	4638      	mov	r0, r7
 80a7e5e:	b00b      	add	sp, #44	; 0x2c
 80a7e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7e64:	463e      	mov	r6, r7
 80a7e66:	4625      	mov	r5, r4
 80a7e68:	2401      	movs	r4, #1
 80a7e6a:	e7cc      	b.n	80a7e06 <__gethex+0xce>
 80a7e6c:	f04f 0900 	mov.w	r9, #0
 80a7e70:	1cb1      	adds	r1, r6, #2
 80a7e72:	e7d5      	b.n	80a7e20 <__gethex+0xe8>
 80a7e74:	f04f 0901 	mov.w	r9, #1
 80a7e78:	e7fa      	b.n	80a7e70 <__gethex+0x138>
 80a7e7a:	230a      	movs	r3, #10
 80a7e7c:	fb03 0202 	mla	r2, r3, r2, r0
 80a7e80:	3a10      	subs	r2, #16
 80a7e82:	e7d6      	b.n	80a7e32 <__gethex+0xfa>
 80a7e84:	4631      	mov	r1, r6
 80a7e86:	e7e1      	b.n	80a7e4c <__gethex+0x114>
 80a7e88:	4621      	mov	r1, r4
 80a7e8a:	1bf3      	subs	r3, r6, r7
 80a7e8c:	3b01      	subs	r3, #1
 80a7e8e:	2b07      	cmp	r3, #7
 80a7e90:	dc0a      	bgt.n	80a7ea8 <__gethex+0x170>
 80a7e92:	9802      	ldr	r0, [sp, #8]
 80a7e94:	f000 fb5a 	bl	80a854c <_Balloc>
 80a7e98:	4604      	mov	r4, r0
 80a7e9a:	b940      	cbnz	r0, 80a7eae <__gethex+0x176>
 80a7e9c:	4602      	mov	r2, r0
 80a7e9e:	21de      	movs	r1, #222	; 0xde
 80a7ea0:	4b5b      	ldr	r3, [pc, #364]	; (80a8010 <__gethex+0x2d8>)
 80a7ea2:	485c      	ldr	r0, [pc, #368]	; (80a8014 <__gethex+0x2dc>)
 80a7ea4:	f7fc f9b0 	bl	80a4208 <__assert_func>
 80a7ea8:	3101      	adds	r1, #1
 80a7eaa:	105b      	asrs	r3, r3, #1
 80a7eac:	e7ef      	b.n	80a7e8e <__gethex+0x156>
 80a7eae:	f04f 0b00 	mov.w	fp, #0
 80a7eb2:	f100 0914 	add.w	r9, r0, #20
 80a7eb6:	f1ca 0301 	rsb	r3, sl, #1
 80a7eba:	f8cd 9010 	str.w	r9, [sp, #16]
 80a7ebe:	f8cd b004 	str.w	fp, [sp, #4]
 80a7ec2:	9308      	str	r3, [sp, #32]
 80a7ec4:	42b7      	cmp	r7, r6
 80a7ec6:	d33f      	bcc.n	80a7f48 <__gethex+0x210>
 80a7ec8:	9f04      	ldr	r7, [sp, #16]
 80a7eca:	9b01      	ldr	r3, [sp, #4]
 80a7ecc:	f847 3b04 	str.w	r3, [r7], #4
 80a7ed0:	eba7 0709 	sub.w	r7, r7, r9
 80a7ed4:	10bf      	asrs	r7, r7, #2
 80a7ed6:	6127      	str	r7, [r4, #16]
 80a7ed8:	4618      	mov	r0, r3
 80a7eda:	f000 fc29 	bl	80a8730 <__hi0bits>
 80a7ede:	017f      	lsls	r7, r7, #5
 80a7ee0:	f8d8 6000 	ldr.w	r6, [r8]
 80a7ee4:	1a3f      	subs	r7, r7, r0
 80a7ee6:	42b7      	cmp	r7, r6
 80a7ee8:	dd62      	ble.n	80a7fb0 <__gethex+0x278>
 80a7eea:	1bbf      	subs	r7, r7, r6
 80a7eec:	4639      	mov	r1, r7
 80a7eee:	4620      	mov	r0, r4
 80a7ef0:	f000 ffc3 	bl	80a8e7a <__any_on>
 80a7ef4:	4682      	mov	sl, r0
 80a7ef6:	b1a8      	cbz	r0, 80a7f24 <__gethex+0x1ec>
 80a7ef8:	f04f 0a01 	mov.w	sl, #1
 80a7efc:	1e7b      	subs	r3, r7, #1
 80a7efe:	1159      	asrs	r1, r3, #5
 80a7f00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80a7f04:	f003 021f 	and.w	r2, r3, #31
 80a7f08:	fa0a f202 	lsl.w	r2, sl, r2
 80a7f0c:	420a      	tst	r2, r1
 80a7f0e:	d009      	beq.n	80a7f24 <__gethex+0x1ec>
 80a7f10:	4553      	cmp	r3, sl
 80a7f12:	dd05      	ble.n	80a7f20 <__gethex+0x1e8>
 80a7f14:	4620      	mov	r0, r4
 80a7f16:	1eb9      	subs	r1, r7, #2
 80a7f18:	f000 ffaf 	bl	80a8e7a <__any_on>
 80a7f1c:	2800      	cmp	r0, #0
 80a7f1e:	d144      	bne.n	80a7faa <__gethex+0x272>
 80a7f20:	f04f 0a02 	mov.w	sl, #2
 80a7f24:	4639      	mov	r1, r7
 80a7f26:	4620      	mov	r0, r4
 80a7f28:	f7ff fe9e 	bl	80a7c68 <rshift>
 80a7f2c:	443d      	add	r5, r7
 80a7f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a7f32:	42ab      	cmp	r3, r5
 80a7f34:	da4a      	bge.n	80a7fcc <__gethex+0x294>
 80a7f36:	4621      	mov	r1, r4
 80a7f38:	9802      	ldr	r0, [sp, #8]
 80a7f3a:	f000 fb47 	bl	80a85cc <_Bfree>
 80a7f3e:	2300      	movs	r3, #0
 80a7f40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a7f42:	27a3      	movs	r7, #163	; 0xa3
 80a7f44:	6013      	str	r3, [r2, #0]
 80a7f46:	e789      	b.n	80a7e5c <__gethex+0x124>
 80a7f48:	1e73      	subs	r3, r6, #1
 80a7f4a:	9a06      	ldr	r2, [sp, #24]
 80a7f4c:	9307      	str	r3, [sp, #28]
 80a7f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a7f52:	4293      	cmp	r3, r2
 80a7f54:	d019      	beq.n	80a7f8a <__gethex+0x252>
 80a7f56:	f1bb 0f20 	cmp.w	fp, #32
 80a7f5a:	d107      	bne.n	80a7f6c <__gethex+0x234>
 80a7f5c:	9b04      	ldr	r3, [sp, #16]
 80a7f5e:	9a01      	ldr	r2, [sp, #4]
 80a7f60:	f843 2b04 	str.w	r2, [r3], #4
 80a7f64:	9304      	str	r3, [sp, #16]
 80a7f66:	2300      	movs	r3, #0
 80a7f68:	469b      	mov	fp, r3
 80a7f6a:	9301      	str	r3, [sp, #4]
 80a7f6c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a7f70:	f7ff fecd 	bl	80a7d0e <__hexdig_fun>
 80a7f74:	9b01      	ldr	r3, [sp, #4]
 80a7f76:	f000 000f 	and.w	r0, r0, #15
 80a7f7a:	fa00 f00b 	lsl.w	r0, r0, fp
 80a7f7e:	4303      	orrs	r3, r0
 80a7f80:	9301      	str	r3, [sp, #4]
 80a7f82:	f10b 0b04 	add.w	fp, fp, #4
 80a7f86:	9b07      	ldr	r3, [sp, #28]
 80a7f88:	e00d      	b.n	80a7fa6 <__gethex+0x26e>
 80a7f8a:	9a08      	ldr	r2, [sp, #32]
 80a7f8c:	1e73      	subs	r3, r6, #1
 80a7f8e:	4413      	add	r3, r2
 80a7f90:	42bb      	cmp	r3, r7
 80a7f92:	d3e0      	bcc.n	80a7f56 <__gethex+0x21e>
 80a7f94:	4618      	mov	r0, r3
 80a7f96:	4652      	mov	r2, sl
 80a7f98:	9903      	ldr	r1, [sp, #12]
 80a7f9a:	9309      	str	r3, [sp, #36]	; 0x24
 80a7f9c:	f7fe fd85 	bl	80a6aaa <strncmp>
 80a7fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7fa2:	2800      	cmp	r0, #0
 80a7fa4:	d1d7      	bne.n	80a7f56 <__gethex+0x21e>
 80a7fa6:	461e      	mov	r6, r3
 80a7fa8:	e78c      	b.n	80a7ec4 <__gethex+0x18c>
 80a7faa:	f04f 0a03 	mov.w	sl, #3
 80a7fae:	e7b9      	b.n	80a7f24 <__gethex+0x1ec>
 80a7fb0:	da09      	bge.n	80a7fc6 <__gethex+0x28e>
 80a7fb2:	1bf7      	subs	r7, r6, r7
 80a7fb4:	4621      	mov	r1, r4
 80a7fb6:	463a      	mov	r2, r7
 80a7fb8:	9802      	ldr	r0, [sp, #8]
 80a7fba:	f000 fd1f 	bl	80a89fc <__lshift>
 80a7fbe:	4604      	mov	r4, r0
 80a7fc0:	1bed      	subs	r5, r5, r7
 80a7fc2:	f100 0914 	add.w	r9, r0, #20
 80a7fc6:	f04f 0a00 	mov.w	sl, #0
 80a7fca:	e7b0      	b.n	80a7f2e <__gethex+0x1f6>
 80a7fcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a7fd0:	42a8      	cmp	r0, r5
 80a7fd2:	dd72      	ble.n	80a80ba <__gethex+0x382>
 80a7fd4:	1b45      	subs	r5, r0, r5
 80a7fd6:	42ae      	cmp	r6, r5
 80a7fd8:	dc35      	bgt.n	80a8046 <__gethex+0x30e>
 80a7fda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a7fde:	2b02      	cmp	r3, #2
 80a7fe0:	d029      	beq.n	80a8036 <__gethex+0x2fe>
 80a7fe2:	2b03      	cmp	r3, #3
 80a7fe4:	d02b      	beq.n	80a803e <__gethex+0x306>
 80a7fe6:	2b01      	cmp	r3, #1
 80a7fe8:	d11c      	bne.n	80a8024 <__gethex+0x2ec>
 80a7fea:	42ae      	cmp	r6, r5
 80a7fec:	d11a      	bne.n	80a8024 <__gethex+0x2ec>
 80a7fee:	2e01      	cmp	r6, #1
 80a7ff0:	d112      	bne.n	80a8018 <__gethex+0x2e0>
 80a7ff2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a7ff6:	9a05      	ldr	r2, [sp, #20]
 80a7ff8:	2762      	movs	r7, #98	; 0x62
 80a7ffa:	6013      	str	r3, [r2, #0]
 80a7ffc:	2301      	movs	r3, #1
 80a7ffe:	6123      	str	r3, [r4, #16]
 80a8000:	f8c9 3000 	str.w	r3, [r9]
 80a8004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8006:	601c      	str	r4, [r3, #0]
 80a8008:	e728      	b.n	80a7e5c <__gethex+0x124>
 80a800a:	bf00      	nop
 80a800c:	080a954c 	.word	0x080a954c
 80a8010:	080a94d5 	.word	0x080a94d5
 80a8014:	080a94e6 	.word	0x080a94e6
 80a8018:	4620      	mov	r0, r4
 80a801a:	1e71      	subs	r1, r6, #1
 80a801c:	f000 ff2d 	bl	80a8e7a <__any_on>
 80a8020:	2800      	cmp	r0, #0
 80a8022:	d1e6      	bne.n	80a7ff2 <__gethex+0x2ba>
 80a8024:	4621      	mov	r1, r4
 80a8026:	9802      	ldr	r0, [sp, #8]
 80a8028:	f000 fad0 	bl	80a85cc <_Bfree>
 80a802c:	2300      	movs	r3, #0
 80a802e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a8030:	2750      	movs	r7, #80	; 0x50
 80a8032:	6013      	str	r3, [r2, #0]
 80a8034:	e712      	b.n	80a7e5c <__gethex+0x124>
 80a8036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8038:	2b00      	cmp	r3, #0
 80a803a:	d1f3      	bne.n	80a8024 <__gethex+0x2ec>
 80a803c:	e7d9      	b.n	80a7ff2 <__gethex+0x2ba>
 80a803e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8040:	2b00      	cmp	r3, #0
 80a8042:	d1d6      	bne.n	80a7ff2 <__gethex+0x2ba>
 80a8044:	e7ee      	b.n	80a8024 <__gethex+0x2ec>
 80a8046:	1e6f      	subs	r7, r5, #1
 80a8048:	f1ba 0f00 	cmp.w	sl, #0
 80a804c:	d132      	bne.n	80a80b4 <__gethex+0x37c>
 80a804e:	b127      	cbz	r7, 80a805a <__gethex+0x322>
 80a8050:	4639      	mov	r1, r7
 80a8052:	4620      	mov	r0, r4
 80a8054:	f000 ff11 	bl	80a8e7a <__any_on>
 80a8058:	4682      	mov	sl, r0
 80a805a:	2101      	movs	r1, #1
 80a805c:	117b      	asrs	r3, r7, #5
 80a805e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80a8062:	f007 071f 	and.w	r7, r7, #31
 80a8066:	fa01 f707 	lsl.w	r7, r1, r7
 80a806a:	421f      	tst	r7, r3
 80a806c:	f04f 0702 	mov.w	r7, #2
 80a8070:	4629      	mov	r1, r5
 80a8072:	4620      	mov	r0, r4
 80a8074:	bf18      	it	ne
 80a8076:	f04a 0a02 	orrne.w	sl, sl, #2
 80a807a:	1b76      	subs	r6, r6, r5
 80a807c:	f7ff fdf4 	bl	80a7c68 <rshift>
 80a8080:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80a8084:	f1ba 0f00 	cmp.w	sl, #0
 80a8088:	d048      	beq.n	80a811c <__gethex+0x3e4>
 80a808a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a808e:	2b02      	cmp	r3, #2
 80a8090:	d015      	beq.n	80a80be <__gethex+0x386>
 80a8092:	2b03      	cmp	r3, #3
 80a8094:	d017      	beq.n	80a80c6 <__gethex+0x38e>
 80a8096:	2b01      	cmp	r3, #1
 80a8098:	d109      	bne.n	80a80ae <__gethex+0x376>
 80a809a:	f01a 0f02 	tst.w	sl, #2
 80a809e:	d006      	beq.n	80a80ae <__gethex+0x376>
 80a80a0:	f8d9 0000 	ldr.w	r0, [r9]
 80a80a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80a80a8:	f01a 0f01 	tst.w	sl, #1
 80a80ac:	d10e      	bne.n	80a80cc <__gethex+0x394>
 80a80ae:	f047 0710 	orr.w	r7, r7, #16
 80a80b2:	e033      	b.n	80a811c <__gethex+0x3e4>
 80a80b4:	f04f 0a01 	mov.w	sl, #1
 80a80b8:	e7cf      	b.n	80a805a <__gethex+0x322>
 80a80ba:	2701      	movs	r7, #1
 80a80bc:	e7e2      	b.n	80a8084 <__gethex+0x34c>
 80a80be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a80c0:	f1c3 0301 	rsb	r3, r3, #1
 80a80c4:	9315      	str	r3, [sp, #84]	; 0x54
 80a80c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a80c8:	2b00      	cmp	r3, #0
 80a80ca:	d0f0      	beq.n	80a80ae <__gethex+0x376>
 80a80cc:	f04f 0c00 	mov.w	ip, #0
 80a80d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80a80d4:	f104 0314 	add.w	r3, r4, #20
 80a80d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80a80dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80a80e0:	4618      	mov	r0, r3
 80a80e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80a80e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80a80ea:	d01c      	beq.n	80a8126 <__gethex+0x3ee>
 80a80ec:	3201      	adds	r2, #1
 80a80ee:	6002      	str	r2, [r0, #0]
 80a80f0:	2f02      	cmp	r7, #2
 80a80f2:	f104 0314 	add.w	r3, r4, #20
 80a80f6:	d13d      	bne.n	80a8174 <__gethex+0x43c>
 80a80f8:	f8d8 2000 	ldr.w	r2, [r8]
 80a80fc:	3a01      	subs	r2, #1
 80a80fe:	42b2      	cmp	r2, r6
 80a8100:	d10a      	bne.n	80a8118 <__gethex+0x3e0>
 80a8102:	2201      	movs	r2, #1
 80a8104:	1171      	asrs	r1, r6, #5
 80a8106:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a810a:	f006 061f 	and.w	r6, r6, #31
 80a810e:	fa02 f606 	lsl.w	r6, r2, r6
 80a8112:	421e      	tst	r6, r3
 80a8114:	bf18      	it	ne
 80a8116:	4617      	movne	r7, r2
 80a8118:	f047 0720 	orr.w	r7, r7, #32
 80a811c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a811e:	601c      	str	r4, [r3, #0]
 80a8120:	9b05      	ldr	r3, [sp, #20]
 80a8122:	601d      	str	r5, [r3, #0]
 80a8124:	e69a      	b.n	80a7e5c <__gethex+0x124>
 80a8126:	4299      	cmp	r1, r3
 80a8128:	f843 cc04 	str.w	ip, [r3, #-4]
 80a812c:	d8d8      	bhi.n	80a80e0 <__gethex+0x3a8>
 80a812e:	68a3      	ldr	r3, [r4, #8]
 80a8130:	459b      	cmp	fp, r3
 80a8132:	db17      	blt.n	80a8164 <__gethex+0x42c>
 80a8134:	6861      	ldr	r1, [r4, #4]
 80a8136:	9802      	ldr	r0, [sp, #8]
 80a8138:	3101      	adds	r1, #1
 80a813a:	f000 fa07 	bl	80a854c <_Balloc>
 80a813e:	4681      	mov	r9, r0
 80a8140:	b918      	cbnz	r0, 80a814a <__gethex+0x412>
 80a8142:	4602      	mov	r2, r0
 80a8144:	2184      	movs	r1, #132	; 0x84
 80a8146:	4b19      	ldr	r3, [pc, #100]	; (80a81ac <__gethex+0x474>)
 80a8148:	e6ab      	b.n	80a7ea2 <__gethex+0x16a>
 80a814a:	6922      	ldr	r2, [r4, #16]
 80a814c:	f104 010c 	add.w	r1, r4, #12
 80a8150:	3202      	adds	r2, #2
 80a8152:	0092      	lsls	r2, r2, #2
 80a8154:	300c      	adds	r0, #12
 80a8156:	f7fe fc2f 	bl	80a69b8 <memcpy>
 80a815a:	4621      	mov	r1, r4
 80a815c:	9802      	ldr	r0, [sp, #8]
 80a815e:	f000 fa35 	bl	80a85cc <_Bfree>
 80a8162:	464c      	mov	r4, r9
 80a8164:	6923      	ldr	r3, [r4, #16]
 80a8166:	1c5a      	adds	r2, r3, #1
 80a8168:	6122      	str	r2, [r4, #16]
 80a816a:	2201      	movs	r2, #1
 80a816c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a8170:	615a      	str	r2, [r3, #20]
 80a8172:	e7bd      	b.n	80a80f0 <__gethex+0x3b8>
 80a8174:	6922      	ldr	r2, [r4, #16]
 80a8176:	455a      	cmp	r2, fp
 80a8178:	dd0b      	ble.n	80a8192 <__gethex+0x45a>
 80a817a:	2101      	movs	r1, #1
 80a817c:	4620      	mov	r0, r4
 80a817e:	f7ff fd73 	bl	80a7c68 <rshift>
 80a8182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8186:	3501      	adds	r5, #1
 80a8188:	42ab      	cmp	r3, r5
 80a818a:	f6ff aed4 	blt.w	80a7f36 <__gethex+0x1fe>
 80a818e:	2701      	movs	r7, #1
 80a8190:	e7c2      	b.n	80a8118 <__gethex+0x3e0>
 80a8192:	f016 061f 	ands.w	r6, r6, #31
 80a8196:	d0fa      	beq.n	80a818e <__gethex+0x456>
 80a8198:	4453      	add	r3, sl
 80a819a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80a819e:	f000 fac7 	bl	80a8730 <__hi0bits>
 80a81a2:	f1c6 0620 	rsb	r6, r6, #32
 80a81a6:	42b0      	cmp	r0, r6
 80a81a8:	dbe7      	blt.n	80a817a <__gethex+0x442>
 80a81aa:	e7f0      	b.n	80a818e <__gethex+0x456>
 80a81ac:	080a94d5 	.word	0x080a94d5

080a81b0 <L_shift>:
 80a81b0:	f1c2 0208 	rsb	r2, r2, #8
 80a81b4:	0092      	lsls	r2, r2, #2
 80a81b6:	b570      	push	{r4, r5, r6, lr}
 80a81b8:	f1c2 0620 	rsb	r6, r2, #32
 80a81bc:	6843      	ldr	r3, [r0, #4]
 80a81be:	6804      	ldr	r4, [r0, #0]
 80a81c0:	fa03 f506 	lsl.w	r5, r3, r6
 80a81c4:	432c      	orrs	r4, r5
 80a81c6:	40d3      	lsrs	r3, r2
 80a81c8:	6004      	str	r4, [r0, #0]
 80a81ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80a81ce:	4288      	cmp	r0, r1
 80a81d0:	d3f4      	bcc.n	80a81bc <L_shift+0xc>
 80a81d2:	bd70      	pop	{r4, r5, r6, pc}

080a81d4 <__match>:
 80a81d4:	b530      	push	{r4, r5, lr}
 80a81d6:	6803      	ldr	r3, [r0, #0]
 80a81d8:	3301      	adds	r3, #1
 80a81da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a81de:	b914      	cbnz	r4, 80a81e6 <__match+0x12>
 80a81e0:	6003      	str	r3, [r0, #0]
 80a81e2:	2001      	movs	r0, #1
 80a81e4:	bd30      	pop	{r4, r5, pc}
 80a81e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a81ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a81ee:	2d19      	cmp	r5, #25
 80a81f0:	bf98      	it	ls
 80a81f2:	3220      	addls	r2, #32
 80a81f4:	42a2      	cmp	r2, r4
 80a81f6:	d0f0      	beq.n	80a81da <__match+0x6>
 80a81f8:	2000      	movs	r0, #0
 80a81fa:	e7f3      	b.n	80a81e4 <__match+0x10>

080a81fc <__hexnan>:
 80a81fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8200:	2500      	movs	r5, #0
 80a8202:	680b      	ldr	r3, [r1, #0]
 80a8204:	4682      	mov	sl, r0
 80a8206:	115e      	asrs	r6, r3, #5
 80a8208:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a820c:	f013 031f 	ands.w	r3, r3, #31
 80a8210:	bf18      	it	ne
 80a8212:	3604      	addne	r6, #4
 80a8214:	1f37      	subs	r7, r6, #4
 80a8216:	46b9      	mov	r9, r7
 80a8218:	463c      	mov	r4, r7
 80a821a:	46ab      	mov	fp, r5
 80a821c:	b087      	sub	sp, #28
 80a821e:	4690      	mov	r8, r2
 80a8220:	6802      	ldr	r2, [r0, #0]
 80a8222:	9301      	str	r3, [sp, #4]
 80a8224:	f846 5c04 	str.w	r5, [r6, #-4]
 80a8228:	9502      	str	r5, [sp, #8]
 80a822a:	7851      	ldrb	r1, [r2, #1]
 80a822c:	1c53      	adds	r3, r2, #1
 80a822e:	9303      	str	r3, [sp, #12]
 80a8230:	b341      	cbz	r1, 80a8284 <__hexnan+0x88>
 80a8232:	4608      	mov	r0, r1
 80a8234:	9205      	str	r2, [sp, #20]
 80a8236:	9104      	str	r1, [sp, #16]
 80a8238:	f7ff fd69 	bl	80a7d0e <__hexdig_fun>
 80a823c:	2800      	cmp	r0, #0
 80a823e:	d14f      	bne.n	80a82e0 <__hexnan+0xe4>
 80a8240:	9904      	ldr	r1, [sp, #16]
 80a8242:	9a05      	ldr	r2, [sp, #20]
 80a8244:	2920      	cmp	r1, #32
 80a8246:	d818      	bhi.n	80a827a <__hexnan+0x7e>
 80a8248:	9b02      	ldr	r3, [sp, #8]
 80a824a:	459b      	cmp	fp, r3
 80a824c:	dd13      	ble.n	80a8276 <__hexnan+0x7a>
 80a824e:	454c      	cmp	r4, r9
 80a8250:	d206      	bcs.n	80a8260 <__hexnan+0x64>
 80a8252:	2d07      	cmp	r5, #7
 80a8254:	dc04      	bgt.n	80a8260 <__hexnan+0x64>
 80a8256:	462a      	mov	r2, r5
 80a8258:	4649      	mov	r1, r9
 80a825a:	4620      	mov	r0, r4
 80a825c:	f7ff ffa8 	bl	80a81b0 <L_shift>
 80a8260:	4544      	cmp	r4, r8
 80a8262:	d950      	bls.n	80a8306 <__hexnan+0x10a>
 80a8264:	2300      	movs	r3, #0
 80a8266:	f1a4 0904 	sub.w	r9, r4, #4
 80a826a:	f844 3c04 	str.w	r3, [r4, #-4]
 80a826e:	461d      	mov	r5, r3
 80a8270:	464c      	mov	r4, r9
 80a8272:	f8cd b008 	str.w	fp, [sp, #8]
 80a8276:	9a03      	ldr	r2, [sp, #12]
 80a8278:	e7d7      	b.n	80a822a <__hexnan+0x2e>
 80a827a:	2929      	cmp	r1, #41	; 0x29
 80a827c:	d156      	bne.n	80a832c <__hexnan+0x130>
 80a827e:	3202      	adds	r2, #2
 80a8280:	f8ca 2000 	str.w	r2, [sl]
 80a8284:	f1bb 0f00 	cmp.w	fp, #0
 80a8288:	d050      	beq.n	80a832c <__hexnan+0x130>
 80a828a:	454c      	cmp	r4, r9
 80a828c:	d206      	bcs.n	80a829c <__hexnan+0xa0>
 80a828e:	2d07      	cmp	r5, #7
 80a8290:	dc04      	bgt.n	80a829c <__hexnan+0xa0>
 80a8292:	462a      	mov	r2, r5
 80a8294:	4649      	mov	r1, r9
 80a8296:	4620      	mov	r0, r4
 80a8298:	f7ff ff8a 	bl	80a81b0 <L_shift>
 80a829c:	4544      	cmp	r4, r8
 80a829e:	d934      	bls.n	80a830a <__hexnan+0x10e>
 80a82a0:	4623      	mov	r3, r4
 80a82a2:	f1a8 0204 	sub.w	r2, r8, #4
 80a82a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80a82aa:	429f      	cmp	r7, r3
 80a82ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80a82b0:	d2f9      	bcs.n	80a82a6 <__hexnan+0xaa>
 80a82b2:	1b3b      	subs	r3, r7, r4
 80a82b4:	f023 0303 	bic.w	r3, r3, #3
 80a82b8:	3304      	adds	r3, #4
 80a82ba:	3401      	adds	r4, #1
 80a82bc:	3e03      	subs	r6, #3
 80a82be:	42b4      	cmp	r4, r6
 80a82c0:	bf88      	it	hi
 80a82c2:	2304      	movhi	r3, #4
 80a82c4:	2200      	movs	r2, #0
 80a82c6:	4443      	add	r3, r8
 80a82c8:	f843 2b04 	str.w	r2, [r3], #4
 80a82cc:	429f      	cmp	r7, r3
 80a82ce:	d2fb      	bcs.n	80a82c8 <__hexnan+0xcc>
 80a82d0:	683b      	ldr	r3, [r7, #0]
 80a82d2:	b91b      	cbnz	r3, 80a82dc <__hexnan+0xe0>
 80a82d4:	4547      	cmp	r7, r8
 80a82d6:	d127      	bne.n	80a8328 <__hexnan+0x12c>
 80a82d8:	2301      	movs	r3, #1
 80a82da:	603b      	str	r3, [r7, #0]
 80a82dc:	2005      	movs	r0, #5
 80a82de:	e026      	b.n	80a832e <__hexnan+0x132>
 80a82e0:	3501      	adds	r5, #1
 80a82e2:	2d08      	cmp	r5, #8
 80a82e4:	f10b 0b01 	add.w	fp, fp, #1
 80a82e8:	dd06      	ble.n	80a82f8 <__hexnan+0xfc>
 80a82ea:	4544      	cmp	r4, r8
 80a82ec:	d9c3      	bls.n	80a8276 <__hexnan+0x7a>
 80a82ee:	2300      	movs	r3, #0
 80a82f0:	2501      	movs	r5, #1
 80a82f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80a82f6:	3c04      	subs	r4, #4
 80a82f8:	6822      	ldr	r2, [r4, #0]
 80a82fa:	f000 000f 	and.w	r0, r0, #15
 80a82fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80a8302:	6022      	str	r2, [r4, #0]
 80a8304:	e7b7      	b.n	80a8276 <__hexnan+0x7a>
 80a8306:	2508      	movs	r5, #8
 80a8308:	e7b5      	b.n	80a8276 <__hexnan+0x7a>
 80a830a:	9b01      	ldr	r3, [sp, #4]
 80a830c:	2b00      	cmp	r3, #0
 80a830e:	d0df      	beq.n	80a82d0 <__hexnan+0xd4>
 80a8310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a8314:	f1c3 0320 	rsb	r3, r3, #32
 80a8318:	fa22 f303 	lsr.w	r3, r2, r3
 80a831c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a8320:	401a      	ands	r2, r3
 80a8322:	f846 2c04 	str.w	r2, [r6, #-4]
 80a8326:	e7d3      	b.n	80a82d0 <__hexnan+0xd4>
 80a8328:	3f04      	subs	r7, #4
 80a832a:	e7d1      	b.n	80a82d0 <__hexnan+0xd4>
 80a832c:	2004      	movs	r0, #4
 80a832e:	b007      	add	sp, #28
 80a8330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8334 <_findenv_r>:
 80a8334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8338:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80a83a8 <_findenv_r+0x74>
 80a833c:	4607      	mov	r7, r0
 80a833e:	4689      	mov	r9, r1
 80a8340:	4616      	mov	r6, r2
 80a8342:	f000 fddd 	bl	80a8f00 <__env_lock>
 80a8346:	f8da 4000 	ldr.w	r4, [sl]
 80a834a:	b134      	cbz	r4, 80a835a <_findenv_r+0x26>
 80a834c:	464b      	mov	r3, r9
 80a834e:	4698      	mov	r8, r3
 80a8350:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a8354:	b13a      	cbz	r2, 80a8366 <_findenv_r+0x32>
 80a8356:	2a3d      	cmp	r2, #61	; 0x3d
 80a8358:	d1f9      	bne.n	80a834e <_findenv_r+0x1a>
 80a835a:	4638      	mov	r0, r7
 80a835c:	f000 fdd6 	bl	80a8f0c <__env_unlock>
 80a8360:	2000      	movs	r0, #0
 80a8362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8366:	eba8 0809 	sub.w	r8, r8, r9
 80a836a:	46a3      	mov	fp, r4
 80a836c:	f854 0b04 	ldr.w	r0, [r4], #4
 80a8370:	2800      	cmp	r0, #0
 80a8372:	d0f2      	beq.n	80a835a <_findenv_r+0x26>
 80a8374:	4642      	mov	r2, r8
 80a8376:	4649      	mov	r1, r9
 80a8378:	f7fe fb97 	bl	80a6aaa <strncmp>
 80a837c:	2800      	cmp	r0, #0
 80a837e:	d1f4      	bne.n	80a836a <_findenv_r+0x36>
 80a8380:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a8384:	eb03 0508 	add.w	r5, r3, r8
 80a8388:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a838c:	2b3d      	cmp	r3, #61	; 0x3d
 80a838e:	d1ec      	bne.n	80a836a <_findenv_r+0x36>
 80a8390:	f8da 3000 	ldr.w	r3, [sl]
 80a8394:	4638      	mov	r0, r7
 80a8396:	ebab 0303 	sub.w	r3, fp, r3
 80a839a:	109b      	asrs	r3, r3, #2
 80a839c:	6033      	str	r3, [r6, #0]
 80a839e:	f000 fdb5 	bl	80a8f0c <__env_unlock>
 80a83a2:	1c68      	adds	r0, r5, #1
 80a83a4:	e7dd      	b.n	80a8362 <_findenv_r+0x2e>
 80a83a6:	bf00      	nop
 80a83a8:	20000238 	.word	0x20000238

080a83ac <_getenv_r>:
 80a83ac:	b507      	push	{r0, r1, r2, lr}
 80a83ae:	aa01      	add	r2, sp, #4
 80a83b0:	f7ff ffc0 	bl	80a8334 <_findenv_r>
 80a83b4:	b003      	add	sp, #12
 80a83b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a83bc <__gettzinfo>:
 80a83bc:	4800      	ldr	r0, [pc, #0]	; (80a83c0 <__gettzinfo+0x4>)
 80a83be:	4770      	bx	lr
 80a83c0:	20000070 	.word	0x20000070

080a83c4 <gmtime_r>:
 80a83c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a83c8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a83cc:	460c      	mov	r4, r1
 80a83ce:	2300      	movs	r3, #0
 80a83d0:	4630      	mov	r0, r6
 80a83d2:	4639      	mov	r1, r7
 80a83d4:	4a4e      	ldr	r2, [pc, #312]	; (80a8510 <gmtime_r+0x14c>)
 80a83d6:	f000 fd9f 	bl	80a8f18 <__aeabi_ldivmod>
 80a83da:	4639      	mov	r1, r7
 80a83dc:	4605      	mov	r5, r0
 80a83de:	2300      	movs	r3, #0
 80a83e0:	4630      	mov	r0, r6
 80a83e2:	4a4b      	ldr	r2, [pc, #300]	; (80a8510 <gmtime_r+0x14c>)
 80a83e4:	f000 fd98 	bl	80a8f18 <__aeabi_ldivmod>
 80a83e8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a83ec:	2a00      	cmp	r2, #0
 80a83ee:	bfbc      	itt	lt
 80a83f0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a83f4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a83f8:	fbb2 f1f0 	udiv	r1, r2, r0
 80a83fc:	fb00 2211 	mls	r2, r0, r1, r2
 80a8400:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a8404:	60a1      	str	r1, [r4, #8]
 80a8406:	fbb2 f1f0 	udiv	r1, r2, r0
 80a840a:	fb00 2211 	mls	r2, r0, r1, r2
 80a840e:	6061      	str	r1, [r4, #4]
 80a8410:	f04f 0107 	mov.w	r1, #7
 80a8414:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 80a8418:	bfac      	ite	ge
 80a841a:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80a841e:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80a8422:	6022      	str	r2, [r4, #0]
 80a8424:	1cda      	adds	r2, r3, #3
 80a8426:	fb92 f1f1 	sdiv	r1, r2, r1
 80a842a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80a842e:	1a52      	subs	r2, r2, r1
 80a8430:	bf48      	it	mi
 80a8432:	3207      	addmi	r2, #7
 80a8434:	2b00      	cmp	r3, #0
 80a8436:	4d37      	ldr	r5, [pc, #220]	; (80a8514 <gmtime_r+0x150>)
 80a8438:	61a2      	str	r2, [r4, #24]
 80a843a:	bfbd      	ittte	lt
 80a843c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80a8440:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80a8444:	fb92 f5f5 	sdivlt	r5, r2, r5
 80a8448:	fb93 f5f5 	sdivge	r5, r3, r5
 80a844c:	4832      	ldr	r0, [pc, #200]	; (80a8518 <gmtime_r+0x154>)
 80a844e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a8452:	fb00 3005 	mla	r0, r0, r5, r3
 80a8456:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80a845a:	fbb0 f2f2 	udiv	r2, r0, r2
 80a845e:	fbb0 f1f3 	udiv	r1, r0, r3
 80a8462:	4402      	add	r2, r0
 80a8464:	1a52      	subs	r2, r2, r1
 80a8466:	492d      	ldr	r1, [pc, #180]	; (80a851c <gmtime_r+0x158>)
 80a8468:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a846c:	fbb0 f1f1 	udiv	r1, r0, r1
 80a8470:	1a52      	subs	r2, r2, r1
 80a8472:	fbb2 f1fc 	udiv	r1, r2, ip
 80a8476:	2764      	movs	r7, #100	; 0x64
 80a8478:	fbb2 f3f3 	udiv	r3, r2, r3
 80a847c:	fbb1 f6f7 	udiv	r6, r1, r7
 80a8480:	2299      	movs	r2, #153	; 0x99
 80a8482:	1af3      	subs	r3, r6, r3
 80a8484:	4403      	add	r3, r0
 80a8486:	fb0c 3311 	mls	r3, ip, r1, r3
 80a848a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80a848e:	f10e 0e02 	add.w	lr, lr, #2
 80a8492:	fbbe f0f2 	udiv	r0, lr, r2
 80a8496:	f04f 0805 	mov.w	r8, #5
 80a849a:	4342      	muls	r2, r0
 80a849c:	3202      	adds	r2, #2
 80a849e:	fbb2 f2f8 	udiv	r2, r2, r8
 80a84a2:	f103 0c01 	add.w	ip, r3, #1
 80a84a6:	ebac 0c02 	sub.w	ip, ip, r2
 80a84aa:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80a84ae:	4596      	cmp	lr, r2
 80a84b0:	bf94      	ite	ls
 80a84b2:	2202      	movls	r2, #2
 80a84b4:	f06f 0209 	mvnhi.w	r2, #9
 80a84b8:	4410      	add	r0, r2
 80a84ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a84be:	fb02 1505 	mla	r5, r2, r5, r1
 80a84c2:	2801      	cmp	r0, #1
 80a84c4:	bf98      	it	ls
 80a84c6:	3501      	addls	r5, #1
 80a84c8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a84cc:	d30d      	bcc.n	80a84ea <gmtime_r+0x126>
 80a84ce:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a84d2:	61e3      	str	r3, [r4, #28]
 80a84d4:	2300      	movs	r3, #0
 80a84d6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a84da:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80a84de:	f8c4 c00c 	str.w	ip, [r4, #12]
 80a84e2:	4620      	mov	r0, r4
 80a84e4:	6223      	str	r3, [r4, #32]
 80a84e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a84ea:	078a      	lsls	r2, r1, #30
 80a84ec:	d102      	bne.n	80a84f4 <gmtime_r+0x130>
 80a84ee:	fb07 1616 	mls	r6, r7, r6, r1
 80a84f2:	b95e      	cbnz	r6, 80a850c <gmtime_r+0x148>
 80a84f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a84f8:	fbb1 f6f2 	udiv	r6, r1, r2
 80a84fc:	fb02 1216 	mls	r2, r2, r6, r1
 80a8500:	fab2 f282 	clz	r2, r2
 80a8504:	0952      	lsrs	r2, r2, #5
 80a8506:	333b      	adds	r3, #59	; 0x3b
 80a8508:	4413      	add	r3, r2
 80a850a:	e7e2      	b.n	80a84d2 <gmtime_r+0x10e>
 80a850c:	2201      	movs	r2, #1
 80a850e:	e7fa      	b.n	80a8506 <gmtime_r+0x142>
 80a8510:	00015180 	.word	0x00015180
 80a8514:	00023ab1 	.word	0x00023ab1
 80a8518:	fffdc54f 	.word	0xfffdc54f
 80a851c:	00023ab0 	.word	0x00023ab0

080a8520 <__retarget_lock_acquire>:
 80a8520:	4770      	bx	lr

080a8522 <__retarget_lock_acquire_recursive>:
 80a8522:	4770      	bx	lr

080a8524 <__retarget_lock_release>:
 80a8524:	4770      	bx	lr

080a8526 <__retarget_lock_release_recursive>:
 80a8526:	4770      	bx	lr

080a8528 <__ascii_mbtowc>:
 80a8528:	b082      	sub	sp, #8
 80a852a:	b901      	cbnz	r1, 80a852e <__ascii_mbtowc+0x6>
 80a852c:	a901      	add	r1, sp, #4
 80a852e:	b142      	cbz	r2, 80a8542 <__ascii_mbtowc+0x1a>
 80a8530:	b14b      	cbz	r3, 80a8546 <__ascii_mbtowc+0x1e>
 80a8532:	7813      	ldrb	r3, [r2, #0]
 80a8534:	600b      	str	r3, [r1, #0]
 80a8536:	7812      	ldrb	r2, [r2, #0]
 80a8538:	1e10      	subs	r0, r2, #0
 80a853a:	bf18      	it	ne
 80a853c:	2001      	movne	r0, #1
 80a853e:	b002      	add	sp, #8
 80a8540:	4770      	bx	lr
 80a8542:	4610      	mov	r0, r2
 80a8544:	e7fb      	b.n	80a853e <__ascii_mbtowc+0x16>
 80a8546:	f06f 0001 	mvn.w	r0, #1
 80a854a:	e7f8      	b.n	80a853e <__ascii_mbtowc+0x16>

080a854c <_Balloc>:
 80a854c:	b570      	push	{r4, r5, r6, lr}
 80a854e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a8550:	4604      	mov	r4, r0
 80a8552:	460d      	mov	r5, r1
 80a8554:	b976      	cbnz	r6, 80a8574 <_Balloc+0x28>
 80a8556:	2010      	movs	r0, #16
 80a8558:	f7fb fe2e 	bl	80a41b8 <malloc>
 80a855c:	4602      	mov	r2, r0
 80a855e:	6260      	str	r0, [r4, #36]	; 0x24
 80a8560:	b920      	cbnz	r0, 80a856c <_Balloc+0x20>
 80a8562:	2166      	movs	r1, #102	; 0x66
 80a8564:	4b17      	ldr	r3, [pc, #92]	; (80a85c4 <_Balloc+0x78>)
 80a8566:	4818      	ldr	r0, [pc, #96]	; (80a85c8 <_Balloc+0x7c>)
 80a8568:	f7fb fe4e 	bl	80a4208 <__assert_func>
 80a856c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a8570:	6006      	str	r6, [r0, #0]
 80a8572:	60c6      	str	r6, [r0, #12]
 80a8574:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80a8576:	68f3      	ldr	r3, [r6, #12]
 80a8578:	b183      	cbz	r3, 80a859c <_Balloc+0x50>
 80a857a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a857c:	68db      	ldr	r3, [r3, #12]
 80a857e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80a8582:	b9b8      	cbnz	r0, 80a85b4 <_Balloc+0x68>
 80a8584:	2101      	movs	r1, #1
 80a8586:	fa01 f605 	lsl.w	r6, r1, r5
 80a858a:	1d72      	adds	r2, r6, #5
 80a858c:	4620      	mov	r0, r4
 80a858e:	0092      	lsls	r2, r2, #2
 80a8590:	f000 fc94 	bl	80a8ebc <_calloc_r>
 80a8594:	b160      	cbz	r0, 80a85b0 <_Balloc+0x64>
 80a8596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80a859a:	e00e      	b.n	80a85ba <_Balloc+0x6e>
 80a859c:	2221      	movs	r2, #33	; 0x21
 80a859e:	2104      	movs	r1, #4
 80a85a0:	4620      	mov	r0, r4
 80a85a2:	f000 fc8b 	bl	80a8ebc <_calloc_r>
 80a85a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a85a8:	60f0      	str	r0, [r6, #12]
 80a85aa:	68db      	ldr	r3, [r3, #12]
 80a85ac:	2b00      	cmp	r3, #0
 80a85ae:	d1e4      	bne.n	80a857a <_Balloc+0x2e>
 80a85b0:	2000      	movs	r0, #0
 80a85b2:	bd70      	pop	{r4, r5, r6, pc}
 80a85b4:	6802      	ldr	r2, [r0, #0]
 80a85b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80a85ba:	2300      	movs	r3, #0
 80a85bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80a85c0:	e7f7      	b.n	80a85b2 <_Balloc+0x66>
 80a85c2:	bf00      	nop
 80a85c4:	080a92c8 	.word	0x080a92c8
 80a85c8:	080a9560 	.word	0x080a9560

080a85cc <_Bfree>:
 80a85cc:	b570      	push	{r4, r5, r6, lr}
 80a85ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a85d0:	4605      	mov	r5, r0
 80a85d2:	460c      	mov	r4, r1
 80a85d4:	b976      	cbnz	r6, 80a85f4 <_Bfree+0x28>
 80a85d6:	2010      	movs	r0, #16
 80a85d8:	f7fb fdee 	bl	80a41b8 <malloc>
 80a85dc:	4602      	mov	r2, r0
 80a85de:	6268      	str	r0, [r5, #36]	; 0x24
 80a85e0:	b920      	cbnz	r0, 80a85ec <_Bfree+0x20>
 80a85e2:	218a      	movs	r1, #138	; 0x8a
 80a85e4:	4b08      	ldr	r3, [pc, #32]	; (80a8608 <_Bfree+0x3c>)
 80a85e6:	4809      	ldr	r0, [pc, #36]	; (80a860c <_Bfree+0x40>)
 80a85e8:	f7fb fe0e 	bl	80a4208 <__assert_func>
 80a85ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a85f0:	6006      	str	r6, [r0, #0]
 80a85f2:	60c6      	str	r6, [r0, #12]
 80a85f4:	b13c      	cbz	r4, 80a8606 <_Bfree+0x3a>
 80a85f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a85f8:	6862      	ldr	r2, [r4, #4]
 80a85fa:	68db      	ldr	r3, [r3, #12]
 80a85fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a8600:	6021      	str	r1, [r4, #0]
 80a8602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80a8606:	bd70      	pop	{r4, r5, r6, pc}
 80a8608:	080a92c8 	.word	0x080a92c8
 80a860c:	080a9560 	.word	0x080a9560

080a8610 <__multadd>:
 80a8610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a8614:	4607      	mov	r7, r0
 80a8616:	460c      	mov	r4, r1
 80a8618:	461e      	mov	r6, r3
 80a861a:	2000      	movs	r0, #0
 80a861c:	690d      	ldr	r5, [r1, #16]
 80a861e:	f101 0c14 	add.w	ip, r1, #20
 80a8622:	f8dc 3000 	ldr.w	r3, [ip]
 80a8626:	3001      	adds	r0, #1
 80a8628:	b299      	uxth	r1, r3
 80a862a:	fb02 6101 	mla	r1, r2, r1, r6
 80a862e:	0c1e      	lsrs	r6, r3, #16
 80a8630:	0c0b      	lsrs	r3, r1, #16
 80a8632:	fb02 3306 	mla	r3, r2, r6, r3
 80a8636:	b289      	uxth	r1, r1
 80a8638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80a863c:	4285      	cmp	r5, r0
 80a863e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80a8642:	f84c 1b04 	str.w	r1, [ip], #4
 80a8646:	dcec      	bgt.n	80a8622 <__multadd+0x12>
 80a8648:	b30e      	cbz	r6, 80a868e <__multadd+0x7e>
 80a864a:	68a3      	ldr	r3, [r4, #8]
 80a864c:	42ab      	cmp	r3, r5
 80a864e:	dc19      	bgt.n	80a8684 <__multadd+0x74>
 80a8650:	6861      	ldr	r1, [r4, #4]
 80a8652:	4638      	mov	r0, r7
 80a8654:	3101      	adds	r1, #1
 80a8656:	f7ff ff79 	bl	80a854c <_Balloc>
 80a865a:	4680      	mov	r8, r0
 80a865c:	b928      	cbnz	r0, 80a866a <__multadd+0x5a>
 80a865e:	4602      	mov	r2, r0
 80a8660:	21b5      	movs	r1, #181	; 0xb5
 80a8662:	4b0c      	ldr	r3, [pc, #48]	; (80a8694 <__multadd+0x84>)
 80a8664:	480c      	ldr	r0, [pc, #48]	; (80a8698 <__multadd+0x88>)
 80a8666:	f7fb fdcf 	bl	80a4208 <__assert_func>
 80a866a:	6922      	ldr	r2, [r4, #16]
 80a866c:	f104 010c 	add.w	r1, r4, #12
 80a8670:	3202      	adds	r2, #2
 80a8672:	0092      	lsls	r2, r2, #2
 80a8674:	300c      	adds	r0, #12
 80a8676:	f7fe f99f 	bl	80a69b8 <memcpy>
 80a867a:	4621      	mov	r1, r4
 80a867c:	4638      	mov	r0, r7
 80a867e:	f7ff ffa5 	bl	80a85cc <_Bfree>
 80a8682:	4644      	mov	r4, r8
 80a8684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a8688:	3501      	adds	r5, #1
 80a868a:	615e      	str	r6, [r3, #20]
 80a868c:	6125      	str	r5, [r4, #16]
 80a868e:	4620      	mov	r0, r4
 80a8690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8694:	080a94d5 	.word	0x080a94d5
 80a8698:	080a9560 	.word	0x080a9560

080a869c <__s2b>:
 80a869c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a86a0:	4615      	mov	r5, r2
 80a86a2:	2209      	movs	r2, #9
 80a86a4:	461f      	mov	r7, r3
 80a86a6:	3308      	adds	r3, #8
 80a86a8:	460c      	mov	r4, r1
 80a86aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80a86ae:	4606      	mov	r6, r0
 80a86b0:	2201      	movs	r2, #1
 80a86b2:	2100      	movs	r1, #0
 80a86b4:	429a      	cmp	r2, r3
 80a86b6:	db09      	blt.n	80a86cc <__s2b+0x30>
 80a86b8:	4630      	mov	r0, r6
 80a86ba:	f7ff ff47 	bl	80a854c <_Balloc>
 80a86be:	b940      	cbnz	r0, 80a86d2 <__s2b+0x36>
 80a86c0:	4602      	mov	r2, r0
 80a86c2:	21ce      	movs	r1, #206	; 0xce
 80a86c4:	4b18      	ldr	r3, [pc, #96]	; (80a8728 <__s2b+0x8c>)
 80a86c6:	4819      	ldr	r0, [pc, #100]	; (80a872c <__s2b+0x90>)
 80a86c8:	f7fb fd9e 	bl	80a4208 <__assert_func>
 80a86cc:	0052      	lsls	r2, r2, #1
 80a86ce:	3101      	adds	r1, #1
 80a86d0:	e7f0      	b.n	80a86b4 <__s2b+0x18>
 80a86d2:	9b08      	ldr	r3, [sp, #32]
 80a86d4:	2d09      	cmp	r5, #9
 80a86d6:	6143      	str	r3, [r0, #20]
 80a86d8:	f04f 0301 	mov.w	r3, #1
 80a86dc:	6103      	str	r3, [r0, #16]
 80a86de:	dd16      	ble.n	80a870e <__s2b+0x72>
 80a86e0:	f104 0909 	add.w	r9, r4, #9
 80a86e4:	46c8      	mov	r8, r9
 80a86e6:	442c      	add	r4, r5
 80a86e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80a86ec:	4601      	mov	r1, r0
 80a86ee:	220a      	movs	r2, #10
 80a86f0:	4630      	mov	r0, r6
 80a86f2:	3b30      	subs	r3, #48	; 0x30
 80a86f4:	f7ff ff8c 	bl	80a8610 <__multadd>
 80a86f8:	45a0      	cmp	r8, r4
 80a86fa:	d1f5      	bne.n	80a86e8 <__s2b+0x4c>
 80a86fc:	f1a5 0408 	sub.w	r4, r5, #8
 80a8700:	444c      	add	r4, r9
 80a8702:	1b2d      	subs	r5, r5, r4
 80a8704:	1963      	adds	r3, r4, r5
 80a8706:	42bb      	cmp	r3, r7
 80a8708:	db04      	blt.n	80a8714 <__s2b+0x78>
 80a870a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a870e:	2509      	movs	r5, #9
 80a8710:	340a      	adds	r4, #10
 80a8712:	e7f6      	b.n	80a8702 <__s2b+0x66>
 80a8714:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a8718:	4601      	mov	r1, r0
 80a871a:	220a      	movs	r2, #10
 80a871c:	4630      	mov	r0, r6
 80a871e:	3b30      	subs	r3, #48	; 0x30
 80a8720:	f7ff ff76 	bl	80a8610 <__multadd>
 80a8724:	e7ee      	b.n	80a8704 <__s2b+0x68>
 80a8726:	bf00      	nop
 80a8728:	080a94d5 	.word	0x080a94d5
 80a872c:	080a9560 	.word	0x080a9560

080a8730 <__hi0bits>:
 80a8730:	0c02      	lsrs	r2, r0, #16
 80a8732:	0412      	lsls	r2, r2, #16
 80a8734:	4603      	mov	r3, r0
 80a8736:	b9ca      	cbnz	r2, 80a876c <__hi0bits+0x3c>
 80a8738:	0403      	lsls	r3, r0, #16
 80a873a:	2010      	movs	r0, #16
 80a873c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80a8740:	bf04      	itt	eq
 80a8742:	021b      	lsleq	r3, r3, #8
 80a8744:	3008      	addeq	r0, #8
 80a8746:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80a874a:	bf04      	itt	eq
 80a874c:	011b      	lsleq	r3, r3, #4
 80a874e:	3004      	addeq	r0, #4
 80a8750:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80a8754:	bf04      	itt	eq
 80a8756:	009b      	lsleq	r3, r3, #2
 80a8758:	3002      	addeq	r0, #2
 80a875a:	2b00      	cmp	r3, #0
 80a875c:	db05      	blt.n	80a876a <__hi0bits+0x3a>
 80a875e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80a8762:	f100 0001 	add.w	r0, r0, #1
 80a8766:	bf08      	it	eq
 80a8768:	2020      	moveq	r0, #32
 80a876a:	4770      	bx	lr
 80a876c:	2000      	movs	r0, #0
 80a876e:	e7e5      	b.n	80a873c <__hi0bits+0xc>

080a8770 <__lo0bits>:
 80a8770:	6803      	ldr	r3, [r0, #0]
 80a8772:	4602      	mov	r2, r0
 80a8774:	f013 0007 	ands.w	r0, r3, #7
 80a8778:	d00b      	beq.n	80a8792 <__lo0bits+0x22>
 80a877a:	07d9      	lsls	r1, r3, #31
 80a877c:	d421      	bmi.n	80a87c2 <__lo0bits+0x52>
 80a877e:	0798      	lsls	r0, r3, #30
 80a8780:	bf49      	itett	mi
 80a8782:	085b      	lsrmi	r3, r3, #1
 80a8784:	089b      	lsrpl	r3, r3, #2
 80a8786:	2001      	movmi	r0, #1
 80a8788:	6013      	strmi	r3, [r2, #0]
 80a878a:	bf5c      	itt	pl
 80a878c:	2002      	movpl	r0, #2
 80a878e:	6013      	strpl	r3, [r2, #0]
 80a8790:	4770      	bx	lr
 80a8792:	b299      	uxth	r1, r3
 80a8794:	b909      	cbnz	r1, 80a879a <__lo0bits+0x2a>
 80a8796:	2010      	movs	r0, #16
 80a8798:	0c1b      	lsrs	r3, r3, #16
 80a879a:	b2d9      	uxtb	r1, r3
 80a879c:	b909      	cbnz	r1, 80a87a2 <__lo0bits+0x32>
 80a879e:	3008      	adds	r0, #8
 80a87a0:	0a1b      	lsrs	r3, r3, #8
 80a87a2:	0719      	lsls	r1, r3, #28
 80a87a4:	bf04      	itt	eq
 80a87a6:	091b      	lsreq	r3, r3, #4
 80a87a8:	3004      	addeq	r0, #4
 80a87aa:	0799      	lsls	r1, r3, #30
 80a87ac:	bf04      	itt	eq
 80a87ae:	089b      	lsreq	r3, r3, #2
 80a87b0:	3002      	addeq	r0, #2
 80a87b2:	07d9      	lsls	r1, r3, #31
 80a87b4:	d403      	bmi.n	80a87be <__lo0bits+0x4e>
 80a87b6:	085b      	lsrs	r3, r3, #1
 80a87b8:	f100 0001 	add.w	r0, r0, #1
 80a87bc:	d003      	beq.n	80a87c6 <__lo0bits+0x56>
 80a87be:	6013      	str	r3, [r2, #0]
 80a87c0:	4770      	bx	lr
 80a87c2:	2000      	movs	r0, #0
 80a87c4:	4770      	bx	lr
 80a87c6:	2020      	movs	r0, #32
 80a87c8:	4770      	bx	lr
	...

080a87cc <__i2b>:
 80a87cc:	b510      	push	{r4, lr}
 80a87ce:	460c      	mov	r4, r1
 80a87d0:	2101      	movs	r1, #1
 80a87d2:	f7ff febb 	bl	80a854c <_Balloc>
 80a87d6:	4602      	mov	r2, r0
 80a87d8:	b928      	cbnz	r0, 80a87e6 <__i2b+0x1a>
 80a87da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80a87de:	4b04      	ldr	r3, [pc, #16]	; (80a87f0 <__i2b+0x24>)
 80a87e0:	4804      	ldr	r0, [pc, #16]	; (80a87f4 <__i2b+0x28>)
 80a87e2:	f7fb fd11 	bl	80a4208 <__assert_func>
 80a87e6:	2301      	movs	r3, #1
 80a87e8:	6144      	str	r4, [r0, #20]
 80a87ea:	6103      	str	r3, [r0, #16]
 80a87ec:	bd10      	pop	{r4, pc}
 80a87ee:	bf00      	nop
 80a87f0:	080a94d5 	.word	0x080a94d5
 80a87f4:	080a9560 	.word	0x080a9560

080a87f8 <__multiply>:
 80a87f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a87fc:	4691      	mov	r9, r2
 80a87fe:	690a      	ldr	r2, [r1, #16]
 80a8800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a8804:	460c      	mov	r4, r1
 80a8806:	429a      	cmp	r2, r3
 80a8808:	bfbe      	ittt	lt
 80a880a:	460b      	movlt	r3, r1
 80a880c:	464c      	movlt	r4, r9
 80a880e:	4699      	movlt	r9, r3
 80a8810:	6927      	ldr	r7, [r4, #16]
 80a8812:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80a8816:	68a3      	ldr	r3, [r4, #8]
 80a8818:	6861      	ldr	r1, [r4, #4]
 80a881a:	eb07 060a 	add.w	r6, r7, sl
 80a881e:	42b3      	cmp	r3, r6
 80a8820:	b085      	sub	sp, #20
 80a8822:	bfb8      	it	lt
 80a8824:	3101      	addlt	r1, #1
 80a8826:	f7ff fe91 	bl	80a854c <_Balloc>
 80a882a:	b930      	cbnz	r0, 80a883a <__multiply+0x42>
 80a882c:	4602      	mov	r2, r0
 80a882e:	f240 115d 	movw	r1, #349	; 0x15d
 80a8832:	4b43      	ldr	r3, [pc, #268]	; (80a8940 <__multiply+0x148>)
 80a8834:	4843      	ldr	r0, [pc, #268]	; (80a8944 <__multiply+0x14c>)
 80a8836:	f7fb fce7 	bl	80a4208 <__assert_func>
 80a883a:	f100 0514 	add.w	r5, r0, #20
 80a883e:	462b      	mov	r3, r5
 80a8840:	2200      	movs	r2, #0
 80a8842:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80a8846:	4543      	cmp	r3, r8
 80a8848:	d321      	bcc.n	80a888e <__multiply+0x96>
 80a884a:	f104 0314 	add.w	r3, r4, #20
 80a884e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80a8852:	f109 0314 	add.w	r3, r9, #20
 80a8856:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80a885a:	9202      	str	r2, [sp, #8]
 80a885c:	1b3a      	subs	r2, r7, r4
 80a885e:	3a15      	subs	r2, #21
 80a8860:	f022 0203 	bic.w	r2, r2, #3
 80a8864:	3204      	adds	r2, #4
 80a8866:	f104 0115 	add.w	r1, r4, #21
 80a886a:	428f      	cmp	r7, r1
 80a886c:	bf38      	it	cc
 80a886e:	2204      	movcc	r2, #4
 80a8870:	9201      	str	r2, [sp, #4]
 80a8872:	9a02      	ldr	r2, [sp, #8]
 80a8874:	9303      	str	r3, [sp, #12]
 80a8876:	429a      	cmp	r2, r3
 80a8878:	d80c      	bhi.n	80a8894 <__multiply+0x9c>
 80a887a:	2e00      	cmp	r6, #0
 80a887c:	dd03      	ble.n	80a8886 <__multiply+0x8e>
 80a887e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80a8882:	2b00      	cmp	r3, #0
 80a8884:	d059      	beq.n	80a893a <__multiply+0x142>
 80a8886:	6106      	str	r6, [r0, #16]
 80a8888:	b005      	add	sp, #20
 80a888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a888e:	f843 2b04 	str.w	r2, [r3], #4
 80a8892:	e7d8      	b.n	80a8846 <__multiply+0x4e>
 80a8894:	f8b3 a000 	ldrh.w	sl, [r3]
 80a8898:	f1ba 0f00 	cmp.w	sl, #0
 80a889c:	d023      	beq.n	80a88e6 <__multiply+0xee>
 80a889e:	46a9      	mov	r9, r5
 80a88a0:	f04f 0c00 	mov.w	ip, #0
 80a88a4:	f104 0e14 	add.w	lr, r4, #20
 80a88a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80a88ac:	f8d9 1000 	ldr.w	r1, [r9]
 80a88b0:	fa1f fb82 	uxth.w	fp, r2
 80a88b4:	b289      	uxth	r1, r1
 80a88b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80a88ba:	4461      	add	r1, ip
 80a88bc:	f8d9 c000 	ldr.w	ip, [r9]
 80a88c0:	0c12      	lsrs	r2, r2, #16
 80a88c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80a88c6:	fb0a c202 	mla	r2, sl, r2, ip
 80a88ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80a88ce:	b289      	uxth	r1, r1
 80a88d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80a88d4:	4577      	cmp	r7, lr
 80a88d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80a88da:	f849 1b04 	str.w	r1, [r9], #4
 80a88de:	d8e3      	bhi.n	80a88a8 <__multiply+0xb0>
 80a88e0:	9a01      	ldr	r2, [sp, #4]
 80a88e2:	f845 c002 	str.w	ip, [r5, r2]
 80a88e6:	9a03      	ldr	r2, [sp, #12]
 80a88e8:	3304      	adds	r3, #4
 80a88ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80a88ee:	f1b9 0f00 	cmp.w	r9, #0
 80a88f2:	d020      	beq.n	80a8936 <__multiply+0x13e>
 80a88f4:	46ae      	mov	lr, r5
 80a88f6:	f04f 0a00 	mov.w	sl, #0
 80a88fa:	6829      	ldr	r1, [r5, #0]
 80a88fc:	f104 0c14 	add.w	ip, r4, #20
 80a8900:	f8bc b000 	ldrh.w	fp, [ip]
 80a8904:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80a8908:	b289      	uxth	r1, r1
 80a890a:	fb09 220b 	mla	r2, r9, fp, r2
 80a890e:	4492      	add	sl, r2
 80a8910:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80a8914:	f84e 1b04 	str.w	r1, [lr], #4
 80a8918:	f85c 2b04 	ldr.w	r2, [ip], #4
 80a891c:	f8be 1000 	ldrh.w	r1, [lr]
 80a8920:	0c12      	lsrs	r2, r2, #16
 80a8922:	fb09 1102 	mla	r1, r9, r2, r1
 80a8926:	4567      	cmp	r7, ip
 80a8928:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80a892c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80a8930:	d8e6      	bhi.n	80a8900 <__multiply+0x108>
 80a8932:	9a01      	ldr	r2, [sp, #4]
 80a8934:	50a9      	str	r1, [r5, r2]
 80a8936:	3504      	adds	r5, #4
 80a8938:	e79b      	b.n	80a8872 <__multiply+0x7a>
 80a893a:	3e01      	subs	r6, #1
 80a893c:	e79d      	b.n	80a887a <__multiply+0x82>
 80a893e:	bf00      	nop
 80a8940:	080a94d5 	.word	0x080a94d5
 80a8944:	080a9560 	.word	0x080a9560

080a8948 <__pow5mult>:
 80a8948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a894c:	4615      	mov	r5, r2
 80a894e:	f012 0203 	ands.w	r2, r2, #3
 80a8952:	4606      	mov	r6, r0
 80a8954:	460f      	mov	r7, r1
 80a8956:	d007      	beq.n	80a8968 <__pow5mult+0x20>
 80a8958:	4c25      	ldr	r4, [pc, #148]	; (80a89f0 <__pow5mult+0xa8>)
 80a895a:	3a01      	subs	r2, #1
 80a895c:	2300      	movs	r3, #0
 80a895e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a8962:	f7ff fe55 	bl	80a8610 <__multadd>
 80a8966:	4607      	mov	r7, r0
 80a8968:	10ad      	asrs	r5, r5, #2
 80a896a:	d03d      	beq.n	80a89e8 <__pow5mult+0xa0>
 80a896c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a896e:	b97c      	cbnz	r4, 80a8990 <__pow5mult+0x48>
 80a8970:	2010      	movs	r0, #16
 80a8972:	f7fb fc21 	bl	80a41b8 <malloc>
 80a8976:	4602      	mov	r2, r0
 80a8978:	6270      	str	r0, [r6, #36]	; 0x24
 80a897a:	b928      	cbnz	r0, 80a8988 <__pow5mult+0x40>
 80a897c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a8980:	4b1c      	ldr	r3, [pc, #112]	; (80a89f4 <__pow5mult+0xac>)
 80a8982:	481d      	ldr	r0, [pc, #116]	; (80a89f8 <__pow5mult+0xb0>)
 80a8984:	f7fb fc40 	bl	80a4208 <__assert_func>
 80a8988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80a898c:	6004      	str	r4, [r0, #0]
 80a898e:	60c4      	str	r4, [r0, #12]
 80a8990:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a8994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a8998:	b94c      	cbnz	r4, 80a89ae <__pow5mult+0x66>
 80a899a:	f240 2171 	movw	r1, #625	; 0x271
 80a899e:	4630      	mov	r0, r6
 80a89a0:	f7ff ff14 	bl	80a87cc <__i2b>
 80a89a4:	2300      	movs	r3, #0
 80a89a6:	4604      	mov	r4, r0
 80a89a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80a89ac:	6003      	str	r3, [r0, #0]
 80a89ae:	f04f 0900 	mov.w	r9, #0
 80a89b2:	07eb      	lsls	r3, r5, #31
 80a89b4:	d50a      	bpl.n	80a89cc <__pow5mult+0x84>
 80a89b6:	4639      	mov	r1, r7
 80a89b8:	4622      	mov	r2, r4
 80a89ba:	4630      	mov	r0, r6
 80a89bc:	f7ff ff1c 	bl	80a87f8 <__multiply>
 80a89c0:	4680      	mov	r8, r0
 80a89c2:	4639      	mov	r1, r7
 80a89c4:	4630      	mov	r0, r6
 80a89c6:	f7ff fe01 	bl	80a85cc <_Bfree>
 80a89ca:	4647      	mov	r7, r8
 80a89cc:	106d      	asrs	r5, r5, #1
 80a89ce:	d00b      	beq.n	80a89e8 <__pow5mult+0xa0>
 80a89d0:	6820      	ldr	r0, [r4, #0]
 80a89d2:	b938      	cbnz	r0, 80a89e4 <__pow5mult+0x9c>
 80a89d4:	4622      	mov	r2, r4
 80a89d6:	4621      	mov	r1, r4
 80a89d8:	4630      	mov	r0, r6
 80a89da:	f7ff ff0d 	bl	80a87f8 <__multiply>
 80a89de:	6020      	str	r0, [r4, #0]
 80a89e0:	f8c0 9000 	str.w	r9, [r0]
 80a89e4:	4604      	mov	r4, r0
 80a89e6:	e7e4      	b.n	80a89b2 <__pow5mult+0x6a>
 80a89e8:	4638      	mov	r0, r7
 80a89ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a89ee:	bf00      	nop
 80a89f0:	080a96b0 	.word	0x080a96b0
 80a89f4:	080a92c8 	.word	0x080a92c8
 80a89f8:	080a9560 	.word	0x080a9560

080a89fc <__lshift>:
 80a89fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8a00:	460c      	mov	r4, r1
 80a8a02:	4607      	mov	r7, r0
 80a8a04:	4691      	mov	r9, r2
 80a8a06:	6923      	ldr	r3, [r4, #16]
 80a8a08:	6849      	ldr	r1, [r1, #4]
 80a8a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80a8a0e:	68a3      	ldr	r3, [r4, #8]
 80a8a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a8a14:	f108 0601 	add.w	r6, r8, #1
 80a8a18:	42b3      	cmp	r3, r6
 80a8a1a:	db0b      	blt.n	80a8a34 <__lshift+0x38>
 80a8a1c:	4638      	mov	r0, r7
 80a8a1e:	f7ff fd95 	bl	80a854c <_Balloc>
 80a8a22:	4605      	mov	r5, r0
 80a8a24:	b948      	cbnz	r0, 80a8a3a <__lshift+0x3e>
 80a8a26:	4602      	mov	r2, r0
 80a8a28:	f240 11d9 	movw	r1, #473	; 0x1d9
 80a8a2c:	4b29      	ldr	r3, [pc, #164]	; (80a8ad4 <__lshift+0xd8>)
 80a8a2e:	482a      	ldr	r0, [pc, #168]	; (80a8ad8 <__lshift+0xdc>)
 80a8a30:	f7fb fbea 	bl	80a4208 <__assert_func>
 80a8a34:	3101      	adds	r1, #1
 80a8a36:	005b      	lsls	r3, r3, #1
 80a8a38:	e7ee      	b.n	80a8a18 <__lshift+0x1c>
 80a8a3a:	2300      	movs	r3, #0
 80a8a3c:	f100 0114 	add.w	r1, r0, #20
 80a8a40:	f100 0210 	add.w	r2, r0, #16
 80a8a44:	4618      	mov	r0, r3
 80a8a46:	4553      	cmp	r3, sl
 80a8a48:	db37      	blt.n	80a8aba <__lshift+0xbe>
 80a8a4a:	6920      	ldr	r0, [r4, #16]
 80a8a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80a8a50:	f104 0314 	add.w	r3, r4, #20
 80a8a54:	f019 091f 	ands.w	r9, r9, #31
 80a8a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80a8a5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80a8a60:	d02f      	beq.n	80a8ac2 <__lshift+0xc6>
 80a8a62:	468a      	mov	sl, r1
 80a8a64:	f04f 0c00 	mov.w	ip, #0
 80a8a68:	f1c9 0e20 	rsb	lr, r9, #32
 80a8a6c:	681a      	ldr	r2, [r3, #0]
 80a8a6e:	fa02 f209 	lsl.w	r2, r2, r9
 80a8a72:	ea42 020c 	orr.w	r2, r2, ip
 80a8a76:	f84a 2b04 	str.w	r2, [sl], #4
 80a8a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 80a8a7e:	4298      	cmp	r0, r3
 80a8a80:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a8a84:	d8f2      	bhi.n	80a8a6c <__lshift+0x70>
 80a8a86:	1b03      	subs	r3, r0, r4
 80a8a88:	3b15      	subs	r3, #21
 80a8a8a:	f023 0303 	bic.w	r3, r3, #3
 80a8a8e:	3304      	adds	r3, #4
 80a8a90:	f104 0215 	add.w	r2, r4, #21
 80a8a94:	4290      	cmp	r0, r2
 80a8a96:	bf38      	it	cc
 80a8a98:	2304      	movcc	r3, #4
 80a8a9a:	f841 c003 	str.w	ip, [r1, r3]
 80a8a9e:	f1bc 0f00 	cmp.w	ip, #0
 80a8aa2:	d001      	beq.n	80a8aa8 <__lshift+0xac>
 80a8aa4:	f108 0602 	add.w	r6, r8, #2
 80a8aa8:	3e01      	subs	r6, #1
 80a8aaa:	4638      	mov	r0, r7
 80a8aac:	4621      	mov	r1, r4
 80a8aae:	612e      	str	r6, [r5, #16]
 80a8ab0:	f7ff fd8c 	bl	80a85cc <_Bfree>
 80a8ab4:	4628      	mov	r0, r5
 80a8ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a8aba:	f842 0f04 	str.w	r0, [r2, #4]!
 80a8abe:	3301      	adds	r3, #1
 80a8ac0:	e7c1      	b.n	80a8a46 <__lshift+0x4a>
 80a8ac2:	3904      	subs	r1, #4
 80a8ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 80a8ac8:	4298      	cmp	r0, r3
 80a8aca:	f841 2f04 	str.w	r2, [r1, #4]!
 80a8ace:	d8f9      	bhi.n	80a8ac4 <__lshift+0xc8>
 80a8ad0:	e7ea      	b.n	80a8aa8 <__lshift+0xac>
 80a8ad2:	bf00      	nop
 80a8ad4:	080a94d5 	.word	0x080a94d5
 80a8ad8:	080a9560 	.word	0x080a9560

080a8adc <__mcmp>:
 80a8adc:	4603      	mov	r3, r0
 80a8ade:	690a      	ldr	r2, [r1, #16]
 80a8ae0:	6900      	ldr	r0, [r0, #16]
 80a8ae2:	b530      	push	{r4, r5, lr}
 80a8ae4:	1a80      	subs	r0, r0, r2
 80a8ae6:	d10d      	bne.n	80a8b04 <__mcmp+0x28>
 80a8ae8:	3314      	adds	r3, #20
 80a8aea:	3114      	adds	r1, #20
 80a8aec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80a8af0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a8af4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80a8af8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80a8afc:	4295      	cmp	r5, r2
 80a8afe:	d002      	beq.n	80a8b06 <__mcmp+0x2a>
 80a8b00:	d304      	bcc.n	80a8b0c <__mcmp+0x30>
 80a8b02:	2001      	movs	r0, #1
 80a8b04:	bd30      	pop	{r4, r5, pc}
 80a8b06:	42a3      	cmp	r3, r4
 80a8b08:	d3f4      	bcc.n	80a8af4 <__mcmp+0x18>
 80a8b0a:	e7fb      	b.n	80a8b04 <__mcmp+0x28>
 80a8b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a8b10:	e7f8      	b.n	80a8b04 <__mcmp+0x28>
	...

080a8b14 <__mdiff>:
 80a8b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8b18:	460d      	mov	r5, r1
 80a8b1a:	4607      	mov	r7, r0
 80a8b1c:	4611      	mov	r1, r2
 80a8b1e:	4628      	mov	r0, r5
 80a8b20:	4614      	mov	r4, r2
 80a8b22:	f7ff ffdb 	bl	80a8adc <__mcmp>
 80a8b26:	1e06      	subs	r6, r0, #0
 80a8b28:	d111      	bne.n	80a8b4e <__mdiff+0x3a>
 80a8b2a:	4631      	mov	r1, r6
 80a8b2c:	4638      	mov	r0, r7
 80a8b2e:	f7ff fd0d 	bl	80a854c <_Balloc>
 80a8b32:	4602      	mov	r2, r0
 80a8b34:	b928      	cbnz	r0, 80a8b42 <__mdiff+0x2e>
 80a8b36:	f240 2132 	movw	r1, #562	; 0x232
 80a8b3a:	4b3a      	ldr	r3, [pc, #232]	; (80a8c24 <__mdiff+0x110>)
 80a8b3c:	483a      	ldr	r0, [pc, #232]	; (80a8c28 <__mdiff+0x114>)
 80a8b3e:	f7fb fb63 	bl	80a4208 <__assert_func>
 80a8b42:	2301      	movs	r3, #1
 80a8b44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80a8b48:	4610      	mov	r0, r2
 80a8b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8b4e:	bfa4      	itt	ge
 80a8b50:	4623      	movge	r3, r4
 80a8b52:	462c      	movge	r4, r5
 80a8b54:	4638      	mov	r0, r7
 80a8b56:	6861      	ldr	r1, [r4, #4]
 80a8b58:	bfa6      	itte	ge
 80a8b5a:	461d      	movge	r5, r3
 80a8b5c:	2600      	movge	r6, #0
 80a8b5e:	2601      	movlt	r6, #1
 80a8b60:	f7ff fcf4 	bl	80a854c <_Balloc>
 80a8b64:	4602      	mov	r2, r0
 80a8b66:	b918      	cbnz	r0, 80a8b70 <__mdiff+0x5c>
 80a8b68:	f44f 7110 	mov.w	r1, #576	; 0x240
 80a8b6c:	4b2d      	ldr	r3, [pc, #180]	; (80a8c24 <__mdiff+0x110>)
 80a8b6e:	e7e5      	b.n	80a8b3c <__mdiff+0x28>
 80a8b70:	f102 0814 	add.w	r8, r2, #20
 80a8b74:	46c2      	mov	sl, r8
 80a8b76:	f04f 0c00 	mov.w	ip, #0
 80a8b7a:	6927      	ldr	r7, [r4, #16]
 80a8b7c:	60c6      	str	r6, [r0, #12]
 80a8b7e:	692e      	ldr	r6, [r5, #16]
 80a8b80:	f104 0014 	add.w	r0, r4, #20
 80a8b84:	f105 0914 	add.w	r9, r5, #20
 80a8b88:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80a8b8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80a8b90:	3410      	adds	r4, #16
 80a8b92:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80a8b96:	f859 3b04 	ldr.w	r3, [r9], #4
 80a8b9a:	fa1f f18b 	uxth.w	r1, fp
 80a8b9e:	448c      	add	ip, r1
 80a8ba0:	b299      	uxth	r1, r3
 80a8ba2:	0c1b      	lsrs	r3, r3, #16
 80a8ba4:	ebac 0101 	sub.w	r1, ip, r1
 80a8ba8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80a8bac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80a8bb0:	b289      	uxth	r1, r1
 80a8bb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a8bb6:	454e      	cmp	r6, r9
 80a8bb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a8bbc:	f84a 3b04 	str.w	r3, [sl], #4
 80a8bc0:	d8e7      	bhi.n	80a8b92 <__mdiff+0x7e>
 80a8bc2:	1b73      	subs	r3, r6, r5
 80a8bc4:	3b15      	subs	r3, #21
 80a8bc6:	f023 0303 	bic.w	r3, r3, #3
 80a8bca:	3515      	adds	r5, #21
 80a8bcc:	3304      	adds	r3, #4
 80a8bce:	42ae      	cmp	r6, r5
 80a8bd0:	bf38      	it	cc
 80a8bd2:	2304      	movcc	r3, #4
 80a8bd4:	4418      	add	r0, r3
 80a8bd6:	4443      	add	r3, r8
 80a8bd8:	461e      	mov	r6, r3
 80a8bda:	4605      	mov	r5, r0
 80a8bdc:	4575      	cmp	r5, lr
 80a8bde:	d30e      	bcc.n	80a8bfe <__mdiff+0xea>
 80a8be0:	f10e 0103 	add.w	r1, lr, #3
 80a8be4:	1a09      	subs	r1, r1, r0
 80a8be6:	f021 0103 	bic.w	r1, r1, #3
 80a8bea:	3803      	subs	r0, #3
 80a8bec:	4586      	cmp	lr, r0
 80a8bee:	bf38      	it	cc
 80a8bf0:	2100      	movcc	r1, #0
 80a8bf2:	4419      	add	r1, r3
 80a8bf4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80a8bf8:	b18b      	cbz	r3, 80a8c1e <__mdiff+0x10a>
 80a8bfa:	6117      	str	r7, [r2, #16]
 80a8bfc:	e7a4      	b.n	80a8b48 <__mdiff+0x34>
 80a8bfe:	f855 8b04 	ldr.w	r8, [r5], #4
 80a8c02:	fa1f f188 	uxth.w	r1, r8
 80a8c06:	4461      	add	r1, ip
 80a8c08:	140c      	asrs	r4, r1, #16
 80a8c0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80a8c0e:	b289      	uxth	r1, r1
 80a8c10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80a8c14:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80a8c18:	f846 1b04 	str.w	r1, [r6], #4
 80a8c1c:	e7de      	b.n	80a8bdc <__mdiff+0xc8>
 80a8c1e:	3f01      	subs	r7, #1
 80a8c20:	e7e8      	b.n	80a8bf4 <__mdiff+0xe0>
 80a8c22:	bf00      	nop
 80a8c24:	080a94d5 	.word	0x080a94d5
 80a8c28:	080a9560 	.word	0x080a9560

080a8c2c <__ulp>:
 80a8c2c:	4b11      	ldr	r3, [pc, #68]	; (80a8c74 <__ulp+0x48>)
 80a8c2e:	400b      	ands	r3, r1
 80a8c30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a8c34:	2b00      	cmp	r3, #0
 80a8c36:	dd02      	ble.n	80a8c3e <__ulp+0x12>
 80a8c38:	2000      	movs	r0, #0
 80a8c3a:	4619      	mov	r1, r3
 80a8c3c:	4770      	bx	lr
 80a8c3e:	425b      	negs	r3, r3
 80a8c40:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80a8c44:	f04f 0000 	mov.w	r0, #0
 80a8c48:	f04f 0100 	mov.w	r1, #0
 80a8c4c:	ea4f 5223 	mov.w	r2, r3, asr #20
 80a8c50:	da04      	bge.n	80a8c5c <__ulp+0x30>
 80a8c52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a8c56:	fa43 f102 	asr.w	r1, r3, r2
 80a8c5a:	4770      	bx	lr
 80a8c5c:	f1a2 0314 	sub.w	r3, r2, #20
 80a8c60:	2b1e      	cmp	r3, #30
 80a8c62:	bfd6      	itet	le
 80a8c64:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80a8c68:	2301      	movgt	r3, #1
 80a8c6a:	fa22 f303 	lsrle.w	r3, r2, r3
 80a8c6e:	4618      	mov	r0, r3
 80a8c70:	4770      	bx	lr
 80a8c72:	bf00      	nop
 80a8c74:	7ff00000 	.word	0x7ff00000

080a8c78 <__b2d>:
 80a8c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8c7c:	6907      	ldr	r7, [r0, #16]
 80a8c7e:	f100 0914 	add.w	r9, r0, #20
 80a8c82:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80a8c86:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80a8c8a:	f1a7 0804 	sub.w	r8, r7, #4
 80a8c8e:	4630      	mov	r0, r6
 80a8c90:	f7ff fd4e 	bl	80a8730 <__hi0bits>
 80a8c94:	f1c0 0320 	rsb	r3, r0, #32
 80a8c98:	280a      	cmp	r0, #10
 80a8c9a:	600b      	str	r3, [r1, #0]
 80a8c9c:	491f      	ldr	r1, [pc, #124]	; (80a8d1c <__b2d+0xa4>)
 80a8c9e:	dc17      	bgt.n	80a8cd0 <__b2d+0x58>
 80a8ca0:	45c1      	cmp	r9, r8
 80a8ca2:	bf28      	it	cs
 80a8ca4:	2200      	movcs	r2, #0
 80a8ca6:	f1c0 0c0b 	rsb	ip, r0, #11
 80a8caa:	fa26 f30c 	lsr.w	r3, r6, ip
 80a8cae:	bf38      	it	cc
 80a8cb0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a8cb4:	ea43 0501 	orr.w	r5, r3, r1
 80a8cb8:	f100 0315 	add.w	r3, r0, #21
 80a8cbc:	fa06 f303 	lsl.w	r3, r6, r3
 80a8cc0:	fa22 f20c 	lsr.w	r2, r2, ip
 80a8cc4:	ea43 0402 	orr.w	r4, r3, r2
 80a8cc8:	4620      	mov	r0, r4
 80a8cca:	4629      	mov	r1, r5
 80a8ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8cd0:	45c1      	cmp	r9, r8
 80a8cd2:	bf2e      	itee	cs
 80a8cd4:	2200      	movcs	r2, #0
 80a8cd6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a8cda:	f1a7 0808 	subcc.w	r8, r7, #8
 80a8cde:	f1b0 030b 	subs.w	r3, r0, #11
 80a8ce2:	d016      	beq.n	80a8d12 <__b2d+0x9a>
 80a8ce4:	f1c3 0720 	rsb	r7, r3, #32
 80a8ce8:	fa22 f107 	lsr.w	r1, r2, r7
 80a8cec:	45c8      	cmp	r8, r9
 80a8cee:	fa06 f603 	lsl.w	r6, r6, r3
 80a8cf2:	ea46 0601 	orr.w	r6, r6, r1
 80a8cf6:	bf94      	ite	ls
 80a8cf8:	2100      	movls	r1, #0
 80a8cfa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80a8cfe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80a8d02:	fa02 f003 	lsl.w	r0, r2, r3
 80a8d06:	40f9      	lsrs	r1, r7
 80a8d08:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a8d0c:	ea40 0401 	orr.w	r4, r0, r1
 80a8d10:	e7da      	b.n	80a8cc8 <__b2d+0x50>
 80a8d12:	4614      	mov	r4, r2
 80a8d14:	ea46 0501 	orr.w	r5, r6, r1
 80a8d18:	e7d6      	b.n	80a8cc8 <__b2d+0x50>
 80a8d1a:	bf00      	nop
 80a8d1c:	3ff00000 	.word	0x3ff00000

080a8d20 <__d2b>:
 80a8d20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a8d24:	2101      	movs	r1, #1
 80a8d26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80a8d2a:	4690      	mov	r8, r2
 80a8d2c:	461d      	mov	r5, r3
 80a8d2e:	f7ff fc0d 	bl	80a854c <_Balloc>
 80a8d32:	4604      	mov	r4, r0
 80a8d34:	b930      	cbnz	r0, 80a8d44 <__d2b+0x24>
 80a8d36:	4602      	mov	r2, r0
 80a8d38:	f240 310a 	movw	r1, #778	; 0x30a
 80a8d3c:	4b24      	ldr	r3, [pc, #144]	; (80a8dd0 <__d2b+0xb0>)
 80a8d3e:	4825      	ldr	r0, [pc, #148]	; (80a8dd4 <__d2b+0xb4>)
 80a8d40:	f7fb fa62 	bl	80a4208 <__assert_func>
 80a8d44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80a8d48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80a8d4c:	bb2d      	cbnz	r5, 80a8d9a <__d2b+0x7a>
 80a8d4e:	9301      	str	r3, [sp, #4]
 80a8d50:	f1b8 0300 	subs.w	r3, r8, #0
 80a8d54:	d026      	beq.n	80a8da4 <__d2b+0x84>
 80a8d56:	4668      	mov	r0, sp
 80a8d58:	9300      	str	r3, [sp, #0]
 80a8d5a:	f7ff fd09 	bl	80a8770 <__lo0bits>
 80a8d5e:	9900      	ldr	r1, [sp, #0]
 80a8d60:	b1f0      	cbz	r0, 80a8da0 <__d2b+0x80>
 80a8d62:	9a01      	ldr	r2, [sp, #4]
 80a8d64:	f1c0 0320 	rsb	r3, r0, #32
 80a8d68:	fa02 f303 	lsl.w	r3, r2, r3
 80a8d6c:	430b      	orrs	r3, r1
 80a8d6e:	40c2      	lsrs	r2, r0
 80a8d70:	6163      	str	r3, [r4, #20]
 80a8d72:	9201      	str	r2, [sp, #4]
 80a8d74:	9b01      	ldr	r3, [sp, #4]
 80a8d76:	2b00      	cmp	r3, #0
 80a8d78:	bf14      	ite	ne
 80a8d7a:	2102      	movne	r1, #2
 80a8d7c:	2101      	moveq	r1, #1
 80a8d7e:	61a3      	str	r3, [r4, #24]
 80a8d80:	6121      	str	r1, [r4, #16]
 80a8d82:	b1c5      	cbz	r5, 80a8db6 <__d2b+0x96>
 80a8d84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80a8d88:	4405      	add	r5, r0
 80a8d8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a8d8e:	603d      	str	r5, [r7, #0]
 80a8d90:	6030      	str	r0, [r6, #0]
 80a8d92:	4620      	mov	r0, r4
 80a8d94:	b002      	add	sp, #8
 80a8d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a8d9e:	e7d6      	b.n	80a8d4e <__d2b+0x2e>
 80a8da0:	6161      	str	r1, [r4, #20]
 80a8da2:	e7e7      	b.n	80a8d74 <__d2b+0x54>
 80a8da4:	a801      	add	r0, sp, #4
 80a8da6:	f7ff fce3 	bl	80a8770 <__lo0bits>
 80a8daa:	2101      	movs	r1, #1
 80a8dac:	9b01      	ldr	r3, [sp, #4]
 80a8dae:	6121      	str	r1, [r4, #16]
 80a8db0:	6163      	str	r3, [r4, #20]
 80a8db2:	3020      	adds	r0, #32
 80a8db4:	e7e5      	b.n	80a8d82 <__d2b+0x62>
 80a8db6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80a8dba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a8dbe:	6038      	str	r0, [r7, #0]
 80a8dc0:	6918      	ldr	r0, [r3, #16]
 80a8dc2:	f7ff fcb5 	bl	80a8730 <__hi0bits>
 80a8dc6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80a8dca:	6031      	str	r1, [r6, #0]
 80a8dcc:	e7e1      	b.n	80a8d92 <__d2b+0x72>
 80a8dce:	bf00      	nop
 80a8dd0:	080a94d5 	.word	0x080a94d5
 80a8dd4:	080a9560 	.word	0x080a9560

080a8dd8 <__ratio>:
 80a8dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8ddc:	4688      	mov	r8, r1
 80a8dde:	4669      	mov	r1, sp
 80a8de0:	4681      	mov	r9, r0
 80a8de2:	f7ff ff49 	bl	80a8c78 <__b2d>
 80a8de6:	460f      	mov	r7, r1
 80a8de8:	4604      	mov	r4, r0
 80a8dea:	460d      	mov	r5, r1
 80a8dec:	4640      	mov	r0, r8
 80a8dee:	a901      	add	r1, sp, #4
 80a8df0:	f7ff ff42 	bl	80a8c78 <__b2d>
 80a8df4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a8df8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a8dfc:	468b      	mov	fp, r1
 80a8dfe:	eba3 0c02 	sub.w	ip, r3, r2
 80a8e02:	e9dd 3200 	ldrd	r3, r2, [sp]
 80a8e06:	1a9b      	subs	r3, r3, r2
 80a8e08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80a8e0c:	2b00      	cmp	r3, #0
 80a8e0e:	bfd5      	itete	le
 80a8e10:	460a      	movle	r2, r1
 80a8e12:	462a      	movgt	r2, r5
 80a8e14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80a8e18:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80a8e1c:	bfd8      	it	le
 80a8e1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80a8e22:	465b      	mov	r3, fp
 80a8e24:	4602      	mov	r2, r0
 80a8e26:	4639      	mov	r1, r7
 80a8e28:	4620      	mov	r0, r4
 80a8e2a:	f7fc fe01 	bl	80a5a30 <__aeabi_ddiv>
 80a8e2e:	b003      	add	sp, #12
 80a8e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8e34 <__copybits>:
 80a8e34:	3901      	subs	r1, #1
 80a8e36:	b570      	push	{r4, r5, r6, lr}
 80a8e38:	1149      	asrs	r1, r1, #5
 80a8e3a:	6914      	ldr	r4, [r2, #16]
 80a8e3c:	3101      	adds	r1, #1
 80a8e3e:	f102 0314 	add.w	r3, r2, #20
 80a8e42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a8e46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a8e4a:	1f05      	subs	r5, r0, #4
 80a8e4c:	42a3      	cmp	r3, r4
 80a8e4e:	d30c      	bcc.n	80a8e6a <__copybits+0x36>
 80a8e50:	1aa3      	subs	r3, r4, r2
 80a8e52:	3b11      	subs	r3, #17
 80a8e54:	f023 0303 	bic.w	r3, r3, #3
 80a8e58:	3211      	adds	r2, #17
 80a8e5a:	42a2      	cmp	r2, r4
 80a8e5c:	bf88      	it	hi
 80a8e5e:	2300      	movhi	r3, #0
 80a8e60:	4418      	add	r0, r3
 80a8e62:	2300      	movs	r3, #0
 80a8e64:	4288      	cmp	r0, r1
 80a8e66:	d305      	bcc.n	80a8e74 <__copybits+0x40>
 80a8e68:	bd70      	pop	{r4, r5, r6, pc}
 80a8e6a:	f853 6b04 	ldr.w	r6, [r3], #4
 80a8e6e:	f845 6f04 	str.w	r6, [r5, #4]!
 80a8e72:	e7eb      	b.n	80a8e4c <__copybits+0x18>
 80a8e74:	f840 3b04 	str.w	r3, [r0], #4
 80a8e78:	e7f4      	b.n	80a8e64 <__copybits+0x30>

080a8e7a <__any_on>:
 80a8e7a:	f100 0214 	add.w	r2, r0, #20
 80a8e7e:	6900      	ldr	r0, [r0, #16]
 80a8e80:	114b      	asrs	r3, r1, #5
 80a8e82:	4298      	cmp	r0, r3
 80a8e84:	b510      	push	{r4, lr}
 80a8e86:	db11      	blt.n	80a8eac <__any_on+0x32>
 80a8e88:	dd0a      	ble.n	80a8ea0 <__any_on+0x26>
 80a8e8a:	f011 011f 	ands.w	r1, r1, #31
 80a8e8e:	d007      	beq.n	80a8ea0 <__any_on+0x26>
 80a8e90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a8e94:	fa24 f001 	lsr.w	r0, r4, r1
 80a8e98:	fa00 f101 	lsl.w	r1, r0, r1
 80a8e9c:	428c      	cmp	r4, r1
 80a8e9e:	d10b      	bne.n	80a8eb8 <__any_on+0x3e>
 80a8ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a8ea4:	4293      	cmp	r3, r2
 80a8ea6:	d803      	bhi.n	80a8eb0 <__any_on+0x36>
 80a8ea8:	2000      	movs	r0, #0
 80a8eaa:	bd10      	pop	{r4, pc}
 80a8eac:	4603      	mov	r3, r0
 80a8eae:	e7f7      	b.n	80a8ea0 <__any_on+0x26>
 80a8eb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a8eb4:	2900      	cmp	r1, #0
 80a8eb6:	d0f5      	beq.n	80a8ea4 <__any_on+0x2a>
 80a8eb8:	2001      	movs	r0, #1
 80a8eba:	e7f6      	b.n	80a8eaa <__any_on+0x30>

080a8ebc <_calloc_r>:
 80a8ebc:	b538      	push	{r3, r4, r5, lr}
 80a8ebe:	fb02 f501 	mul.w	r5, r2, r1
 80a8ec2:	4629      	mov	r1, r5
 80a8ec4:	f7fb f998 	bl	80a41f8 <_malloc_r>
 80a8ec8:	4604      	mov	r4, r0
 80a8eca:	b118      	cbz	r0, 80a8ed4 <_calloc_r+0x18>
 80a8ecc:	462a      	mov	r2, r5
 80a8ece:	2100      	movs	r1, #0
 80a8ed0:	f7fd fd80 	bl	80a69d4 <memset>
 80a8ed4:	4620      	mov	r0, r4
 80a8ed6:	bd38      	pop	{r3, r4, r5, pc}

080a8ed8 <nan>:
 80a8ed8:	2000      	movs	r0, #0
 80a8eda:	4901      	ldr	r1, [pc, #4]	; (80a8ee0 <nan+0x8>)
 80a8edc:	4770      	bx	lr
 80a8ede:	bf00      	nop
 80a8ee0:	7ff80000 	.word	0x7ff80000

080a8ee4 <__ascii_wctomb>:
 80a8ee4:	4603      	mov	r3, r0
 80a8ee6:	4608      	mov	r0, r1
 80a8ee8:	b141      	cbz	r1, 80a8efc <__ascii_wctomb+0x18>
 80a8eea:	2aff      	cmp	r2, #255	; 0xff
 80a8eec:	d904      	bls.n	80a8ef8 <__ascii_wctomb+0x14>
 80a8eee:	228a      	movs	r2, #138	; 0x8a
 80a8ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a8ef4:	601a      	str	r2, [r3, #0]
 80a8ef6:	4770      	bx	lr
 80a8ef8:	2001      	movs	r0, #1
 80a8efa:	700a      	strb	r2, [r1, #0]
 80a8efc:	4770      	bx	lr
	...

080a8f00 <__env_lock>:
 80a8f00:	4801      	ldr	r0, [pc, #4]	; (80a8f08 <__env_lock+0x8>)
 80a8f02:	f7ff bb0e 	b.w	80a8522 <__retarget_lock_acquire_recursive>
 80a8f06:	bf00      	nop
 80a8f08:	20000ffc 	.word	0x20000ffc

080a8f0c <__env_unlock>:
 80a8f0c:	4801      	ldr	r0, [pc, #4]	; (80a8f14 <__env_unlock+0x8>)
 80a8f0e:	f7ff bb0a 	b.w	80a8526 <__retarget_lock_release_recursive>
 80a8f12:	bf00      	nop
 80a8f14:	20000ffc 	.word	0x20000ffc

080a8f18 <__aeabi_ldivmod>:
 80a8f18:	b97b      	cbnz	r3, 80a8f3a <__aeabi_ldivmod+0x22>
 80a8f1a:	b972      	cbnz	r2, 80a8f3a <__aeabi_ldivmod+0x22>
 80a8f1c:	2900      	cmp	r1, #0
 80a8f1e:	bfbe      	ittt	lt
 80a8f20:	2000      	movlt	r0, #0
 80a8f22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a8f26:	e006      	blt.n	80a8f36 <__aeabi_ldivmod+0x1e>
 80a8f28:	bf08      	it	eq
 80a8f2a:	2800      	cmpeq	r0, #0
 80a8f2c:	bf1c      	itt	ne
 80a8f2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a8f32:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a8f36:	f7fd bc39 	b.w	80a67ac <__aeabi_idiv0>
 80a8f3a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a8f3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a8f42:	2900      	cmp	r1, #0
 80a8f44:	db09      	blt.n	80a8f5a <__aeabi_ldivmod+0x42>
 80a8f46:	2b00      	cmp	r3, #0
 80a8f48:	db1a      	blt.n	80a8f80 <__aeabi_ldivmod+0x68>
 80a8f4a:	f7fd fac5 	bl	80a64d8 <__udivmoddi4>
 80a8f4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8f52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8f56:	b004      	add	sp, #16
 80a8f58:	4770      	bx	lr
 80a8f5a:	4240      	negs	r0, r0
 80a8f5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8f60:	2b00      	cmp	r3, #0
 80a8f62:	db1b      	blt.n	80a8f9c <__aeabi_ldivmod+0x84>
 80a8f64:	f7fd fab8 	bl	80a64d8 <__udivmoddi4>
 80a8f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8f70:	b004      	add	sp, #16
 80a8f72:	4240      	negs	r0, r0
 80a8f74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8f78:	4252      	negs	r2, r2
 80a8f7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8f7e:	4770      	bx	lr
 80a8f80:	4252      	negs	r2, r2
 80a8f82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8f86:	f7fd faa7 	bl	80a64d8 <__udivmoddi4>
 80a8f8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8f92:	b004      	add	sp, #16
 80a8f94:	4240      	negs	r0, r0
 80a8f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8f9a:	4770      	bx	lr
 80a8f9c:	4252      	negs	r2, r2
 80a8f9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8fa2:	f7fd fa99 	bl	80a64d8 <__udivmoddi4>
 80a8fa6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8faa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8fae:	b004      	add	sp, #16
 80a8fb0:	4252      	negs	r2, r2
 80a8fb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8fb6:	4770      	bx	lr

080a8fb8 <__aeabi_d2lz>:
 80a8fb8:	b538      	push	{r3, r4, r5, lr}
 80a8fba:	4605      	mov	r5, r0
 80a8fbc:	460c      	mov	r4, r1
 80a8fbe:	2200      	movs	r2, #0
 80a8fc0:	2300      	movs	r3, #0
 80a8fc2:	4628      	mov	r0, r5
 80a8fc4:	4621      	mov	r1, r4
 80a8fc6:	f7fc fe7b 	bl	80a5cc0 <__aeabi_dcmplt>
 80a8fca:	b928      	cbnz	r0, 80a8fd8 <__aeabi_d2lz+0x20>
 80a8fcc:	4628      	mov	r0, r5
 80a8fce:	4621      	mov	r1, r4
 80a8fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a8fd4:	f7fd ba62 	b.w	80a649c <__aeabi_d2ulz>
 80a8fd8:	4628      	mov	r0, r5
 80a8fda:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a8fde:	f7fd fa5d 	bl	80a649c <__aeabi_d2ulz>
 80a8fe2:	4240      	negs	r0, r0
 80a8fe4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8fe8:	bd38      	pop	{r3, r4, r5, pc}
 80a8fea:	bf00      	nop

080a8fec <dynalib_user>:
 80a8fec:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a8ffc:	0000 0000 0031 6548 6c6c 006f 6850 746f     ....1.Hello.Phot
 80a900c:	006f 6f68 6b6f 722d 7365 6f70 736e 2f65     o.hook-response/
 80a901c:	6557 7461 6568 0072 6553 7474 6e69 7367     Weather.Settings
 80a902c:	5700 4669 0069 6944 7073 616c 0079 6144     .WiFi.Display.Da
 80a903c:	6b72 6d20 0064 6241 756f 0074 7845 7469     rk md.About.Exit
 80a904c:	7300 6769 7320 7274 4900 0050 654e 2074     .sig str.IP.Net 
 80a905c:	616e 656d 5400 7572 742d 6e6f 0065 6547     name.Tru-tone.Ge
 80a906c:	2074 7477 7268 4700 7465 7420 6d65 0070     t wthr.Get temp.
 80a907c:	694d 696e 6320 6b6c 4400 7261 206b 6c63     Mini clk.Dark cl
 80a908c:	0072 6944 7073 7420 6d65 0070 7953 2d73     r.Disp temp.Sys-
 80a909c:	7376 006e 6946 6d72 762d 6e73 5200 7365     vsn.Firm-vsn.Res
 80a90ac:	7465 0000 111f 001f 0000 001f 151d 0017     et..............
 80a90bc:	1515 001f 0407 001f 1517 001d 151f 001d     ................
 80a90cc:	0101 001f 151f 001f 1517 001f 417f 7f41     .............AA.
 80a90dc:	0000 7f00 4979 4f49 4949 7f49 080f 7f08     ....yIIOIII.....
 80a90ec:	494f 7949 497f 7949 0101 7f01 497f 7f49     OIIy.IIy.....II.
 80a90fc:	494f 7f49                                   OII.

080a9100 <CSWTCH.189>:
 80a9100:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a9110:	0050 0000                                   P...

080a9114 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a911c:	4257 080a 425d 080a 42ad 080a 426b 080a     WB..]B...B..kB..
 80a912c:	4259 080a                                   YB..

080a9130 <_ZTV7TwoWire>:
	...
 80a9138:	47ed 080a 4837 080a 480f 080a 47ef 080a     .G..7H...H...G..
 80a9148:	4817 080a 481f 080a 4827 080a 482f 080a     .H...H..'H../H..

080a9158 <_ZTV9IPAddress>:
	...
 80a9160:	486b 080a 4869 080a 489d 080a 7061 0070     kH..iH...H..app.

080a9170 <_ZTVN5spark12NetworkClassE>:
	...
 80a9178:	4941 080a 494b 080a 4955 080a 495f 080a     AI..KI..UI.._I..
 80a9188:	4969 080a 4975 080a 4981 080a 4989 080a     iI..uI...I...I..
 80a9198:	4991 080a 499d 080a 49a5 080a 49af 080a     .I...I...I...I..
 80a91a8:	49b9 080a 5925 252d 2d6d 6425 2554 3a48     .I..%Y-%m-%dT%H:
 80a91b8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a91c8 <_ZTV11USARTSerial>:
	...
 80a91d0:	4ced 080a 4d55 080a 4d31 080a 4a1d 080a     .L..UM..1M...J..
 80a91e0:	4d01 080a 4d1d 080a 4d0f 080a 4d2b 080a     .M...M...M..+M..
 80a91f0:	4cef 080a 4cf3 080a                         .L...L..

080a91f8 <_ZTV9USBSerial>:
	...
 80a9200:	4de5 080a 4e4b 080a 4e23 080a 4a1d 080a     .M..KN..#N...J..
 80a9210:	4e15 080a 4de7 080a 4df7 080a 4e45 080a     .N...M...M..EN..
 80a9220:	4e07 080a 4de1 080a                         .N...M..

080a9228 <_ZTVN5spark9WiFiClassE>:
	...
 80a9230:	501b 080a 5011 080a 5007 080a 4f79 080a     .P...P...P..yO..
 80a9240:	4ffb 080a 4fef 080a 4981 080a 4989 080a     .O...O...I...I..
 80a9250:	4fe3 080a 4fdb 080a 4fd1 080a 4fc7 080a     .O...O...O...O..
 80a9260:	4f83 080a                                   .O..

080a9264 <_ZSt7nothrow>:
 80a9264:	0000 0000                                   ....

080a9268 <__month_lengths>:
 80a9268:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a9278:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9288:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9298:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a92a8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a92b8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a92c8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a92d8:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
 80a92e8:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
 80a92f8:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
 80a9308:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
 80a9318:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
 80a9328:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
 80a9338:	666e 6900 696e 7974 6100 006e               nf.inity.an.

080a9344 <fpi.1>:
 80a9344:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a9354:	0000 0000                                   ....

080a9358 <fpinan.0>:
 80a9358:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080a9370 <tinytens>:
 80a9370:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a9380:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a9390:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 80a93a0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80a93b0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80a93c0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80a93d0:	2575 006e                                   u%n.

080a93d4 <_ctype_>:
 80a93d4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a93e4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a93f4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a9404:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a9414:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a9424:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a9434:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a9444:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a9454:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a94d4:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
 80a94e4:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
 80a94f4:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
 80a9504:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
 80a9514:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
 80a9524:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
 80a9534:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
 80a9544:	632e 2e00 0000 0000                         .c......

080a954c <_C_numeric_locale>:
 80a954c:	9547 080a 9548 080a 00c8 2000 0043 4f50     G...H...... C.PO
 80a955c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
 80a956c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
 80a957c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
 80a958c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
 80a959c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
 80a95ac:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
 80a95bc:	0000 0000                                   ....

080a95c0 <__mprec_bigtens>:
 80a95c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a95d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a95e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a95e8 <__mprec_tens>:
 80a95e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a95f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a9608:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a9618:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a9628:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a9638:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a9648:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a9658:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a9668:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a9678:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a9688:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a9698:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a96a8:	9db4 79d9 7843 44ea                         ...yCx.D

080a96b0 <p05.0>:
 80a96b0:	0005 0000 0019 0000 007d 0000               ........}...

080a96bc <link_const_variable_data_end>:
 80a96bc:	080a2a19 	.word	0x080a2a19
 80a96c0:	080a3ced 	.word	0x080a3ced
 80a96c4:	080a4931 	.word	0x080a4931
 80a96c8:	080a4a09 	.word	0x080a4a09
 80a96cc:	080a4afd 	.word	0x080a4afd
 80a96d0:	080a4b39 	.word	0x080a4b39
 80a96d4:	080a4cd9 	.word	0x080a4cd9
 80a96d8:	080a5025 	.word	0x080a5025
 80a96dc:	080a5385 	.word	0x080a5385
