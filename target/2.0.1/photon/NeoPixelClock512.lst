
c:/Users/mligh/OneDrive/Particle/NeoPixelClock512/target/2.0.1/photon/NeoPixelClock512.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000094c0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a94e0  080a94e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a94e8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000023c  20000000  080a94ec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000dd4  20000240  20000240  00040240  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a9728  080a9728  00039728  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a9750  080a9750  00039750  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00122abc  00000000  00000000  00039754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014d1c  00000000  00000000  0015c210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001d245  00000000  00000000  00170f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000020b0  00000000  00000000  0018e171  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000054c0  00000000  00000000  00190221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002874e  00000000  00000000  001956e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002fde0  00000000  00000000  001bde2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b2fe9  00000000  00000000  001edc0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006104  00000000  00000000  002a0bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fcd9 	bl	80a69e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fce1 	bl	80a6a04 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a94ec 	.word	0x080a94ec
 80a0050:	2000023c 	.word	0x2000023c
 80a0054:	20000240 	.word	0x20000240
 80a0058:	20001011 	.word	0x20001011
 80a005c:	20001011 	.word	0x20001011

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 fa5d 	bl	80a4520 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a94b4 	.word	0x080a94b4
 80a0084:	080a94d8 	.word	0x080a94d8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 ba92 	b.w	80a15b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f002 fb89 	bl	80a27a4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f004 ba05 	b.w	80a44a4 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f003 bfed 	b.w	80a4078 <malloc>

080a009e <_Znaj>:
 80a009e:	f003 bfeb 	b.w	80a4078 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f003 bff1 	b.w	80a4088 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z14weatherHandlerPKcS0_>:
    }
    if(apply){
        printScreen(screenArray,start,end);
    }
}
void weatherHandler(const char *event, const char *data) {
 80a00b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a00ba:	460d      	mov	r5, r1
 80a00bc:	460c      	mov	r4, r1
            {
                humdata[2] = data[j+12];
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
            cltr[0] = data[j+9];
 80a00be:	4e58      	ldr	r6, [pc, #352]	; (80a0220 <_Z14weatherHandlerPKcS0_+0x168>)
    for(j=0; j<strlen(data); j++)
 80a00c0:	4628      	mov	r0, r5
 80a00c2:	f006 fcf8 	bl	80a6ab6 <strlen>
 80a00c6:	1b63      	subs	r3, r4, r5
 80a00c8:	4298      	cmp	r0, r3
 80a00ca:	d960      	bls.n	80a018e <_Z14weatherHandlerPKcS0_+0xd6>
        if(data[j] == 't' && data[j+1] == 'e' && data[j+2] == 'm' && data[j+3] == 'p' && data[j+4] == '"'){
 80a00cc:	7823      	ldrb	r3, [r4, #0]
 80a00ce:	2b74      	cmp	r3, #116	; 0x74
 80a00d0:	d138      	bne.n	80a0144 <_Z14weatherHandlerPKcS0_+0x8c>
 80a00d2:	7863      	ldrb	r3, [r4, #1]
 80a00d4:	2b65      	cmp	r3, #101	; 0x65
 80a00d6:	d11a      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a00d8:	78a3      	ldrb	r3, [r4, #2]
 80a00da:	2b6d      	cmp	r3, #109	; 0x6d
 80a00dc:	d117      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a00de:	78e3      	ldrb	r3, [r4, #3]
 80a00e0:	2b70      	cmp	r3, #112	; 0x70
 80a00e2:	d114      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a00e4:	7923      	ldrb	r3, [r4, #4]
 80a00e6:	2b22      	cmp	r3, #34	; 0x22
 80a00e8:	d111      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
            tempdata[0] = data[j+6];
 80a00ea:	79a3      	ldrb	r3, [r4, #6]
 80a00ec:	f88d 3008 	strb.w	r3, [sp, #8]
            tempdata[1] = data[j+7];
 80a00f0:	79e3      	ldrb	r3, [r4, #7]
 80a00f2:	f88d 3009 	strb.w	r3, [sp, #9]
            tempdata[2] = data[j+8];
 80a00f6:	7a23      	ldrb	r3, [r4, #8]
 80a00f8:	f88d 300a 	strb.w	r3, [sp, #10]
            tempdata[3] = data[j+9];
 80a00fc:	7a63      	ldrb	r3, [r4, #9]
 80a00fe:	f88d 300b 	strb.w	r3, [sp, #11]
            tempdata[4] = data[j+10];
 80a0102:	7aa3      	ldrb	r3, [r4, #10]
 80a0104:	f88d 300c 	strb.w	r3, [sp, #12]
            tempdata[5] = data[j+11];
 80a0108:	7ae3      	ldrb	r3, [r4, #11]
 80a010a:	f88d 300d 	strb.w	r3, [sp, #13]
        }
        if(data[j-1] == '[' && data[j] == '{' && data[j+1] == '"' && data[j+2] == 'i' && data[j+3] == 'd'){
 80a010e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80a0112:	2b5b      	cmp	r3, #91	; 0x5b
 80a0114:	d114      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a0116:	7823      	ldrb	r3, [r4, #0]
 80a0118:	2b7b      	cmp	r3, #123	; 0x7b
 80a011a:	d111      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a011c:	7863      	ldrb	r3, [r4, #1]
 80a011e:	2b22      	cmp	r3, #34	; 0x22
 80a0120:	d10e      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a0122:	78a3      	ldrb	r3, [r4, #2]
 80a0124:	2b69      	cmp	r3, #105	; 0x69
 80a0126:	d10b      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
 80a0128:	78e3      	ldrb	r3, [r4, #3]
 80a012a:	2b64      	cmp	r3, #100	; 0x64
 80a012c:	d108      	bne.n	80a0140 <_Z14weatherHandlerPKcS0_+0x88>
            cdata[0] = data[j+6];
 80a012e:	79a3      	ldrb	r3, [r4, #6]
 80a0130:	f88d 3004 	strb.w	r3, [sp, #4]
            cdata[1] = data[j+7];
 80a0134:	79e3      	ldrb	r3, [r4, #7]
 80a0136:	f88d 3005 	strb.w	r3, [sp, #5]
            cdata[2] = data[j+8];
 80a013a:	7a23      	ldrb	r3, [r4, #8]
 80a013c:	f88d 3006 	strb.w	r3, [sp, #6]
    for(j=0; j<strlen(data); j++)
 80a0140:	3401      	adds	r4, #1
 80a0142:	e7bd      	b.n	80a00c0 <_Z14weatherHandlerPKcS0_+0x8>
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
 80a0144:	2b68      	cmp	r3, #104	; 0x68
 80a0146:	d00d      	beq.n	80a0164 <_Z14weatherHandlerPKcS0_+0xac>
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
 80a0148:	2b69      	cmp	r3, #105	; 0x69
 80a014a:	d1e0      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a014c:	7863      	ldrb	r3, [r4, #1]
 80a014e:	2b63      	cmp	r3, #99	; 0x63
 80a0150:	d1dd      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a0152:	78a3      	ldrb	r3, [r4, #2]
 80a0154:	2b6f      	cmp	r3, #111	; 0x6f
 80a0156:	d1da      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a0158:	78e3      	ldrb	r3, [r4, #3]
 80a015a:	2b6e      	cmp	r3, #110	; 0x6e
            cltr[0] = data[j+9];
 80a015c:	bf04      	itt	eq
 80a015e:	7a63      	ldrbeq	r3, [r4, #9]
 80a0160:	7033      	strbeq	r3, [r6, #0]
 80a0162:	e7d4      	b.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
 80a0164:	7863      	ldrb	r3, [r4, #1]
 80a0166:	2b75      	cmp	r3, #117	; 0x75
 80a0168:	d1d1      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a016a:	78a3      	ldrb	r3, [r4, #2]
 80a016c:	2b6d      	cmp	r3, #109	; 0x6d
 80a016e:	d1ce      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
 80a0170:	78e3      	ldrb	r3, [r4, #3]
 80a0172:	2b69      	cmp	r3, #105	; 0x69
 80a0174:	d1cb      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
            humdata[0] = data[j+10];
 80a0176:	7aa3      	ldrb	r3, [r4, #10]
 80a0178:	f88d 3000 	strb.w	r3, [sp]
            humdata[1] = data[j+11];
 80a017c:	7ae3      	ldrb	r3, [r4, #11]
 80a017e:	f88d 3001 	strb.w	r3, [sp, #1]
            if(data[j+12] == '0')
 80a0182:	7b23      	ldrb	r3, [r4, #12]
 80a0184:	2b30      	cmp	r3, #48	; 0x30
 80a0186:	d1c2      	bne.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
                humdata[2] = data[j+12];
 80a0188:	f88d 3002 	strb.w	r3, [sp, #2]
 80a018c:	e7bf      	b.n	80a010e <_Z14weatherHandlerPKcS0_+0x56>
        }
    }
    if(humdata[0] >= '0' && humdata[0] <= '9'){
 80a018e:	f89d 3000 	ldrb.w	r3, [sp]
 80a0192:	3b30      	subs	r3, #48	; 0x30
 80a0194:	2b09      	cmp	r3, #9
 80a0196:	d806      	bhi.n	80a01a6 <_Z14weatherHandlerPKcS0_+0xee>
        humidity = atof(humdata);
 80a0198:	4668      	mov	r0, sp
 80a019a:	f006 fb1d 	bl	80a67d8 <atof>
 80a019e:	f005 fdb3 	bl	80a5d08 <__aeabi_d2iz>
 80a01a2:	4b20      	ldr	r3, [pc, #128]	; (80a0224 <_Z14weatherHandlerPKcS0_+0x16c>)
 80a01a4:	6018      	str	r0, [r3, #0]
    }
    if(cdata[0] >= '0' && cdata[0] <= '9'){
 80a01a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a01aa:	3b30      	subs	r3, #48	; 0x30
 80a01ac:	2b09      	cmp	r3, #9
 80a01ae:	d806      	bhi.n	80a01be <_Z14weatherHandlerPKcS0_+0x106>
        cid = atof(cdata);
 80a01b0:	a801      	add	r0, sp, #4
 80a01b2:	f006 fb11 	bl	80a67d8 <atof>
 80a01b6:	f005 fda7 	bl	80a5d08 <__aeabi_d2iz>
 80a01ba:	4b1b      	ldr	r3, [pc, #108]	; (80a0228 <_Z14weatherHandlerPKcS0_+0x170>)
 80a01bc:	6018      	str	r0, [r3, #0]
    }
    if(tempdata[0] >= '0' && tempdata[0] <= '9'){
 80a01be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a01c2:	3b30      	subs	r3, #48	; 0x30
 80a01c4:	2b09      	cmp	r3, #9
 80a01c6:	d81e      	bhi.n	80a0206 <_Z14weatherHandlerPKcS0_+0x14e>
        tempK = atof(tempdata);
 80a01c8:	a802      	add	r0, sp, #8
 80a01ca:	f006 fb05 	bl	80a67d8 <atof>
 80a01ce:	f005 fde3 	bl	80a5d98 <__aeabi_d2f>
        tempC = tempK-273.15;
 80a01d2:	f005 faa7 	bl	80a5724 <__aeabi_f2d>
 80a01d6:	a30e      	add	r3, pc, #56	; (adr r3, 80a0210 <_Z14weatherHandlerPKcS0_+0x158>)
 80a01d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01dc:	f005 f942 	bl	80a5464 <__aeabi_dsub>
 80a01e0:	f005 fdda 	bl	80a5d98 <__aeabi_d2f>
        tempF = (tempC*1.8)+32;
 80a01e4:	f005 fa9e 	bl	80a5724 <__aeabi_f2d>
 80a01e8:	a30b      	add	r3, pc, #44	; (adr r3, 80a0218 <_Z14weatherHandlerPKcS0_+0x160>)
 80a01ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01ee:	f005 faf1 	bl	80a57d4 <__aeabi_dmul>
 80a01f2:	4b0e      	ldr	r3, [pc, #56]	; (80a022c <_Z14weatherHandlerPKcS0_+0x174>)
 80a01f4:	2200      	movs	r2, #0
 80a01f6:	f005 f937 	bl	80a5468 <__adddf3>
 80a01fa:	f005 fdcd 	bl	80a5d98 <__aeabi_d2f>
        TFahr = (int)tempF;
 80a01fe:	f006 f8ef 	bl	80a63e0 <__aeabi_f2iz>
 80a0202:	4b0b      	ldr	r3, [pc, #44]	; (80a0230 <_Z14weatherHandlerPKcS0_+0x178>)
 80a0204:	6018      	str	r0, [r3, #0]
    }
}
 80a0206:	b004      	add	sp, #16
 80a0208:	bd70      	pop	{r4, r5, r6, pc}
 80a020a:	bf00      	nop
 80a020c:	f3af 8000 	nop.w
 80a0210:	66666666 	.word	0x66666666
 80a0214:	40711266 	.word	0x40711266
 80a0218:	cccccccd 	.word	0xcccccccd
 80a021c:	3ffccccc 	.word	0x3ffccccc
 80a0220:	20000264 	.word	0x20000264
 80a0224:	20000278 	.word	0x20000278
 80a0228:	20000260 	.word	0x20000260
 80a022c:	40400000 	.word	0x40400000
 80a0230:	20000250 	.word	0x20000250

080a0234 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0234:	b510      	push	{r4, lr}
 80a0236:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0238:	6800      	ldr	r0, [r0, #0]
 80a023a:	b108      	cbz	r0, 80a0240 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a023c:	f003 ff24 	bl	80a4088 <free>
class SystemClass {
 80a0240:	4620      	mov	r0, r4
 80a0242:	bd10      	pop	{r4, pc}

080a0244 <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80a0244:	f003 bd12 	b.w	80a3c6c <HAL_EEPROM_Read>

080a0248 <_Z11printScreenPiii>:
void printScreen(int inputArray[], int start, int end){
 80a0248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a024c:	4605      	mov	r5, r0
 80a024e:	b087      	sub	sp, #28
 80a0250:	9205      	str	r2, [sp, #20]
    for(count = start; count <= end; count++){
 80a0252:	b28c      	uxth	r4, r1
 80a0254:	9b05      	ldr	r3, [sp, #20]
 80a0256:	429c      	cmp	r4, r3
 80a0258:	f300 8160 	bgt.w	80a051c <_Z11printScreenPiii+0x2d4>
        if(!(count>>8)){
 80a025c:	0a23      	lsrs	r3, r4, #8
 80a025e:	d128      	bne.n	80a02b2 <_Z11printScreenPiii+0x6a>
            if(((count/8)%2) == 0){                                                                                        //Prints standard row
 80a0260:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80a0264:	4bb4      	ldr	r3, [pc, #720]	; (80a0538 <_Z11printScreenPiii+0x2f0>)
 80a0266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a026a:	fb96 f3f3 	sdiv	r3, r6, r3
 80a026e:	fb96 f1f0 	sdiv	r1, r6, r0
 80a0272:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0276:	fb00 3212 	mls	r2, r0, r2, r3
 80a027a:	fb91 f3f0 	sdiv	r3, r1, r0
 80a027e:	fb00 1313 	mls	r3, r0, r3, r1
 80a0282:	fb00 6111 	mls	r1, r0, r1, r6
 80a0286:	b2c8      	uxtb	r0, r1
 80a0288:	0721      	lsls	r1, r4, #28
                    strip.setPixelColor(count+7-(2*(count%8)),getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));     //If on the left half of line, subtract to mirror to other side
 80a028a:	bf43      	ittte	mi
 80a028c:	1de1      	addmi	r1, r4, #7
 80a028e:	f004 0607 	andmi.w	r6, r4, #7
 80a0292:	eba1 0146 	submi.w	r1, r1, r6, lsl #1
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a0296:	9000      	strpl	r0, [sp, #0]
                    strip.setPixelColor(count+7-(2*(count%8)),getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));     //If on the left half of line, subtract to mirror to other side
 80a0298:	bf4c      	ite	mi
 80a029a:	9000      	strmi	r0, [sp, #0]
                strip.setPixelColor(count,getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));
 80a029c:	4621      	movpl	r1, r4
                    strip.setPixelColor(count+7-(2*(count%8)),getRVal(inputArray[count]),getGVal(inputArray[count]), getBVal(inputArray[count]));     //If on the left half of line, subtract to mirror to other side
 80a029e:	48a7      	ldr	r0, [pc, #668]	; (80a053c <_Z11printScreenPiii+0x2f4>)
 80a02a0:	b2d2      	uxtb	r2, r2
 80a02a2:	b2db      	uxtb	r3, r3
 80a02a4:	bf48      	it	mi
 80a02a6:	b289      	uxthmi	r1, r1
 80a02a8:	f003 fc54 	bl	80a3b54 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for(count = start; count <= end; count++){
 80a02ac:	3401      	adds	r4, #1
 80a02ae:	b2a4      	uxth	r4, r4
 80a02b0:	e7d0      	b.n	80a0254 <_Z11printScreenPiii+0xc>
        else if ((count>>8) && count < 383){       // Red - 0.65, Green - 0.8, Blue - 0.65
 80a02b2:	f5b4 7fbf 	cmp.w	r4, #382	; 0x17e
 80a02b6:	f200 80b3 	bhi.w	80a0420 <_Z11printScreenPiii+0x1d8>
            int k = count-256;
 80a02ba:	4a9f      	ldr	r2, [pc, #636]	; (80a0538 <_Z11printScreenPiii+0x2f0>)
 80a02bc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80a02c0:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
 80a02c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80a02c8:	fb93 f0fb 	sdiv	r0, r3, fp
 80a02cc:	f004 0707 	and.w	r7, r4, #7
 80a02d0:	fb0b 3010 	mls	r0, fp, r0, r3
 80a02d4:	f005 fa14 	bl	80a5700 <__aeabi_i2d>
 80a02d8:	a393      	add	r3, pc, #588	; (adr r3, 80a0528 <_Z11printScreenPiii+0x2e0>)
 80a02da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02de:	f1c7 0717 	rsb	r7, r7, #23
 80a02e2:	f005 fa77 	bl	80a57d4 <__aeabi_dmul>
 80a02e6:	013f      	lsls	r7, r7, #4
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
 80a02e8:	f014 0f01 	tst.w	r4, #1
            int k = count-256;
 80a02ec:	f5a4 7680 	sub.w	r6, r4, #256	; 0x100
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
 80a02f0:	b2bf      	uxth	r7, r7
 80a02f2:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a02f6:	d14b      	bne.n	80a0390 <_Z11printScreenPiii+0x148>
    return ((colorCode/1000)%1000);
 80a02f8:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a02fc:	2e00      	cmp	r6, #0
 80a02fe:	bfb8      	it	lt
 80a0300:	f1a4 06f9 	sublt.w	r6, r4, #249	; 0xf9
 80a0304:	f005 f862 	bl	80a53cc <round>
    return ((colorCode/1000)%1000);
 80a0308:	f855 3008 	ldr.w	r3, [r5, r8]
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a030c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    return ((colorCode/1000)%1000);
 80a0310:	fb93 f3f9 	sdiv	r3, r3, r9
 80a0314:	fb93 f0f9 	sdiv	r0, r3, r9
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0318:	fb09 3010 	mls	r0, r9, r0, r3
 80a031c:	f005 f9f0 	bl	80a5700 <__aeabi_i2d>
 80a0320:	a383      	add	r3, pc, #524	; (adr r3, 80a0530 <_Z11printScreenPiii+0x2e8>)
 80a0322:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0326:	f005 fa55 	bl	80a57d4 <__aeabi_dmul>
 80a032a:	f005 f84f 	bl	80a53cc <round>
    return (colorCode%1000);
 80a032e:	f855 3008 	ldr.w	r3, [r5, r8]
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0332:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 80a0336:	4606      	mov	r6, r0
    return (colorCode%1000);
 80a0338:	fb93 f0f9 	sdiv	r0, r3, r9
                strip.setPixelColor(256 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a033c:	f1ca 0a0f 	rsb	sl, sl, #15
 80a0340:	fb09 3010 	mls	r0, r9, r0, r3
 80a0344:	44ba      	add	sl, r7
 80a0346:	460f      	mov	r7, r1
 80a0348:	f005 f9da 	bl	80a5700 <__aeabi_i2d>
 80a034c:	a376      	add	r3, pc, #472	; (adr r3, 80a0528 <_Z11printScreenPiii+0x2e0>)
 80a034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0352:	f005 fa3f 	bl	80a57d4 <__aeabi_dmul>
 80a0356:	f005 f839 	bl	80a53cc <round>
 80a035a:	4680      	mov	r8, r0
 80a035c:	4689      	mov	r9, r1
 80a035e:	4630      	mov	r0, r6
 80a0360:	4639      	mov	r1, r7
 80a0362:	f005 fcf9 	bl	80a5d58 <__aeabi_d2uiz>
 80a0366:	b2c7      	uxtb	r7, r0
 80a0368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a036c:	f005 fcf4 	bl	80a5d58 <__aeabi_d2uiz>
 80a0370:	4649      	mov	r1, r9
 80a0372:	b2c6      	uxtb	r6, r0
 80a0374:	4640      	mov	r0, r8
 80a0376:	f005 fcef 	bl	80a5d58 <__aeabi_d2uiz>
 80a037a:	fa1f fa8a 	uxth.w	sl, sl
 80a037e:	b2c0      	uxtb	r0, r0
 80a0380:	9000      	str	r0, [sp, #0]
 80a0382:	463b      	mov	r3, r7
 80a0384:	4632      	mov	r2, r6
 80a0386:	4651      	mov	r1, sl
 80a0388:	486c      	ldr	r0, [pc, #432]	; (80a053c <_Z11printScreenPiii+0x2f4>)
 80a038a:	f003 fbe3 	bl	80a3b54 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a038e:	e78d      	b.n	80a02ac <_Z11printScreenPiii+0x64>
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0390:	f005 f81c 	bl	80a53cc <round>
    return ((colorCode/1000)%1000);
 80a0394:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0398:	eb07 0ae6 	add.w	sl, r7, r6, asr #3
    return ((colorCode/1000)%1000);
 80a039c:	fb93 f3fb 	sdiv	r3, r3, fp
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03a0:	4606      	mov	r6, r0
    return ((colorCode/1000)%1000);
 80a03a2:	fb93 f0fb 	sdiv	r0, r3, fp
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03a6:	fb0b 3010 	mls	r0, fp, r0, r3
 80a03aa:	460f      	mov	r7, r1
 80a03ac:	f005 f9a8 	bl	80a5700 <__aeabi_i2d>
 80a03b0:	a35f      	add	r3, pc, #380	; (adr r3, 80a0530 <_Z11printScreenPiii+0x2e8>)
 80a03b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03b6:	f005 fa0d 	bl	80a57d4 <__aeabi_dmul>
 80a03ba:	f005 f807 	bl	80a53cc <round>
    return (colorCode%1000);
 80a03be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03c2:	4680      	mov	r8, r0
    return (colorCode%1000);
 80a03c4:	fb93 f0fb 	sdiv	r0, r3, fp
                strip.setPixelColor(256 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a03c8:	fb0b 3010 	mls	r0, fp, r0, r3
 80a03cc:	4689      	mov	r9, r1
 80a03ce:	f005 f997 	bl	80a5700 <__aeabi_i2d>
 80a03d2:	a355      	add	r3, pc, #340	; (adr r3, 80a0528 <_Z11printScreenPiii+0x2e0>)
 80a03d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03d8:	f005 f9fc 	bl	80a57d4 <__aeabi_dmul>
 80a03dc:	f004 fff6 	bl	80a53cc <round>
 80a03e0:	4602      	mov	r2, r0
 80a03e2:	460b      	mov	r3, r1
 80a03e4:	4640      	mov	r0, r8
 80a03e6:	4649      	mov	r1, r9
 80a03e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a03ec:	f005 fcb4 	bl	80a5d58 <__aeabi_d2uiz>
 80a03f0:	4639      	mov	r1, r7
 80a03f2:	fa5f f880 	uxtb.w	r8, r0
 80a03f6:	4630      	mov	r0, r6
 80a03f8:	f005 fcae 	bl	80a5d58 <__aeabi_d2uiz>
 80a03fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a0400:	b2c6      	uxtb	r6, r0
 80a0402:	4619      	mov	r1, r3
 80a0404:	4610      	mov	r0, r2
 80a0406:	f005 fca7 	bl	80a5d58 <__aeabi_d2uiz>
 80a040a:	fa1f fa8a 	uxth.w	sl, sl
 80a040e:	b2c0      	uxtb	r0, r0
 80a0410:	9000      	str	r0, [sp, #0]
 80a0412:	4643      	mov	r3, r8
 80a0414:	4632      	mov	r2, r6
 80a0416:	4651      	mov	r1, sl
 80a0418:	4848      	ldr	r0, [pc, #288]	; (80a053c <_Z11printScreenPiii+0x2f4>)
 80a041a:	f003 fb9b 	bl	80a3b54 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a041e:	e745      	b.n	80a02ac <_Z11printScreenPiii+0x64>
        else if (count > 383 && count < 512){
 80a0420:	f5a4 76c0 	sub.w	r6, r4, #384	; 0x180
 80a0424:	b2b3      	uxth	r3, r6
 80a0426:	2b7f      	cmp	r3, #127	; 0x7f
 80a0428:	f63f af40 	bhi.w	80a02ac <_Z11printScreenPiii+0x64>
            if(((count%8)%2) == 0){                                                                                        //Prints standard row
 80a042c:	4273      	negs	r3, r6
 80a042e:	f003 0307 	and.w	r3, r3, #7
 80a0432:	4a41      	ldr	r2, [pc, #260]	; (80a0538 <_Z11printScreenPiii+0x2f0>)
 80a0434:	f006 0707 	and.w	r7, r6, #7
 80a0438:	bf58      	it	pl
 80a043a:	425f      	negpl	r7, r3
 80a043c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80a0440:	f1c7 071f 	rsb	r7, r7, #31
 80a0444:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a044c:	fb93 f0f2 	sdiv	r0, r3, r2
 80a0450:	fb02 3010 	mls	r0, r2, r0, r3
 80a0454:	f005 f954 	bl	80a5700 <__aeabi_i2d>
 80a0458:	a333      	add	r3, pc, #204	; (adr r3, 80a0528 <_Z11printScreenPiii+0x2e0>)
 80a045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a045e:	f005 f9b9 	bl	80a57d4 <__aeabi_dmul>
 80a0462:	013f      	lsls	r7, r7, #4
 80a0464:	07e3      	lsls	r3, r4, #31
 80a0466:	b2bf      	uxth	r7, r7
 80a0468:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a046c:	d44c      	bmi.n	80a0508 <_Z11printScreenPiii+0x2c0>
                strip.setPixelColor(384 + 16*(7-k%8) + 15-(k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a046e:	2e00      	cmp	r6, #0
 80a0470:	bfbc      	itt	lt
 80a0472:	f46f 72bc 	mvnlt.w	r2, #376	; 0x178
 80a0476:	18a6      	addlt	r6, r4, r2
 80a0478:	ea4f 09e6 	mov.w	r9, r6, asr #3
 80a047c:	f1c9 090f 	rsb	r9, r9, #15
 80a0480:	44b9      	add	r9, r7
 80a0482:	fa1f f989 	uxth.w	r9, r9
    return ((colorCode/1000)%1000);
 80a0486:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a048a:	f004 ff9f 	bl	80a53cc <round>
    return ((colorCode/1000)%1000);
 80a048e:	f855 3008 	ldr.w	r3, [r5, r8]
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a0492:	e9cd 0102 	strd	r0, r1, [sp, #8]
    return ((colorCode/1000)%1000);
 80a0496:	fb93 f3fa 	sdiv	r3, r3, sl
 80a049a:	fb93 f0fa 	sdiv	r0, r3, sl
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a049e:	fb0a 3010 	mls	r0, sl, r0, r3
 80a04a2:	f005 f92d 	bl	80a5700 <__aeabi_i2d>
 80a04a6:	a322      	add	r3, pc, #136	; (adr r3, 80a0530 <_Z11printScreenPiii+0x2e8>)
 80a04a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04ac:	f005 f992 	bl	80a57d4 <__aeabi_dmul>
 80a04b0:	f004 ff8c 	bl	80a53cc <round>
    return (colorCode%1000);
 80a04b4:	f855 3008 	ldr.w	r3, [r5, r8]
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a04b8:	4606      	mov	r6, r0
    return (colorCode%1000);
 80a04ba:	fb93 f0fa 	sdiv	r0, r3, sl
                strip.setPixelColor(384 + 16*(7-k%8) + (k/8),round(getRVal(inputArray[count])*0.65),round(getGVal(inputArray[count])*0.8), round(getBVal(inputArray[count])*0.65));
 80a04be:	fb0a 3010 	mls	r0, sl, r0, r3
 80a04c2:	460f      	mov	r7, r1
 80a04c4:	f005 f91c 	bl	80a5700 <__aeabi_i2d>
 80a04c8:	a317      	add	r3, pc, #92	; (adr r3, 80a0528 <_Z11printScreenPiii+0x2e0>)
 80a04ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04ce:	f005 f981 	bl	80a57d4 <__aeabi_dmul>
 80a04d2:	f004 ff7b 	bl	80a53cc <round>
 80a04d6:	4682      	mov	sl, r0
 80a04d8:	468b      	mov	fp, r1
 80a04da:	4630      	mov	r0, r6
 80a04dc:	4639      	mov	r1, r7
 80a04de:	f005 fc3b 	bl	80a5d58 <__aeabi_d2uiz>
 80a04e2:	b2c7      	uxtb	r7, r0
 80a04e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a04e8:	f005 fc36 	bl	80a5d58 <__aeabi_d2uiz>
 80a04ec:	4659      	mov	r1, fp
 80a04ee:	b2c6      	uxtb	r6, r0
 80a04f0:	4650      	mov	r0, sl
 80a04f2:	f005 fc31 	bl	80a5d58 <__aeabi_d2uiz>
 80a04f6:	b2c0      	uxtb	r0, r0
 80a04f8:	9000      	str	r0, [sp, #0]
 80a04fa:	463b      	mov	r3, r7
 80a04fc:	4632      	mov	r2, r6
 80a04fe:	4649      	mov	r1, r9
 80a0500:	480e      	ldr	r0, [pc, #56]	; (80a053c <_Z11printScreenPiii+0x2f4>)
 80a0502:	f003 fb27 	bl	80a3b54 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a0506:	e6d1      	b.n	80a02ac <_Z11printScreenPiii+0x64>
 80a0508:	2e00      	cmp	r6, #0
 80a050a:	bfbc      	itt	lt
 80a050c:	f46f 73bc 	mvnlt.w	r3, #376	; 0x178
 80a0510:	18e6      	addlt	r6, r4, r3
 80a0512:	eb07 06e6 	add.w	r6, r7, r6, asr #3
 80a0516:	fa1f f986 	uxth.w	r9, r6
 80a051a:	e7b4      	b.n	80a0486 <_Z11printScreenPiii+0x23e>
    strip.show();
 80a051c:	4807      	ldr	r0, [pc, #28]	; (80a053c <_Z11printScreenPiii+0x2f4>)
}
 80a051e:	b007      	add	sp, #28
 80a0520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    strip.show();
 80a0524:	f002 ba66 	b.w	80a29f4 <_ZN17Adafruit_NeoPixel4showEv>
 80a0528:	cccccccd 	.word	0xcccccccd
 80a052c:	3fe4cccc 	.word	0x3fe4cccc
 80a0530:	9999999a 	.word	0x9999999a
 80a0534:	3fe99999 	.word	0x3fe99999
 80a0538:	000f4240 	.word	0x000f4240
 80a053c:	20000aa0 	.word	0x20000aa0

080a0540 <_Z4snumi>:
uint32_t snum(int val) {//Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
 80a0540:	b570      	push	{r4, r5, r6, lr}
 80a0542:	b08a      	sub	sp, #40	; 0x28
uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
 80a0544:	466c      	mov	r4, sp
uint32_t snum(int val) {//Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
 80a0546:	4606      	mov	r6, r0
uint32_t numArray[10] = { 2035999, 2031616, 1512733, 2037013, 2032647, 1905943, 1905951, 2031873, 2037023, 2037015};
 80a0548:	4d07      	ldr	r5, [pc, #28]	; (80a0568 <_Z4snumi+0x28>)
 80a054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0552:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0556:	e884 0003 	stmia.w	r4, {r0, r1}
return numArray[val];
 80a055a:	ab0a      	add	r3, sp, #40	; 0x28
 80a055c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
}
 80a0560:	f856 0c28 	ldr.w	r0, [r6, #-40]
 80a0564:	b00a      	add	sp, #40	; 0x28
 80a0566:	bd70      	pop	{r4, r5, r6, pc}
 80a0568:	080a8fd8 	.word	0x080a8fd8

080a056c <_Z3numi>:
uint32_t num(int val) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
 80a056c:	b570      	push	{r4, r5, r6, lr}
 80a056e:	b08a      	sub	sp, #40	; 0x28
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
 80a0570:	466c      	mov	r4, sp
uint32_t num(int val) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
 80a0572:	4606      	mov	r6, r0
uint32_t numArray[10] = {2134983039, 2130706432, 1330203001, 2135509321, 2131232783,2034846031, 2034846079, 2130772225, 2135509375, 2135509327};
 80a0574:	4d07      	ldr	r5, [pc, #28]	; (80a0594 <_Z3numi+0x28>)
 80a0576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a057e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0582:	e884 0003 	stmia.w	r4, {r0, r1}
return numArray[val];
 80a0586:	ab0a      	add	r3, sp, #40	; 0x28
 80a0588:	eb03 0686 	add.w	r6, r3, r6, lsl #2
}
 80a058c:	f856 0c28 	ldr.w	r0, [r6, #-40]
 80a0590:	b00a      	add	sp, #40	; 0x28
 80a0592:	bd70      	pop	{r4, r5, r6, pc}
 80a0594:	080a9000 	.word	0x080a9000

080a0598 <_Z12encode64Condythhhhb>:
void encode64Cond(uint64_t enCond, uint16_t inpix, uint8_t length, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a0598:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a059a:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80a059e:	4d19      	ldr	r5, [pc, #100]	; (80a0604 <_Z12encode64Condythhhhb+0x6c>)
 80a05a0:	0092      	lsls	r2, r2, #2
    if(erase){
 80a05a2:	b14c      	cbz	r4, 80a05b8 <_Z12encode64Condythhhhb+0x20>
 80a05a4:	2400      	movs	r4, #0
                screenArray[i+inpix] = 0;
 80a05a6:	46a6      	mov	lr, r4
 80a05a8:	eb05 0c02 	add.w	ip, r5, r2
        for(i = 0; i < length; i++){
 80a05ac:	42a3      	cmp	r3, r4
 80a05ae:	dd03      	ble.n	80a05b8 <_Z12encode64Condythhhhb+0x20>
                screenArray[i+inpix] = 0;
 80a05b0:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
        for(i = 0; i < length; i++){
 80a05b4:	3401      	adds	r4, #1
 80a05b6:	e7f9      	b.n	80a05ac <_Z12encode64Condythhhhb+0x14>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a05b8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 80a05bc:	f89d c018 	ldrb.w	ip, [sp, #24]
 80a05c0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a05c4:	4415      	add	r5, r2
 80a05c6:	fb0e 440c 	mla	r4, lr, ip, r4
 80a05ca:	f89d c014 	ldrb.w	ip, [sp, #20]
 80a05ce:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80a060c <_Z12encode64Condythhhhb+0x74>
 80a05d2:	fb0e 4c0c 	mla	ip, lr, ip, r4
 80a05d6:	2400      	movs	r4, #0
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a05d8:	4622      	mov	r2, r4
    for(i = 0; i < length; i++){
 80a05da:	42a3      	cmp	r3, r4
 80a05dc:	dd0e      	ble.n	80a05fc <_Z12encode64Condythhhhb+0x64>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a05de:	4617      	mov	r7, r2
 80a05e0:	f000 0601 	and.w	r6, r0, #1
 80a05e4:	ea56 0e07 	orrs.w	lr, r6, r7
        encNum = encNum >> 1;
 80a05e8:	ea4f 0050 	mov.w	r0, r0, lsr #1
            screenArray[i+inpix] = encodeColor(R,G,B);
 80a05ec:	bf18      	it	ne
 80a05ee:	f845 c024 	strne.w	ip, [r5, r4, lsl #2]
        encNum = encNum >> 1;
 80a05f2:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80a05f6:	3401      	adds	r4, #1
 80a05f8:	0849      	lsrs	r1, r1, #1
    for(i = 0; i < length; i++){
 80a05fa:	e7ee      	b.n	80a05da <_Z12encode64Condythhhhb+0x42>
 80a05fc:	4a02      	ldr	r2, [pc, #8]	; (80a0608 <_Z12encode64Condythhhhb+0x70>)
 80a05fe:	6013      	str	r3, [r2, #0]
}
 80a0600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0602:	bf00      	nop
 80a0604:	200002a0 	.word	0x200002a0
 80a0608:	2000027c 	.word	0x2000027c
 80a060c:	000f4240 	.word	0x000f4240

080a0610 <_Z12encode32Condmthhhhb>:
void encode32Cond(uint32_t enCond, uint16_t inpix, uint8_t length, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a0610:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0612:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0616:	4d12      	ldr	r5, [pc, #72]	; (80a0660 <_Z12encode32Condmthhhhb+0x50>)
 80a0618:	0089      	lsls	r1, r1, #2
    if(erase){
 80a061a:	b144      	cbz	r4, 80a062e <_Z12encode32Condmthhhhb+0x1e>
 80a061c:	2400      	movs	r4, #0
                screenArray[i+inpix] = 0;
 80a061e:	4627      	mov	r7, r4
 80a0620:	186e      	adds	r6, r5, r1
        for(i = 0; i < length; i++){
 80a0622:	42a2      	cmp	r2, r4
 80a0624:	dd03      	ble.n	80a062e <_Z12encode32Condmthhhhb+0x1e>
                screenArray[i+inpix] = 0;
 80a0626:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
        for(i = 0; i < length; i++){
 80a062a:	3401      	adds	r4, #1
 80a062c:	e7f9      	b.n	80a0622 <_Z12encode32Condmthhhhb+0x12>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a062e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a0632:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a0636:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a063a:	4429      	add	r1, r5
 80a063c:	fb07 6404 	mla	r4, r7, r4, r6
 80a0640:	4e08      	ldr	r6, [pc, #32]	; (80a0664 <_Z12encode32Condmthhhhb+0x54>)
 80a0642:	fb06 4303 	mla	r3, r6, r3, r4
 80a0646:	2400      	movs	r4, #0
    for(i = 0; i < length; i++){
 80a0648:	42a2      	cmp	r2, r4
 80a064a:	dd06      	ble.n	80a065a <_Z12encode32Condmthhhhb+0x4a>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a064c:	07c5      	lsls	r5, r0, #31
            screenArray[i+inpix] = encodeColor(R,G,B);
 80a064e:	bf48      	it	mi
 80a0650:	f841 3024 	strmi.w	r3, [r1, r4, lsl #2]
        encNum = encNum >> 1;
 80a0654:	0840      	lsrs	r0, r0, #1
    for(i = 0; i < length; i++){
 80a0656:	3401      	adds	r4, #1
 80a0658:	e7f6      	b.n	80a0648 <_Z12encode32Condmthhhhb+0x38>
 80a065a:	4b03      	ldr	r3, [pc, #12]	; (80a0668 <_Z12encode32Condmthhhhb+0x58>)
 80a065c:	601a      	str	r2, [r3, #0]
}
 80a065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0660:	200002a0 	.word	0x200002a0
 80a0664:	000f4240 	.word	0x000f4240
 80a0668:	2000027c 	.word	0x2000027c

080a066c <_Z11encode8Condhthhhhb>:
void encode8Cond(uint8_t enCond, uint16_t inpix, uint8_t length, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a066e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0672:	4d12      	ldr	r5, [pc, #72]	; (80a06bc <_Z11encode8Condhthhhhb+0x50>)
 80a0674:	0089      	lsls	r1, r1, #2
    if(erase){
 80a0676:	b144      	cbz	r4, 80a068a <_Z11encode8Condhthhhhb+0x1e>
 80a0678:	2400      	movs	r4, #0
                screenArray[i+inpix] = 0;
 80a067a:	4627      	mov	r7, r4
 80a067c:	186e      	adds	r6, r5, r1
        for(i = 0; i < length; i++){
 80a067e:	42a2      	cmp	r2, r4
 80a0680:	dd03      	ble.n	80a068a <_Z11encode8Condhthhhhb+0x1e>
                screenArray[i+inpix] = 0;
 80a0682:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
        for(i = 0; i < length; i++){
 80a0686:	3401      	adds	r4, #1
 80a0688:	e7f9      	b.n	80a067e <_Z11encode8Condhthhhhb+0x12>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a068a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a068e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80a0692:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a0696:	4429      	add	r1, r5
 80a0698:	fb07 6404 	mla	r4, r7, r4, r6
 80a069c:	4e08      	ldr	r6, [pc, #32]	; (80a06c0 <_Z11encode8Condhthhhhb+0x54>)
 80a069e:	fb06 4303 	mla	r3, r6, r3, r4
 80a06a2:	2400      	movs	r4, #0
    for(i = 0; i < length; i++){
 80a06a4:	42a2      	cmp	r2, r4
 80a06a6:	dd06      	ble.n	80a06b6 <_Z11encode8Condhthhhhb+0x4a>
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a06a8:	07c5      	lsls	r5, r0, #31
            screenArray[i+inpix] = encodeColor(R,G,B);
 80a06aa:	bf48      	it	mi
 80a06ac:	f841 3024 	strmi.w	r3, [r1, r4, lsl #2]
        encNum = encNum >> 1;
 80a06b0:	0840      	lsrs	r0, r0, #1
    for(i = 0; i < length; i++){
 80a06b2:	3401      	adds	r4, #1
 80a06b4:	e7f6      	b.n	80a06a4 <_Z11encode8Condhthhhhb+0x38>
 80a06b6:	4b03      	ldr	r3, [pc, #12]	; (80a06c4 <_Z11encode8Condhthhhhb+0x58>)
 80a06b8:	601a      	str	r2, [r3, #0]
}
 80a06ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a06bc:	200002a0 	.word	0x200002a0
 80a06c0:	000f4240 	.word	0x000f4240
 80a06c4:	2000027c 	.word	0x2000027c

080a06c8 <_Z16displayConditiontthhhb>:
void displayCondition(uint16_t cnum, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a06c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a06cc:	4616      	mov	r6, r2
    if(cltr[0] == 'd')
 80a06ce:	4a74      	ldr	r2, [pc, #464]	; (80a08a0 <_Z16displayConditiontthhhb+0x1d8>)
void displayCondition(uint16_t cnum, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a06d0:	b086      	sub	sp, #24
    if(cltr[0] == 'd')
 80a06d2:	7812      	ldrb	r2, [r2, #0]
void displayCondition(uint16_t cnum, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a06d4:	461f      	mov	r7, r3
    if(cltr[0] == 'd')
 80a06d6:	2a64      	cmp	r2, #100	; 0x64
 80a06d8:	f5a0 7348 	sub.w	r3, r0, #800	; 0x320
void displayCondition(uint16_t cnum, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool erase){
 80a06dc:	4604      	mov	r4, r0
 80a06de:	460d      	mov	r5, r1
 80a06e0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 80a06e4:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80a06e8:	b29b      	uxth	r3, r3
 80a06ea:	f2a0 3922 	subw	r9, r0, #802	; 0x322
    if(cltr[0] == 'd')
 80a06ee:	d15b      	bne.n	80a07a8 <_Z16displayConditiontthhhb+0xe0>
        if(cnum == 800 || cnum == 801 || cnum == 721)                       //Clear or Haze
 80a06f0:	2b01      	cmp	r3, #1
 80a06f2:	d903      	bls.n	80a06fc <_Z16displayConditiontthhhb+0x34>
 80a06f4:	f240 23d1 	movw	r3, #721	; 0x2d1
 80a06f8:	4298      	cmp	r0, r3
 80a06fa:	d12a      	bne.n	80a0752 <_Z16displayConditiontthhhb+0x8a>
            encode64Cond(2251921634885640,inpix, 64,round(R/1.8),round(G*1.3),0, erase);
 80a06fc:	4630      	mov	r0, r6
 80a06fe:	f004 ffff 	bl	80a5700 <__aeabi_i2d>
 80a0702:	a359      	add	r3, pc, #356	; (adr r3, 80a0868 <_Z16displayConditiontthhhb+0x1a0>)
 80a0704:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0708:	f005 f98e 	bl	80a5a28 <__aeabi_ddiv>
 80a070c:	f004 fe5e 	bl	80a53cc <round>
 80a0710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0714:	4638      	mov	r0, r7
 80a0716:	f004 fff3 	bl	80a5700 <__aeabi_i2d>
 80a071a:	a355      	add	r3, pc, #340	; (adr r3, 80a0870 <_Z16displayConditiontthhhb+0x1a8>)
 80a071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0720:	f005 f858 	bl	80a57d4 <__aeabi_dmul>
 80a0724:	f004 fe52 	bl	80a53cc <round>
 80a0728:	2300      	movs	r3, #0
 80a072a:	f8cd 800c 	str.w	r8, [sp, #12]
 80a072e:	9302      	str	r3, [sp, #8]
 80a0730:	f005 fb12 	bl	80a5d58 <__aeabi_d2uiz>
 80a0734:	b2c0      	uxtb	r0, r0
 80a0736:	9001      	str	r0, [sp, #4]
 80a0738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a073c:	f005 fb0c 	bl	80a5d58 <__aeabi_d2uiz>
 80a0740:	b2c0      	uxtb	r0, r0
 80a0742:	9000      	str	r0, [sp, #0]
 80a0744:	2340      	movs	r3, #64	; 0x40
 80a0746:	a14c      	add	r1, pc, #304	; (adr r1, 80a0878 <_Z16displayConditiontthhhb+0x1b0>)
 80a0748:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a074c:	462a      	mov	r2, r5
 80a074e:	f7ff ff23 	bl	80a0598 <_Z12encode64Condythhhhb>
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
 80a0752:	fa1f f989 	uxth.w	r9, r9
 80a0756:	f1b9 0f01 	cmp.w	r9, #1
 80a075a:	d86f      	bhi.n	80a083c <_Z16displayConditiontthhhb+0x174>
            encode64Cond(17264541704,inpix, 64, R,G*1.9,0, erase);
 80a075c:	2300      	movs	r3, #0
 80a075e:	4638      	mov	r0, r7
 80a0760:	9302      	str	r3, [sp, #8]
 80a0762:	f8cd 800c 	str.w	r8, [sp, #12]
 80a0766:	f004 ffcb 	bl	80a5700 <__aeabi_i2d>
 80a076a:	a345      	add	r3, pc, #276	; (adr r3, 80a0880 <_Z16displayConditiontthhhb+0x1b8>)
 80a076c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0770:	f005 f830 	bl	80a57d4 <__aeabi_dmul>
 80a0774:	f005 faf0 	bl	80a5d58 <__aeabi_d2uiz>
 80a0778:	b2c0      	uxtb	r0, r0
 80a077a:	2340      	movs	r3, #64	; 0x40
 80a077c:	462a      	mov	r2, r5
 80a077e:	e9cd 6000 	strd	r6, r0, [sp]
 80a0782:	a141      	add	r1, pc, #260	; (adr r1, 80a0888 <_Z16displayConditiontthhhb+0x1c0>)
 80a0784:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0788:	f7ff ff06 	bl	80a0598 <_Z12encode64Condythhhhb>
            encode64Cond(1168745917412540416,inpix, 64,R,G,B, erase);
 80a078c:	a140      	add	r1, pc, #256	; (adr r1, 80a0890 <_Z16displayConditiontthhhb+0x1c8>)
 80a078e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0792:	2340      	movs	r3, #64	; 0x40
 80a0794:	462a      	mov	r2, r5
 80a0796:	e9cd a802 	strd	sl, r8, [sp, #8]
 80a079a:	e9cd 6700 	strd	r6, r7, [sp]
 80a079e:	f7ff fefb 	bl	80a0598 <_Z12encode64Condythhhhb>
}
 80a07a2:	b006      	add	sp, #24
 80a07a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(cnum == 800 || cnum == 801 || cnum == 721)
 80a07a8:	2b01      	cmp	r3, #1
 80a07aa:	d903      	bls.n	80a07b4 <_Z16displayConditiontthhhb+0xec>
 80a07ac:	f240 23d1 	movw	r3, #721	; 0x2d1
 80a07b0:	4298      	cmp	r0, r3
 80a07b2:	d119      	bne.n	80a07e8 <_Z16displayConditiontthhhb+0x120>
            encode64Cond(68716846972928,inpix, 64, R,G*1.2,B/3, erase);
 80a07b4:	2303      	movs	r3, #3
 80a07b6:	fbba f3f3 	udiv	r3, sl, r3
 80a07ba:	4638      	mov	r0, r7
 80a07bc:	9302      	str	r3, [sp, #8]
 80a07be:	f8cd 800c 	str.w	r8, [sp, #12]
 80a07c2:	f004 ff9d 	bl	80a5700 <__aeabi_i2d>
 80a07c6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a07ca:	4b36      	ldr	r3, [pc, #216]	; (80a08a4 <_Z16displayConditiontthhhb+0x1dc>)
 80a07cc:	f005 f802 	bl	80a57d4 <__aeabi_dmul>
 80a07d0:	f005 fac2 	bl	80a5d58 <__aeabi_d2uiz>
 80a07d4:	b2c0      	uxtb	r0, r0
 80a07d6:	e9cd 6000 	strd	r6, r0, [sp]
 80a07da:	2340      	movs	r3, #64	; 0x40
 80a07dc:	462a      	mov	r2, r5
 80a07de:	f643 617f 	movw	r1, #15999	; 0x3e7f
 80a07e2:	4831      	ldr	r0, [pc, #196]	; (80a08a8 <_Z16displayConditiontthhhb+0x1e0>)
 80a07e4:	f7ff fed8 	bl	80a0598 <_Z12encode64Condythhhhb>
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
 80a07e8:	fa1f f989 	uxth.w	r9, r9
 80a07ec:	f1b9 0f01 	cmp.w	r9, #1
 80a07f0:	d824      	bhi.n	80a083c <_Z16displayConditiontthhhb+0x174>
            encode64Cond(263714,inpix, 64, R,G*1.2,B/3, erase);
 80a07f2:	2303      	movs	r3, #3
 80a07f4:	fbba f3f3 	udiv	r3, sl, r3
 80a07f8:	4638      	mov	r0, r7
 80a07fa:	9302      	str	r3, [sp, #8]
 80a07fc:	f8cd 800c 	str.w	r8, [sp, #12]
 80a0800:	f004 ff7e 	bl	80a5700 <__aeabi_i2d>
 80a0804:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a0808:	4b26      	ldr	r3, [pc, #152]	; (80a08a4 <_Z16displayConditiontthhhb+0x1dc>)
 80a080a:	f004 ffe3 	bl	80a57d4 <__aeabi_dmul>
 80a080e:	f005 faa3 	bl	80a5d58 <__aeabi_d2uiz>
 80a0812:	b2c0      	uxtb	r0, r0
 80a0814:	462a      	mov	r2, r5
 80a0816:	e9cd 6000 	strd	r6, r0, [sp]
 80a081a:	2340      	movs	r3, #64	; 0x40
 80a081c:	2100      	movs	r1, #0
 80a081e:	4823      	ldr	r0, [pc, #140]	; (80a08ac <_Z16displayConditiontthhhb+0x1e4>)
 80a0820:	f7ff feba 	bl	80a0598 <_Z12encode64Condythhhhb>
            encode64Cond(17833647421456,inpix, 64,R,G,B, erase);
 80a0824:	2340      	movs	r3, #64	; 0x40
 80a0826:	462a      	mov	r2, r5
 80a0828:	f241 0138 	movw	r1, #4152	; 0x1038
 80a082c:	e9cd a802 	strd	sl, r8, [sp, #8]
 80a0830:	e9cd 6700 	strd	r6, r7, [sp]
 80a0834:	481e      	ldr	r0, [pc, #120]	; (80a08b0 <_Z16displayConditiontthhhb+0x1e8>)
 80a0836:	f7ff feaf 	bl	80a0598 <_Z12encode64Condythhhhb>
 80a083a:	e7b2      	b.n	80a07a2 <_Z16displayConditiontthhhb+0xda>
    if((cnum > 199 && cnum < 721) || (cnum > 730 && cnum < 772)){
 80a083c:	f1a4 03c8 	sub.w	r3, r4, #200	; 0xc8
 80a0840:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80a0844:	d80b      	bhi.n	80a085e <_Z16displayConditiontthhhb+0x196>
        encode64Cond(570676717487874,inpix, 64, R,G,B, erase);
 80a0846:	a114      	add	r1, pc, #80	; (adr r1, 80a0898 <_Z16displayConditiontthhhb+0x1d0>)
 80a0848:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a084c:	2340      	movs	r3, #64	; 0x40
 80a084e:	462a      	mov	r2, r5
 80a0850:	e9cd a802 	strd	sl, r8, [sp, #8]
 80a0854:	e9cd 6700 	strd	r6, r7, [sp]
 80a0858:	f7ff fe9e 	bl	80a0598 <_Z12encode64Condythhhhb>
}
 80a085c:	e7a1      	b.n	80a07a2 <_Z16displayConditiontthhhb+0xda>
    if((cnum > 199 && cnum < 721) || (cnum > 730 && cnum < 772)){
 80a085e:	f2a4 24db 	subw	r4, r4, #731	; 0x2db
 80a0862:	2c28      	cmp	r4, #40	; 0x28
 80a0864:	d9ef      	bls.n	80a0846 <_Z16displayConditiontthhhb+0x17e>
 80a0866:	e79c      	b.n	80a07a2 <_Z16displayConditiontthhhb+0xda>
 80a0868:	cccccccd 	.word	0xcccccccd
 80a086c:	3ffccccc 	.word	0x3ffccccc
 80a0870:	cccccccd 	.word	0xcccccccd
 80a0874:	3ff4cccc 	.word	0x3ff4cccc
 80a0878:	5d1c0008 	.word	0x5d1c0008
 80a087c:	0008001c 	.word	0x0008001c
 80a0880:	66666666 	.word	0x66666666
 80a0884:	3ffe6666 	.word	0x3ffe6666
 80a0888:	050c0008 	.word	0x050c0008
 80a088c:	00000004 	.word	0x00000004
 80a0890:	38100000 	.word	0x38100000
 80a0894:	10383838 	.word	0x10383838
 80a0898:	07070702 	.word	0x07070702
 80a089c:	00020707 	.word	0x00020707
 80a08a0:	20000264 	.word	0x20000264
 80a08a4:	3ff33333 	.word	0x3ff33333
 80a08a8:	63410000 	.word	0x63410000
 80a08ac:	00040622 	.word	0x00040622
 80a08b0:	38383810 	.word	0x38383810

080a08b4 <_Z13displayNumberhthhhb>:
void displayNumber(uint8_t val, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a08b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08b6:	461d      	mov	r5, r3
 80a08b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a08bc:	460f      	mov	r7, r1
 80a08be:	4614      	mov	r4, r2
    if(small){
 80a08c0:	b173      	cbz	r3, 80a08e0 <_Z13displayNumberhthhhb+0x2c>
        encNum = snum(val);
 80a08c2:	f7ff fe3d 	bl	80a0540 <_Z4snumi>
    for(i = 0; i < 32; i++){
 80a08c6:	463b      	mov	r3, r7
            screenArray[i+inpix] = 0;
 80a08c8:	2600      	movs	r6, #0
 80a08ca:	4913      	ldr	r1, [pc, #76]	; (80a0918 <_Z13displayNumberhthhhb+0x64>)
 80a08cc:	f107 0220 	add.w	r2, r7, #32
    for(i = 0; i < 32; i++){
 80a08d0:	429a      	cmp	r2, r3
 80a08d2:	d008      	beq.n	80a08e6 <_Z13displayNumberhthhhb+0x32>
        if(i+inpix >= 0){
 80a08d4:	2b00      	cmp	r3, #0
            screenArray[i+inpix] = 0;
 80a08d6:	bfa8      	it	ge
 80a08d8:	f841 6023 	strge.w	r6, [r1, r3, lsl #2]
    for(i = 0; i < 32; i++){
 80a08dc:	3301      	adds	r3, #1
 80a08de:	e7f7      	b.n	80a08d0 <_Z13displayNumberhthhhb+0x1c>
        encNum = num(val);
 80a08e0:	f7ff fe44 	bl	80a056c <_Z3numi>
 80a08e4:	e7ef      	b.n	80a08c6 <_Z13displayNumberhthhhb+0x12>
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
 80a08e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a08ea:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a08ee:	490a      	ldr	r1, [pc, #40]	; (80a0918 <_Z13displayNumberhthhhb+0x64>)
 80a08f0:	fb02 3505 	mla	r5, r2, r5, r3
 80a08f4:	2300      	movs	r3, #0
 80a08f6:	4a09      	ldr	r2, [pc, #36]	; (80a091c <_Z13displayNumberhthhhb+0x68>)
 80a08f8:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80a08fc:	fb02 5404 	mla	r4, r2, r4, r5
        if((encNum & 1) == 1 && (i + inpix) >= 0){
 80a0900:	07c2      	lsls	r2, r0, #31
            screenArray[i+inpix] = B+(1000*G)+(1000000*R);
 80a0902:	bf48      	it	mi
 80a0904:	f841 4023 	strmi.w	r4, [r1, r3, lsl #2]
    for(i = 0; i < 32; i++){
 80a0908:	3301      	adds	r3, #1
 80a090a:	2b20      	cmp	r3, #32
        encNum = encNum >> 1;
 80a090c:	ea4f 0050 	mov.w	r0, r0, lsr #1
    for(i = 0; i < 32; i++){
 80a0910:	d1f6      	bne.n	80a0900 <_Z13displayNumberhthhhb+0x4c>
 80a0912:	4a03      	ldr	r2, [pc, #12]	; (80a0920 <_Z13displayNumberhthhhb+0x6c>)
 80a0914:	6013      	str	r3, [r2, #0]
}
 80a0916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0918:	200002a0 	.word	0x200002a0
 80a091c:	000f4240 	.word	0x000f4240
 80a0920:	2000027c 	.word	0x2000027c

080a0924 <_Z6lettercthhhb>:
uint8_t letter(char ltr, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a0924:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0928:	4604      	mov	r4, r0
    if(charNumber >= 48 && charNumber <= 57){
 80a092a:	3830      	subs	r0, #48	; 0x30
 80a092c:	b2c0      	uxtb	r0, r0
 80a092e:	2809      	cmp	r0, #9
uint8_t letter(char ltr, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a0930:	460d      	mov	r5, r1
 80a0932:	4616      	mov	r6, r2
 80a0934:	461f      	mov	r7, r3
 80a0936:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a093a:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    if(charNumber >= 48 && charNumber <= 57){
 80a093e:	d814      	bhi.n	80a096a <_Z6lettercthhhb+0x46>
        if(small){
 80a0940:	f1bc 0f00 	cmp.w	ip, #0
 80a0944:	d00b      	beq.n	80a095e <_Z6lettercthhhb+0x3a>
            displayNumber((charNumber-48),inpix+2,R,G,B,true);
 80a0946:	2401      	movs	r4, #1
 80a0948:	3102      	adds	r1, #2
 80a094a:	e9cd 8400 	strd	r8, r4, [sp]
 80a094e:	b289      	uxth	r1, r1
 80a0950:	f7ff ffb0 	bl	80a08b4 <_Z13displayNumberhthhhb>
            return 3;
 80a0954:	2403      	movs	r4, #3
}
 80a0956:	4620      	mov	r0, r4
 80a0958:	b004      	add	sp, #16
 80a095a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            displayNumber((charNumber-48),inpix,R,G,B,false);
 80a095e:	e9cd 8c00 	strd	r8, ip, [sp]
 80a0962:	f7ff ffa7 	bl	80a08b4 <_Z13displayNumberhthhhb>
        return 4;
 80a0966:	2404      	movs	r4, #4
 80a0968:	e7f5      	b.n	80a0956 <_Z6lettercthhhb+0x32>
    switch (charNumber)
 80a096a:	3c20      	subs	r4, #32
 80a096c:	2c5c      	cmp	r4, #92	; 0x5c
 80a096e:	f200 83ef 	bhi.w	80a1150 <_Z6lettercthhhb+0x82c>
 80a0972:	e8df f014 	tbh	[pc, r4, lsl #1]
 80a0976:	005d      	.short	0x005d
 80a0978:	00710067 	.word	0x00710067
 80a097c:	03ed03ed 	.word	0x03ed03ed
 80a0980:	03ed03ed 	.word	0x03ed03ed
 80a0984:	0087007d 	.word	0x0087007d
 80a0988:	03ed0093 	.word	0x03ed0093
 80a098c:	00aa009f 	.word	0x00aa009f
 80a0990:	00c000b4 	.word	0x00c000b4
 80a0994:	03ed00ca 	.word	0x03ed00ca
 80a0998:	03ed03ed 	.word	0x03ed03ed
 80a099c:	03ed03ed 	.word	0x03ed03ed
 80a09a0:	03ed03ed 	.word	0x03ed03ed
 80a09a4:	03ed03ed 	.word	0x03ed03ed
 80a09a8:	00d503ed 	.word	0x00d503ed
 80a09ac:	00e900df 	.word	0x00e900df
 80a09b0:	00ff00f4 	.word	0x00ff00f4
 80a09b4:	03ed010a 	.word	0x03ed010a
 80a09b8:	01200115 	.word	0x01200115
 80a09bc:	0136012b 	.word	0x0136012b
 80a09c0:	014c0141 	.word	0x014c0141
 80a09c4:	01620157 	.word	0x01620157
 80a09c8:	0178016d 	.word	0x0178016d
 80a09cc:	018e0183 	.word	0x018e0183
 80a09d0:	01af0199 	.word	0x01af0199
 80a09d4:	01d001c5 	.word	0x01d001c5
 80a09d8:	01e601db 	.word	0x01e601db
 80a09dc:	01fc01f1 	.word	0x01fc01f1
 80a09e0:	021d0212 	.word	0x021d0212
 80a09e4:	02770261 	.word	0x02770261
 80a09e8:	02980282 	.word	0x02980282
 80a09ec:	03ed02a3 	.word	0x03ed02a3
 80a09f0:	03ed02af 	.word	0x03ed02af
 80a09f4:	007d03ed 	.word	0x007d03ed
 80a09f8:	02c602bb 	.word	0x02c602bb
 80a09fc:	02dc02d1 	.word	0x02dc02d1
 80a0a00:	02f202e7 	.word	0x02f202e7
 80a0a04:	030802fd 	.word	0x030802fd
 80a0a08:	031d0313 	.word	0x031d0313
 80a0a0c:	03e30328 	.word	0x03e30328
 80a0a10:	03490333 	.word	0x03490333
 80a0a14:	035f0354 	.word	0x035f0354
 80a0a18:	0375036a 	.word	0x0375036a
 80a0a1c:	038b0380 	.word	0x038b0380
 80a0a20:	03a10396 	.word	0x03a10396
 80a0a24:	03c203ac 	.word	0x03c203ac
 80a0a28:	03d803cd 	.word	0x03d803cd
 80a0a2c:	03e303ed 	.word	0x03e303ed
        encode8Cond(127,inpix,8,0,0,0,true);
 80a0a30:	2300      	movs	r3, #0
 80a0a32:	2401      	movs	r4, #1
 80a0a34:	2208      	movs	r2, #8
 80a0a36:	207f      	movs	r0, #127	; 0x7f
 80a0a38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80a0a3c:	9300      	str	r3, [sp, #0]
 80a0a3e:	f7ff fe15 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0a42:	e788      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(47,inpix,8,R,G,B,true);
 80a0a44:	2401      	movs	r4, #1
 80a0a46:	4613      	mov	r3, r2
 80a0a48:	202f      	movs	r0, #47	; 0x2f
 80a0a4a:	2208      	movs	r2, #8
 80a0a4c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0a50:	9700      	str	r7, [sp, #0]
 80a0a52:	f7ff fe0b 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0a56:	e77e      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(196611,inpix,24,R,G,B,true);
 80a0a58:	2301      	movs	r3, #1
 80a0a5a:	f04f 1003 	mov.w	r0, #196611	; 0x30003
 80a0a5e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a62:	9700      	str	r7, [sp, #0]
 80a0a64:	4613      	mov	r3, r2
 80a0a66:	2218      	movs	r2, #24
 80a0a68:	f7ff fdd2 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0a6c:	2403      	movs	r4, #3
 80a0a6e:	e772      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(3,inpix,8,R,G,B,true);
 80a0a70:	2401      	movs	r4, #1
 80a0a72:	4613      	mov	r3, r2
 80a0a74:	2003      	movs	r0, #3
 80a0a76:	2208      	movs	r2, #8
 80a0a78:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0a7c:	9700      	str	r7, [sp, #0]
 80a0a7e:	f7ff fdf5 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0a82:	e768      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(16702,inpix,16,R,G,B,true);
 80a0a84:	2301      	movs	r3, #1
 80a0a86:	f244 103e 	movw	r0, #16702	; 0x413e
 80a0a8a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0a8e:	9700      	str	r7, [sp, #0]
 80a0a90:	4613      	mov	r3, r2
 80a0a92:	2210      	movs	r2, #16
 80a0a94:	f7ff fdbc 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 2;
 80a0a98:	2402      	movs	r4, #2
 80a0a9a:	e75c      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(15937,inpix,16,R,G,B,true);
 80a0a9c:	2301      	movs	r3, #1
 80a0a9e:	f643 6041 	movw	r0, #15937	; 0x3e41
 80a0aa2:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0aa6:	9700      	str	r7, [sp, #0]
 80a0aa8:	4613      	mov	r3, r2
 80a0aaa:	2210      	movs	r2, #16
 80a0aac:	f7ff fdb0 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 2;
 80a0ab0:	2402      	movs	r4, #2
 80a0ab2:	e750      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(531464,inpix,24,R,G,B,true);
 80a0ab4:	2301      	movs	r3, #1
 80a0ab6:	48c4      	ldr	r0, [pc, #784]	; (80a0dc8 <_Z6lettercthhhb+0x4a4>)
 80a0ab8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0abc:	9700      	str	r7, [sp, #0]
 80a0abe:	4613      	mov	r3, r2
 80a0ac0:	2218      	movs	r2, #24
 80a0ac2:	f7ff fda5 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0ac6:	2403      	movs	r4, #3
 80a0ac8:	e745      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(96,inpix,8,R,G,B,true);
 80a0aca:	2401      	movs	r4, #1
 80a0acc:	4613      	mov	r3, r2
 80a0ace:	2060      	movs	r0, #96	; 0x60
 80a0ad0:	2208      	movs	r2, #8
 80a0ad2:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0ad6:	9700      	str	r7, [sp, #0]
 80a0ad8:	f7ff fdc8 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0adc:	e73b      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(2056,inpix,16,R,G,B,true);
 80a0ade:	2301      	movs	r3, #1
 80a0ae0:	f640 0008 	movw	r0, #2056	; 0x808
 80a0ae4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ae8:	9700      	str	r7, [sp, #0]
 80a0aea:	4613      	mov	r3, r2
 80a0aec:	2210      	movs	r2, #16
 80a0aee:	f7ff fd8f 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 2;
 80a0af2:	2402      	movs	r4, #2
 80a0af4:	e72f      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(64,inpix,8,R,G,B,true);
 80a0af6:	2401      	movs	r4, #1
 80a0af8:	4613      	mov	r3, r2
 80a0afa:	2040      	movs	r0, #64	; 0x40
 80a0afc:	2208      	movs	r2, #8
 80a0afe:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0b02:	9700      	str	r7, [sp, #0]
 80a0b04:	f7ff fdb2 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0b08:	e725      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(399456,inpix,24,R,G,B,true);
 80a0b0a:	2301      	movs	r3, #1
 80a0b0c:	48af      	ldr	r0, [pc, #700]	; (80a0dcc <_Z6lettercthhhb+0x4a8>)
 80a0b0e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b12:	9700      	str	r7, [sp, #0]
 80a0b14:	4613      	mov	r3, r2
 80a0b16:	2218      	movs	r2, #24
 80a0b18:	f7ff fd7a 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;   
 80a0b1c:	2403      	movs	r4, #3
 80a0b1e:	e71a      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(34,inpix,8,R,G,B,true);
 80a0b20:	2401      	movs	r4, #1
 80a0b22:	4613      	mov	r3, r2
 80a0b24:	2022      	movs	r0, #34	; 0x22
 80a0b26:	2208      	movs	r2, #8
 80a0b28:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0b2c:	9700      	str	r7, [sp, #0]
 80a0b2e:	f7ff fd9d 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0b32:	e710      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(98,inpix,8,R,G,B,true);
 80a0b34:	2401      	movs	r4, #1
 80a0b36:	4613      	mov	r3, r2
 80a0b38:	2062      	movs	r0, #98	; 0x62
 80a0b3a:	2208      	movs	r2, #8
 80a0b3c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0b40:	9700      	str	r7, [sp, #0]
 80a0b42:	f7ff fd93 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0b46:	e706      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(2233352,inpix,24,R,G,B,true);
 80a0b48:	2301      	movs	r3, #1
 80a0b4a:	48a1      	ldr	r0, [pc, #644]	; (80a0dd0 <_Z6lettercthhhb+0x4ac>)
 80a0b4c:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b50:	9700      	str	r7, [sp, #0]
 80a0b52:	4613      	mov	r3, r2
 80a0b54:	2218      	movs	r2, #24
 80a0b56:	f7ff fd5b 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0b5a:	2403      	movs	r4, #3
 80a0b5c:	e6fb      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1315860,inpix,24,R,G,B,true);
 80a0b5e:	2301      	movs	r3, #1
 80a0b60:	489c      	ldr	r0, [pc, #624]	; (80a0dd4 <_Z6lettercthhhb+0x4b0>)
 80a0b62:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b66:	9700      	str	r7, [sp, #0]
 80a0b68:	4613      	mov	r3, r2
 80a0b6a:	2218      	movs	r2, #24
 80a0b6c:	f7ff fd50 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0b70:	2403      	movs	r4, #3
 80a0b72:	e6f0      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(529442,inpix,24,R,G,B,true);
 80a0b74:	2301      	movs	r3, #1
 80a0b76:	4898      	ldr	r0, [pc, #608]	; (80a0dd8 <_Z6lettercthhhb+0x4b4>)
 80a0b78:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b7c:	9700      	str	r7, [sp, #0]
 80a0b7e:	4613      	mov	r3, r2
 80a0b80:	2218      	movs	r2, #24
 80a0b82:	f7ff fd45 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0b86:	2403      	movs	r4, #3
 80a0b88:	e6e5      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1005827,inpix,24,R,G,B,true);
 80a0b8a:	2301      	movs	r3, #1
 80a0b8c:	4893      	ldr	r0, [pc, #588]	; (80a0ddc <_Z6lettercthhhb+0x4b8>)
 80a0b8e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0b92:	9700      	str	r7, [sp, #0]
 80a0b94:	4613      	mov	r3, r2
 80a0b96:	2218      	movs	r2, #24
 80a0b98:	f7ff fd3a 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0b9c:	2403      	movs	r4, #3
 80a0b9e:	e6da      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(2114521470,inpix,32,R,G,B,true);
 80a0ba0:	2301      	movs	r3, #1
 80a0ba2:	488f      	ldr	r0, [pc, #572]	; (80a0de0 <_Z6lettercthhhb+0x4bc>)
 80a0ba4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ba8:	9700      	str	r7, [sp, #0]
 80a0baa:	4613      	mov	r3, r2
 80a0bac:	2220      	movs	r2, #32
 80a0bae:	f7ff fd2f 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0bb2:	2404      	movs	r4, #4
 80a0bb4:	e6cf      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(910772607,inpix,32,R,G,B,true);
 80a0bb6:	2301      	movs	r3, #1
 80a0bb8:	488a      	ldr	r0, [pc, #552]	; (80a0de4 <_Z6lettercthhhb+0x4c0>)
 80a0bba:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0bbe:	9700      	str	r7, [sp, #0]
 80a0bc0:	4613      	mov	r3, r2
 80a0bc2:	2220      	movs	r2, #32
 80a0bc4:	f7ff fd24 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0bc8:	2404      	movs	r4, #4
 80a0bca:	e6c4      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(574701886,inpix,32,R,G,B,true);
 80a0bcc:	2301      	movs	r3, #1
 80a0bce:	4886      	ldr	r0, [pc, #536]	; (80a0de8 <_Z6lettercthhhb+0x4c4>)
 80a0bd0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0bd4:	9700      	str	r7, [sp, #0]
 80a0bd6:	4613      	mov	r3, r2
 80a0bd8:	2220      	movs	r2, #32
 80a0bda:	f7ff fd19 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0bde:	2404      	movs	r4, #4
 80a0be0:	e6b9      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1044463999,inpix,32,R,G,B,true);
 80a0be2:	2301      	movs	r3, #1
 80a0be4:	4881      	ldr	r0, [pc, #516]	; (80a0dec <_Z6lettercthhhb+0x4c8>)
 80a0be6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0bea:	9700      	str	r7, [sp, #0]
 80a0bec:	4613      	mov	r3, r2
 80a0bee:	2220      	movs	r2, #32
 80a0bf0:	f7ff fd0e 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0bf4:	2404      	movs	r4, #4
 80a0bf6:	e6ae      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1095321983,inpix,32,R,G,B,true);
 80a0bf8:	2301      	movs	r3, #1
 80a0bfa:	487d      	ldr	r0, [pc, #500]	; (80a0df0 <_Z6lettercthhhb+0x4cc>)
 80a0bfc:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c00:	9700      	str	r7, [sp, #0]
 80a0c02:	4613      	mov	r3, r2
 80a0c04:	2220      	movs	r2, #32
 80a0c06:	f7ff fd03 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0c0a:	2404      	movs	r4, #4
 80a0c0c:	e6a3      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(17369471,inpix,32,R,G,B,true);
 80a0c0e:	2301      	movs	r3, #1
 80a0c10:	4878      	ldr	r0, [pc, #480]	; (80a0df4 <_Z6lettercthhhb+0x4d0>)
 80a0c12:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c16:	9700      	str	r7, [sp, #0]
 80a0c18:	4613      	mov	r3, r2
 80a0c1a:	2220      	movs	r2, #32
 80a0c1c:	f7ff fcf8 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0c20:	2404      	movs	r4, #4
 80a0c22:	e698      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(2018066815,inpix,32,R,G,B,true);
 80a0c24:	2301      	movs	r3, #1
 80a0c26:	4874      	ldr	r0, [pc, #464]	; (80a0df8 <_Z6lettercthhhb+0x4d4>)
 80a0c28:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c2c:	9700      	str	r7, [sp, #0]
 80a0c2e:	4613      	mov	r3, r2
 80a0c30:	2220      	movs	r2, #32
 80a0c32:	f7ff fced 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0c36:	2404      	movs	r4, #4
 80a0c38:	e68d      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(2131232895,inpix,32,R,G,B,true);
 80a0c3a:	2301      	movs	r3, #1
 80a0c3c:	486f      	ldr	r0, [pc, #444]	; (80a0dfc <_Z6lettercthhhb+0x4d8>)
 80a0c3e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c42:	9700      	str	r7, [sp, #0]
 80a0c44:	4613      	mov	r3, r2
 80a0c46:	2220      	movs	r2, #32
 80a0c48:	f7ff fce2 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0c4c:	2404      	movs	r4, #4
 80a0c4e:	e682      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(4292417,inpix,24,R,G,B,true);
 80a0c50:	2301      	movs	r3, #1
 80a0c52:	486b      	ldr	r0, [pc, #428]	; (80a0e00 <_Z6lettercthhhb+0x4dc>)
 80a0c54:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c58:	9700      	str	r7, [sp, #0]
 80a0c5a:	4613      	mov	r3, r2
 80a0c5c:	2218      	movs	r2, #24
 80a0c5e:	f7ff fcd7 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0c62:	2403      	movs	r4, #3
 80a0c64:	e677      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(20922657,inpix,32,R,G,B,true);
 80a0c66:	2301      	movs	r3, #1
 80a0c68:	4866      	ldr	r0, [pc, #408]	; (80a0e04 <_Z6lettercthhhb+0x4e0>)
 80a0c6a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c6e:	9700      	str	r7, [sp, #0]
 80a0c70:	4613      	mov	r3, r2
 80a0c72:	2220      	movs	r2, #32
 80a0c74:	f7ff fccc 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0c78:	2404      	movs	r4, #4
 80a0c7a:	e66c      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1997015167,inpix,32,R,G,B,true);
 80a0c7c:	2301      	movs	r3, #1
 80a0c7e:	4862      	ldr	r0, [pc, #392]	; (80a0e08 <_Z6lettercthhhb+0x4e4>)
 80a0c80:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c84:	9700      	str	r7, [sp, #0]
 80a0c86:	4613      	mov	r3, r2
 80a0c88:	2220      	movs	r2, #32
 80a0c8a:	f7ff fcc1 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0c8e:	2404      	movs	r4, #4
 80a0c90:	e661      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1077952639,inpix,32,R,G,B,true);
 80a0c92:	2301      	movs	r3, #1
 80a0c94:	485d      	ldr	r0, [pc, #372]	; (80a0e0c <_Z6lettercthhhb+0x4e8>)
 80a0c96:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0c9a:	9700      	str	r7, [sp, #0]
 80a0c9c:	4613      	mov	r3, r2
 80a0c9e:	2220      	movs	r2, #32
 80a0ca0:	f7ff fcb6 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0ca4:	2404      	movs	r4, #4
 80a0ca6:	e656      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(127,inpix+32,8,R,G,B,true);
 80a0ca8:	2401      	movs	r4, #1
 80a0caa:	3120      	adds	r1, #32
 80a0cac:	4613      	mov	r3, r2
 80a0cae:	207f      	movs	r0, #127	; 0x7f
 80a0cb0:	2208      	movs	r2, #8
 80a0cb2:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0cb6:	b289      	uxth	r1, r1
 80a0cb8:	9700      	str	r7, [sp, #0]
 80a0cba:	f7ff fcd7 	bl	80a066c <_Z11encode8Condhthhhhb>
        encode32Cond(25035135,inpix,32,R,G,B,true);
 80a0cbe:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0cc2:	4633      	mov	r3, r6
 80a0cc4:	2220      	movs	r2, #32
 80a0cc6:	4629      	mov	r1, r5
 80a0cc8:	4851      	ldr	r0, [pc, #324]	; (80a0e10 <_Z6lettercthhhb+0x4ec>)
 80a0cca:	9700      	str	r7, [sp, #0]
 80a0ccc:	f7ff fca0 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 5;
 80a0cd0:	2405      	movs	r4, #5
 80a0cd2:	e640      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(127,inpix+32,8,R,G,B,true);
 80a0cd4:	2401      	movs	r4, #1
 80a0cd6:	3120      	adds	r1, #32
 80a0cd8:	4613      	mov	r3, r2
 80a0cda:	207f      	movs	r0, #127	; 0x7f
 80a0cdc:	2208      	movs	r2, #8
 80a0cde:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0ce2:	b289      	uxth	r1, r1
 80a0ce4:	9700      	str	r7, [sp, #0]
 80a0ce6:	f7ff fcc1 	bl	80a066c <_Z11encode8Condhthhhhb>
        encode32Cond(1077805439,inpix,32,R,G,B,true);
 80a0cea:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0cee:	4633      	mov	r3, r6
 80a0cf0:	2220      	movs	r2, #32
 80a0cf2:	4629      	mov	r1, r5
 80a0cf4:	4847      	ldr	r0, [pc, #284]	; (80a0e14 <_Z6lettercthhhb+0x4f0>)
 80a0cf6:	9700      	str	r7, [sp, #0]
 80a0cf8:	f7ff fc8a 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 5;
 80a0cfc:	2405      	movs	r4, #5
 80a0cfe:	e62a      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1044463934,inpix,32,R,G,B,true);
 80a0d00:	2301      	movs	r3, #1
 80a0d02:	4845      	ldr	r0, [pc, #276]	; (80a0e18 <_Z6lettercthhhb+0x4f4>)
 80a0d04:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0d08:	9700      	str	r7, [sp, #0]
 80a0d0a:	4613      	mov	r3, r2
 80a0d0c:	2220      	movs	r2, #32
 80a0d0e:	f7ff fc7f 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0d12:	2404      	movs	r4, #4
 80a0d14:	e61f      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(101255551,inpix,32,R,G,B,true);
 80a0d16:	2301      	movs	r3, #1
 80a0d18:	4840      	ldr	r0, [pc, #256]	; (80a0e1c <_Z6lettercthhhb+0x4f8>)
 80a0d1a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0d1e:	9700      	str	r7, [sp, #0]
 80a0d20:	4613      	mov	r3, r2
 80a0d22:	2220      	movs	r2, #32
 80a0d24:	f7ff fc74 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0d28:	2404      	movs	r4, #4
 80a0d2a:	e614      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(522273086,inpix,32,R,G,B,true);
 80a0d2c:	2301      	movs	r3, #1
 80a0d2e:	483c      	ldr	r0, [pc, #240]	; (80a0e20 <_Z6lettercthhhb+0x4fc>)
 80a0d30:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0d34:	9700      	str	r7, [sp, #0]
 80a0d36:	4613      	mov	r3, r2
 80a0d38:	2220      	movs	r2, #32
 80a0d3a:	f7ff fc69 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0d3e:	2404      	movs	r4, #4
 80a0d40:	e609      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(826886527,inpix,32,R,G,B,true);
 80a0d42:	2301      	movs	r3, #1
 80a0d44:	4837      	ldr	r0, [pc, #220]	; (80a0e24 <_Z6lettercthhhb+0x500>)
 80a0d46:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0d4a:	9700      	str	r7, [sp, #0]
 80a0d4c:	4613      	mov	r3, r2
 80a0d4e:	2220      	movs	r2, #32
 80a0d50:	f7ff fc5e 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0d54:	2404      	movs	r4, #4
 80a0d56:	e5fe      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(826886470,inpix,32,R,G,B,true);
 80a0d58:	2301      	movs	r3, #1
 80a0d5a:	4833      	ldr	r0, [pc, #204]	; (80a0e28 <_Z6lettercthhhb+0x504>)
 80a0d5c:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0d60:	9700      	str	r7, [sp, #0]
 80a0d62:	4613      	mov	r3, r2
 80a0d64:	2220      	movs	r2, #32
 80a0d66:	f7ff fc53 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0d6a:	2404      	movs	r4, #4
 80a0d6c:	e5f3      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(1,inpix+32,8,R,G,B,true);
 80a0d6e:	2401      	movs	r4, #1
 80a0d70:	3120      	adds	r1, #32
 80a0d72:	4613      	mov	r3, r2
 80a0d74:	4620      	mov	r0, r4
 80a0d76:	2208      	movs	r2, #8
 80a0d78:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0d7c:	b289      	uxth	r1, r1
 80a0d7e:	9700      	str	r7, [sp, #0]
 80a0d80:	f7ff fc74 	bl	80a066c <_Z11encode8Condhthhhhb>
        encode32Cond(25100545,inpix,32,R,G,B,true);
 80a0d84:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0d88:	4633      	mov	r3, r6
 80a0d8a:	2220      	movs	r2, #32
 80a0d8c:	4629      	mov	r1, r5
 80a0d8e:	4827      	ldr	r0, [pc, #156]	; (80a0e2c <_Z6lettercthhhb+0x508>)
 80a0d90:	9700      	str	r7, [sp, #0]
 80a0d92:	f7ff fc3d 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 5;
 80a0d96:	2405      	movs	r4, #5
 80a0d98:	e5dd      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1061175359,inpix,32,R,G,B,true);
 80a0d9a:	2301      	movs	r3, #1
 80a0d9c:	4824      	ldr	r0, [pc, #144]	; (80a0e30 <_Z6lettercthhhb+0x50c>)
 80a0d9e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0da2:	9700      	str	r7, [sp, #0]
 80a0da4:	4613      	mov	r3, r2
 80a0da6:	2220      	movs	r2, #32
 80a0da8:	f7ff fc32 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0dac:	2404      	movs	r4, #4
 80a0dae:	e5d2      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(526409759,inpix,32,R,G,B,true);
 80a0db0:	2301      	movs	r3, #1
 80a0db2:	4820      	ldr	r0, [pc, #128]	; (80a0e34 <_Z6lettercthhhb+0x510>)
 80a0db4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0db8:	9700      	str	r7, [sp, #0]
 80a0dba:	4613      	mov	r3, r2
 80a0dbc:	2220      	movs	r2, #32
 80a0dbe:	f7ff fc27 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0dc2:	2404      	movs	r4, #4
 80a0dc4:	e5c7      	b.n	80a0956 <_Z6lettercthhhb+0x32>
 80a0dc6:	bf00      	nop
 80a0dc8:	00081c08 	.word	0x00081c08
 80a0dcc:	00061860 	.word	0x00061860
 80a0dd0:	00221408 	.word	0x00221408
 80a0dd4:	00141414 	.word	0x00141414
 80a0dd8:	00081422 	.word	0x00081422
 80a0ddc:	000f5903 	.word	0x000f5903
 80a0de0:	7e09097e 	.word	0x7e09097e
 80a0de4:	3649497f 	.word	0x3649497f
 80a0de8:	2241413e 	.word	0x2241413e
 80a0dec:	3e41417f 	.word	0x3e41417f
 80a0df0:	4149497f 	.word	0x4149497f
 80a0df4:	0109097f 	.word	0x0109097f
 80a0df8:	7849417f 	.word	0x7849417f
 80a0dfc:	7f08087f 	.word	0x7f08087f
 80a0e00:	00417f41 	.word	0x00417f41
 80a0e04:	013f4121 	.word	0x013f4121
 80a0e08:	7708087f 	.word	0x7708087f
 80a0e0c:	4040407f 	.word	0x4040407f
 80a0e10:	017e017f 	.word	0x017e017f
 80a0e14:	403e017f 	.word	0x403e017f
 80a0e18:	3e41413e 	.word	0x3e41413e
 80a0e1c:	0609097f 	.word	0x0609097f
 80a0e20:	1f21413e 	.word	0x1f21413e
 80a0e24:	3149497f 	.word	0x3149497f
 80a0e28:	31494946 	.word	0x31494946
 80a0e2c:	017f0101 	.word	0x017f0101
 80a0e30:	3f40403f 	.word	0x3f40403f
 80a0e34:	1f60601f 	.word	0x1f60601f
        encode8Cond(63,inpix+32,8,R,G,B,true);
 80a0e38:	2401      	movs	r4, #1
 80a0e3a:	3120      	adds	r1, #32
 80a0e3c:	4613      	mov	r3, r2
 80a0e3e:	203f      	movs	r0, #63	; 0x3f
 80a0e40:	2208      	movs	r2, #8
 80a0e42:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0e46:	b289      	uxth	r1, r1
 80a0e48:	9700      	str	r7, [sp, #0]
 80a0e4a:	f7ff fc0f 	bl	80a066c <_Z11encode8Condhthhhhb>
        encode32Cond(1077887039,inpix,32,R,G,B,true);
 80a0e4e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0e52:	4633      	mov	r3, r6
 80a0e54:	2220      	movs	r2, #32
 80a0e56:	4629      	mov	r1, r5
 80a0e58:	48be      	ldr	r0, [pc, #760]	; (80a1154 <_Z6lettercthhhb+0x830>)
 80a0e5a:	9700      	str	r7, [sp, #0]
 80a0e5c:	f7ff fbd8 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 5;
 80a0e60:	2405      	movs	r4, #5
 80a0e62:	e578      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(7569152,inpix,24,R,G,B,true);
 80a0e64:	2301      	movs	r3, #1
 80a0e66:	48bc      	ldr	r0, [pc, #752]	; (80a1158 <_Z6lettercthhhb+0x834>)
 80a0e68:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0e6c:	9700      	str	r7, [sp, #0]
 80a0e6e:	4613      	mov	r3, r2
 80a0e70:	2218      	movs	r2, #24
 80a0e72:	f7ff fbcd 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0e76:	2403      	movs	r4, #3
 80a0e78:	e56d      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(1,inpix+32,8,R,G,B,true);
 80a0e7a:	2401      	movs	r4, #1
 80a0e7c:	3120      	adds	r1, #32
 80a0e7e:	4613      	mov	r3, r2
 80a0e80:	4620      	mov	r0, r4
 80a0e82:	2208      	movs	r2, #8
 80a0e84:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0e88:	b289      	uxth	r1, r1
 80a0e8a:	9700      	str	r7, [sp, #0]
 80a0e8c:	f7ff fbee 	bl	80a066c <_Z11encode8Condhthhhhb>
        encode32Cond(41681409,inpix,32,R,G,B,true);
 80a0e90:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0e94:	4633      	mov	r3, r6
 80a0e96:	2220      	movs	r2, #32
 80a0e98:	4629      	mov	r1, r5
 80a0e9a:	48b0      	ldr	r0, [pc, #704]	; (80a115c <_Z6lettercthhhb+0x838>)
 80a0e9c:	9700      	str	r7, [sp, #0]
 80a0e9e:	f7ff fbb7 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 5;
 80a0ea2:	2405      	movs	r4, #5
 80a0ea4:	e557      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(51196353,inpix,32,R,G,B,true);
 80a0ea6:	2301      	movs	r3, #1
 80a0ea8:	48ad      	ldr	r0, [pc, #692]	; (80a1160 <_Z6lettercthhhb+0x83c>)
 80a0eaa:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0eae:	9700      	str	r7, [sp, #0]
 80a0eb0:	4613      	mov	r3, r2
 80a0eb2:	2220      	movs	r2, #32
 80a0eb4:	f7ff fbac 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 4;
 80a0eb8:	2404      	movs	r4, #4
 80a0eba:	e54c      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(16767,inpix,16,R,G,B,true);
 80a0ebc:	2301      	movs	r3, #1
 80a0ebe:	f244 107f 	movw	r0, #16767	; 0x417f
 80a0ec2:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ec6:	9700      	str	r7, [sp, #0]
 80a0ec8:	4613      	mov	r3, r2
 80a0eca:	2210      	movs	r2, #16
 80a0ecc:	f7ff fba0 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 2;
 80a0ed0:	2402      	movs	r4, #2
 80a0ed2:	e540      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(32577,inpix,16,R,G,B,true);
 80a0ed4:	2301      	movs	r3, #1
 80a0ed6:	f647 7041 	movw	r0, #32577	; 0x7f41
 80a0eda:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ede:	9700      	str	r7, [sp, #0]
 80a0ee0:	4613      	mov	r3, r2
 80a0ee2:	2210      	movs	r2, #16
 80a0ee4:	f7ff fb94 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 2;
 80a0ee8:	2402      	movs	r4, #2
 80a0eea:	e534      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(7358512,inpix,24,R,G,B,true);
 80a0eec:	2301      	movs	r3, #1
 80a0eee:	489d      	ldr	r0, [pc, #628]	; (80a1164 <_Z6lettercthhhb+0x840>)
 80a0ef0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0ef4:	9700      	str	r7, [sp, #0]
 80a0ef6:	4613      	mov	r3, r2
 80a0ef8:	2218      	movs	r2, #24
 80a0efa:	f7ff fb89 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0efe:	2403      	movs	r4, #3
 80a0f00:	e529      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(3164287,inpix,24,R,G,B,true);
 80a0f02:	2301      	movs	r3, #1
 80a0f04:	4898      	ldr	r0, [pc, #608]	; (80a1168 <_Z6lettercthhhb+0x844>)
 80a0f06:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f0a:	9700      	str	r7, [sp, #0]
 80a0f0c:	4613      	mov	r3, r2
 80a0f0e:	2218      	movs	r2, #24
 80a0f10:	f7ff fb7e 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0f14:	2403      	movs	r4, #3
 80a0f16:	e51e      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(4737072,inpix,24,R,G,B,true);
 80a0f18:	2301      	movs	r3, #1
 80a0f1a:	4894      	ldr	r0, [pc, #592]	; (80a116c <_Z6lettercthhhb+0x848>)
 80a0f1c:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f20:	9700      	str	r7, [sp, #0]
 80a0f22:	4613      	mov	r3, r2
 80a0f24:	2218      	movs	r2, #24
 80a0f26:	f7ff fb73 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0f2a:	2403      	movs	r4, #3
 80a0f2c:	e513      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(8341552,inpix,24,R,G,B,true);
 80a0f2e:	2301      	movs	r3, #1
 80a0f30:	488f      	ldr	r0, [pc, #572]	; (80a1170 <_Z6lettercthhhb+0x84c>)
 80a0f32:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f36:	9700      	str	r7, [sp, #0]
 80a0f38:	4613      	mov	r3, r2
 80a0f3a:	2218      	movs	r2, #24
 80a0f3c:	f7ff fb68 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0f40:	2403      	movs	r4, #3
 80a0f42:	e508      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(5788728,inpix,24,R,G,B,true);
 80a0f44:	2301      	movs	r3, #1
 80a0f46:	488b      	ldr	r0, [pc, #556]	; (80a1174 <_Z6lettercthhhb+0x850>)
 80a0f48:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f4c:	9700      	str	r7, [sp, #0]
 80a0f4e:	4613      	mov	r3, r2
 80a0f50:	2218      	movs	r2, #24
 80a0f52:	f7ff fb5d 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0f56:	2403      	movs	r4, #3
 80a0f58:	e4fd      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(657790,inpix,24,R,G,B,true);
 80a0f5a:	2301      	movs	r3, #1
 80a0f5c:	4886      	ldr	r0, [pc, #536]	; (80a1178 <_Z6lettercthhhb+0x854>)
 80a0f5e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f62:	9700      	str	r7, [sp, #0]
 80a0f64:	4613      	mov	r3, r2
 80a0f66:	2218      	movs	r2, #24
 80a0f68:	f7ff fb52 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0f6c:	2403      	movs	r4, #3
 80a0f6e:	e4f2      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(8148040,inpix,24,R,G,B,true);
 80a0f70:	2301      	movs	r3, #1
 80a0f72:	4882      	ldr	r0, [pc, #520]	; (80a117c <_Z6lettercthhhb+0x858>)
 80a0f74:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f78:	9700      	str	r7, [sp, #0]
 80a0f7a:	4613      	mov	r3, r2
 80a0f7c:	2218      	movs	r2, #24
 80a0f7e:	f7ff fb47 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0f82:	2403      	movs	r4, #3
 80a0f84:	e4e7      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(7342207,inpix,24,R,G,B,true);
 80a0f86:	2301      	movs	r3, #1
 80a0f88:	487d      	ldr	r0, [pc, #500]	; (80a1180 <_Z6lettercthhhb+0x85c>)
 80a0f8a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0f8e:	9700      	str	r7, [sp, #0]
 80a0f90:	4613      	mov	r3, r2
 80a0f92:	2218      	movs	r2, #24
 80a0f94:	f7ff fb3c 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0f98:	2403      	movs	r4, #3
 80a0f9a:	e4dc      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(116,inpix,8,R,G,B,true);
 80a0f9c:	2401      	movs	r4, #1
 80a0f9e:	4613      	mov	r3, r2
 80a0fa0:	2074      	movs	r0, #116	; 0x74
 80a0fa2:	2208      	movs	r2, #8
 80a0fa4:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0fa8:	9700      	str	r7, [sp, #0]
 80a0faa:	f7ff fb5f 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a0fae:	e4d2      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(3817504,inpix,24,R,G,B,true);
 80a0fb0:	2301      	movs	r3, #1
 80a0fb2:	4874      	ldr	r0, [pc, #464]	; (80a1184 <_Z6lettercthhhb+0x860>)
 80a0fb4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0fb8:	9700      	str	r7, [sp, #0]
 80a0fba:	4613      	mov	r3, r2
 80a0fbc:	2218      	movs	r2, #24
 80a0fbe:	f7ff fb27 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0fc2:	2403      	movs	r4, #3
 80a0fc4:	e4c7      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(6819967,inpix,24,R,G,B,true);
 80a0fc6:	2301      	movs	r3, #1
 80a0fc8:	486f      	ldr	r0, [pc, #444]	; (80a1188 <_Z6lettercthhhb+0x864>)
 80a0fca:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0fce:	9700      	str	r7, [sp, #0]
 80a0fd0:	4613      	mov	r3, r2
 80a0fd2:	2218      	movs	r2, #24
 80a0fd4:	f7ff fb1c 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a0fd8:	2403      	movs	r4, #3
 80a0fda:	e4bc      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(112,inpix+32,8,R,G,B,true);
 80a0fdc:	2401      	movs	r4, #1
 80a0fde:	3120      	adds	r1, #32
 80a0fe0:	4613      	mov	r3, r2
 80a0fe2:	2070      	movs	r0, #112	; 0x70
 80a0fe4:	2208      	movs	r2, #8
 80a0fe6:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0fea:	b289      	uxth	r1, r1
 80a0fec:	9700      	str	r7, [sp, #0]
 80a0fee:	f7ff fb3d 	bl	80a066c <_Z11encode8Condhthhhhb>
        encode32Cond(141559920,inpix,32,R,G,B,true);
 80a0ff2:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a0ff6:	4633      	mov	r3, r6
 80a0ff8:	2220      	movs	r2, #32
 80a0ffa:	4629      	mov	r1, r5
 80a0ffc:	4863      	ldr	r0, [pc, #396]	; (80a118c <_Z6lettercthhhb+0x868>)
 80a0ffe:	9700      	str	r7, [sp, #0]
 80a1000:	f7ff fb06 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 5;    
 80a1004:	2405      	movs	r4, #5
 80a1006:	e4a6      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(7342200,inpix,32,R,G,B,true);
 80a1008:	2301      	movs	r3, #1
 80a100a:	4861      	ldr	r0, [pc, #388]	; (80a1190 <_Z6lettercthhhb+0x86c>)
 80a100c:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a1010:	9700      	str	r7, [sp, #0]
 80a1012:	4613      	mov	r3, r2
 80a1014:	2220      	movs	r2, #32
 80a1016:	f7ff fafb 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a101a:	2403      	movs	r4, #3
 80a101c:	e49b      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(3164208,inpix,24,R,G,B,true);
 80a101e:	2301      	movs	r3, #1
 80a1020:	485c      	ldr	r0, [pc, #368]	; (80a1194 <_Z6lettercthhhb+0x870>)
 80a1022:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a1026:	9700      	str	r7, [sp, #0]
 80a1028:	4613      	mov	r3, r2
 80a102a:	2218      	movs	r2, #24
 80a102c:	f7ff faf0 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a1030:	2403      	movs	r4, #3
 80a1032:	e490      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(529532,inpix,24,R,G,B,true);
 80a1034:	2301      	movs	r3, #1
 80a1036:	4858      	ldr	r0, [pc, #352]	; (80a1198 <_Z6lettercthhhb+0x874>)
 80a1038:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a103c:	9700      	str	r7, [sp, #0]
 80a103e:	4613      	mov	r3, r2
 80a1040:	2218      	movs	r2, #24
 80a1042:	f7ff fae5 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a1046:	2403      	movs	r4, #3
 80a1048:	e485      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(8131592,inpix,24,R,G,B,true);
 80a104a:	2301      	movs	r3, #1
 80a104c:	4853      	ldr	r0, [pc, #332]	; (80a119c <_Z6lettercthhhb+0x878>)
 80a104e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a1052:	9700      	str	r7, [sp, #0]
 80a1054:	4613      	mov	r3, r2
 80a1056:	2218      	movs	r2, #24
 80a1058:	f7ff fada 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a105c:	2403      	movs	r4, #3
 80a105e:	e47a      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(1050744,inpix,24,R,G,B,true);
 80a1060:	2301      	movs	r3, #1
 80a1062:	484f      	ldr	r0, [pc, #316]	; (80a11a0 <_Z6lettercthhhb+0x87c>)
 80a1064:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a1068:	9700      	str	r7, [sp, #0]
 80a106a:	4613      	mov	r3, r2
 80a106c:	2218      	movs	r2, #24
 80a106e:	f7ff facf 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a1072:	2403      	movs	r4, #3
 80a1074:	e46f      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(7623772,inpix,24,R,G,B,true);
 80a1076:	2301      	movs	r3, #1
 80a1078:	484a      	ldr	r0, [pc, #296]	; (80a11a4 <_Z6lettercthhhb+0x880>)
 80a107a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a107e:	9700      	str	r7, [sp, #0]
 80a1080:	4613      	mov	r3, r2
 80a1082:	2218      	movs	r2, #24
 80a1084:	f7ff fac4 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a1088:	2403      	movs	r4, #3
 80a108a:	e464      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(556552,inpix,24,R,G,B,true);
 80a108c:	2301      	movs	r3, #1
 80a108e:	4846      	ldr	r0, [pc, #280]	; (80a11a8 <_Z6lettercthhhb+0x884>)
 80a1090:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a1094:	9700      	str	r7, [sp, #0]
 80a1096:	4613      	mov	r3, r2
 80a1098:	2218      	movs	r2, #24
 80a109a:	f7ff fab9 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a109e:	2403      	movs	r4, #3
 80a10a0:	e459      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(7880760,inpix,24,R,G,B,true);
 80a10a2:	2301      	movs	r3, #1
 80a10a4:	4841      	ldr	r0, [pc, #260]	; (80a11ac <_Z6lettercthhhb+0x888>)
 80a10a6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a10aa:	9700      	str	r7, [sp, #0]
 80a10ac:	4613      	mov	r3, r2
 80a10ae:	2218      	movs	r2, #24
 80a10b0:	f7ff faae 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a10b4:	2403      	movs	r4, #3
 80a10b6:	e44e      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(3686456,inpix,24,R,G,B,true);
 80a10b8:	2301      	movs	r3, #1
 80a10ba:	483d      	ldr	r0, [pc, #244]	; (80a11b0 <_Z6lettercthhhb+0x88c>)
 80a10bc:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a10c0:	9700      	str	r7, [sp, #0]
 80a10c2:	4613      	mov	r3, r2
 80a10c4:	2218      	movs	r2, #24
 80a10c6:	f7ff faa3 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a10ca:	2403      	movs	r4, #3
 80a10cc:	e443      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(56,inpix+32,8,R,G,B,true);
 80a10ce:	2401      	movs	r4, #1
 80a10d0:	3120      	adds	r1, #32
 80a10d2:	4613      	mov	r3, r2
 80a10d4:	2038      	movs	r0, #56	; 0x38
 80a10d6:	2208      	movs	r2, #8
 80a10d8:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a10dc:	b289      	uxth	r1, r1
 80a10de:	9700      	str	r7, [sp, #0]
 80a10e0:	f7ff fac4 	bl	80a066c <_Z11encode8Condhthhhhb>
        encode32Cond(1081098296,inpix,32,R,G,B,true);
 80a10e4:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a10e8:	4633      	mov	r3, r6
 80a10ea:	2220      	movs	r2, #32
 80a10ec:	4629      	mov	r1, r5
 80a10ee:	4831      	ldr	r0, [pc, #196]	; (80a11b4 <_Z6lettercthhhb+0x890>)
 80a10f0:	9700      	str	r7, [sp, #0]
 80a10f2:	f7ff fa8d 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 5;    
 80a10f6:	2405      	movs	r4, #5
 80a10f8:	e42d      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(4730952,inpix,24,R,G,B,true);
 80a10fa:	2301      	movs	r3, #1
 80a10fc:	482e      	ldr	r0, [pc, #184]	; (80a11b8 <_Z6lettercthhhb+0x894>)
 80a10fe:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a1102:	9700      	str	r7, [sp, #0]
 80a1104:	4613      	mov	r3, r2
 80a1106:	2218      	movs	r2, #24
 80a1108:	f7ff fa82 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a110c:	2403      	movs	r4, #3
 80a110e:	e422      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(3952716,inpix,24,R,G,B,true);
 80a1110:	2301      	movs	r3, #1
 80a1112:	482a      	ldr	r0, [pc, #168]	; (80a11bc <_Z6lettercthhhb+0x898>)
 80a1114:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a1118:	9700      	str	r7, [sp, #0]
 80a111a:	4613      	mov	r3, r2
 80a111c:	2218      	movs	r2, #24
 80a111e:	f7ff fa77 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a1122:	2403      	movs	r4, #3
 80a1124:	e417      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode32Cond(5002340,inpix,24,R,G,B,true);
 80a1126:	2301      	movs	r3, #1
 80a1128:	4825      	ldr	r0, [pc, #148]	; (80a11c0 <_Z6lettercthhhb+0x89c>)
 80a112a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a112e:	9700      	str	r7, [sp, #0]
 80a1130:	4613      	mov	r3, r2
 80a1132:	2218      	movs	r2, #24
 80a1134:	f7ff fa6c 	bl	80a0610 <_Z12encode32Condmthhhhb>
        return 3;
 80a1138:	2403      	movs	r4, #3
 80a113a:	e40c      	b.n	80a0956 <_Z6lettercthhhb+0x32>
        encode8Cond(127,inpix,8,R,G,B,true);
 80a113c:	2401      	movs	r4, #1
 80a113e:	4613      	mov	r3, r2
 80a1140:	207f      	movs	r0, #127	; 0x7f
 80a1142:	2208      	movs	r2, #8
 80a1144:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80a1148:	9700      	str	r7, [sp, #0]
 80a114a:	f7ff fa8f 	bl	80a066c <_Z11encode8Condhthhhhb>
        return 1;
 80a114e:	e402      	b.n	80a0956 <_Z6lettercthhhb+0x32>
    if(charNumber >= 48 && charNumber <= 57){
 80a1150:	2400      	movs	r4, #0
 80a1152:	e400      	b.n	80a0956 <_Z6lettercthhhb+0x32>
 80a1154:	403f403f 	.word	0x403f403f
 80a1158:	00737f00 	.word	0x00737f00
 80a115c:	027c0201 	.word	0x027c0201
 80a1160:	030d31c1 	.word	0x030d31c1
 80a1164:	00704830 	.word	0x00704830
 80a1168:	0030487f 	.word	0x0030487f
 80a116c:	00484830 	.word	0x00484830
 80a1170:	007f4830 	.word	0x007f4830
 80a1174:	00585438 	.word	0x00585438
 80a1178:	000a097e 	.word	0x000a097e
 80a117c:	007c5448 	.word	0x007c5448
 80a1180:	0070087f 	.word	0x0070087f
 80a1184:	003a4020 	.word	0x003a4020
 80a1188:	0068107f 	.word	0x0068107f
 80a118c:	08700870 	.word	0x08700870
 80a1190:	00700878 	.word	0x00700878
 80a1194:	00304830 	.word	0x00304830
 80a1198:	0008147c 	.word	0x0008147c
 80a119c:	007c1408 	.word	0x007c1408
 80a11a0:	00100878 	.word	0x00100878
 80a11a4:	0074545c 	.word	0x0074545c
 80a11a8:	00087e08 	.word	0x00087e08
 80a11ac:	00784038 	.word	0x00784038
 80a11b0:	00384038 	.word	0x00384038
 80a11b4:	40704038 	.word	0x40704038
 80a11b8:	00483048 	.word	0x00483048
 80a11bc:	003c504c 	.word	0x003c504c
 80a11c0:	004c5464 	.word	0x004c5464

080a11c4 <_Z7strDispPKcthhhb>:
void strDisp(const char *wrd, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a11c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a11c8:	4606      	mov	r6, r0
 80a11ca:	4617      	mov	r7, r2
 80a11cc:	4698      	mov	r8, r3
    int pix = inpix;
 80a11ce:	460c      	mov	r4, r1
    for(loop=0;loop<strlen(wrd);loop++)
 80a11d0:	2500      	movs	r5, #0
void strDisp(const char *wrd, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a11d2:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 80a11d6:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    for(loop=0;loop<strlen(wrd);loop++)
 80a11da:	4630      	mov	r0, r6
 80a11dc:	f005 fc6b 	bl	80a6ab6 <strlen>
 80a11e0:	42a8      	cmp	r0, r5
 80a11e2:	d90d      	bls.n	80a1200 <_Z7strDispPKcthhhb+0x3c>
        pix = pix+8+(8*letter(wrd[loop],pix,R,G,B,small));
 80a11e4:	5d70      	ldrb	r0, [r6, r5]
 80a11e6:	b2a1      	uxth	r1, r4
 80a11e8:	4643      	mov	r3, r8
 80a11ea:	463a      	mov	r2, r7
 80a11ec:	e9cd 9a00 	strd	r9, sl, [sp]
 80a11f0:	f7ff fb98 	bl	80a0924 <_Z6lettercthhhb>
 80a11f4:	f104 0b08 	add.w	fp, r4, #8
 80a11f8:	eb0b 04c0 	add.w	r4, fp, r0, lsl #3
    for(loop=0;loop<strlen(wrd);loop++)
 80a11fc:	3501      	adds	r5, #1
 80a11fe:	e7ec      	b.n	80a11da <_Z7strDispPKcthhhb+0x16>
}
 80a1200:	b003      	add	sp, #12
 80a1202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a1208 <_Z12displayClockthhhi>:
void displayClock(uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, int manctrl){
 80a1208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a120c:	b085      	sub	sp, #20
 80a120e:	4616      	mov	r6, r2
 80a1210:	461f      	mov	r7, r3
 80a1212:	460d      	mov	r5, r1
 80a1214:	4604      	mov	r4, r0
    int hr = Time.hourFormat12();
 80a1216:	f003 f89c 	bl	80a4352 <_ZN9TimeClass12hourFormat12Ev>
 80a121a:	9002      	str	r0, [sp, #8]
    int min = Time.minute();
 80a121c:	f003 f8a2 	bl	80a4364 <_ZN9TimeClass6minuteEv>
    if(mprev != min || manctrl) {                                      //Check if time has changed from last pixel push
 80a1220:	4b42      	ldr	r3, [pc, #264]	; (80a132c <_Z12displayClockthhhi+0x124>)
    int min = Time.minute();
 80a1222:	4681      	mov	r9, r0
    if(mprev != min || manctrl) {                                      //Check if time has changed from last pixel push
 80a1224:	681a      	ldr	r2, [r3, #0]
 80a1226:	469a      	mov	sl, r3
 80a1228:	4282      	cmp	r2, r0
 80a122a:	d102      	bne.n	80a1232 <_Z12displayClockthhhi+0x2a>
 80a122c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a122e:	2b00      	cmp	r3, #0
 80a1230:	d060      	beq.n	80a12f4 <_Z12displayClockthhhi+0xec>
        if(EEPROM.read(6) == 0){                            //If the brightness is above the threshold, post large numbers by default
 80a1232:	f004 f851 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a1236:	2006      	movs	r0, #6
 80a1238:	f7ff f804 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a123c:	4680      	mov	r8, r0
 80a123e:	2800      	cmp	r0, #0
 80a1240:	d158      	bne.n	80a12f4 <_Z12displayClockthhhi+0xec>
            mprev = Time.minute();                          //Save current time for next check
 80a1242:	f003 f88f 	bl	80a4364 <_ZN9TimeClass6minuteEv>
            screenArray[inpix+57] = (B/2)+(1000*(G/2))+(1000000*(R/2));                        //Display clock colons
 80a1246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a124a:	0871      	lsrs	r1, r6, #1
 80a124c:	087b      	lsrs	r3, r7, #1
 80a124e:	fb02 3201 	mla	r2, r2, r1, r3
 80a1252:	4937      	ldr	r1, [pc, #220]	; (80a1330 <_Z12displayClockthhhi+0x128>)
 80a1254:	086b      	lsrs	r3, r5, #1
 80a1256:	fb01 2303 	mla	r3, r1, r3, r2
 80a125a:	4a36      	ldr	r2, [pc, #216]	; (80a1334 <_Z12displayClockthhhi+0x12c>)
 80a125c:	f104 0139 	add.w	r1, r4, #57	; 0x39
 80a1260:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            screenArray[inpix+61] = (B/2)+(1000*(G/2))+(1000000*(R/2));
 80a1264:	f104 013d 	add.w	r1, r4, #61	; 0x3d
 80a1268:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80a126c:	f104 0370 	add.w	r3, r4, #112	; 0x70
            mprev = Time.minute();                          //Save current time for next check
 80a1270:	f8ca 0000 	str.w	r0, [sl]
            if(min/10 == 0) {                               //Check if minute number is less than 10
 80a1274:	fa1f fa83 	uxth.w	sl, r3
 80a1278:	f109 0309 	add.w	r3, r9, #9
 80a127c:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80a1280:	2b12      	cmp	r3, #18
 80a1282:	b289      	uxth	r1, r1
 80a1284:	d839      	bhi.n	80a12fa <_Z12displayClockthhhi+0xf2>
                displayNumber(0,72+inpix,R,G,B,false);            //Display 0 digit if less than 10 in 10's place
 80a1286:	4633      	mov	r3, r6
 80a1288:	462a      	mov	r2, r5
 80a128a:	4640      	mov	r0, r8
 80a128c:	e9cd 7800 	strd	r7, r8, [sp]
 80a1290:	f7ff fb10 	bl	80a08b4 <_Z13displayNumberhthhhb>
                displayNumber(min,112+inpix,R,G,B,false);
 80a1294:	4633      	mov	r3, r6
 80a1296:	462a      	mov	r2, r5
 80a1298:	4651      	mov	r1, sl
 80a129a:	e9cd 7800 	strd	r7, r8, [sp]
 80a129e:	fa5f f089 	uxtb.w	r0, r9
 80a12a2:	f7ff fb07 	bl	80a08b4 <_Z13displayNumberhthhhb>
            displayNumber(1,inpix-24,R*(hr/10),G*(hr/10),B*(hr/10),false);   //Display 1 if present in the hour
 80a12a6:	f04f 0a0a 	mov.w	sl, #10
 80a12aa:	9b02      	ldr	r3, [sp, #8]
 80a12ac:	f04f 0900 	mov.w	r9, #0
 80a12b0:	fb93 f8fa 	sdiv	r8, r3, sl
 80a12b4:	fa5f f088 	uxtb.w	r0, r8
 80a12b8:	fb06 f300 	mul.w	r3, r6, r0
 80a12bc:	fb05 f200 	mul.w	r2, r5, r0
 80a12c0:	4378      	muls	r0, r7
 80a12c2:	f1a4 0118 	sub.w	r1, r4, #24
 80a12c6:	b2c0      	uxtb	r0, r0
 80a12c8:	9000      	str	r0, [sp, #0]
 80a12ca:	b2db      	uxtb	r3, r3
 80a12cc:	2001      	movs	r0, #1
 80a12ce:	b2d2      	uxtb	r2, r2
 80a12d0:	b289      	uxth	r1, r1
 80a12d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80a12d6:	f7ff faed 	bl	80a08b4 <_Z13displayNumberhthhhb>
            displayNumber(hr-(10*(hr/10)),inpix+16,R,G,B,false);        //Display other digit of hour
 80a12da:	9b02      	ldr	r3, [sp, #8]
 80a12dc:	f104 0110 	add.w	r1, r4, #16
 80a12e0:	fb0a 3018 	mls	r0, sl, r8, r3
 80a12e4:	462a      	mov	r2, r5
 80a12e6:	4633      	mov	r3, r6
 80a12e8:	e9cd 7900 	strd	r7, r9, [sp]
 80a12ec:	b289      	uxth	r1, r1
 80a12ee:	b2c0      	uxtb	r0, r0
 80a12f0:	f7ff fae0 	bl	80a08b4 <_Z13displayNumberhthhhb>
} 
 80a12f4:	b005      	add	sp, #20
 80a12f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                displayNumber((min/10),72+inpix,R,G,B,false);
 80a12fa:	f04f 0b0a 	mov.w	fp, #10
 80a12fe:	fb99 f3fb 	sdiv	r3, r9, fp
 80a1302:	9303      	str	r3, [sp, #12]
 80a1304:	462a      	mov	r2, r5
 80a1306:	4633      	mov	r3, r6
 80a1308:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80a130c:	e9cd 7800 	strd	r7, r8, [sp]
 80a1310:	f7ff fad0 	bl	80a08b4 <_Z13displayNumberhthhhb>
                displayNumber((min%10),112+inpix,R,G,B,false);
 80a1314:	9b03      	ldr	r3, [sp, #12]
 80a1316:	462a      	mov	r2, r5
 80a1318:	fb0b 9013 	mls	r0, fp, r3, r9
 80a131c:	4651      	mov	r1, sl
 80a131e:	4633      	mov	r3, r6
 80a1320:	e9cd 7800 	strd	r7, r8, [sp]
 80a1324:	b2c0      	uxtb	r0, r0
 80a1326:	f7ff fac5 	bl	80a08b4 <_Z13displayNumberhthhhb>
 80a132a:	e7bc      	b.n	80a12a6 <_Z12displayClockthhhi+0x9e>
 80a132c:	2000028c 	.word	0x2000028c
 80a1330:	000f4240 	.word	0x000f4240
 80a1334:	200002a0 	.word	0x200002a0

080a1338 <_Z11displayTemphthhhb>:
void displayTemp(uint8_t temperature, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a1338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int TC1 = temperature/10;
 80a133c:	f04f 0e0a 	mov.w	lr, #10
void displayTemp(uint8_t temperature, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a1340:	4684      	mov	ip, r0
    int TC1 = temperature/10;
 80a1342:	fbb0 f5fe 	udiv	r5, r0, lr
 80a1346:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
void displayTemp(uint8_t temperature, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a134a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    int TC1 = temperature/10;
 80a134e:	b2e8      	uxtb	r0, r5
    int TC2 = temperature%10;
 80a1350:	fb0e c515 	mls	r5, lr, r5, ip
 80a1354:	fb09 8c03 	mla	ip, r9, r3, r8
void displayTemp(uint8_t temperature, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B, bool small){
 80a1358:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 80a135c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80a13c8 <_Z11displayTemphthhhb+0x90>
 80a1360:	460c      	mov	r4, r1
 80a1362:	4616      	mov	r6, r2
 80a1364:	461f      	mov	r7, r3
    int TC2 = temperature%10;
 80a1366:	fb09 c902 	mla	r9, r9, r2, ip
 80a136a:	f8df a060 	ldr.w	sl, [pc, #96]	; 80a13cc <_Z11displayTemphthhhb+0x94>
 80a136e:	b2ed      	uxtb	r5, r5
    if(small){
 80a1370:	f1bb 0f00 	cmp.w	fp, #0
 80a1374:	d015      	beq.n	80a13a2 <_Z11displayTemphthhhb+0x6a>
        displayNumber(TC1,inpix, R, G, B,true);
 80a1376:	f04f 0b01 	mov.w	fp, #1
 80a137a:	e9cd 8b00 	strd	r8, fp, [sp]
 80a137e:	f7ff fa99 	bl	80a08b4 <_Z13displayNumberhthhhb>
        displayNumber(TC2,inpix+32,R,G,B,true);
 80a1382:	f104 0120 	add.w	r1, r4, #32
 80a1386:	463b      	mov	r3, r7
 80a1388:	4632      	mov	r2, r6
 80a138a:	4628      	mov	r0, r5
 80a138c:	e9cd 8b00 	strd	r8, fp, [sp]
 80a1390:	b289      	uxth	r1, r1
        screenArray[inpix+64] = encodeColor(R,G,B);
 80a1392:	3440      	adds	r4, #64	; 0x40
        displayNumber(TC2,inpix+32,R,G,B,true);
 80a1394:	f7ff fa8e 	bl	80a08b4 <_Z13displayNumberhthhhb>
        screenArray[inpix+64] = encodeColor(R,G,B);
 80a1398:	f84a 9024 	str.w	r9, [sl, r4, lsl #2]
}
 80a139c:	b003      	add	sp, #12
 80a139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        displayNumber(TC1,inpix, R, G, B,false);
 80a13a2:	e9cd 8b00 	strd	r8, fp, [sp]
 80a13a6:	f7ff fa85 	bl	80a08b4 <_Z13displayNumberhthhhb>
        displayNumber(TC2,inpix+40,R,G,B,false);
 80a13aa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80a13ae:	463b      	mov	r3, r7
 80a13b0:	4632      	mov	r2, r6
 80a13b2:	4628      	mov	r0, r5
 80a13b4:	e9cd 8b00 	strd	r8, fp, [sp]
 80a13b8:	b289      	uxth	r1, r1
        screenArray[inpix+80] = encodeColor(R,G,B);
 80a13ba:	3450      	adds	r4, #80	; 0x50
        displayNumber(TC2,inpix+40,R,G,B,false);
 80a13bc:	f7ff fa7a 	bl	80a08b4 <_Z13displayNumberhthhhb>
        screenArray[inpix+80] = encodeColor(R,G,B);
 80a13c0:	f84a 9024 	str.w	r9, [sl, r4, lsl #2]
}
 80a13c4:	e7ea      	b.n	80a139c <_Z11displayTemphthhhb+0x64>
 80a13c6:	bf00      	nop
 80a13c8:	000f4240 	.word	0x000f4240
 80a13cc:	200002a0 	.word	0x200002a0

080a13d0 <_Z12displayHumidhthhh>:
void displayHumid(uint8_t humidPercent, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){
 80a13d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(humidPercent == 100){
 80a13d4:	2864      	cmp	r0, #100	; 0x64
void displayHumid(uint8_t humidPercent, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){
 80a13d6:	4680      	mov	r8, r0
 80a13d8:	460c      	mov	r4, r1
 80a13da:	4615      	mov	r5, r2
 80a13dc:	461e      	mov	r6, r3
 80a13de:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if(humidPercent == 100){
 80a13e2:	d128      	bne.n	80a1436 <_Z12displayHumidhthhh+0x66>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a13e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a13e8:	fb01 7303 	mla	r3, r1, r3, r7
 80a13ec:	491e      	ldr	r1, [pc, #120]	; (80a1468 <_Z12displayHumidhthhh+0x98>)
 80a13ee:	fb01 3102 	mla	r1, r1, r2, r3
        for(HC1 = 0; HC1 < 7; HC1++){
 80a13f2:	2200      	movs	r2, #0
 80a13f4:	4b1d      	ldr	r3, [pc, #116]	; (80a146c <_Z12displayHumidhthhh+0x9c>)
 80a13f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80a13fa:	3201      	adds	r2, #1
 80a13fc:	2a07      	cmp	r2, #7
            screenArray[inpix+HC1] = encodeColor(R,G,B);
 80a13fe:	f843 1b04 	str.w	r1, [r3], #4
        for(HC1 = 0; HC1 < 7; HC1++){
 80a1402:	d1fa      	bne.n	80a13fa <_Z12displayHumidhthhh+0x2a>
        displayNumber(0,inpix+16, R, G, B,false);
 80a1404:	f04f 0800 	mov.w	r8, #0
 80a1408:	f104 0110 	add.w	r1, r4, #16
 80a140c:	4633      	mov	r3, r6
 80a140e:	462a      	mov	r2, r5
 80a1410:	4640      	mov	r0, r8
 80a1412:	b289      	uxth	r1, r1
 80a1414:	e9cd 7800 	strd	r7, r8, [sp]
 80a1418:	f7ff fa4c 	bl	80a08b4 <_Z13displayNumberhthhhb>
        displayNumber(0,inpix+56,R,G,B,false);
 80a141c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a1420:	4633      	mov	r3, r6
 80a1422:	462a      	mov	r2, r5
 80a1424:	4640      	mov	r0, r8
 80a1426:	e9cd 7800 	strd	r7, r8, [sp]
 80a142a:	b289      	uxth	r1, r1
 80a142c:	f7ff fa42 	bl	80a08b4 <_Z13displayNumberhthhhb>
}
 80a1430:	b003      	add	sp, #12
 80a1432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int HC1 = humidPercent/10;
 80a1436:	f04f 0a0a 	mov.w	sl, #10
        displayNumber(HC1,inpix, R, G, B,false);
 80a143a:	f04f 0900 	mov.w	r9, #0
    int HC1 = humidPercent/10;
 80a143e:	fbb0 fbfa 	udiv	fp, r0, sl
        displayNumber(HC1,inpix, R, G, B,false);
 80a1442:	e9cd 7900 	strd	r7, r9, [sp]
 80a1446:	4658      	mov	r0, fp
 80a1448:	f7ff fa34 	bl	80a08b4 <_Z13displayNumberhthhhb>
    int HC2 = humidPercent%10;
 80a144c:	fb0a 801b 	mls	r0, sl, fp, r8
        displayNumber(HC2,inpix+40,R,G,B,false);
 80a1450:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80a1454:	4633      	mov	r3, r6
 80a1456:	462a      	mov	r2, r5
 80a1458:	e9cd 7900 	strd	r7, r9, [sp]
 80a145c:	b289      	uxth	r1, r1
 80a145e:	b2c0      	uxtb	r0, r0
 80a1460:	f7ff fa28 	bl	80a08b4 <_Z13displayNumberhthhhb>
}
 80a1464:	e7e4      	b.n	80a1430 <_Z12displayHumidhthhh+0x60>
 80a1466:	bf00      	nop
 80a1468:	000f4240 	.word	0x000f4240
 80a146c:	200002a0 	.word	0x200002a0

080a1470 <_Z4dimgtthhh>:
void dimg(uint16_t cnum, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){                     //Code block for displaying a still weather animation when in dark mode
 80a1470:	b530      	push	{r4, r5, lr}
    if(cnum > 299 && cnum < 322)
 80a1472:	f5a0 7596 	sub.w	r5, r0, #300	; 0x12c
 80a1476:	2d15      	cmp	r5, #21
void dimg(uint16_t cnum, uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){                     //Code block for displaying a still weather animation when in dark mode
 80a1478:	f89d 400c 	ldrb.w	r4, [sp, #12]
    if(cnum > 299 && cnum < 322)
 80a147c:	d813      	bhi.n	80a14a6 <_Z4dimgtthhh+0x36>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a147e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1482:	fb00 4303 	mla	r3, r0, r3, r4
 80a1486:	4828      	ldr	r0, [pc, #160]	; (80a1528 <_Z4dimgtthhh+0xb8>)
 80a1488:	fb00 3302 	mla	r3, r0, r2, r3
        screenArray[inpix+14] = encodeColor(R,G,B);
 80a148c:	4a27      	ldr	r2, [pc, #156]	; (80a152c <_Z4dimgtthhh+0xbc>)
 80a148e:	f101 000e 	add.w	r0, r1, #14
 80a1492:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+28] = encodeColor(R,G,B);
 80a1496:	f101 001c 	add.w	r0, r1, #28
        screenArray[inpix+46] = encodeColor(R,G,B);
 80a149a:	312e      	adds	r1, #46	; 0x2e
        screenArray[inpix+28] = encodeColor(R,G,B);
 80a149c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+46] = encodeColor(R,G,B);
 80a14a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80a14a4:	bd30      	pop	{r4, r5, pc}
    else if(cnum > 199 && cnum < 235)
 80a14a6:	f1a0 05c8 	sub.w	r5, r0, #200	; 0xc8
 80a14aa:	2d22      	cmp	r5, #34	; 0x22
 80a14ac:	d817      	bhi.n	80a14de <_Z4dimgtthhh+0x6e>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a14ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a14b2:	fb00 4303 	mla	r3, r0, r3, r4
 80a14b6:	481c      	ldr	r0, [pc, #112]	; (80a1528 <_Z4dimgtthhh+0xb8>)
 80a14b8:	fb00 3302 	mla	r3, r0, r2, r3
        screenArray[inpix+27] = encodeColor(R,G,B);
 80a14bc:	4a1b      	ldr	r2, [pc, #108]	; (80a152c <_Z4dimgtthhh+0xbc>)
 80a14be:	f101 001b 	add.w	r0, r1, #27
 80a14c2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+20] = encodeColor(R,G,B);
 80a14c6:	f101 0014 	add.w	r0, r1, #20
 80a14ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+29] = encodeColor(R,G,B);
 80a14ce:	f101 001d 	add.w	r0, r1, #29
        screenArray[inpix+22] = encodeColor(R,G,B);
 80a14d2:	3116      	adds	r1, #22
        screenArray[inpix+29] = encodeColor(R,G,B);
 80a14d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+22] = encodeColor(R,G,B);
 80a14d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80a14dc:	e7e2      	b.n	80a14a4 <_Z4dimgtthhh+0x34>
    else if(cnum > 499 && cnum < 533)
 80a14de:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
 80a14e2:	2d20      	cmp	r5, #32
 80a14e4:	d81b      	bhi.n	80a151e <_Z4dimgtthhh+0xae>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a14e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a14ea:	fb00 4303 	mla	r3, r0, r3, r4
 80a14ee:	480e      	ldr	r0, [pc, #56]	; (80a1528 <_Z4dimgtthhh+0xb8>)
 80a14f0:	fb00 3302 	mla	r3, r0, r2, r3
        screenArray[inpix+11] = encodeColor(R,G,B);
 80a14f4:	4a0d      	ldr	r2, [pc, #52]	; (80a152c <_Z4dimgtthhh+0xbc>)
 80a14f6:	f101 000b 	add.w	r0, r1, #11
 80a14fa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+22] = encodeColor(R,G,B);
 80a14fe:	f101 0016 	add.w	r0, r1, #22
 80a1502:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+28] = encodeColor(R,G,B);
 80a1506:	f101 001c 	add.w	r0, r1, #28
 80a150a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+37] = encodeColor(R,G,B);
 80a150e:	f101 0025 	add.w	r0, r1, #37	; 0x25
        screenArray[inpix+43] = encodeColor(R,G,B);   
 80a1512:	312b      	adds	r1, #43	; 0x2b
        screenArray[inpix+37] = encodeColor(R,G,B);
 80a1514:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        screenArray[inpix+43] = encodeColor(R,G,B);   
 80a1518:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80a151c:	e7c2      	b.n	80a14a4 <_Z4dimgtthhh+0x34>
    else if(cnum > 599 && cnum < 630)                                    //Snow
 80a151e:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 80a1522:	281d      	cmp	r0, #29
 80a1524:	d8be      	bhi.n	80a14a4 <_Z4dimgtthhh+0x34>
 80a1526:	e7de      	b.n	80a14e6 <_Z4dimgtthhh+0x76>
 80a1528:	000f4240 	.word	0x000f4240
 80a152c:	200002a0 	.word	0x200002a0

080a1530 <_Z14checkForUpdateb>:
void checkForUpdate(bool manualCtrl){
 80a1530:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
 80a1532:	4d1b      	ldr	r5, [pc, #108]	; (80a15a0 <_Z14checkForUpdateb+0x70>)
void checkForUpdate(bool manualCtrl){
 80a1534:	4606      	mov	r6, r0
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
 80a1536:	682c      	ldr	r4, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1538:	f002 fb88 	bl	80a3c4c <HAL_Timer_Get_Milli_Seconds>
 80a153c:	f504 2492 	add.w	r4, r4, #299008	; 0x49000
 80a1540:	f504 7478 	add.w	r4, r4, #992	; 0x3e0
 80a1544:	4284      	cmp	r4, r0
 80a1546:	d20f      	bcs.n	80a1568 <_Z14checkForUpdateb+0x38>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a1548:	4b16      	ldr	r3, [pc, #88]	; (80a15a4 <_Z14checkForUpdateb+0x74>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a154a:	4a17      	ldr	r2, [pc, #92]	; (80a15a8 <_Z14checkForUpdateb+0x78>)
 80a154c:	781b      	ldrb	r3, [r3, #0]
 80a154e:	4917      	ldr	r1, [pc, #92]	; (80a15ac <_Z14checkForUpdateb+0x7c>)
 80a1550:	f88d 3000 	strb.w	r3, [sp]
 80a1554:	a802      	add	r0, sp, #8
 80a1556:	233c      	movs	r3, #60	; 0x3c
 80a1558:	f003 f93a 	bl	80a47d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a155c:	9c03      	ldr	r4, [sp, #12]
 80a155e:	b964      	cbnz	r4, 80a157a <_Z14checkForUpdateb+0x4a>
 80a1560:	f002 fb74 	bl	80a3c4c <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
 80a1564:	6028      	str	r0, [r5, #0]
}                          
 80a1566:	e006      	b.n	80a1576 <_Z14checkForUpdateb+0x46>
 80a1568:	f002 fb70 	bl	80a3c4c <HAL_Timer_Get_Milli_Seconds>
    if(lastUpdate+300000 < millis() || lastUpdate > millis() || manualCtrl){
 80a156c:	682b      	ldr	r3, [r5, #0]
 80a156e:	4283      	cmp	r3, r0
 80a1570:	d8ea      	bhi.n	80a1548 <_Z14checkForUpdateb+0x18>
 80a1572:	2e00      	cmp	r6, #0
 80a1574:	d1e8      	bne.n	80a1548 <_Z14checkForUpdateb+0x18>
}                          
 80a1576:	b004      	add	sp, #16
 80a1578:	bd70      	pop	{r4, r5, r6, pc}
      if (--_M_use_count == 0)
 80a157a:	6863      	ldr	r3, [r4, #4]
 80a157c:	3b01      	subs	r3, #1
 80a157e:	6063      	str	r3, [r4, #4]
 80a1580:	2b00      	cmp	r3, #0
 80a1582:	d1ed      	bne.n	80a1560 <_Z14checkForUpdateb+0x30>
          _M_dispose();
 80a1584:	6823      	ldr	r3, [r4, #0]
 80a1586:	4620      	mov	r0, r4
 80a1588:	689b      	ldr	r3, [r3, #8]
 80a158a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a158c:	68a3      	ldr	r3, [r4, #8]
 80a158e:	3b01      	subs	r3, #1
 80a1590:	60a3      	str	r3, [r4, #8]
 80a1592:	2b00      	cmp	r3, #0
 80a1594:	d1e4      	bne.n	80a1560 <_Z14checkForUpdateb+0x30>
            _M_destroy();
 80a1596:	6823      	ldr	r3, [r4, #0]
 80a1598:	4620      	mov	r0, r4
 80a159a:	68db      	ldr	r3, [r3, #12]
 80a159c:	4798      	blx	r3
 80a159e:	e7df      	b.n	80a1560 <_Z14checkForUpdateb+0x30>
 80a15a0:	20000288 	.word	0x20000288
 80a15a4:	20000254 	.word	0x20000254
 80a15a8:	080a8f28 	.word	0x080a8f28
 80a15ac:	080a8f44 	.word	0x080a8f44

080a15b0 <setup>:
void setup() {
 80a15b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lastUpdate = 0;
 80a15b4:	2400      	movs	r4, #0
 80a15b6:	4b62      	ldr	r3, [pc, #392]	; (80a1740 <setup+0x190>)
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
 80a15b8:	2103      	movs	r1, #3
 80a15ba:	4620      	mov	r0, r4
    lastUpdate = 0;
 80a15bc:	601c      	str	r4, [r3, #0]
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
 80a15be:	f003 fe37 	bl	80a5230 <pinMode>
    pinMode(D1, INPUT_PULLDOWN);
 80a15c2:	2103      	movs	r1, #3
 80a15c4:	2001      	movs	r0, #1
 80a15c6:	f003 fe33 	bl	80a5230 <pinMode>
    pinMode(D2, INPUT_PULLDOWN);
 80a15ca:	2103      	movs	r1, #3
 80a15cc:	2002      	movs	r0, #2
 80a15ce:	f003 fe2f 	bl	80a5230 <pinMode>
    pinMode(D7,OUTPUT);
 80a15d2:	2101      	movs	r1, #1
 80a15d4:	2007      	movs	r0, #7
 80a15d6:	f003 fe2b 	bl	80a5230 <pinMode>
    RGB.control(true);
 80a15da:	2001      	movs	r0, #1
 80a15dc:	f002 feea 	bl	80a43b4 <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 0);
 80a15e0:	4622      	mov	r2, r4
 80a15e2:	4621      	mov	r1, r4
 80a15e4:	4620      	mov	r0, r4
 80a15e6:	f002 fef5 	bl	80a43d4 <_ZN8RGBClass5colorEiii>
    scan = 1;                                                                       //scans photoresistor for room brightness
 80a15ea:	2301      	movs	r3, #1
    fdark = 2;
 80a15ec:	2102      	movs	r1, #2
    scan = 1;                                                                       //scans photoresistor for room brightness
 80a15ee:	4a55      	ldr	r2, [pc, #340]	; (80a1744 <setup+0x194>)
    strip.begin();
 80a15f0:	4855      	ldr	r0, [pc, #340]	; (80a1748 <setup+0x198>)
    scan = 1;                                                                       //scans photoresistor for room brightness
 80a15f2:	6013      	str	r3, [r2, #0]
    photoupd = 0;
 80a15f4:	4a55      	ldr	r2, [pc, #340]	; (80a174c <setup+0x19c>)
 80a15f6:	4d56      	ldr	r5, [pc, #344]	; (80a1750 <setup+0x1a0>)
 80a15f8:	6014      	str	r4, [r2, #0]
    wmode = 1;
 80a15fa:	4a56      	ldr	r2, [pc, #344]	; (80a1754 <setup+0x1a4>)
 80a15fc:	6013      	str	r3, [r2, #0]
    dmode = 1;
 80a15fe:	4a56      	ldr	r2, [pc, #344]	; (80a1758 <setup+0x1a8>)
 80a1600:	6013      	str	r3, [r2, #0]
    fdark = 2;
 80a1602:	4a56      	ldr	r2, [pc, #344]	; (80a175c <setup+0x1ac>)
 80a1604:	6011      	str	r1, [r2, #0]
    trueTone = true;
 80a1606:	4a56      	ldr	r2, [pc, #344]	; (80a1760 <setup+0x1b0>)
 80a1608:	7013      	strb	r3, [r2, #0]
    strip.begin();
 80a160a:	f001 f9bd 	bl	80a2988 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
 80a160e:	484e      	ldr	r0, [pc, #312]	; (80a1748 <setup+0x198>)
 80a1610:	f001 f9f0 	bl	80a29f4 <_ZN17Adafruit_NeoPixel4showEv>
 80a1614:	462a      	mov	r2, r5
 80a1616:	f240 2301 	movw	r3, #513	; 0x201
    for(j=0; j < 512; j++){
 80a161a:	3b01      	subs	r3, #1
 80a161c:	d002      	beq.n	80a1624 <setup+0x74>
        screenArray[j] = 0;
 80a161e:	f842 4b04 	str.w	r4, [r2], #4
    for(j=0; j < 512; j++){
 80a1622:	e7fa      	b.n	80a161a <setup+0x6a>
 80a1624:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1628:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80a1788 <setup+0x1d8>
    photo = analogRead(A4)/18;
 80a162c:	200e      	movs	r0, #14
 80a162e:	f8ca 3000 	str.w	r3, [sl]
 80a1632:	f003 fe3a 	bl	80a52aa <analogRead>
 80a1636:	2312      	movs	r3, #18
 80a1638:	fb90 f3f3 	sdiv	r3, r0, r3
 80a163c:	4a49      	ldr	r2, [pc, #292]	; (80a1764 <setup+0x1b4>)
    strDisp("Hello",56,photo,photo,photo,true);
 80a163e:	2138      	movs	r1, #56	; 0x38
    photo = analogRead(A4)/18;
 80a1640:	6013      	str	r3, [r2, #0]
    strDisp("Hello",56,photo,photo,photo,true);
 80a1642:	2201      	movs	r2, #1
 80a1644:	b2db      	uxtb	r3, r3
 80a1646:	e9cd 3200 	strd	r3, r2, [sp]
 80a164a:	4847      	ldr	r0, [pc, #284]	; (80a1768 <setup+0x1b8>)
 80a164c:	461a      	mov	r2, r3
 80a164e:	f7ff fdb9 	bl	80a11c4 <_Z7strDispPKcthhhb>
    for(i = 56; i < 200; i+=8){
 80a1652:	2338      	movs	r3, #56	; 0x38
 80a1654:	4c45      	ldr	r4, [pc, #276]	; (80a176c <setup+0x1bc>)
        printScreen(screenArray,i,i+7);
 80a1656:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80a1750 <setup+0x1a0>
    for(i = 56; i < 200; i+=8){
 80a165a:	6023      	str	r3, [r4, #0]
 80a165c:	6821      	ldr	r1, [r4, #0]
 80a165e:	29c7      	cmp	r1, #199	; 0xc7
 80a1660:	dc0a      	bgt.n	80a1678 <setup+0xc8>
        printScreen(screenArray,i,i+7);
 80a1662:	4640      	mov	r0, r8
 80a1664:	1dca      	adds	r2, r1, #7
 80a1666:	f7fe fdef 	bl	80a0248 <_Z11printScreenPiii>
        delay(75);
 80a166a:	204b      	movs	r0, #75	; 0x4b
 80a166c:	f002 fe90 	bl	80a4390 <delay>
    for(i = 56; i < 200; i+=8){
 80a1670:	6823      	ldr	r3, [r4, #0]
 80a1672:	3308      	adds	r3, #8
 80a1674:	6023      	str	r3, [r4, #0]
 80a1676:	e7f1      	b.n	80a165c <setup+0xac>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a1678:	2000      	movs	r0, #0
 80a167a:	f002 fb0f 	bl	80a3c9c <hal_timer_millis>
 80a167e:	f04f 0b00 	mov.w	fp, #0
 80a1682:	4604      	mov	r4, r0
        while (_while() && !_condition()) {
 80a1684:	f04f 0900 	mov.w	r9, #0
 80a1688:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80a178c <setup+0x1dc>
        return hal_timer_millis(nullptr);
 80a168c:	2000      	movs	r0, #0
 80a168e:	f002 fb05 	bl	80a3c9c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a1692:	1b06      	subs	r6, r0, r4
 80a1694:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
 80a1698:	45b9      	cmp	r9, r7
 80a169a:	bf08      	it	eq
 80a169c:	45b0      	cmpeq	r8, r6
 80a169e:	d305      	bcc.n	80a16ac <setup+0xfc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a16a0:	f002 fcc2 	bl	80a4028 <spark_cloud_flag_connected>
 80a16a4:	b910      	cbnz	r0, 80a16ac <setup+0xfc>
            spark_process();
 80a16a6:	f002 fcb7 	bl	80a4018 <spark_process>
        while (_while() && !_condition()) {
 80a16aa:	e7ef      	b.n	80a168c <setup+0xdc>
 80a16ac:	f002 fcbc 	bl	80a4028 <spark_cloud_flag_connected>
 80a16b0:	f240 1401 	movw	r4, #257	; 0x101
        screenArray[j] = 0;
 80a16b4:	2300      	movs	r3, #0
    for(j=0; j < 256; j++){
 80a16b6:	3c01      	subs	r4, #1
 80a16b8:	d002      	beq.n	80a16c0 <setup+0x110>
        screenArray[j] = 0;
 80a16ba:	f845 3b04 	str.w	r3, [r5], #4
    for(j=0; j < 256; j++){
 80a16be:	e7fa      	b.n	80a16b6 <setup+0x106>
 80a16c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80a16c4:	f8ca 3000 	str.w	r3, [sl]
    EEPROM.write(1,16);
 80a16c8:	f003 fe06 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80a16cc:	2110      	movs	r1, #16
 80a16ce:	2001      	movs	r0, #1
 80a16d0:	f002 fad4 	bl	80a3c7c <HAL_EEPROM_Write>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a16d4:	4623      	mov	r3, r4
 80a16d6:	2202      	movs	r2, #2
 80a16d8:	4922      	ldr	r1, [pc, #136]	; (80a1764 <setup+0x1b4>)
 80a16da:	4825      	ldr	r0, [pc, #148]	; (80a1770 <setup+0x1c0>)
 80a16dc:	f002 fc94 	bl	80a4008 <spark_variable>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a16e0:	4622      	mov	r2, r4
 80a16e2:	4924      	ldr	r1, [pc, #144]	; (80a1774 <setup+0x1c4>)
 80a16e4:	4623      	mov	r3, r4
 80a16e6:	e9cd 4400 	strd	r4, r4, [sp]
 80a16ea:	4823      	ldr	r0, [pc, #140]	; (80a1778 <setup+0x1c8>)
 80a16ec:	f002 fcac 	bl	80a4048 <spark_subscribe>
    Time.zone(12-EEPROM.read(1));
 80a16f0:	f003 fdf2 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a16f4:	2001      	movs	r0, #1
 80a16f6:	f7fe fda5 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a16fa:	f1c0 000c 	rsb	r0, r0, #12
 80a16fe:	f004 fc55 	bl	80a5fac <__aeabi_i2f>
 80a1702:	f002 fddb 	bl	80a42bc <_ZN9TimeClass4zoneEf>
    mprev=(Time.minute()-1);
 80a1706:	f002 fe2d 	bl	80a4364 <_ZN9TimeClass6minuteEv>
 80a170a:	4b1c      	ldr	r3, [pc, #112]	; (80a177c <setup+0x1cc>)
 80a170c:	3801      	subs	r0, #1
 80a170e:	6018      	str	r0, [r3, #0]
    hprev=(Time.hourFormat12()-1);
 80a1710:	f002 fe1f 	bl	80a4352 <_ZN9TimeClass12hourFormat12Ev>
    bound = dnbound;
 80a1714:	223c      	movs	r2, #60	; 0x3c
    hprev=(Time.hourFormat12()-1);
 80a1716:	4b1a      	ldr	r3, [pc, #104]	; (80a1780 <setup+0x1d0>)
 80a1718:	3801      	subs	r0, #1
 80a171a:	6018      	str	r0, [r3, #0]
    bound = dnbound;
 80a171c:	4b19      	ldr	r3, [pc, #100]	; (80a1784 <setup+0x1d4>)
 80a171e:	601a      	str	r2, [r3, #0]
    EEPROM.write(2,1);
 80a1720:	f003 fdda 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a1724:	2101      	movs	r1, #1
 80a1726:	2002      	movs	r0, #2
 80a1728:	f002 faa8 	bl	80a3c7c <HAL_EEPROM_Write>
    delay(50);
 80a172c:	2032      	movs	r0, #50	; 0x32
 80a172e:	f002 fe2f 	bl	80a4390 <delay>
    checkForUpdate(true);
 80a1732:	2001      	movs	r0, #1
}
 80a1734:	b003      	add	sp, #12
 80a1736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    checkForUpdate(true);
 80a173a:	f7ff bef9 	b.w	80a1530 <_Z14checkForUpdateb>
 80a173e:	bf00      	nop
 80a1740:	20000288 	.word	0x20000288
 80a1744:	2000029c 	.word	0x2000029c
 80a1748:	20000aa0 	.word	0x20000aa0
 80a174c:	20000294 	.word	0x20000294
 80a1750:	200002a0 	.word	0x200002a0
 80a1754:	20000ab8 	.word	0x20000ab8
 80a1758:	20000268 	.word	0x20000268
 80a175c:	2000026c 	.word	0x2000026c
 80a1760:	20000ab4 	.word	0x20000ab4
 80a1764:	20000290 	.word	0x20000290
 80a1768:	080a8f2a 	.word	0x080a8f2a
 80a176c:	2000027c 	.word	0x2000027c
 80a1770:	080a8f30 	.word	0x080a8f30
 80a1774:	080a00b9 	.word	0x080a00b9
 80a1778:	080a8f36 	.word	0x080a8f36
 80a177c:	2000028c 	.word	0x2000028c
 80a1780:	20000274 	.word	0x20000274
 80a1784:	2000025c 	.word	0x2000025c
 80a1788:	20000284 	.word	0x20000284
 80a178c:	0001869f 	.word	0x0001869f

080a1790 <_Z9connDelayi>:
bool connDelay(int length){
 80a1790:	b538      	push	{r3, r4, r5, lr}
    for(count=0; count<(length/100); count++){
 80a1792:	2564      	movs	r5, #100	; 0x64
 80a1794:	2400      	movs	r4, #0
 80a1796:	fb90 f5f5 	sdiv	r5, r0, r5
 80a179a:	42a5      	cmp	r5, r4
    return false;
 80a179c:	f04f 0000 	mov.w	r0, #0
    for(count=0; count<(length/100); count++){
 80a17a0:	dd03      	ble.n	80a17aa <_Z9connDelayi+0x1a>
        if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW){
 80a17a2:	f003 fd6f 	bl	80a5284 <digitalRead>
 80a17a6:	b108      	cbz	r0, 80a17ac <_Z9connDelayi+0x1c>
            return true;
 80a17a8:	2001      	movs	r0, #1
}
 80a17aa:	bd38      	pop	{r3, r4, r5, pc}
        if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW){
 80a17ac:	2001      	movs	r0, #1
 80a17ae:	f003 fd69 	bl	80a5284 <digitalRead>
 80a17b2:	2800      	cmp	r0, #0
 80a17b4:	d1f8      	bne.n	80a17a8 <_Z9connDelayi+0x18>
 80a17b6:	2002      	movs	r0, #2
 80a17b8:	f003 fd64 	bl	80a5284 <digitalRead>
 80a17bc:	2800      	cmp	r0, #0
 80a17be:	d1f3      	bne.n	80a17a8 <_Z9connDelayi+0x18>
            delay(100);
 80a17c0:	2064      	movs	r0, #100	; 0x64
 80a17c2:	f002 fde5 	bl	80a4390 <delay>
    for(count=0; count<(length/100); count++){
 80a17c6:	3401      	adds	r4, #1
 80a17c8:	e7e7      	b.n	80a179a <_Z9connDelayi+0xa>
 80a17ca:	0000      	movs	r0, r0
 80a17cc:	0000      	movs	r0, r0
	...

080a17d0 <_Z16animateConditionhtihhh>:
void animateCondition(uint8_t cnum, uint16_t inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
 80a17d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(cnum > 199 && cnum < 235){
 80a17d4:	3038      	adds	r0, #56	; 0x38
 80a17d6:	b2c0      	uxtb	r0, r0
 80a17d8:	2822      	cmp	r0, #34	; 0x22
void animateCondition(uint8_t cnum, uint16_t inpix, int tmr, uint8_t R, uint8_t G, uint8_t B){                      //Code block for displaying one animation of a weather condition such as rain
 80a17da:	4616      	mov	r6, r2
 80a17dc:	469b      	mov	fp, r3
 80a17de:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if(cnum > 199 && cnum < 235){
 80a17e2:	f200 8081 	bhi.w	80a18e8 <_Z16animateConditionhtihhh+0x118>
        screenArray[inpix+27] = 0;
 80a17e6:	2300      	movs	r3, #0
 80a17e8:	4c45      	ldr	r4, [pc, #276]	; (80a1900 <_Z16animateConditionhtihhh+0x130>)
        screenArray[inpix+29] = 0;
 80a17ea:	f101 081d 	add.w	r8, r1, #29
        screenArray[inpix+20] = 0;
 80a17ee:	f101 0914 	add.w	r9, r1, #20
        printScreen(screenArray,inpix+20,inpix+29);
 80a17f2:	4620      	mov	r0, r4
        screenArray[inpix+27] = 0;
 80a17f4:	f101 0a1b 	add.w	sl, r1, #27
        screenArray[inpix+22] = 0;
 80a17f8:	f101 0516 	add.w	r5, r1, #22
        printScreen(screenArray,inpix+20,inpix+29);
 80a17fc:	4642      	mov	r2, r8
 80a17fe:	4649      	mov	r1, r9
        screenArray[inpix+27] = 0;
 80a1800:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
        screenArray[inpix+20] = 0;
 80a1804:	f844 3029 	str.w	r3, [r4, r9, lsl #2]
        screenArray[inpix+29] = 0;
 80a1808:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
        screenArray[inpix+22] = 0;
 80a180c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        printScreen(screenArray,inpix+20,inpix+29);
 80a1810:	f7fe fd1a 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/4)) return;
 80a1814:	4630      	mov	r0, r6
 80a1816:	2e00      	cmp	r6, #0
 80a1818:	bfb8      	it	lt
 80a181a:	1cf0      	addlt	r0, r6, #3
 80a181c:	1080      	asrs	r0, r0, #2
 80a181e:	f7ff ffb7 	bl	80a1790 <_Z9connDelayi>
 80a1822:	2800      	cmp	r0, #0
 80a1824:	d15d      	bne.n	80a18e2 <_Z16animateConditionhtihhh+0x112>
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a1826:	4658      	mov	r0, fp
 80a1828:	f003 ff6a 	bl	80a5700 <__aeabi_i2d>
 80a182c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a1830:	4b34      	ldr	r3, [pc, #208]	; (80a1904 <_Z16animateConditionhtihhh+0x134>)
 80a1832:	f004 f8f9 	bl	80a5a28 <__aeabi_ddiv>
 80a1836:	f004 fa8f 	bl	80a5d58 <__aeabi_d2uiz>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a183a:	4b33      	ldr	r3, [pc, #204]	; (80a1908 <_Z16animateConditionhtihhh+0x138>)
    int R_temp = R;
 80a183c:	b2c0      	uxtb	r0, r0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a183e:	4343      	muls	r3, r0
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a1840:	4638      	mov	r0, r7
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1842:	9301      	str	r3, [sp, #4]
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a1844:	f003 ff5c 	bl	80a5700 <__aeabi_i2d>
 80a1848:	a32b      	add	r3, pc, #172	; (adr r3, 80a18f8 <_Z16animateConditionhtihhh+0x128>)
 80a184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a184e:	f003 ffc1 	bl	80a57d4 <__aeabi_dmul>
 80a1852:	f004 fa81 	bl	80a5d58 <__aeabi_d2uiz>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a185a:	9a01      	ldr	r2, [sp, #4]
    int G_temp = G;
 80a185c:	b2c0      	uxtb	r0, r0
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a185e:	fb03 2000 	mla	r0, r3, r0, r2
        if(connDelay(tmr/2)) return;
 80a1862:	eb06 7bd6 	add.w	fp, r6, r6, lsr #31
        screenArray[inpix+27] = encodeColor(R/1.2,G*2.4,0);
 80a1866:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        printScreen(screenArray,inpix+27, inpix+27);
 80a186a:	4652      	mov	r2, sl
 80a186c:	4824      	ldr	r0, [pc, #144]	; (80a1900 <_Z16animateConditionhtihhh+0x130>)
 80a186e:	4651      	mov	r1, sl
        if(connDelay(tmr/2)) return;
 80a1870:	ea4f 0b6b 	mov.w	fp, fp, asr #1
        printScreen(screenArray,inpix+27, inpix+27);
 80a1874:	f7fe fce8 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
 80a1878:	4658      	mov	r0, fp
 80a187a:	f7ff ff89 	bl	80a1790 <_Z9connDelayi>
 80a187e:	bb80      	cbnz	r0, 80a18e2 <_Z16animateConditionhtihhh+0x112>
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1880:	9b01      	ldr	r3, [sp, #4]
        screenArray[inpix+20] = encodeColor(R/1.2,G*2,0);
 80a1882:	007f      	lsls	r7, r7, #1
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a1884:	461a      	mov	r2, r3
 80a1886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    int G_temp = G;
 80a188a:	b2ff      	uxtb	r7, r7
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a188c:	fb03 2707 	mla	r7, r3, r7, r2
        printScreen(screenArray,inpix+20, inpix+20);
 80a1890:	481b      	ldr	r0, [pc, #108]	; (80a1900 <_Z16animateConditionhtihhh+0x130>)
 80a1892:	464a      	mov	r2, r9
 80a1894:	4649      	mov	r1, r9
        screenArray[inpix+20] = encodeColor(R/1.2,G*2,0);
 80a1896:	f844 7029 	str.w	r7, [r4, r9, lsl #2]
        printScreen(screenArray,inpix+20, inpix+20);
 80a189a:	f7fe fcd5 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
 80a189e:	4658      	mov	r0, fp
 80a18a0:	f7ff ff76 	bl	80a1790 <_Z9connDelayi>
 80a18a4:	b9e8      	cbnz	r0, 80a18e2 <_Z16animateConditionhtihhh+0x112>
        printScreen(screenArray,inpix+29, inpix+29);
 80a18a6:	4816      	ldr	r0, [pc, #88]	; (80a1900 <_Z16animateConditionhtihhh+0x130>)
 80a18a8:	4642      	mov	r2, r8
 80a18aa:	4641      	mov	r1, r8
        screenArray[inpix+29] = encodeColor(R/1.2,G*2,0);
 80a18ac:	f844 7028 	str.w	r7, [r4, r8, lsl #2]
        printScreen(screenArray,inpix+29, inpix+29);
 80a18b0:	f7fe fcca 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr/2)) return;
 80a18b4:	4658      	mov	r0, fp
 80a18b6:	f7ff ff6b 	bl	80a1790 <_Z9connDelayi>
 80a18ba:	b990      	cbnz	r0, 80a18e2 <_Z16animateConditionhtihhh+0x112>
        printScreen(screenArray,inpix+22, inpix+22);
 80a18bc:	4810      	ldr	r0, [pc, #64]	; (80a1900 <_Z16animateConditionhtihhh+0x130>)
 80a18be:	462a      	mov	r2, r5
 80a18c0:	4629      	mov	r1, r5
        screenArray[inpix+22] = encodeColor(R/1.2,G*2,0);
 80a18c2:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
        printScreen(screenArray,inpix+22, inpix+22);
 80a18c6:	f7fe fcbf 	bl	80a0248 <_Z11printScreenPiii>
        if(connDelay(tmr)) return;
 80a18ca:	4630      	mov	r0, r6
 80a18cc:	f7ff ff60 	bl	80a1790 <_Z9connDelayi>
 80a18d0:	b938      	cbnz	r0, 80a18e2 <_Z16animateConditionhtihhh+0x112>
        screenArray[inpix+27] = 0;
 80a18d2:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
        screenArray[inpix+20] = 0;
 80a18d6:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
        screenArray[inpix+29] = 0;
 80a18da:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
        screenArray[inpix+22] = 0;
 80a18de:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
}
 80a18e2:	b003      	add	sp, #12
 80a18e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(connDelay(tmr*3)) return;
 80a18e8:	eb02 0042 	add.w	r0, r2, r2, lsl #1
}
 80a18ec:	b003      	add	sp, #12
 80a18ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if(connDelay(tmr*3)) return;
 80a18f2:	f7ff bf4d 	b.w	80a1790 <_Z9connDelayi>
 80a18f6:	bf00      	nop
 80a18f8:	33333333 	.word	0x33333333
 80a18fc:	40033333 	.word	0x40033333
 80a1900:	200002a0 	.word	0x200002a0
 80a1904:	3ff33333 	.word	0x3ff33333
 80a1908:	000f4240 	.word	0x000f4240

080a190c <_Z12isSensorDarkv>:
    if(analogRead(A4) < bound) {
 80a190c:	200e      	movs	r0, #14
bool isSensorDark(){
 80a190e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(analogRead(A4) < bound) {
 80a1912:	f003 fcca 	bl	80a52aa <analogRead>
 80a1916:	4b16      	ldr	r3, [pc, #88]	; (80a1970 <_Z12isSensorDarkv+0x64>)
 80a1918:	681a      	ldr	r2, [r3, #0]
 80a191a:	4290      	cmp	r0, r2
 80a191c:	da26      	bge.n	80a196c <_Z12isSensorDarkv+0x60>
        bound = upbound;
 80a191e:	22fa      	movs	r2, #250	; 0xfa
        scan = 1;
 80a1920:	2501      	movs	r5, #1
        gclock = 0;
 80a1922:	2400      	movs	r4, #0
        bound = upbound;
 80a1924:	601a      	str	r2, [r3, #0]
        rclock = 1;
 80a1926:	4e13      	ldr	r6, [pc, #76]	; (80a1974 <_Z12isSensorDarkv+0x68>)
        scan = 1;
 80a1928:	4b13      	ldr	r3, [pc, #76]	; (80a1978 <_Z12isSensorDarkv+0x6c>)
        gclock = 0;
 80a192a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a1984 <_Z12isSensorDarkv+0x78>
        bclock = 0;
 80a192e:	4f13      	ldr	r7, [pc, #76]	; (80a197c <_Z12isSensorDarkv+0x70>)
        scan = 1;
 80a1930:	601d      	str	r5, [r3, #0]
        rclock = 1;
 80a1932:	6035      	str	r5, [r6, #0]
        gclock = 0;
 80a1934:	f8c8 4000 	str.w	r4, [r8]
        bclock = 0;
 80a1938:	603c      	str	r4, [r7, #0]
        if(EEPROM.read(5) == 2){
 80a193a:	f003 fccd 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a193e:	2005      	movs	r0, #5
 80a1940:	f7fe fc80 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a1944:	2802      	cmp	r0, #2
 80a1946:	d107      	bne.n	80a1958 <_Z12isSensorDarkv+0x4c>
            gclock = 1;
 80a1948:	f8c8 5000 	str.w	r5, [r8]
            rclock = 0;
 80a194c:	6034      	str	r4, [r6, #0]
        dmode = 1;
 80a194e:	2001      	movs	r0, #1
 80a1950:	4b0b      	ldr	r3, [pc, #44]	; (80a1980 <_Z12isSensorDarkv+0x74>)
 80a1952:	6018      	str	r0, [r3, #0]
}
 80a1954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(EEPROM.read(5) == 3){
 80a1958:	f003 fcbe 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a195c:	2005      	movs	r0, #5
 80a195e:	f7fe fc71 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a1962:	2803      	cmp	r0, #3
            bclock = 1;
 80a1964:	bf04      	itt	eq
 80a1966:	603d      	streq	r5, [r7, #0]
            rclock = 0;
 80a1968:	6034      	streq	r4, [r6, #0]
 80a196a:	e7f0      	b.n	80a194e <_Z12isSensorDarkv+0x42>
    return false;
 80a196c:	2000      	movs	r0, #0
 80a196e:	e7f1      	b.n	80a1954 <_Z12isSensorDarkv+0x48>
 80a1970:	2000025c 	.word	0x2000025c
 80a1974:	20000298 	.word	0x20000298
 80a1978:	2000029c 	.word	0x2000029c
 80a197c:	20000258 	.word	0x20000258
 80a1980:	20000268 	.word	0x20000268
 80a1984:	20000270 	.word	0x20000270

080a1988 <_Z11weatherLooptthhh>:
void weatherLoop(uint16_t inpix, uint16_t clockpix, uint8_t R, uint8_t G, uint8_t B){
 80a1988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a198c:	b08b      	sub	sp, #44	; 0x2c
 80a198e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80a1992:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    if(wmode == 1)                                                  //Outdoor Temperature
 80a1996:	4a8f      	ldr	r2, [pc, #572]	; (80a1bd4 <_Z11weatherLooptthhh+0x24c>)
void weatherLoop(uint16_t inpix, uint16_t clockpix, uint8_t R, uint8_t G, uint8_t B){
 80a1998:	9302      	str	r3, [sp, #8]
    if(wmode == 1)                                                  //Outdoor Temperature
 80a199a:	6813      	ldr	r3, [r2, #0]
void weatherLoop(uint16_t inpix, uint16_t clockpix, uint8_t R, uint8_t G, uint8_t B){
 80a199c:	4604      	mov	r4, r0
    if(wmode == 1)                                                  //Outdoor Temperature
 80a199e:	2b01      	cmp	r3, #1
void weatherLoop(uint16_t inpix, uint16_t clockpix, uint8_t R, uint8_t G, uint8_t B){
 80a19a0:	468b      	mov	fp, r1
 80a19a2:	9205      	str	r2, [sp, #20]
    if(wmode == 1)                                                  //Outdoor Temperature
 80a19a4:	f040 8113 	bne.w	80a1bce <_Z11weatherLooptthhh+0x246>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a19a8:	2600      	movs	r6, #0
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
 80a19aa:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80a1be8 <_Z11weatherLooptthhh+0x260>
 80a19ae:	4f8a      	ldr	r7, [pc, #552]	; (80a1bd8 <_Z11weatherLooptthhh+0x250>)
 80a19b0:	2519      	movs	r5, #25
 80a19b2:	f8d8 3000 	ldr.w	r3, [r8]
 80a19b6:	2200      	movs	r2, #0
 80a19b8:	4373      	muls	r3, r6
 80a19ba:	fb93 f3f5 	sdiv	r3, r3, r5
 80a19be:	e9cd 2200 	strd	r2, r2, [sp]
 80a19c2:	b2db      	uxtb	r3, r3
 80a19c4:	4621      	mov	r1, r4
 80a19c6:	7838      	ldrb	r0, [r7, #0]
            printScreen(screenArray,inpix,inpix+88);
 80a19c8:	f104 0958 	add.w	r9, r4, #88	; 0x58
            displayTemp(TFahr,inpix,0,(gclock*l)/25,0,false);                     //Call function used to display numbers
 80a19cc:	f7ff fcb4 	bl	80a1338 <_Z11displayTemphthhhb>
            printScreen(screenArray,inpix,inpix+88);
 80a19d0:	464a      	mov	r2, r9
 80a19d2:	4621      	mov	r1, r4
 80a19d4:	4881      	ldr	r0, [pc, #516]	; (80a1bdc <_Z11weatherLooptthhh+0x254>)
 80a19d6:	f7fe fc37 	bl	80a0248 <_Z11printScreenPiii>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a19da:	3601      	adds	r6, #1
            delay(10);                                               //Adjust this delay to change animation duration
 80a19dc:	200a      	movs	r0, #10
 80a19de:	f002 fcd7 	bl	80a4390 <delay>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a19e2:	2e1a      	cmp	r6, #26
 80a19e4:	d1e4      	bne.n	80a19b0 <_Z11weatherLooptthhh+0x28>
        connDelay(2500);
 80a19e6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a19ea:	f7ff fed1 	bl	80a1790 <_Z9connDelayi>
        if(isSensorDark()){
 80a19ee:	f7ff ff8d 	bl	80a190c <_Z12isSensorDarkv>
 80a19f2:	9b03      	ldr	r3, [sp, #12]
 80a19f4:	fb05 f703 	mul.w	r7, r5, r3
 80a19f8:	2800      	cmp	r0, #0
 80a19fa:	d03e      	beq.n	80a1a7a <_Z11weatherLooptthhh+0xf2>
 80a19fc:	46b2      	mov	sl, r6
 80a19fe:	9b04      	ldr	r3, [sp, #16]
 80a1a00:	fb05 f803 	mul.w	r8, r5, r3
 80a1a04:	9b02      	ldr	r3, [sp, #8]
 80a1a06:	435d      	muls	r5, r3
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1a08:	2119      	movs	r1, #25
 80a1a0a:	fbb5 f2f1 	udiv	r2, r5, r1
 80a1a0e:	fbb7 f6f1 	udiv	r6, r7, r1
 80a1a12:	fbb8 f1f1 	udiv	r1, r8, r1
 80a1a16:	4872      	ldr	r0, [pc, #456]	; (80a1be0 <_Z11weatherLooptthhh+0x258>)
 80a1a18:	4b72      	ldr	r3, [pc, #456]	; (80a1be4 <_Z11weatherLooptthhh+0x25c>)
 80a1a1a:	6800      	ldr	r0, [r0, #0]
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	4401      	add	r1, r0
 80a1a20:	2001      	movs	r0, #1
 80a1a22:	4413      	add	r3, r2
 80a1a24:	4a70      	ldr	r2, [pc, #448]	; (80a1be8 <_Z11weatherLooptthhh+0x260>)
 80a1a26:	b2f6      	uxtb	r6, r6
 80a1a28:	6812      	ldr	r2, [r2, #0]
 80a1a2a:	b2db      	uxtb	r3, r3
 80a1a2c:	4432      	add	r2, r6
 80a1a2e:	9000      	str	r0, [sp, #0]
 80a1a30:	b2d2      	uxtb	r2, r2
 80a1a32:	4658      	mov	r0, fp
 80a1a34:	b2c9      	uxtb	r1, r1
 80a1a36:	f7ff fbe7 	bl	80a1208 <_Z12displayClockthhhi>
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
 80a1a3a:	2200      	movs	r2, #0
 80a1a3c:	e9cd 2200 	strd	r2, r2, [sp]
 80a1a40:	4865      	ldr	r0, [pc, #404]	; (80a1bd8 <_Z11weatherLooptthhh+0x250>)
 80a1a42:	4633      	mov	r3, r6
 80a1a44:	4621      	mov	r1, r4
 80a1a46:	7800      	ldrb	r0, [r0, #0]
 80a1a48:	f7ff fc76 	bl	80a1338 <_Z11displayTemphthhhb>
                printScreen(screenArray,clockpix,inpix+88);
 80a1a4c:	464a      	mov	r2, r9
 80a1a4e:	4659      	mov	r1, fp
 80a1a50:	4862      	ldr	r0, [pc, #392]	; (80a1bdc <_Z11weatherLooptthhh+0x254>)
 80a1a52:	f7fe fbf9 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1a56:	200a      	movs	r0, #10
 80a1a58:	f002 fc9a 	bl	80a4390 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1a5c:	9b04      	ldr	r3, [sp, #16]
 80a1a5e:	f1ba 0a01 	subs.w	sl, sl, #1
 80a1a62:	eba8 0803 	sub.w	r8, r8, r3
 80a1a66:	9b03      	ldr	r3, [sp, #12]
 80a1a68:	eba7 0703 	sub.w	r7, r7, r3
 80a1a6c:	9b02      	ldr	r3, [sp, #8]
 80a1a6e:	eba5 0503 	sub.w	r5, r5, r3
 80a1a72:	d1c9      	bne.n	80a1a08 <_Z11weatherLooptthhh+0x80>
}
 80a1a74:	b00b      	add	sp, #44	; 0x2c
 80a1a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
 80a1a7a:	4680      	mov	r8, r0
                printScreen(screenArray,inpix,inpix+88);
 80a1a7c:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80a1bdc <_Z11weatherLooptthhh+0x254>
                displayTemp(TFahr,inpix,0,(G*l)/25,0,false);                     //Call function used to display numbers
 80a1a80:	fbb7 f3f5 	udiv	r3, r7, r5
 80a1a84:	e9cd 8800 	strd	r8, r8, [sp]
 80a1a88:	4853      	ldr	r0, [pc, #332]	; (80a1bd8 <_Z11weatherLooptthhh+0x250>)
 80a1a8a:	b2db      	uxtb	r3, r3
 80a1a8c:	2200      	movs	r2, #0
 80a1a8e:	4621      	mov	r1, r4
 80a1a90:	7800      	ldrb	r0, [r0, #0]
 80a1a92:	f7ff fc51 	bl	80a1338 <_Z11displayTemphthhhb>
                printScreen(screenArray,inpix,inpix+88);
 80a1a96:	464a      	mov	r2, r9
 80a1a98:	4621      	mov	r1, r4
 80a1a9a:	4650      	mov	r0, sl
 80a1a9c:	f7fe fbd4 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1aa0:	200a      	movs	r0, #10
 80a1aa2:	f002 fc75 	bl	80a4390 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1aa6:	9b03      	ldr	r3, [sp, #12]
 80a1aa8:	3e01      	subs	r6, #1
 80a1aaa:	eba7 0703 	sub.w	r7, r7, r3
 80a1aae:	d1e7      	bne.n	80a1a80 <_Z11weatherLooptthhh+0xf8>
        if(EEPROM.read(4) == 1){                                    //Check settings in EEPROM
 80a1ab0:	f003 fc12 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a1ab4:	2004      	movs	r0, #4
 80a1ab6:	f7fe fbc5 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a1aba:	2801      	cmp	r0, #1
 80a1abc:	d17c      	bne.n	80a1bb8 <_Z11weatherLooptthhh+0x230>
            wmode = 2;                                              //Go to indoor temperature code block if configured to do so
 80a1abe:	2302      	movs	r3, #2
 80a1ac0:	9a05      	ldr	r2, [sp, #20]
 80a1ac2:	6013      	str	r3, [r2, #0]
        if(isSensorDark()){
 80a1ac4:	261a      	movs	r6, #26
 80a1ac6:	2500      	movs	r5, #0
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1ac8:	f04f 0a32 	mov.w	sl, #50	; 0x32
 80a1acc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80a1bec <_Z11weatherLooptthhh+0x264>
            printScreen(screenArray,inpix,inpix+88);
 80a1ad0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80a1bdc <_Z11weatherLooptthhh+0x254>
            displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1ad4:	2719      	movs	r7, #25
 80a1ad6:	9902      	ldr	r1, [sp, #8]
 80a1ad8:	9b04      	ldr	r3, [sp, #16]
 80a1ada:	4369      	muls	r1, r5
 80a1adc:	fb05 f203 	mul.w	r2, r5, r3
 80a1ae0:	fbb1 f1f7 	udiv	r1, r1, r7
 80a1ae4:	2300      	movs	r3, #0
 80a1ae6:	fbb2 f2fa 	udiv	r2, r2, sl
 80a1aea:	b2c9      	uxtb	r1, r1
 80a1aec:	9301      	str	r3, [sp, #4]
 80a1aee:	9100      	str	r1, [sp, #0]
 80a1af0:	f899 0000 	ldrb.w	r0, [r9]
 80a1af4:	4621      	mov	r1, r4
 80a1af6:	b2d2      	uxtb	r2, r2
 80a1af8:	f7ff fc1e 	bl	80a1338 <_Z11displayTemphthhhb>
            printScreen(screenArray,inpix,inpix+88);
 80a1afc:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80a1b00:	461a      	mov	r2, r3
 80a1b02:	4621      	mov	r1, r4
 80a1b04:	4640      	mov	r0, r8
 80a1b06:	9306      	str	r3, [sp, #24]
 80a1b08:	f7fe fb9e 	bl	80a0248 <_Z11printScreenPiii>
            delay(10);                                               //Adjust this delay to change animation duration
 80a1b0c:	200a      	movs	r0, #10
 80a1b0e:	f002 fc3f 	bl	80a4390 <delay>
        for(int l=0; l <= 25; l++){                                     //Fade up animation for numbers
 80a1b12:	3e01      	subs	r6, #1
 80a1b14:	f105 0501 	add.w	r5, r5, #1
 80a1b18:	d1dc      	bne.n	80a1ad4 <_Z11weatherLooptthhh+0x14c>
        connDelay(2500);
 80a1b1a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a1b1e:	f7ff fe37 	bl	80a1790 <_Z9connDelayi>
        if(isSensorDark()){
 80a1b22:	f7ff fef3 	bl	80a190c <_Z12isSensorDarkv>
 80a1b26:	9b04      	ldr	r3, [sp, #16]
 80a1b28:	fb07 f503 	mul.w	r5, r7, r3
 80a1b2c:	9b02      	ldr	r3, [sp, #8]
 80a1b2e:	fb07 f603 	mul.w	r6, r7, r3
 80a1b32:	2800      	cmp	r0, #0
 80a1b34:	d05c      	beq.n	80a1bf0 <_Z11weatherLooptthhh+0x268>
 80a1b36:	f04f 091a 	mov.w	r9, #26
 80a1b3a:	9b03      	ldr	r3, [sp, #12]
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1b3c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80a1be8 <_Z11weatherLooptthhh+0x260>
 80a1b40:	435f      	muls	r7, r3
 80a1b42:	2119      	movs	r1, #25
 80a1b44:	fbb7 f0f1 	udiv	r0, r7, r1
 80a1b48:	fbb6 f8f1 	udiv	r8, r6, r1
 80a1b4c:	fbb5 f1f1 	udiv	r1, r5, r1
 80a1b50:	f8da 2000 	ldr.w	r2, [sl]
 80a1b54:	4b23      	ldr	r3, [pc, #140]	; (80a1be4 <_Z11weatherLooptthhh+0x25c>)
 80a1b56:	4402      	add	r2, r0
 80a1b58:	4821      	ldr	r0, [pc, #132]	; (80a1be0 <_Z11weatherLooptthhh+0x258>)
 80a1b5a:	681b      	ldr	r3, [r3, #0]
 80a1b5c:	6800      	ldr	r0, [r0, #0]
 80a1b5e:	fa5f f888 	uxtb.w	r8, r8
 80a1b62:	4401      	add	r1, r0
 80a1b64:	2001      	movs	r0, #1
 80a1b66:	4443      	add	r3, r8
 80a1b68:	9000      	str	r0, [sp, #0]
 80a1b6a:	b2db      	uxtb	r3, r3
 80a1b6c:	4658      	mov	r0, fp
 80a1b6e:	b2d2      	uxtb	r2, r2
 80a1b70:	b2c9      	uxtb	r1, r1
 80a1b72:	f7ff fb49 	bl	80a1208 <_Z12displayClockthhhi>
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1b76:	2232      	movs	r2, #50	; 0x32
 80a1b78:	2300      	movs	r3, #0
 80a1b7a:	fbb5 f2f2 	udiv	r2, r5, r2
 80a1b7e:	e9cd 8300 	strd	r8, r3, [sp]
 80a1b82:	481a      	ldr	r0, [pc, #104]	; (80a1bec <_Z11weatherLooptthhh+0x264>)
 80a1b84:	4621      	mov	r1, r4
 80a1b86:	7800      	ldrb	r0, [r0, #0]
 80a1b88:	b2d2      	uxtb	r2, r2
 80a1b8a:	f7ff fbd5 	bl	80a1338 <_Z11displayTemphthhhb>
                printScreen(screenArray,clockpix,inpix+88);
 80a1b8e:	4659      	mov	r1, fp
 80a1b90:	9a06      	ldr	r2, [sp, #24]
 80a1b92:	4812      	ldr	r0, [pc, #72]	; (80a1bdc <_Z11weatherLooptthhh+0x254>)
 80a1b94:	f7fe fb58 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1b98:	200a      	movs	r0, #10
 80a1b9a:	f002 fbf9 	bl	80a4390 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1b9e:	9b04      	ldr	r3, [sp, #16]
 80a1ba0:	f1b9 0901 	subs.w	r9, r9, #1
 80a1ba4:	eba5 0503 	sub.w	r5, r5, r3
 80a1ba8:	9b03      	ldr	r3, [sp, #12]
 80a1baa:	eba7 0703 	sub.w	r7, r7, r3
 80a1bae:	9b02      	ldr	r3, [sp, #8]
 80a1bb0:	eba6 0603 	sub.w	r6, r6, r3
 80a1bb4:	d1c5      	bne.n	80a1b42 <_Z11weatherLooptthhh+0x1ba>
 80a1bb6:	e75d      	b.n	80a1a74 <_Z11weatherLooptthhh+0xec>
            wmode = 3;                                              //Otherwise skip, and go to the humidity control
 80a1bb8:	2303      	movs	r3, #3
 80a1bba:	9a05      	ldr	r2, [sp, #20]
 80a1bbc:	6013      	str	r3, [r2, #0]
    if (wmode == 3)
 80a1bbe:	9b05      	ldr	r3, [sp, #20]
 80a1bc0:	681b      	ldr	r3, [r3, #0]
 80a1bc2:	2b03      	cmp	r3, #3
 80a1bc4:	d03d      	beq.n	80a1c42 <_Z11weatherLooptthhh+0x2ba>
    if(wmode == 4)
 80a1bc6:	2b04      	cmp	r3, #4
 80a1bc8:	f47f af54 	bne.w	80a1a74 <_Z11weatherLooptthhh+0xec>
 80a1bcc:	e0ce      	b.n	80a1d6c <_Z11weatherLooptthhh+0x3e4>
    if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
 80a1bce:	2b02      	cmp	r3, #2
 80a1bd0:	d1f5      	bne.n	80a1bbe <_Z11weatherLooptthhh+0x236>
 80a1bd2:	e777      	b.n	80a1ac4 <_Z11weatherLooptthhh+0x13c>
 80a1bd4:	20000ab8 	.word	0x20000ab8
 80a1bd8:	20000250 	.word	0x20000250
 80a1bdc:	200002a0 	.word	0x200002a0
 80a1be0:	20000298 	.word	0x20000298
 80a1be4:	20000258 	.word	0x20000258
 80a1be8:	20000270 	.word	0x20000270
 80a1bec:	20000280 	.word	0x20000280
        if(isSensorDark()){
 80a1bf0:	271a      	movs	r7, #26
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1bf2:	f04f 0a32 	mov.w	sl, #50	; 0x32
 80a1bf6:	f8df 93d0 	ldr.w	r9, [pc, #976]	; 80a1fc8 <_Z11weatherLooptthhh+0x640>
                printScreen(screenArray,inpix,inpix+88);
 80a1bfa:	f8df 83c0 	ldr.w	r8, [pc, #960]	; 80a1fbc <_Z11weatherLooptthhh+0x634>
                displayTemp(itemp,inpix,(R*l)/50,0,(B*l)/25,false);                     //Call function used to display numbers
 80a1bfe:	2119      	movs	r1, #25
 80a1c00:	fbb6 f1f1 	udiv	r1, r6, r1
 80a1c04:	2300      	movs	r3, #0
 80a1c06:	fbb5 f2fa 	udiv	r2, r5, sl
 80a1c0a:	b2c9      	uxtb	r1, r1
 80a1c0c:	9301      	str	r3, [sp, #4]
 80a1c0e:	9100      	str	r1, [sp, #0]
 80a1c10:	f899 0000 	ldrb.w	r0, [r9]
 80a1c14:	4621      	mov	r1, r4
 80a1c16:	b2d2      	uxtb	r2, r2
 80a1c18:	f7ff fb8e 	bl	80a1338 <_Z11displayTemphthhhb>
                printScreen(screenArray,inpix,inpix+88);
 80a1c1c:	4621      	mov	r1, r4
 80a1c1e:	4640      	mov	r0, r8
 80a1c20:	9a06      	ldr	r2, [sp, #24]
 80a1c22:	f7fe fb11 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);                                              //Adjust this delay to change animation duration
 80a1c26:	200a      	movs	r0, #10
 80a1c28:	f002 fbb2 	bl	80a4390 <delay>
            for(int l=25; l >= 0; l--){                                     //Fade down animation
 80a1c2c:	9b04      	ldr	r3, [sp, #16]
 80a1c2e:	3f01      	subs	r7, #1
 80a1c30:	eba5 0503 	sub.w	r5, r5, r3
 80a1c34:	9b02      	ldr	r3, [sp, #8]
 80a1c36:	eba6 0603 	sub.w	r6, r6, r3
 80a1c3a:	d1e0      	bne.n	80a1bfe <_Z11weatherLooptthhh+0x276>
        wmode = 3;
 80a1c3c:	2303      	movs	r3, #3
 80a1c3e:	9a05      	ldr	r2, [sp, #20]
 80a1c40:	6013      	str	r3, [r2, #0]
        if(isSensorDark()){
 80a1c42:	261a      	movs	r6, #26
 80a1c44:	2500      	movs	r5, #0
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1c46:	2719      	movs	r7, #25
 80a1c48:	f8df a36c 	ldr.w	sl, [pc, #876]	; 80a1fb8 <_Z11weatherLooptthhh+0x630>
            printScreen(screenArray,inpix,inpix+88);
 80a1c4c:	f8df 936c 	ldr.w	r9, [pc, #876]	; 80a1fbc <_Z11weatherLooptthhh+0x634>
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1c50:	9a02      	ldr	r2, [sp, #8]
 80a1c52:	9b03      	ldr	r3, [sp, #12]
 80a1c54:	436a      	muls	r2, r5
 80a1c56:	436b      	muls	r3, r5
 80a1c58:	fbb2 f2f7 	udiv	r2, r2, r7
 80a1c5c:	fbb3 f3f7 	udiv	r3, r3, r7
 80a1c60:	b2d2      	uxtb	r2, r2
 80a1c62:	9200      	str	r2, [sp, #0]
 80a1c64:	b2db      	uxtb	r3, r3
 80a1c66:	2200      	movs	r2, #0
 80a1c68:	4621      	mov	r1, r4
 80a1c6a:	f89a 0000 	ldrb.w	r0, [sl]
            printScreen(screenArray,inpix,inpix+88);
 80a1c6e:	f104 0858 	add.w	r8, r4, #88	; 0x58
            displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1c72:	f7ff fbad 	bl	80a13d0 <_Z12displayHumidhthhh>
            printScreen(screenArray,inpix,inpix+88);
 80a1c76:	4642      	mov	r2, r8
 80a1c78:	4621      	mov	r1, r4
 80a1c7a:	4648      	mov	r0, r9
 80a1c7c:	f7fe fae4 	bl	80a0248 <_Z11printScreenPiii>
            delay(10);
 80a1c80:	200a      	movs	r0, #10
 80a1c82:	f002 fb85 	bl	80a4390 <delay>
        for(int l=0; l <= 25; l++){
 80a1c86:	3e01      	subs	r6, #1
 80a1c88:	f105 0501 	add.w	r5, r5, #1
 80a1c8c:	d1e0      	bne.n	80a1c50 <_Z11weatherLooptthhh+0x2c8>
        connDelay(2500);
 80a1c8e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a1c92:	f7ff fd7d 	bl	80a1790 <_Z9connDelayi>
        if(isSensorDark()){
 80a1c96:	f7ff fe39 	bl	80a190c <_Z12isSensorDarkv>
 80a1c9a:	9b03      	ldr	r3, [sp, #12]
 80a1c9c:	fb07 f603 	mul.w	r6, r7, r3
 80a1ca0:	9b02      	ldr	r3, [sp, #8]
 80a1ca2:	fb07 f503 	mul.w	r5, r7, r3
 80a1ca6:	2800      	cmp	r0, #0
 80a1ca8:	d03b      	beq.n	80a1d22 <_Z11weatherLooptthhh+0x39a>
 80a1caa:	9b04      	ldr	r3, [sp, #16]
 80a1cac:	435f      	muls	r7, r3
 80a1cae:	231a      	movs	r3, #26
 80a1cb0:	9305      	str	r3, [sp, #20]
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1cb2:	2119      	movs	r1, #25
 80a1cb4:	fbb6 f9f1 	udiv	r9, r6, r1
 80a1cb8:	fbb5 faf1 	udiv	sl, r5, r1
 80a1cbc:	fbb7 f1f1 	udiv	r1, r7, r1
 80a1cc0:	48ba      	ldr	r0, [pc, #744]	; (80a1fac <_Z11weatherLooptthhh+0x624>)
 80a1cc2:	4bbb      	ldr	r3, [pc, #748]	; (80a1fb0 <_Z11weatherLooptthhh+0x628>)
 80a1cc4:	6800      	ldr	r0, [r0, #0]
 80a1cc6:	4abb      	ldr	r2, [pc, #748]	; (80a1fb4 <_Z11weatherLooptthhh+0x62c>)
 80a1cc8:	4401      	add	r1, r0
 80a1cca:	2001      	movs	r0, #1
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	6812      	ldr	r2, [r2, #0]
 80a1cd0:	fa5f f989 	uxtb.w	r9, r9
 80a1cd4:	fa5f fa8a 	uxtb.w	sl, sl
 80a1cd8:	4453      	add	r3, sl
 80a1cda:	444a      	add	r2, r9
 80a1cdc:	9000      	str	r0, [sp, #0]
 80a1cde:	b2db      	uxtb	r3, r3
 80a1ce0:	4658      	mov	r0, fp
 80a1ce2:	b2d2      	uxtb	r2, r2
 80a1ce4:	b2c9      	uxtb	r1, r1
 80a1ce6:	f7ff fa8f 	bl	80a1208 <_Z12displayClockthhhi>
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1cea:	48b3      	ldr	r0, [pc, #716]	; (80a1fb8 <_Z11weatherLooptthhh+0x630>)
 80a1cec:	f8cd a000 	str.w	sl, [sp]
 80a1cf0:	464b      	mov	r3, r9
 80a1cf2:	2200      	movs	r2, #0
 80a1cf4:	4621      	mov	r1, r4
 80a1cf6:	7800      	ldrb	r0, [r0, #0]
 80a1cf8:	f7ff fb6a 	bl	80a13d0 <_Z12displayHumidhthhh>
                printScreen(screenArray,clockpix,inpix+88);
 80a1cfc:	4642      	mov	r2, r8
 80a1cfe:	4659      	mov	r1, fp
 80a1d00:	48ae      	ldr	r0, [pc, #696]	; (80a1fbc <_Z11weatherLooptthhh+0x634>)
 80a1d02:	f7fe faa1 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a1d06:	200a      	movs	r0, #10
 80a1d08:	f002 fb42 	bl	80a4390 <delay>
            for(int l=25; l >= 0; l--){
 80a1d0c:	9b04      	ldr	r3, [sp, #16]
 80a1d0e:	1aff      	subs	r7, r7, r3
 80a1d10:	9b03      	ldr	r3, [sp, #12]
 80a1d12:	1af6      	subs	r6, r6, r3
 80a1d14:	9b02      	ldr	r3, [sp, #8]
 80a1d16:	1aed      	subs	r5, r5, r3
 80a1d18:	9b05      	ldr	r3, [sp, #20]
 80a1d1a:	3b01      	subs	r3, #1
 80a1d1c:	9305      	str	r3, [sp, #20]
 80a1d1e:	d1c8      	bne.n	80a1cb2 <_Z11weatherLooptthhh+0x32a>
 80a1d20:	e6a8      	b.n	80a1a74 <_Z11weatherLooptthhh+0xec>
        if(isSensorDark()){
 80a1d22:	271a      	movs	r7, #26
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1d24:	f04f 0919 	mov.w	r9, #25
                printScreen(screenArray,inpix,inpix+88);
 80a1d28:	f8df a290 	ldr.w	sl, [pc, #656]	; 80a1fbc <_Z11weatherLooptthhh+0x634>
                displayHumid(humidity,inpix,0,(G*l)/25,(B*l)/25);
 80a1d2c:	fbb5 f2f9 	udiv	r2, r5, r9
 80a1d30:	fbb6 f3f9 	udiv	r3, r6, r9
 80a1d34:	b2d2      	uxtb	r2, r2
 80a1d36:	48a0      	ldr	r0, [pc, #640]	; (80a1fb8 <_Z11weatherLooptthhh+0x630>)
 80a1d38:	9200      	str	r2, [sp, #0]
 80a1d3a:	b2db      	uxtb	r3, r3
 80a1d3c:	2200      	movs	r2, #0
 80a1d3e:	4621      	mov	r1, r4
 80a1d40:	7800      	ldrb	r0, [r0, #0]
 80a1d42:	f7ff fb45 	bl	80a13d0 <_Z12displayHumidhthhh>
                printScreen(screenArray,inpix,inpix+88);
 80a1d46:	4642      	mov	r2, r8
 80a1d48:	4621      	mov	r1, r4
 80a1d4a:	4650      	mov	r0, sl
 80a1d4c:	f7fe fa7c 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a1d50:	200a      	movs	r0, #10
 80a1d52:	f002 fb1d 	bl	80a4390 <delay>
            for(int l=25; l >= 0; l--){
 80a1d56:	9b03      	ldr	r3, [sp, #12]
 80a1d58:	3f01      	subs	r7, #1
 80a1d5a:	eba6 0603 	sub.w	r6, r6, r3
 80a1d5e:	9b02      	ldr	r3, [sp, #8]
 80a1d60:	eba5 0503 	sub.w	r5, r5, r3
 80a1d64:	d1e2      	bne.n	80a1d2c <_Z11weatherLooptthhh+0x3a4>
        wmode = 4;
 80a1d66:	2304      	movs	r3, #4
 80a1d68:	9a05      	ldr	r2, [sp, #20]
 80a1d6a:	6013      	str	r3, [r2, #0]
        if(isSensorDark()){
 80a1d6c:	2615      	movs	r6, #21
 80a1d6e:	2700      	movs	r7, #0
            displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
 80a1d70:	2514      	movs	r5, #20
 80a1d72:	f8df 824c 	ldr.w	r8, [pc, #588]	; 80a1fc0 <_Z11weatherLooptthhh+0x638>
            printScreen(screenArray,inpix,inpix+88);
 80a1d76:	f8df 9244 	ldr.w	r9, [pc, #580]	; 80a1fbc <_Z11weatherLooptthhh+0x634>
            displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
 80a1d7a:	2100      	movs	r1, #0
 80a1d7c:	9101      	str	r1, [sp, #4]
 80a1d7e:	9902      	ldr	r1, [sp, #8]
 80a1d80:	9b03      	ldr	r3, [sp, #12]
 80a1d82:	4379      	muls	r1, r7
 80a1d84:	9a04      	ldr	r2, [sp, #16]
 80a1d86:	437b      	muls	r3, r7
 80a1d88:	437a      	muls	r2, r7
 80a1d8a:	fbb1 f1f5 	udiv	r1, r1, r5
 80a1d8e:	fbb3 f3f5 	udiv	r3, r3, r5
 80a1d92:	fbb2 f2f5 	udiv	r2, r2, r5
 80a1d96:	b2c9      	uxtb	r1, r1
 80a1d98:	9100      	str	r1, [sp, #0]
 80a1d9a:	f8b8 0000 	ldrh.w	r0, [r8]
 80a1d9e:	4621      	mov	r1, r4
 80a1da0:	b2db      	uxtb	r3, r3
 80a1da2:	b2d2      	uxtb	r2, r2
 80a1da4:	f7fe fc90 	bl	80a06c8 <_Z16displayConditiontthhhb>
            printScreen(screenArray,inpix,inpix+88);
 80a1da8:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80a1dac:	461a      	mov	r2, r3
 80a1dae:	4621      	mov	r1, r4
 80a1db0:	4648      	mov	r0, r9
 80a1db2:	9305      	str	r3, [sp, #20]
 80a1db4:	f7fe fa48 	bl	80a0248 <_Z11printScreenPiii>
            delay(10);
 80a1db8:	200a      	movs	r0, #10
 80a1dba:	f002 fae9 	bl	80a4390 <delay>
        for(int l = 0; l <= 20; l++){
 80a1dbe:	3e01      	subs	r6, #1
 80a1dc0:	f107 0701 	add.w	r7, r7, #1
 80a1dc4:	d1d9      	bne.n	80a1d7a <_Z11weatherLooptthhh+0x3f2>
        animateCondition(cid,inpix,250,R,G,B);
 80a1dc6:	9b02      	ldr	r3, [sp, #8]
 80a1dc8:	22fa      	movs	r2, #250	; 0xfa
 80a1dca:	9301      	str	r3, [sp, #4]
 80a1dcc:	9b03      	ldr	r3, [sp, #12]
 80a1dce:	4621      	mov	r1, r4
 80a1dd0:	9300      	str	r3, [sp, #0]
 80a1dd2:	f898 0000 	ldrb.w	r0, [r8]
 80a1dd6:	9b04      	ldr	r3, [sp, #16]
 80a1dd8:	f7ff fcfa 	bl	80a17d0 <_Z16animateConditionhtihhh>
        displayClock(clockpix, R,G,B, false);
 80a1ddc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
        printScreen(screenArray,clockpix,clockpix+152);
 80a1de0:	f10b 0798 	add.w	r7, fp, #152	; 0x98
        displayClock(clockpix, R,G,B, false);
 80a1de4:	4658      	mov	r0, fp
 80a1de6:	9904      	ldr	r1, [sp, #16]
 80a1de8:	9600      	str	r6, [sp, #0]
 80a1dea:	f7ff fa0d 	bl	80a1208 <_Z12displayClockthhhi>
        printScreen(screenArray,clockpix,clockpix+152);
 80a1dee:	463a      	mov	r2, r7
 80a1df0:	4659      	mov	r1, fp
 80a1df2:	4872      	ldr	r0, [pc, #456]	; (80a1fbc <_Z11weatherLooptthhh+0x634>)
 80a1df4:	f7fe fa28 	bl	80a0248 <_Z11printScreenPiii>
        animateCondition(cid,inpix,250,R,G,B);
 80a1df8:	9b02      	ldr	r3, [sp, #8]
 80a1dfa:	22fa      	movs	r2, #250	; 0xfa
 80a1dfc:	9301      	str	r3, [sp, #4]
 80a1dfe:	9b03      	ldr	r3, [sp, #12]
 80a1e00:	4621      	mov	r1, r4
 80a1e02:	9300      	str	r3, [sp, #0]
 80a1e04:	f898 0000 	ldrb.w	r0, [r8]
 80a1e08:	9b04      	ldr	r3, [sp, #16]
 80a1e0a:	f7ff fce1 	bl	80a17d0 <_Z16animateConditionhtihhh>
        displayClock(clockpix, R,G,B, false);
 80a1e0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80a1e12:	4658      	mov	r0, fp
 80a1e14:	9904      	ldr	r1, [sp, #16]
 80a1e16:	9600      	str	r6, [sp, #0]
 80a1e18:	f7ff f9f6 	bl	80a1208 <_Z12displayClockthhhi>
        printScreen(screenArray,clockpix,clockpix+152);
 80a1e1c:	463a      	mov	r2, r7
 80a1e1e:	4659      	mov	r1, fp
 80a1e20:	4866      	ldr	r0, [pc, #408]	; (80a1fbc <_Z11weatherLooptthhh+0x634>)
 80a1e22:	f7fe fa11 	bl	80a0248 <_Z11printScreenPiii>
        animateCondition(cid,inpix,250,R,G,B);
 80a1e26:	9b02      	ldr	r3, [sp, #8]
 80a1e28:	22fa      	movs	r2, #250	; 0xfa
 80a1e2a:	9301      	str	r3, [sp, #4]
 80a1e2c:	9b03      	ldr	r3, [sp, #12]
 80a1e2e:	4621      	mov	r1, r4
 80a1e30:	9300      	str	r3, [sp, #0]
 80a1e32:	f898 0000 	ldrb.w	r0, [r8]
 80a1e36:	9b04      	ldr	r3, [sp, #16]
 80a1e38:	f7ff fcca 	bl	80a17d0 <_Z16animateConditionhtihhh>
        displayClock(clockpix, R,G,B, false);
 80a1e3c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80a1e40:	4658      	mov	r0, fp
 80a1e42:	9904      	ldr	r1, [sp, #16]
 80a1e44:	9600      	str	r6, [sp, #0]
 80a1e46:	f7ff f9df 	bl	80a1208 <_Z12displayClockthhhi>
        printScreen(screenArray,clockpix,clockpix+152);
 80a1e4a:	463a      	mov	r2, r7
 80a1e4c:	4659      	mov	r1, fp
 80a1e4e:	485b      	ldr	r0, [pc, #364]	; (80a1fbc <_Z11weatherLooptthhh+0x634>)
 80a1e50:	f7fe f9fa 	bl	80a0248 <_Z11printScreenPiii>
        if(isSensorDark()){
 80a1e54:	f7ff fd5a 	bl	80a190c <_Z12isSensorDarkv>
 80a1e58:	9b04      	ldr	r3, [sp, #16]
 80a1e5a:	fb05 f703 	mul.w	r7, r5, r3
 80a1e5e:	9b03      	ldr	r3, [sp, #12]
 80a1e60:	fb05 f603 	mul.w	r6, r5, r3
 80a1e64:	9b02      	ldr	r3, [sp, #8]
 80a1e66:	435d      	muls	r5, r3
 80a1e68:	2800      	cmp	r0, #0
 80a1e6a:	d064      	beq.n	80a1f36 <_Z11weatherLooptthhh+0x5ae>
 80a1e6c:	2315      	movs	r3, #21
 80a1e6e:	46a9      	mov	r9, r5
 80a1e70:	e9cd 6707 	strd	r6, r7, [sp, #28]
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1e74:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80a1fb4 <_Z11weatherLooptthhh+0x62c>
 80a1e78:	4e4d      	ldr	r6, [pc, #308]	; (80a1fb0 <_Z11weatherLooptthhh+0x628>)
 80a1e7a:	4f4c      	ldr	r7, [pc, #304]	; (80a1fac <_Z11weatherLooptthhh+0x624>)
        if(isSensorDark()){
 80a1e7c:	9309      	str	r3, [sp, #36]	; 0x24
                displayClock(clockpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, true);
 80a1e7e:	f04f 0a19 	mov.w	sl, #25
 80a1e82:	9b08      	ldr	r3, [sp, #32]
 80a1e84:	6839      	ldr	r1, [r7, #0]
 80a1e86:	fbb3 f3fa 	udiv	r3, r3, sl
 80a1e8a:	b2db      	uxtb	r3, r3
 80a1e8c:	9306      	str	r3, [sp, #24]
 80a1e8e:	9b07      	ldr	r3, [sp, #28]
 80a1e90:	9806      	ldr	r0, [sp, #24]
 80a1e92:	fbb3 f5fa 	udiv	r5, r3, sl
 80a1e96:	fbb9 fafa 	udiv	sl, r9, sl
 80a1e9a:	4401      	add	r1, r0
 80a1e9c:	2001      	movs	r0, #1
 80a1e9e:	6833      	ldr	r3, [r6, #0]
 80a1ea0:	f8d8 2000 	ldr.w	r2, [r8]
 80a1ea4:	b2ed      	uxtb	r5, r5
 80a1ea6:	fa5f fa8a 	uxtb.w	sl, sl
 80a1eaa:	4453      	add	r3, sl
 80a1eac:	442a      	add	r2, r5
 80a1eae:	9000      	str	r0, [sp, #0]
 80a1eb0:	b2db      	uxtb	r3, r3
 80a1eb2:	4658      	mov	r0, fp
 80a1eb4:	b2d2      	uxtb	r2, r2
 80a1eb6:	b2c9      	uxtb	r1, r1
 80a1eb8:	f7ff f9a6 	bl	80a1208 <_Z12displayClockthhhi>
                displayCondition(cid,inpix, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock, false);
 80a1ebc:	683a      	ldr	r2, [r7, #0]
 80a1ebe:	9906      	ldr	r1, [sp, #24]
 80a1ec0:	f8d8 3000 	ldr.w	r3, [r8]
 80a1ec4:	440a      	add	r2, r1
 80a1ec6:	2100      	movs	r1, #0
 80a1ec8:	9101      	str	r1, [sp, #4]
 80a1eca:	6831      	ldr	r1, [r6, #0]
 80a1ecc:	483c      	ldr	r0, [pc, #240]	; (80a1fc0 <_Z11weatherLooptthhh+0x638>)
 80a1ece:	4451      	add	r1, sl
 80a1ed0:	b2c9      	uxtb	r1, r1
 80a1ed2:	9100      	str	r1, [sp, #0]
 80a1ed4:	442b      	add	r3, r5
 80a1ed6:	4621      	mov	r1, r4
 80a1ed8:	8800      	ldrh	r0, [r0, #0]
 80a1eda:	b2db      	uxtb	r3, r3
 80a1edc:	b2d2      	uxtb	r2, r2
 80a1ede:	f7fe fbf3 	bl	80a06c8 <_Z16displayConditiontthhhb>
                dimg(cid,160, ((R*l)/25)+rclock, ((G*l)/25)+gclock, ((B*l)/25)+bclock);
 80a1ee2:	683a      	ldr	r2, [r7, #0]
 80a1ee4:	9906      	ldr	r1, [sp, #24]
 80a1ee6:	f8d8 3000 	ldr.w	r3, [r8]
 80a1eea:	440a      	add	r2, r1
 80a1eec:	6831      	ldr	r1, [r6, #0]
 80a1eee:	4834      	ldr	r0, [pc, #208]	; (80a1fc0 <_Z11weatherLooptthhh+0x638>)
 80a1ef0:	448a      	add	sl, r1
 80a1ef2:	fa5f f18a 	uxtb.w	r1, sl
 80a1ef6:	9100      	str	r1, [sp, #0]
 80a1ef8:	442b      	add	r3, r5
 80a1efa:	b2db      	uxtb	r3, r3
 80a1efc:	21a0      	movs	r1, #160	; 0xa0
 80a1efe:	8800      	ldrh	r0, [r0, #0]
 80a1f00:	b2d2      	uxtb	r2, r2
 80a1f02:	f7ff fab5 	bl	80a1470 <_Z4dimgtthhh>
                printScreen(screenArray,clockpix,inpix+88);
 80a1f06:	9a05      	ldr	r2, [sp, #20]
 80a1f08:	4659      	mov	r1, fp
 80a1f0a:	482c      	ldr	r0, [pc, #176]	; (80a1fbc <_Z11weatherLooptthhh+0x634>)
 80a1f0c:	f7fe f99c 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a1f10:	200a      	movs	r0, #10
 80a1f12:	f002 fa3d 	bl	80a4390 <delay>
            for(int l = 20; l >= 0; l--){
 80a1f16:	9b08      	ldr	r3, [sp, #32]
 80a1f18:	9a04      	ldr	r2, [sp, #16]
 80a1f1a:	1a9b      	subs	r3, r3, r2
 80a1f1c:	9308      	str	r3, [sp, #32]
 80a1f1e:	9a03      	ldr	r2, [sp, #12]
 80a1f20:	9b07      	ldr	r3, [sp, #28]
 80a1f22:	1a9b      	subs	r3, r3, r2
 80a1f24:	9307      	str	r3, [sp, #28]
 80a1f26:	9b02      	ldr	r3, [sp, #8]
 80a1f28:	eba9 0903 	sub.w	r9, r9, r3
 80a1f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1f2e:	3b01      	subs	r3, #1
 80a1f30:	9309      	str	r3, [sp, #36]	; 0x24
 80a1f32:	d1a4      	bne.n	80a1e7e <_Z11weatherLooptthhh+0x4f6>
 80a1f34:	e59e      	b.n	80a1a74 <_Z11weatherLooptthhh+0xec>
        if(isSensorDark()){
 80a1f36:	f04f 0915 	mov.w	r9, #21
                displayCondition(cid,inpix, (R*l)/20, (G*l)/20, (B*l)/20, false);
 80a1f3a:	f04f 0a14 	mov.w	sl, #20
 80a1f3e:	f8df b080 	ldr.w	fp, [pc, #128]	; 80a1fc0 <_Z11weatherLooptthhh+0x638>
 80a1f42:	fbb5 f8fa 	udiv	r8, r5, sl
 80a1f46:	2100      	movs	r1, #0
 80a1f48:	fbb7 f2fa 	udiv	r2, r7, sl
 80a1f4c:	fbb6 f3fa 	udiv	r3, r6, sl
 80a1f50:	fa5f f888 	uxtb.w	r8, r8
 80a1f54:	e9cd 8100 	strd	r8, r1, [sp]
 80a1f58:	b2d2      	uxtb	r2, r2
 80a1f5a:	b2db      	uxtb	r3, r3
 80a1f5c:	4621      	mov	r1, r4
 80a1f5e:	f8bb 0000 	ldrh.w	r0, [fp]
 80a1f62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a1f66:	f7fe fbaf 	bl	80a06c8 <_Z16displayConditiontthhhb>
                dimg(cid,160, (R*l)/20, (G*l)/20, (B*l)/20);
 80a1f6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1f6e:	f8cd 8000 	str.w	r8, [sp]
 80a1f72:	21a0      	movs	r1, #160	; 0xa0
 80a1f74:	f8bb 0000 	ldrh.w	r0, [fp]
 80a1f78:	f7ff fa7a 	bl	80a1470 <_Z4dimgtthhh>
                printScreen(screenArray,inpix,inpix+88);
 80a1f7c:	4621      	mov	r1, r4
 80a1f7e:	9a05      	ldr	r2, [sp, #20]
 80a1f80:	480e      	ldr	r0, [pc, #56]	; (80a1fbc <_Z11weatherLooptthhh+0x634>)
 80a1f82:	f7fe f961 	bl	80a0248 <_Z11printScreenPiii>
                delay(10);
 80a1f86:	200a      	movs	r0, #10
 80a1f88:	f002 fa02 	bl	80a4390 <delay>
            for(int l = 20; l >= 0; l--){
 80a1f8c:	9b04      	ldr	r3, [sp, #16]
 80a1f8e:	f1b9 0901 	subs.w	r9, r9, #1
 80a1f92:	eba7 0703 	sub.w	r7, r7, r3
 80a1f96:	9b03      	ldr	r3, [sp, #12]
 80a1f98:	eba6 0603 	sub.w	r6, r6, r3
 80a1f9c:	9b02      	ldr	r3, [sp, #8]
 80a1f9e:	eba5 0503 	sub.w	r5, r5, r3
 80a1fa2:	d1ce      	bne.n	80a1f42 <_Z11weatherLooptthhh+0x5ba>
        wmode = 1;
 80a1fa4:	2201      	movs	r2, #1
 80a1fa6:	4b07      	ldr	r3, [pc, #28]	; (80a1fc4 <_Z11weatherLooptthhh+0x63c>)
 80a1fa8:	601a      	str	r2, [r3, #0]
 80a1faa:	e563      	b.n	80a1a74 <_Z11weatherLooptthhh+0xec>
 80a1fac:	20000298 	.word	0x20000298
 80a1fb0:	20000258 	.word	0x20000258
 80a1fb4:	20000270 	.word	0x20000270
 80a1fb8:	20000278 	.word	0x20000278
 80a1fbc:	200002a0 	.word	0x200002a0
 80a1fc0:	20000260 	.word	0x20000260
 80a1fc4:	20000ab8 	.word	0x20000ab8
 80a1fc8:	20000280 	.word	0x20000280

080a1fcc <_Z16menuButtonUpdatePii>:
bool menuButtonUpdate(int *modeSelect, int maxItems){
 80a1fcc:	b538      	push	{r3, r4, r5, lr}
 80a1fce:	4604      	mov	r4, r0
    if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == HIGH)
 80a1fd0:	2000      	movs	r0, #0
bool menuButtonUpdate(int *modeSelect, int maxItems){
 80a1fd2:	460d      	mov	r5, r1
    if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == HIGH)
 80a1fd4:	f003 f956 	bl	80a5284 <digitalRead>
 80a1fd8:	b998      	cbnz	r0, 80a2002 <_Z16menuButtonUpdatePii+0x36>
 80a1fda:	2001      	movs	r0, #1
 80a1fdc:	f003 f952 	bl	80a5284 <digitalRead>
 80a1fe0:	b978      	cbnz	r0, 80a2002 <_Z16menuButtonUpdatePii+0x36>
 80a1fe2:	2002      	movs	r0, #2
 80a1fe4:	f003 f94e 	bl	80a5284 <digitalRead>
 80a1fe8:	2801      	cmp	r0, #1
 80a1fea:	d10a      	bne.n	80a2002 <_Z16menuButtonUpdatePii+0x36>
        if(*modeSelect < maxItems){
 80a1fec:	6823      	ldr	r3, [r4, #0]
 80a1fee:	42ab      	cmp	r3, r5
 80a1ff0:	db27      	blt.n	80a2042 <_Z16menuButtonUpdatePii+0x76>
 80a1ff2:	6020      	str	r0, [r4, #0]
        while(digitalRead(dnbtn) == HIGH && digitalRead(upbtn) == LOW) delay(5);
 80a1ff4:	2002      	movs	r0, #2
 80a1ff6:	f003 f945 	bl	80a5284 <digitalRead>
 80a1ffa:	2801      	cmp	r0, #1
 80a1ffc:	d023      	beq.n	80a2046 <_Z16menuButtonUpdatePii+0x7a>
        return true;
 80a1ffe:	2001      	movs	r0, #1
}
 80a2000:	bd38      	pop	{r3, r4, r5, pc}
    if(digitalRead(upbtn) == HIGH && digitalRead(enbtn) == LOW && digitalRead(dnbtn) == LOW)
 80a2002:	2000      	movs	r0, #0
 80a2004:	f003 f93e 	bl	80a5284 <digitalRead>
 80a2008:	2801      	cmp	r0, #1
 80a200a:	d125      	bne.n	80a2058 <_Z16menuButtonUpdatePii+0x8c>
 80a200c:	f003 f93a 	bl	80a5284 <digitalRead>
 80a2010:	bb10      	cbnz	r0, 80a2058 <_Z16menuButtonUpdatePii+0x8c>
 80a2012:	2002      	movs	r0, #2
 80a2014:	f003 f936 	bl	80a5284 <digitalRead>
 80a2018:	b9f0      	cbnz	r0, 80a2058 <_Z16menuButtonUpdatePii+0x8c>
        if(*modeSelect > 1){
 80a201a:	6823      	ldr	r3, [r4, #0]
 80a201c:	2b01      	cmp	r3, #1
            *modeSelect = *modeSelect - 1;
 80a201e:	bfc8      	it	gt
 80a2020:	f103 35ff 	addgt.w	r5, r3, #4294967295
 80a2024:	6025      	str	r5, [r4, #0]
        while(digitalRead(upbtn) == HIGH && digitalRead(dnbtn) == LOW) delay(5);
 80a2026:	2000      	movs	r0, #0
 80a2028:	f003 f92c 	bl	80a5284 <digitalRead>
 80a202c:	2801      	cmp	r0, #1
 80a202e:	d1e6      	bne.n	80a1ffe <_Z16menuButtonUpdatePii+0x32>
 80a2030:	2002      	movs	r0, #2
 80a2032:	f003 f927 	bl	80a5284 <digitalRead>
 80a2036:	2800      	cmp	r0, #0
 80a2038:	d1e1      	bne.n	80a1ffe <_Z16menuButtonUpdatePii+0x32>
 80a203a:	2005      	movs	r0, #5
 80a203c:	f002 f9a8 	bl	80a4390 <delay>
 80a2040:	e7f1      	b.n	80a2026 <_Z16menuButtonUpdatePii+0x5a>
            *modeSelect = *modeSelect + 1;
 80a2042:	1c58      	adds	r0, r3, #1
 80a2044:	e7d5      	b.n	80a1ff2 <_Z16menuButtonUpdatePii+0x26>
        while(digitalRead(dnbtn) == HIGH && digitalRead(upbtn) == LOW) delay(5);
 80a2046:	2000      	movs	r0, #0
 80a2048:	f003 f91c 	bl	80a5284 <digitalRead>
 80a204c:	2800      	cmp	r0, #0
 80a204e:	d1d6      	bne.n	80a1ffe <_Z16menuButtonUpdatePii+0x32>
 80a2050:	2005      	movs	r0, #5
 80a2052:	f002 f99d 	bl	80a4390 <delay>
 80a2056:	e7cd      	b.n	80a1ff4 <_Z16menuButtonUpdatePii+0x28>
    return false;
 80a2058:	2000      	movs	r0, #0
 80a205a:	e7d1      	b.n	80a2000 <_Z16menuButtonUpdatePii+0x34>
 80a205c:	0000      	movs	r0, r0
	...

080a2060 <_Z16colorModeProcessv>:
void colorModeProcess(){
 80a2060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(scan == 1){
 80a2064:	4b78      	ldr	r3, [pc, #480]	; (80a2248 <_Z16colorModeProcessv+0x1e8>)
 80a2066:	681a      	ldr	r2, [r3, #0]
 80a2068:	2a01      	cmp	r2, #1
 80a206a:	d135      	bne.n	80a20d8 <_Z16colorModeProcessv+0x78>
        scan=2;
 80a206c:	2202      	movs	r2, #2
        if(analogRead(A4) < bound) {
 80a206e:	200e      	movs	r0, #14
        scan=2;
 80a2070:	601a      	str	r2, [r3, #0]
        if(analogRead(A4) < bound) {
 80a2072:	f003 f91a 	bl	80a52aa <analogRead>
 80a2076:	4a75      	ldr	r2, [pc, #468]	; (80a224c <_Z16colorModeProcessv+0x1ec>)
 80a2078:	6813      	ldr	r3, [r2, #0]
 80a207a:	4690      	mov	r8, r2
 80a207c:	4298      	cmp	r0, r3
 80a207e:	4b74      	ldr	r3, [pc, #464]	; (80a2250 <_Z16colorModeProcessv+0x1f0>)
 80a2080:	da36      	bge.n	80a20f0 <_Z16colorModeProcessv+0x90>
            bound = upbound;
 80a2082:	21fa      	movs	r1, #250	; 0xfa
 80a2084:	6011      	str	r1, [r2, #0]
            if(fdark == 2){
 80a2086:	681a      	ldr	r2, [r3, #0]
 80a2088:	2a02      	cmp	r2, #2
 80a208a:	d10e      	bne.n	80a20aa <_Z16colorModeProcessv+0x4a>
 80a208c:	f240 2201 	movw	r2, #513	; 0x201
        screenArray[i] = encodeColor(R,G,B);
 80a2090:	2000      	movs	r0, #0
 80a2092:	4970      	ldr	r1, [pc, #448]	; (80a2254 <_Z16colorModeProcessv+0x1f4>)
    for(i = start; i <= end; i++){
 80a2094:	3a01      	subs	r2, #1
 80a2096:	d002      	beq.n	80a209e <_Z16colorModeProcessv+0x3e>
        screenArray[i] = encodeColor(R,G,B);
 80a2098:	f841 0b04 	str.w	r0, [r1], #4
    for(i = start; i <= end; i++){
 80a209c:	e7fa      	b.n	80a2094 <_Z16colorModeProcessv+0x34>
 80a209e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a20a2:	4a6d      	ldr	r2, [pc, #436]	; (80a2258 <_Z16colorModeProcessv+0x1f8>)
 80a20a4:	6011      	str	r1, [r2, #0]
                fdark = 1;
 80a20a6:	2201      	movs	r2, #1
 80a20a8:	601a      	str	r2, [r3, #0]
            gclock = 0;
 80a20aa:	2400      	movs	r4, #0
            rclock = 1;
 80a20ac:	2601      	movs	r6, #1
 80a20ae:	4d6b      	ldr	r5, [pc, #428]	; (80a225c <_Z16colorModeProcessv+0x1fc>)
            gclock = 0;
 80a20b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80a2270 <_Z16colorModeProcessv+0x210>
            bclock = 0;
 80a20b4:	4f6a      	ldr	r7, [pc, #424]	; (80a2260 <_Z16colorModeProcessv+0x200>)
            rclock = 1;
 80a20b6:	602e      	str	r6, [r5, #0]
            gclock = 0;
 80a20b8:	f8c8 4000 	str.w	r4, [r8]
            bclock = 0;
 80a20bc:	603c      	str	r4, [r7, #0]
            if(EEPROM.read(5) == 2){
 80a20be:	f003 f90b 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a20c2:	2005      	movs	r0, #5
 80a20c4:	f7fe f8be 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a20c8:	2802      	cmp	r0, #2
 80a20ca:	d107      	bne.n	80a20dc <_Z16colorModeProcessv+0x7c>
                gclock = 1;
 80a20cc:	f8c8 6000 	str.w	r6, [r8]
                rclock = 0;
 80a20d0:	602c      	str	r4, [r5, #0]
            dmode = 1;
 80a20d2:	2201      	movs	r2, #1
 80a20d4:	4b63      	ldr	r3, [pc, #396]	; (80a2264 <_Z16colorModeProcessv+0x204>)
 80a20d6:	601a      	str	r2, [r3, #0]
}
 80a20d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(EEPROM.read(5) == 3){
 80a20dc:	f003 f8fc 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a20e0:	2005      	movs	r0, #5
 80a20e2:	f7fe f8af 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a20e6:	2803      	cmp	r0, #3
                bclock = 1;
 80a20e8:	bf04      	itt	eq
 80a20ea:	603e      	streq	r6, [r7, #0]
                rclock = 0;
 80a20ec:	602c      	streq	r4, [r5, #0]
 80a20ee:	e7f0      	b.n	80a20d2 <_Z16colorModeProcessv+0x72>
            if(fdark == 1){
 80a20f0:	681a      	ldr	r2, [r3, #0]
 80a20f2:	2a01      	cmp	r2, #1
 80a20f4:	d10e      	bne.n	80a2114 <_Z16colorModeProcessv+0xb4>
 80a20f6:	f240 2201 	movw	r2, #513	; 0x201
        screenArray[i] = encodeColor(R,G,B);
 80a20fa:	2000      	movs	r0, #0
 80a20fc:	4955      	ldr	r1, [pc, #340]	; (80a2254 <_Z16colorModeProcessv+0x1f4>)
    for(i = start; i <= end; i++){
 80a20fe:	3a01      	subs	r2, #1
 80a2100:	d002      	beq.n	80a2108 <_Z16colorModeProcessv+0xa8>
        screenArray[i] = encodeColor(R,G,B);
 80a2102:	f841 0b04 	str.w	r0, [r1], #4
    for(i = start; i <= end; i++){
 80a2106:	e7fa      	b.n	80a20fe <_Z16colorModeProcessv+0x9e>
 80a2108:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a210c:	4a52      	ldr	r2, [pc, #328]	; (80a2258 <_Z16colorModeProcessv+0x1f8>)
 80a210e:	6011      	str	r1, [r2, #0]
                fdark = 2;
 80a2110:	2202      	movs	r2, #2
 80a2112:	601a      	str	r2, [r3, #0]
            photo = analogRead(A4)/18;
 80a2114:	200e      	movs	r0, #14
 80a2116:	f003 f8c8 	bl	80a52aa <analogRead>
 80a211a:	2412      	movs	r4, #18
 80a211c:	fb90 f0f4 	sdiv	r0, r0, r4
 80a2120:	4b51      	ldr	r3, [pc, #324]	; (80a2268 <_Z16colorModeProcessv+0x208>)
 80a2122:	4e4e      	ldr	r6, [pc, #312]	; (80a225c <_Z16colorModeProcessv+0x1fc>)
 80a2124:	6018      	str	r0, [r3, #0]
            if(trueTone){
 80a2126:	4b51      	ldr	r3, [pc, #324]	; (80a226c <_Z16colorModeProcessv+0x20c>)
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a2128:	200e      	movs	r0, #14
            if(trueTone){
 80a212a:	781b      	ldrb	r3, [r3, #0]
 80a212c:	4d50      	ldr	r5, [pc, #320]	; (80a2270 <_Z16colorModeProcessv+0x210>)
 80a212e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80a2260 <_Z16colorModeProcessv+0x200>
 80a2132:	2b00      	cmp	r3, #0
 80a2134:	d051      	beq.n	80a21da <_Z16colorModeProcessv+0x17a>
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a2136:	f003 f8b8 	bl	80a52aa <analogRead>
 80a213a:	4682      	mov	sl, r0
                tempG = (float)analogRead(A4)/((float)10000)+0.65;
 80a213c:	200e      	movs	r0, #14
 80a213e:	f003 f8b4 	bl	80a52aa <analogRead>
 80a2142:	4607      	mov	r7, r0
                rclock = analogRead(A4)/18;//*(1-(analogRead(A4)/9500));
 80a2144:	200e      	movs	r0, #14
 80a2146:	f003 f8b0 	bl	80a52aa <analogRead>
 80a214a:	fb90 f0f4 	sdiv	r0, r0, r4
 80a214e:	6030      	str	r0, [r6, #0]
                gclock = (analogRead(A4)/18)*tempG;
 80a2150:	200e      	movs	r0, #14
 80a2152:	f003 f8aa 	bl	80a52aa <analogRead>
 80a2156:	4683      	mov	fp, r0
                tempG = (float)analogRead(A4)/((float)10000)+0.65;
 80a2158:	4638      	mov	r0, r7
 80a215a:	f003 ff27 	bl	80a5fac <__aeabi_i2f>
 80a215e:	4945      	ldr	r1, [pc, #276]	; (80a2274 <_Z16colorModeProcessv+0x214>)
 80a2160:	f004 f82c 	bl	80a61bc <__aeabi_fdiv>
 80a2164:	f003 fade 	bl	80a5724 <__aeabi_f2d>
 80a2168:	a32f      	add	r3, pc, #188	; (adr r3, 80a2228 <_Z16colorModeProcessv+0x1c8>)
 80a216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a216e:	f003 f97b 	bl	80a5468 <__adddf3>
 80a2172:	4606      	mov	r6, r0
                gclock = (analogRead(A4)/18)*tempG;
 80a2174:	fb9b f0f4 	sdiv	r0, fp, r4
                tempG = (float)analogRead(A4)/((float)10000)+0.65;
 80a2178:	460f      	mov	r7, r1
                gclock = (analogRead(A4)/18)*tempG;
 80a217a:	f003 fac1 	bl	80a5700 <__aeabi_i2d>
 80a217e:	4602      	mov	r2, r0
 80a2180:	460b      	mov	r3, r1
 80a2182:	4630      	mov	r0, r6
 80a2184:	4639      	mov	r1, r7
 80a2186:	f003 fb25 	bl	80a57d4 <__aeabi_dmul>
 80a218a:	f003 fdbd 	bl	80a5d08 <__aeabi_d2iz>
 80a218e:	6028      	str	r0, [r5, #0]
                bclock = (analogRead(A4)/18)*tempB;
 80a2190:	200e      	movs	r0, #14
 80a2192:	f003 f88a 	bl	80a52aa <analogRead>
 80a2196:	4605      	mov	r5, r0
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a2198:	4650      	mov	r0, sl
 80a219a:	f003 ff07 	bl	80a5fac <__aeabi_i2f>
 80a219e:	4936      	ldr	r1, [pc, #216]	; (80a2278 <_Z16colorModeProcessv+0x218>)
 80a21a0:	f004 f80c 	bl	80a61bc <__aeabi_fdiv>
 80a21a4:	f003 fabe 	bl	80a5724 <__aeabi_f2d>
 80a21a8:	a321      	add	r3, pc, #132	; (adr r3, 80a2230 <_Z16colorModeProcessv+0x1d0>)
 80a21aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a21ae:	f003 f95b 	bl	80a5468 <__adddf3>
 80a21b2:	4606      	mov	r6, r0
                bclock = (analogRead(A4)/18)*tempB;
 80a21b4:	fb95 f0f4 	sdiv	r0, r5, r4
                tempB = (float)analogRead(A4)/((float)5428)+0.3;
 80a21b8:	460f      	mov	r7, r1
                bclock = (analogRead(A4)/18)*tempB;
 80a21ba:	f003 faa1 	bl	80a5700 <__aeabi_i2d>
 80a21be:	4602      	mov	r2, r0
 80a21c0:	460b      	mov	r3, r1
 80a21c2:	4630      	mov	r0, r6
 80a21c4:	4639      	mov	r1, r7
 80a21c6:	f003 fb05 	bl	80a57d4 <__aeabi_dmul>
 80a21ca:	f003 fd9d 	bl	80a5d08 <__aeabi_d2iz>
 80a21ce:	f8c9 0000 	str.w	r0, [r9]
            bound = dnbound;
 80a21d2:	233c      	movs	r3, #60	; 0x3c
 80a21d4:	f8c8 3000 	str.w	r3, [r8]
}
 80a21d8:	e77e      	b.n	80a20d8 <_Z16colorModeProcessv+0x78>
                rclock = analogRead(A4)/18;
 80a21da:	f003 f866 	bl	80a52aa <analogRead>
 80a21de:	fb90 f0f4 	sdiv	r0, r0, r4
 80a21e2:	6030      	str	r0, [r6, #0]
                gclock = (analogRead(A4)/18)*0.9;
 80a21e4:	200e      	movs	r0, #14
 80a21e6:	f003 f860 	bl	80a52aa <analogRead>
 80a21ea:	fb90 f0f4 	sdiv	r0, r0, r4
 80a21ee:	f003 fa87 	bl	80a5700 <__aeabi_i2d>
 80a21f2:	a311      	add	r3, pc, #68	; (adr r3, 80a2238 <_Z16colorModeProcessv+0x1d8>)
 80a21f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a21f8:	f003 faec 	bl	80a57d4 <__aeabi_dmul>
 80a21fc:	f003 fd84 	bl	80a5d08 <__aeabi_d2iz>
 80a2200:	6028      	str	r0, [r5, #0]
                bclock = (analogRead(A4)/18)*0.8;
 80a2202:	200e      	movs	r0, #14
 80a2204:	f003 f851 	bl	80a52aa <analogRead>
 80a2208:	fb90 f0f4 	sdiv	r0, r0, r4
 80a220c:	f003 fa78 	bl	80a5700 <__aeabi_i2d>
 80a2210:	a30b      	add	r3, pc, #44	; (adr r3, 80a2240 <_Z16colorModeProcessv+0x1e0>)
 80a2212:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2216:	f003 fadd 	bl	80a57d4 <__aeabi_dmul>
 80a221a:	f003 fd75 	bl	80a5d08 <__aeabi_d2iz>
 80a221e:	f8c9 0000 	str.w	r0, [r9]
 80a2222:	e7d6      	b.n	80a21d2 <_Z16colorModeProcessv+0x172>
 80a2224:	f3af 8000 	nop.w
 80a2228:	cccccccd 	.word	0xcccccccd
 80a222c:	3fe4cccc 	.word	0x3fe4cccc
 80a2230:	33333333 	.word	0x33333333
 80a2234:	3fd33333 	.word	0x3fd33333
 80a2238:	cccccccd 	.word	0xcccccccd
 80a223c:	3feccccc 	.word	0x3feccccc
 80a2240:	9999999a 	.word	0x9999999a
 80a2244:	3fe99999 	.word	0x3fe99999
 80a2248:	2000029c 	.word	0x2000029c
 80a224c:	2000025c 	.word	0x2000025c
 80a2250:	2000026c 	.word	0x2000026c
 80a2254:	200002a0 	.word	0x200002a0
 80a2258:	2000027c 	.word	0x2000027c
 80a225c:	20000298 	.word	0x20000298
 80a2260:	20000258 	.word	0x20000258
 80a2264:	20000268 	.word	0x20000268
 80a2268:	20000290 	.word	0x20000290
 80a226c:	20000ab4 	.word	0x20000ab4
 80a2270:	20000270 	.word	0x20000270
 80a2274:	461c4000 	.word	0x461c4000
 80a2278:	45a9a000 	.word	0x45a9a000

080a227c <_Z9fillStriptthhhb>:
void fillStrip(uint16_t start, uint16_t end, uint8_t R, uint8_t G, uint8_t B, bool apply){
 80a227c:	b470      	push	{r4, r5, r6}
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a227e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
void fillStrip(uint16_t start, uint16_t end, uint8_t R, uint8_t G, uint8_t B, bool apply){
 80a2282:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80a2286:	f89d 5010 	ldrb.w	r5, [sp, #16]
    return B_temp+(1000*G_temp)+(1000000*R_temp);
 80a228a:	fb06 4303 	mla	r3, r6, r3, r4
 80a228e:	4c0d      	ldr	r4, [pc, #52]	; (80a22c4 <_Z9fillStriptthhhb+0x48>)
 80a2290:	fb04 3202 	mla	r2, r4, r2, r3
 80a2294:	4604      	mov	r4, r0
        screenArray[i] = encodeColor(R,G,B);
 80a2296:	4b0c      	ldr	r3, [pc, #48]	; (80a22c8 <_Z9fillStriptthhhb+0x4c>)
    for(i = start; i <= end; i++){
 80a2298:	42a1      	cmp	r1, r4
 80a229a:	db03      	blt.n	80a22a4 <_Z9fillStriptthhhb+0x28>
        screenArray[i] = encodeColor(R,G,B);
 80a229c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for(i = start; i <= end; i++){
 80a22a0:	3401      	adds	r4, #1
 80a22a2:	e7f9      	b.n	80a2298 <_Z9fillStriptthhhb+0x1c>
 80a22a4:	4a09      	ldr	r2, [pc, #36]	; (80a22cc <_Z9fillStriptthhhb+0x50>)
 80a22a6:	1c4b      	adds	r3, r1, #1
 80a22a8:	4298      	cmp	r0, r3
 80a22aa:	bfac      	ite	ge
 80a22ac:	6010      	strge	r0, [r2, #0]
 80a22ae:	6013      	strlt	r3, [r2, #0]
    if(apply){
 80a22b0:	b12d      	cbz	r5, 80a22be <_Z9fillStriptthhhb+0x42>
}
 80a22b2:	bc70      	pop	{r4, r5, r6}
        printScreen(screenArray,start,end);
 80a22b4:	460a      	mov	r2, r1
 80a22b6:	4601      	mov	r1, r0
 80a22b8:	4803      	ldr	r0, [pc, #12]	; (80a22c8 <_Z9fillStriptthhhb+0x4c>)
 80a22ba:	f7fd bfc5 	b.w	80a0248 <_Z11printScreenPiii>
}
 80a22be:	bc70      	pop	{r4, r5, r6}
 80a22c0:	4770      	bx	lr
 80a22c2:	bf00      	nop
 80a22c4:	000f4240 	.word	0x000f4240
 80a22c8:	200002a0 	.word	0x200002a0
 80a22cc:	2000027c 	.word	0x2000027c

080a22d0 <_Z8settingsthhh>:
void settings(uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
 80a22d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a22d4:	f04f 0900 	mov.w	r9, #0
void settings(uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
 80a22d8:	461f      	mov	r7, r3
    int smode = 1;
 80a22da:	2301      	movs	r3, #1
void settings(uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
 80a22dc:	4604      	mov	r4, r0
 80a22de:	460d      	mov	r5, r1
 80a22e0:	4616      	mov	r6, r2
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a22e2:	f100 0bff 	add.w	fp, r0, #255	; 0xff
void settings(uint16_t inpix, uint8_t R, uint8_t G, uint8_t B){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
 80a22e6:	b093      	sub	sp, #76	; 0x4c
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a22e8:	fa1f f88b 	uxth.w	r8, fp
 80a22ec:	464a      	mov	r2, r9
 80a22ee:	4641      	mov	r1, r8
    int smode = 1;
 80a22f0:	9307      	str	r3, [sp, #28]
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a22f2:	9301      	str	r3, [sp, #4]
 80a22f4:	f8cd 9000 	str.w	r9, [sp]
 80a22f8:	464b      	mov	r3, r9
 80a22fa:	f7ff ffbf 	bl	80a227c <_Z9fillStriptthhhb>
    strDisp("Settings",inpix,R,G,B,false);
 80a22fe:	462a      	mov	r2, r5
 80a2300:	4621      	mov	r1, r4
 80a2302:	48c1      	ldr	r0, [pc, #772]	; (80a2608 <_Z8settingsthhh+0x338>)
 80a2304:	4633      	mov	r3, r6
 80a2306:	e9cd 7900 	strd	r7, r9, [sp]
 80a230a:	f7fe ff5b 	bl	80a11c4 <_Z7strDispPKcthhhb>
    printScreen(screenArray,inpix,inpix+255);
 80a230e:	465a      	mov	r2, fp
 80a2310:	4621      	mov	r1, r4
 80a2312:	48be      	ldr	r0, [pc, #760]	; (80a260c <_Z8settingsthhh+0x33c>)
 80a2314:	f7fd ff98 	bl	80a0248 <_Z11printScreenPiii>
    while(digitalRead(enbtn) == HIGH) delay(5);
 80a2318:	2001      	movs	r0, #1
 80a231a:	f002 ffb3 	bl	80a5284 <digitalRead>
 80a231e:	2801      	cmp	r0, #1
 80a2320:	d103      	bne.n	80a232a <_Z8settingsthhh+0x5a>
 80a2322:	2005      	movs	r0, #5
 80a2324:	f002 f834 	bl	80a4390 <delay>
 80a2328:	e7f6      	b.n	80a2318 <_Z8settingsthhh+0x48>
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a232a:	2300      	movs	r3, #0
 80a232c:	f04f 0901 	mov.w	r9, #1
 80a2330:	461a      	mov	r2, r3
 80a2332:	4641      	mov	r1, r8
 80a2334:	4620      	mov	r0, r4
 80a2336:	e9cd 3900 	strd	r3, r9, [sp]
                strDisp("Exit", inpix, R, G, B, false);
 80a233a:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 80a2630 <_Z8settingsthhh+0x360>
    fillStrip(inpix,inpix+255,0,0,0,true);
 80a233e:	f7ff ff9d 	bl	80a227c <_Z9fillStriptthhhb>
        switch (smode){
 80a2342:	f8cd 9008 	str.w	r9, [sp, #8]
 80a2346:	9b07      	ldr	r3, [sp, #28]
 80a2348:	3b01      	subs	r3, #1
 80a234a:	2b04      	cmp	r3, #4
 80a234c:	d869      	bhi.n	80a2422 <_Z8settingsthhh+0x152>
 80a234e:	e8df f003 	tbb	[pc, r3]
 80a2352:	1e03      	.short	0x1e03
 80a2354:	362a      	.short	0x362a
 80a2356:	42          	.byte	0x42
 80a2357:	00          	.byte	0x00
                strDisp("WiFi", inpix, R, G, B, false);
 80a2358:	2300      	movs	r3, #0
 80a235a:	462a      	mov	r2, r5
 80a235c:	e9cd 7300 	strd	r7, r3, [sp]
 80a2360:	4621      	mov	r1, r4
 80a2362:	4633      	mov	r3, r6
 80a2364:	48aa      	ldr	r0, [pc, #680]	; (80a2610 <_Z8settingsthhh+0x340>)
 80a2366:	f7fe ff2d 	bl	80a11c4 <_Z7strDispPKcthhhb>
                break;
 80a236a:	2301      	movs	r3, #1
 80a236c:	9303      	str	r3, [sp, #12]
        if(digitalRead(enbtn) == HIGH){
 80a236e:	2001      	movs	r0, #1
 80a2370:	f002 ff88 	bl	80a5284 <digitalRead>
 80a2374:	2801      	cmp	r0, #1
 80a2376:	f040 8114 	bne.w	80a25a2 <_Z8settingsthhh+0x2d2>
            int submode = 1;
 80a237a:	9008      	str	r0, [sp, #32]
            while(digitalRead(enbtn) == HIGH) delay(5);
 80a237c:	2001      	movs	r0, #1
 80a237e:	f002 ff81 	bl	80a5284 <digitalRead>
 80a2382:	2801      	cmp	r0, #1
 80a2384:	d150      	bne.n	80a2428 <_Z8settingsthhh+0x158>
 80a2386:	2005      	movs	r0, #5
 80a2388:	f002 f802 	bl	80a4390 <delay>
 80a238c:	e7f6      	b.n	80a237c <_Z8settingsthhh+0xac>
                strDisp("Display", inpix, R, G, B, false);
 80a238e:	2300      	movs	r3, #0
 80a2390:	462a      	mov	r2, r5
 80a2392:	e9cd 7300 	strd	r7, r3, [sp]
 80a2396:	4621      	mov	r1, r4
 80a2398:	4633      	mov	r3, r6
 80a239a:	489e      	ldr	r0, [pc, #632]	; (80a2614 <_Z8settingsthhh+0x344>)
 80a239c:	f7fe ff12 	bl	80a11c4 <_Z7strDispPKcthhhb>
                break;
 80a23a0:	2301      	movs	r3, #1
 80a23a2:	9303      	str	r3, [sp, #12]
 80a23a4:	e7e3      	b.n	80a236e <_Z8settingsthhh+0x9e>
                strDisp("Dark md", inpix, R, G, B, false);
 80a23a6:	2300      	movs	r3, #0
 80a23a8:	462a      	mov	r2, r5
 80a23aa:	e9cd 7300 	strd	r7, r3, [sp]
 80a23ae:	4621      	mov	r1, r4
 80a23b0:	4633      	mov	r3, r6
 80a23b2:	4899      	ldr	r0, [pc, #612]	; (80a2618 <_Z8settingsthhh+0x348>)
 80a23b4:	f7fe ff06 	bl	80a11c4 <_Z7strDispPKcthhhb>
                break;
 80a23b8:	2301      	movs	r3, #1
 80a23ba:	9303      	str	r3, [sp, #12]
 80a23bc:	e7d7      	b.n	80a236e <_Z8settingsthhh+0x9e>
                strDisp("About", inpix, R, G, B, false);
 80a23be:	2300      	movs	r3, #0
 80a23c0:	462a      	mov	r2, r5
 80a23c2:	e9cd 7300 	strd	r7, r3, [sp]
 80a23c6:	4621      	mov	r1, r4
 80a23c8:	4633      	mov	r3, r6
 80a23ca:	4894      	ldr	r0, [pc, #592]	; (80a261c <_Z8settingsthhh+0x34c>)
 80a23cc:	f7fe fefa 	bl	80a11c4 <_Z7strDispPKcthhhb>
                break;
 80a23d0:	2301      	movs	r3, #1
 80a23d2:	9303      	str	r3, [sp, #12]
 80a23d4:	e7cb      	b.n	80a236e <_Z8settingsthhh+0x9e>
                strDisp("Exit", inpix, R, G, B, false);
 80a23d6:	2300      	movs	r3, #0
 80a23d8:	462a      	mov	r2, r5
 80a23da:	4621      	mov	r1, r4
 80a23dc:	4650      	mov	r0, sl
 80a23de:	e9cd 7300 	strd	r7, r3, [sp]
 80a23e2:	4633      	mov	r3, r6
 80a23e4:	f7fe feee 	bl	80a11c4 <_Z7strDispPKcthhhb>
                if(digitalRead(enbtn) == HIGH){
 80a23e8:	2001      	movs	r0, #1
 80a23ea:	f002 ff4b 	bl	80a5284 <digitalRead>
 80a23ee:	2801      	cmp	r0, #1
 80a23f0:	d117      	bne.n	80a2422 <_Z8settingsthhh+0x152>
                    while(digitalRead(enbtn) == HIGH) delay(5);
 80a23f2:	2001      	movs	r0, #1
 80a23f4:	f002 ff46 	bl	80a5284 <digitalRead>
 80a23f8:	2801      	cmp	r0, #1
 80a23fa:	d103      	bne.n	80a2404 <_Z8settingsthhh+0x134>
 80a23fc:	2005      	movs	r0, #5
 80a23fe:	f001 ffc7 	bl	80a4390 <delay>
 80a2402:	e7f6      	b.n	80a23f2 <_Z8settingsthhh+0x122>
                    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2404:	f04f 0900 	mov.w	r9, #0
 80a2408:	9b02      	ldr	r3, [sp, #8]
 80a240a:	464a      	mov	r2, r9
 80a240c:	9301      	str	r3, [sp, #4]
 80a240e:	4641      	mov	r1, r8
 80a2410:	464b      	mov	r3, r9
 80a2412:	4620      	mov	r0, r4
 80a2414:	f8cd 9000 	str.w	r9, [sp]
 80a2418:	f7ff ff30 	bl	80a227c <_Z9fillStriptthhhb>
                    sett = false;
 80a241c:	f8cd 900c 	str.w	r9, [sp, #12]
 80a2420:	e7a5      	b.n	80a236e <_Z8settingsthhh+0x9e>
 80a2422:	2301      	movs	r3, #1
 80a2424:	9303      	str	r3, [sp, #12]
 80a2426:	e7a2      	b.n	80a236e <_Z8settingsthhh+0x9e>
            fillStrip(inpix,inpix+255,0,0,0,true);
 80a2428:	9b02      	ldr	r3, [sp, #8]
 80a242a:	4641      	mov	r1, r8
 80a242c:	9301      	str	r3, [sp, #4]
 80a242e:	2300      	movs	r3, #0
 80a2430:	4620      	mov	r0, r4
 80a2432:	461a      	mov	r2, r3
 80a2434:	9300      	str	r3, [sp, #0]
 80a2436:	f7ff ff21 	bl	80a227c <_Z9fillStriptthhhb>
                switch (smode){
 80a243a:	9b07      	ldr	r3, [sp, #28]
 80a243c:	3b01      	subs	r3, #1
 80a243e:	2b04      	cmp	r3, #4
 80a2440:	f200 819b 	bhi.w	80a277a <_Z8settingsthhh+0x4aa>
 80a2444:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a2448:	00d60005 	.word	0x00d60005
 80a244c:	0146011a 	.word	0x0146011a
 80a2450:	0187      	.short	0x0187
                        switch(submode){
 80a2452:	9b08      	ldr	r3, [sp, #32]
 80a2454:	3b01      	subs	r3, #1
 80a2456:	2b03      	cmp	r3, #3
 80a2458:	f200 817a 	bhi.w	80a2750 <_Z8settingsthhh+0x480>
 80a245c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a2460:	007f0004 	.word	0x007f0004
 80a2464:	016600be 	.word	0x016600be
                                strDisp("sig str", inpix, R, G, B, false);
 80a2468:	2300      	movs	r3, #0
 80a246a:	462a      	mov	r2, r5
 80a246c:	4621      	mov	r1, r4
 80a246e:	e9cd 7300 	strd	r7, r3, [sp]
 80a2472:	486b      	ldr	r0, [pc, #428]	; (80a2620 <_Z8settingsthhh+0x350>)
 80a2474:	4633      	mov	r3, r6
 80a2476:	f7fe fea5 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                if(digitalRead(enbtn) == HIGH){
 80a247a:	2001      	movs	r0, #1
 80a247c:	f002 ff02 	bl	80a5284 <digitalRead>
 80a2480:	2801      	cmp	r0, #1
 80a2482:	4681      	mov	r9, r0
 80a2484:	f040 8164 	bne.w	80a2750 <_Z8settingsthhh+0x480>
                                    WiFiSignal sig = WiFi.RSSI();
 80a2488:	4966      	ldr	r1, [pc, #408]	; (80a2624 <_Z8settingsthhh+0x354>)
 80a248a:	a809      	add	r0, sp, #36	; 0x24
 80a248c:	f002 fde0 	bl	80a5050 <_ZN5spark9WiFiClass4RSSIEv>
                                    uint8_t strength = uint8_t(sig.getStrength());
 80a2490:	a809      	add	r0, sp, #36	; 0x24
 80a2492:	f002 fd69 	bl	80a4f68 <_ZNK10WiFiSignal11getStrengthEv>
 80a2496:	f003 ffc9 	bl	80a642c <__aeabi_f2uiz>
 80a249a:	b2c3      	uxtb	r3, r0
 80a249c:	9304      	str	r3, [sp, #16]
                                    fillStrip(inpix,inpix+255,0,0,0,true);
 80a249e:	2300      	movs	r3, #0
 80a24a0:	4641      	mov	r1, r8
 80a24a2:	461a      	mov	r2, r3
 80a24a4:	4620      	mov	r0, r4
 80a24a6:	9300      	str	r3, [sp, #0]
 80a24a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80a24ac:	f7ff fee6 	bl	80a227c <_Z9fillStriptthhhb>
                                    displayNumber(strength/100,inpix,R,G,B,true);
 80a24b0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a24b4:	9804      	ldr	r0, [sp, #16]
 80a24b6:	4633      	mov	r3, r6
 80a24b8:	fbb0 f0fc 	udiv	r0, r0, ip
 80a24bc:	462a      	mov	r2, r5
 80a24be:	4621      	mov	r1, r4
 80a24c0:	e9cd 7900 	strd	r7, r9, [sp]
 80a24c4:	f7fe f9f6 	bl	80a08b4 <_Z13displayNumberhthhhb>
                                    displayNumber((strength/10)%10,inpix+48,R,G,B,true);
 80a24c8:	220a      	movs	r2, #10
 80a24ca:	9b04      	ldr	r3, [sp, #16]
 80a24cc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80a24d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80a24d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80a24d8:	fb02 3010 	mls	r0, r2, r0, r3
 80a24dc:	9305      	str	r3, [sp, #20]
 80a24de:	462a      	mov	r2, r5
 80a24e0:	4633      	mov	r3, r6
 80a24e2:	b289      	uxth	r1, r1
 80a24e4:	b2c0      	uxtb	r0, r0
 80a24e6:	e9cd 7900 	strd	r7, r9, [sp]
 80a24ea:	f7fe f9e3 	bl	80a08b4 <_Z13displayNumberhthhhb>
                                    displayNumber(strength%10,inpix+96,R,G,B,true);
 80a24ee:	200a      	movs	r0, #10
 80a24f0:	9b05      	ldr	r3, [sp, #20]
 80a24f2:	9a04      	ldr	r2, [sp, #16]
 80a24f4:	f104 0160 	add.w	r1, r4, #96	; 0x60
 80a24f8:	fb00 2013 	mls	r0, r0, r3, r2
 80a24fc:	b289      	uxth	r1, r1
 80a24fe:	462a      	mov	r2, r5
 80a2500:	b2c0      	uxtb	r0, r0
 80a2502:	4633      	mov	r3, r6
 80a2504:	e9cd 7900 	strd	r7, r9, [sp]
 80a2508:	f7fe f9d4 	bl	80a08b4 <_Z13displayNumberhthhhb>
                                    printScreen(screenArray,inpix,inpix+255);
 80a250c:	465a      	mov	r2, fp
 80a250e:	4621      	mov	r1, r4
 80a2510:	483e      	ldr	r0, [pc, #248]	; (80a260c <_Z8settingsthhh+0x33c>)
 80a2512:	f7fd fe99 	bl	80a0248 <_Z11printScreenPiii>
                                    while(digitalRead(enbtn) == HIGH) delay(5);
 80a2516:	2001      	movs	r0, #1
 80a2518:	f002 feb4 	bl	80a5284 <digitalRead>
 80a251c:	2801      	cmp	r0, #1
 80a251e:	d103      	bne.n	80a2528 <_Z8settingsthhh+0x258>
 80a2520:	2005      	movs	r0, #5
 80a2522:	f001 ff35 	bl	80a4390 <delay>
 80a2526:	e7f6      	b.n	80a2516 <_Z8settingsthhh+0x246>
                                    while(digitalRead(enbtn) == LOW) delay(5);
 80a2528:	2001      	movs	r0, #1
 80a252a:	f002 feab 	bl	80a5284 <digitalRead>
 80a252e:	b918      	cbnz	r0, 80a2538 <_Z8settingsthhh+0x268>
 80a2530:	2005      	movs	r0, #5
 80a2532:	f001 ff2d 	bl	80a4390 <delay>
 80a2536:	e7f7      	b.n	80a2528 <_Z8settingsthhh+0x258>
                                    fillStrip(inpix,inpix+255,0,0,0,true);
 80a2538:	9b02      	ldr	r3, [sp, #8]
 80a253a:	4641      	mov	r1, r8
 80a253c:	9301      	str	r3, [sp, #4]
 80a253e:	2300      	movs	r3, #0
 80a2540:	4620      	mov	r0, r4
 80a2542:	461a      	mov	r2, r3
 80a2544:	9300      	str	r3, [sp, #0]
 80a2546:	f7ff fe99 	bl	80a227c <_Z9fillStriptthhhb>
                                    while(digitalRead(enbtn) == HIGH) delay(5);
 80a254a:	2001      	movs	r0, #1
 80a254c:	f002 fe9a 	bl	80a5284 <digitalRead>
 80a2550:	2801      	cmp	r0, #1
 80a2552:	f040 80fd 	bne.w	80a2750 <_Z8settingsthhh+0x480>
 80a2556:	2005      	movs	r0, #5
 80a2558:	f001 ff1a 	bl	80a4390 <delay>
 80a255c:	e7f5      	b.n	80a254a <_Z8settingsthhh+0x27a>
                                strDisp("IP",inpix, R, G, B, false);
 80a255e:	2300      	movs	r3, #0
 80a2560:	462a      	mov	r2, r5
 80a2562:	e9cd 7300 	strd	r7, r3, [sp]
 80a2566:	4621      	mov	r1, r4
 80a2568:	4633      	mov	r3, r6
 80a256a:	482f      	ldr	r0, [pc, #188]	; (80a2628 <_Z8settingsthhh+0x358>)
 80a256c:	f7fe fe2a 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a2570:	f04f 0901 	mov.w	r9, #1
                        if(menuButtonUpdate(&submode,4)) fillStrip(inpix,inpix+255,0,0,0,true);
 80a2574:	2104      	movs	r1, #4
 80a2576:	a808      	add	r0, sp, #32
 80a2578:	f7ff fd28 	bl	80a1fcc <_Z16menuButtonUpdatePii>
 80a257c:	b140      	cbz	r0, 80a2590 <_Z8settingsthhh+0x2c0>
 80a257e:	9b02      	ldr	r3, [sp, #8]
 80a2580:	4641      	mov	r1, r8
 80a2582:	9301      	str	r3, [sp, #4]
 80a2584:	2300      	movs	r3, #0
 80a2586:	4620      	mov	r0, r4
 80a2588:	461a      	mov	r2, r3
 80a258a:	9300      	str	r3, [sp, #0]
 80a258c:	f7ff fe76 	bl	80a227c <_Z9fillStriptthhhb>
                printScreen(screenArray,inpix,inpix+255);
 80a2590:	465a      	mov	r2, fp
 80a2592:	4621      	mov	r1, r4
 80a2594:	481d      	ldr	r0, [pc, #116]	; (80a260c <_Z8settingsthhh+0x33c>)
 80a2596:	f7fd fe57 	bl	80a0248 <_Z11printScreenPiii>
            while(submenu){
 80a259a:	f1b9 0f00 	cmp.w	r9, #0
 80a259e:	f47f af4c 	bne.w	80a243a <_Z8settingsthhh+0x16a>
        if(menuButtonUpdate(&smode,numMenuItems)) fillStrip(inpix,inpix+255,0,0,0,true);
 80a25a2:	2105      	movs	r1, #5
 80a25a4:	a807      	add	r0, sp, #28
 80a25a6:	f7ff fd11 	bl	80a1fcc <_Z16menuButtonUpdatePii>
 80a25aa:	b140      	cbz	r0, 80a25be <_Z8settingsthhh+0x2ee>
 80a25ac:	9b02      	ldr	r3, [sp, #8]
 80a25ae:	4641      	mov	r1, r8
 80a25b0:	9301      	str	r3, [sp, #4]
 80a25b2:	2300      	movs	r3, #0
 80a25b4:	4620      	mov	r0, r4
 80a25b6:	461a      	mov	r2, r3
 80a25b8:	9300      	str	r3, [sp, #0]
 80a25ba:	f7ff fe5f 	bl	80a227c <_Z9fillStriptthhhb>
        printScreen(screenArray,inpix,inpix+255);
 80a25be:	465a      	mov	r2, fp
 80a25c0:	4621      	mov	r1, r4
 80a25c2:	4812      	ldr	r0, [pc, #72]	; (80a260c <_Z8settingsthhh+0x33c>)
 80a25c4:	f7fd fe40 	bl	80a0248 <_Z11printScreenPiii>
        delay(50);
 80a25c8:	2032      	movs	r0, #50	; 0x32
 80a25ca:	f001 fee1 	bl	80a4390 <delay>
    while(sett == true) 
 80a25ce:	9b03      	ldr	r3, [sp, #12]
 80a25d0:	2b00      	cmp	r3, #0
 80a25d2:	f47f aeb8 	bne.w	80a2346 <_Z8settingsthhh+0x76>
}
 80a25d6:	b013      	add	sp, #76	; 0x4c
 80a25d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                strDisp("Net name", inpix, R, G, B, false);
 80a25dc:	2300      	movs	r3, #0
 80a25de:	462a      	mov	r2, r5
 80a25e0:	e9cd 7300 	strd	r7, r3, [sp]
 80a25e4:	4621      	mov	r1, r4
 80a25e6:	4633      	mov	r3, r6
 80a25e8:	4810      	ldr	r0, [pc, #64]	; (80a262c <_Z8settingsthhh+0x35c>)
 80a25ea:	f7fe fdeb 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a25ee:	f04f 0901 	mov.w	r9, #1
 80a25f2:	e7bf      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                        switch(submode){
 80a25f4:	9b08      	ldr	r3, [sp, #32]
 80a25f6:	3b01      	subs	r3, #1
 80a25f8:	2b03      	cmp	r3, #3
 80a25fa:	f200 80a9 	bhi.w	80a2750 <_Z8settingsthhh+0x480>
 80a25fe:	e8df f003 	tbb	[pc, r3]
 80a2602:	2519      	.short	0x2519
 80a2604:	9531      	.short	0x9531
 80a2606:	bf00      	nop
 80a2608:	080a8f4c 	.word	0x080a8f4c
 80a260c:	200002a0 	.word	0x200002a0
 80a2610:	080a8f55 	.word	0x080a8f55
 80a2614:	080a8f5a 	.word	0x080a8f5a
 80a2618:	080a8f62 	.word	0x080a8f62
 80a261c:	080a8f6a 	.word	0x080a8f6a
 80a2620:	080a8f75 	.word	0x080a8f75
 80a2624:	20000f84 	.word	0x20000f84
 80a2628:	080a8f7d 	.word	0x080a8f7d
 80a262c:	080a8f80 	.word	0x080a8f80
 80a2630:	080a8f70 	.word	0x080a8f70
                                strDisp("Tru-tone", inpix, R, G, B, false);
 80a2634:	2300      	movs	r3, #0
 80a2636:	462a      	mov	r2, r5
 80a2638:	e9cd 7300 	strd	r7, r3, [sp]
 80a263c:	4621      	mov	r1, r4
 80a263e:	4633      	mov	r3, r6
 80a2640:	484f      	ldr	r0, [pc, #316]	; (80a2780 <_Z8settingsthhh+0x4b0>)
 80a2642:	f7fe fdbf 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a2646:	f04f 0901 	mov.w	r9, #1
 80a264a:	e793      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                                strDisp("Get wthr",inpix, R, G, B, false);
 80a264c:	2300      	movs	r3, #0
 80a264e:	462a      	mov	r2, r5
 80a2650:	e9cd 7300 	strd	r7, r3, [sp]
 80a2654:	4621      	mov	r1, r4
 80a2656:	4633      	mov	r3, r6
 80a2658:	484a      	ldr	r0, [pc, #296]	; (80a2784 <_Z8settingsthhh+0x4b4>)
 80a265a:	f7fe fdb3 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a265e:	f04f 0901 	mov.w	r9, #1
 80a2662:	e787      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                                strDisp("Get temp", inpix, R, G, B, false);
 80a2664:	2300      	movs	r3, #0
 80a2666:	462a      	mov	r2, r5
 80a2668:	e9cd 7300 	strd	r7, r3, [sp]
 80a266c:	4621      	mov	r1, r4
 80a266e:	4633      	mov	r3, r6
 80a2670:	4845      	ldr	r0, [pc, #276]	; (80a2788 <_Z8settingsthhh+0x4b8>)
 80a2672:	f7fe fda7 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a2676:	f04f 0901 	mov.w	r9, #1
 80a267a:	e77b      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                        switch(submode){
 80a267c:	9b08      	ldr	r3, [sp, #32]
 80a267e:	3b01      	subs	r3, #1
 80a2680:	2b03      	cmp	r3, #3
 80a2682:	d865      	bhi.n	80a2750 <_Z8settingsthhh+0x480>
 80a2684:	e8df f003 	tbb	[pc, r3]
 80a2688:	521a0e02 	.word	0x521a0e02
                                strDisp("Mini clk", inpix, R, G, B, false);
 80a268c:	2300      	movs	r3, #0
 80a268e:	462a      	mov	r2, r5
 80a2690:	e9cd 7300 	strd	r7, r3, [sp]
 80a2694:	4621      	mov	r1, r4
 80a2696:	4633      	mov	r3, r6
 80a2698:	483c      	ldr	r0, [pc, #240]	; (80a278c <_Z8settingsthhh+0x4bc>)
 80a269a:	f7fe fd93 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a269e:	f04f 0901 	mov.w	r9, #1
 80a26a2:	e767      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                                strDisp("Dark clr",inpix, R, G, B, false);
 80a26a4:	2300      	movs	r3, #0
 80a26a6:	462a      	mov	r2, r5
 80a26a8:	e9cd 7300 	strd	r7, r3, [sp]
 80a26ac:	4621      	mov	r1, r4
 80a26ae:	4633      	mov	r3, r6
 80a26b0:	4837      	ldr	r0, [pc, #220]	; (80a2790 <_Z8settingsthhh+0x4c0>)
 80a26b2:	f7fe fd87 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a26b6:	f04f 0901 	mov.w	r9, #1
 80a26ba:	e75b      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                                strDisp("Disp temp", inpix, R, G, B, false);
 80a26bc:	2300      	movs	r3, #0
 80a26be:	462a      	mov	r2, r5
 80a26c0:	e9cd 7300 	strd	r7, r3, [sp]
 80a26c4:	4621      	mov	r1, r4
 80a26c6:	4633      	mov	r3, r6
 80a26c8:	4832      	ldr	r0, [pc, #200]	; (80a2794 <_Z8settingsthhh+0x4c4>)
 80a26ca:	f7fe fd7b 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a26ce:	f04f 0901 	mov.w	r9, #1
 80a26d2:	e74f      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                        switch(submode){
 80a26d4:	9b08      	ldr	r3, [sp, #32]
 80a26d6:	3b01      	subs	r3, #1
 80a26d8:	2b03      	cmp	r3, #3
 80a26da:	d839      	bhi.n	80a2750 <_Z8settingsthhh+0x480>
 80a26dc:	e8df f003 	tbb	[pc, r3]
 80a26e0:	261a0e02 	.word	0x261a0e02
                                strDisp("Sys-vsn", inpix, R, G, B, false);
 80a26e4:	2300      	movs	r3, #0
 80a26e6:	462a      	mov	r2, r5
 80a26e8:	e9cd 7300 	strd	r7, r3, [sp]
 80a26ec:	4621      	mov	r1, r4
 80a26ee:	4633      	mov	r3, r6
 80a26f0:	4829      	ldr	r0, [pc, #164]	; (80a2798 <_Z8settingsthhh+0x4c8>)
 80a26f2:	f7fe fd67 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a26f6:	f04f 0901 	mov.w	r9, #1
 80a26fa:	e73b      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                                strDisp("Firm-vsn",inpix, R, G, B, false);
 80a26fc:	2300      	movs	r3, #0
 80a26fe:	462a      	mov	r2, r5
 80a2700:	e9cd 7300 	strd	r7, r3, [sp]
 80a2704:	4621      	mov	r1, r4
 80a2706:	4633      	mov	r3, r6
 80a2708:	4824      	ldr	r0, [pc, #144]	; (80a279c <_Z8settingsthhh+0x4cc>)
 80a270a:	f7fe fd5b 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a270e:	f04f 0901 	mov.w	r9, #1
 80a2712:	e72f      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                                strDisp("Reset", inpix, R, G, B, false);
 80a2714:	2300      	movs	r3, #0
 80a2716:	462a      	mov	r2, r5
 80a2718:	e9cd 7300 	strd	r7, r3, [sp]
 80a271c:	4621      	mov	r1, r4
 80a271e:	4633      	mov	r3, r6
 80a2720:	481f      	ldr	r0, [pc, #124]	; (80a27a0 <_Z8settingsthhh+0x4d0>)
 80a2722:	f7fe fd4f 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                break;
 80a2726:	f04f 0901 	mov.w	r9, #1
 80a272a:	e723      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                                strDisp("Exit", inpix, R, G, B, false);
 80a272c:	2300      	movs	r3, #0
 80a272e:	462a      	mov	r2, r5
 80a2730:	4621      	mov	r1, r4
 80a2732:	4650      	mov	r0, sl
 80a2734:	e9cd 7300 	strd	r7, r3, [sp]
 80a2738:	4633      	mov	r3, r6
 80a273a:	f7fe fd43 	bl	80a11c4 <_Z7strDispPKcthhhb>
                                if(digitalRead(enbtn) == HIGH) submenu = false;
 80a273e:	2001      	movs	r0, #1
 80a2740:	f002 fda0 	bl	80a5284 <digitalRead>
 80a2744:	f1b0 0901 	subs.w	r9, r0, #1
 80a2748:	bf18      	it	ne
 80a274a:	f04f 0901 	movne.w	r9, #1
 80a274e:	e711      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                        switch(submode){
 80a2750:	f04f 0901 	mov.w	r9, #1
 80a2754:	e70e      	b.n	80a2574 <_Z8settingsthhh+0x2a4>
                        strDisp("Exit", inpix, R, G, B, false);
 80a2756:	2300      	movs	r3, #0
 80a2758:	462a      	mov	r2, r5
 80a275a:	4621      	mov	r1, r4
 80a275c:	4650      	mov	r0, sl
 80a275e:	e9cd 7300 	strd	r7, r3, [sp]
 80a2762:	4633      	mov	r3, r6
 80a2764:	f7fe fd2e 	bl	80a11c4 <_Z7strDispPKcthhhb>
                        if(digitalRead(enbtn) == HIGH) submenu = false;
 80a2768:	2001      	movs	r0, #1
 80a276a:	f002 fd8b 	bl	80a5284 <digitalRead>
 80a276e:	f1b0 0901 	subs.w	r9, r0, #1
 80a2772:	bf18      	it	ne
 80a2774:	f04f 0901 	movne.w	r9, #1
 80a2778:	e70a      	b.n	80a2590 <_Z8settingsthhh+0x2c0>
                switch (smode){
 80a277a:	f04f 0901 	mov.w	r9, #1
 80a277e:	e707      	b.n	80a2590 <_Z8settingsthhh+0x2c0>
 80a2780:	080a8f89 	.word	0x080a8f89
 80a2784:	080a8f92 	.word	0x080a8f92
 80a2788:	080a8f9b 	.word	0x080a8f9b
 80a278c:	080a8fa4 	.word	0x080a8fa4
 80a2790:	080a8fad 	.word	0x080a8fad
 80a2794:	080a8fb6 	.word	0x080a8fb6
 80a2798:	080a8fc0 	.word	0x080a8fc0
 80a279c:	080a8fc8 	.word	0x080a8fc8
 80a27a0:	080a8fd1 	.word	0x080a8fd1

080a27a4 <loop>:
void loop(){
 80a27a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    colorModeProcess();
 80a27a8:	f7ff fc5a 	bl	80a2060 <_Z16colorModeProcessv>
    if(dmode == 1){                                                     
 80a27ac:	4b3c      	ldr	r3, [pc, #240]	; (80a28a0 <loop+0xfc>)
 80a27ae:	681f      	ldr	r7, [r3, #0]
 80a27b0:	2f01      	cmp	r7, #1
 80a27b2:	d144      	bne.n	80a283e <loop+0x9a>
        displayClock(0, rclock, gclock, bclock, true);                          //Manually Update Temperature every full cycle
 80a27b4:	4e3b      	ldr	r6, [pc, #236]	; (80a28a4 <loop+0x100>)
 80a27b6:	4d3c      	ldr	r5, [pc, #240]	; (80a28a8 <loop+0x104>)
 80a27b8:	4c3c      	ldr	r4, [pc, #240]	; (80a28ac <loop+0x108>)
 80a27ba:	7833      	ldrb	r3, [r6, #0]
 80a27bc:	2000      	movs	r0, #0
 80a27be:	782a      	ldrb	r2, [r5, #0]
 80a27c0:	7821      	ldrb	r1, [r4, #0]
 80a27c2:	9700      	str	r7, [sp, #0]
 80a27c4:	f7fe fd20 	bl	80a1208 <_Z12displayClockthhhi>
        printScreen(screenArray,0,PIXEL_COUNT-1);
 80a27c8:	f240 127f 	movw	r2, #383	; 0x17f
 80a27cc:	2100      	movs	r1, #0
 80a27ce:	4838      	ldr	r0, [pc, #224]	; (80a28b0 <loop+0x10c>)
 80a27d0:	f7fd fd3a 	bl	80a0248 <_Z11printScreenPiii>
        checkForUpdate(false);
 80a27d4:	2000      	movs	r0, #0
 80a27d6:	f7fe feab 	bl	80a1530 <_Z14checkForUpdateb>
        scan = 1;
 80a27da:	4b36      	ldr	r3, [pc, #216]	; (80a28b4 <loop+0x110>)
        if(analogRead(A4) >= bound)             
 80a27dc:	200e      	movs	r0, #14
        scan = 1;
 80a27de:	601f      	str	r7, [r3, #0]
        if(analogRead(A4) >= bound)             
 80a27e0:	f002 fd63 	bl	80a52aa <analogRead>
 80a27e4:	4b34      	ldr	r3, [pc, #208]	; (80a28b8 <loop+0x114>)
 80a27e6:	46b2      	mov	sl, r6
 80a27e8:	681b      	ldr	r3, [r3, #0]
 80a27ea:	46a9      	mov	r9, r5
 80a27ec:	4298      	cmp	r0, r3
 80a27ee:	46a0      	mov	r8, r4
 80a27f0:	db2b      	blt.n	80a284a <loop+0xa6>
            if(EEPROM.read(2) == 1)                                             //Check if setting is enabled for displaying weather elements
 80a27f2:	f002 fd71 	bl	80a52d8 <_Z21__fetch_global_EEPROMv>
 80a27f6:	2002      	movs	r0, #2
 80a27f8:	f7fd fd24 	bl	80a0244 <_ZN11EEPROMClass4readEi.isra.0>
 80a27fc:	2801      	cmp	r0, #1
 80a27fe:	d107      	bne.n	80a2810 <loop+0x6c>
                weatherLoop(160,0,rclock,gclock,bclock);
 80a2800:	7833      	ldrb	r3, [r6, #0]
 80a2802:	2100      	movs	r1, #0
 80a2804:	9300      	str	r3, [sp, #0]
 80a2806:	20a0      	movs	r0, #160	; 0xa0
 80a2808:	782b      	ldrb	r3, [r5, #0]
 80a280a:	7822      	ldrb	r2, [r4, #0]
 80a280c:	f7ff f8bc 	bl	80a1988 <_Z11weatherLooptthhh>
            if(digitalRead(upbtn) == LOW && digitalRead(enbtn) == HIGH && digitalRead(dnbtn) == LOW){
 80a2810:	2000      	movs	r0, #0
 80a2812:	f002 fd37 	bl	80a5284 <digitalRead>
 80a2816:	b990      	cbnz	r0, 80a283e <loop+0x9a>
 80a2818:	2001      	movs	r0, #1
 80a281a:	f002 fd33 	bl	80a5284 <digitalRead>
 80a281e:	2801      	cmp	r0, #1
 80a2820:	d10d      	bne.n	80a283e <loop+0x9a>
 80a2822:	2002      	movs	r0, #2
 80a2824:	f002 fd2e 	bl	80a5284 <digitalRead>
 80a2828:	b948      	cbnz	r0, 80a283e <loop+0x9a>
                settings(256,rclock,gclock,bclock);
 80a282a:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a282e:	f89a 3000 	ldrb.w	r3, [sl]
 80a2832:	f899 2000 	ldrb.w	r2, [r9]
 80a2836:	f898 1000 	ldrb.w	r1, [r8]
 80a283a:	f7ff fd49 	bl	80a22d0 <_Z8settingsthhh>
    delay(100);
 80a283e:	2064      	movs	r0, #100	; 0x64
}
 80a2840:	b002      	add	sp, #8
 80a2842:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    delay(100);
 80a2846:	f001 bda3 	b.w	80a4390 <delay>
                displayCondition(cid,160, rclock, gclock, bclock, true);
 80a284a:	7833      	ldrb	r3, [r6, #0]
 80a284c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80a28c0 <loop+0x11c>
 80a2850:	9300      	str	r3, [sp, #0]
 80a2852:	9701      	str	r7, [sp, #4]
 80a2854:	782b      	ldrb	r3, [r5, #0]
 80a2856:	7822      	ldrb	r2, [r4, #0]
 80a2858:	f8b8 0000 	ldrh.w	r0, [r8]
 80a285c:	21a0      	movs	r1, #160	; 0xa0
 80a285e:	f7fd ff33 	bl	80a06c8 <_Z16displayConditiontthhhb>
                dimg(cid,160, rclock, gclock, bclock);
 80a2862:	7833      	ldrb	r3, [r6, #0]
 80a2864:	7822      	ldrb	r2, [r4, #0]
 80a2866:	9300      	str	r3, [sp, #0]
 80a2868:	f8b8 0000 	ldrh.w	r0, [r8]
 80a286c:	782b      	ldrb	r3, [r5, #0]
 80a286e:	21a0      	movs	r1, #160	; 0xa0
 80a2870:	f7fe fdfe 	bl	80a1470 <_Z4dimgtthhh>
                displayTemp(TFahr,256/*169+256*/,rclock, gclock, bclock,true);
 80a2874:	7833      	ldrb	r3, [r6, #0]
 80a2876:	4811      	ldr	r0, [pc, #68]	; (80a28bc <loop+0x118>)
 80a2878:	9300      	str	r3, [sp, #0]
 80a287a:	9701      	str	r7, [sp, #4]
 80a287c:	782b      	ldrb	r3, [r5, #0]
 80a287e:	7822      	ldrb	r2, [r4, #0]
 80a2880:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a2884:	7800      	ldrb	r0, [r0, #0]
 80a2886:	f7fe fd57 	bl	80a1338 <_Z11displayTemphthhhb>
                printScreen(screenArray,160,255);
 80a288a:	22ff      	movs	r2, #255	; 0xff
 80a288c:	21a0      	movs	r1, #160	; 0xa0
 80a288e:	4808      	ldr	r0, [pc, #32]	; (80a28b0 <loop+0x10c>)
 80a2890:	f7fd fcda 	bl	80a0248 <_Z11printScreenPiii>
            delay(1000);
 80a2894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a2898:	f001 fd7a 	bl	80a4390 <delay>
 80a289c:	e7cf      	b.n	80a283e <loop+0x9a>
 80a289e:	bf00      	nop
 80a28a0:	20000268 	.word	0x20000268
 80a28a4:	20000258 	.word	0x20000258
 80a28a8:	20000270 	.word	0x20000270
 80a28ac:	20000298 	.word	0x20000298
 80a28b0:	200002a0 	.word	0x200002a0
 80a28b4:	2000029c 	.word	0x2000029c
 80a28b8:	2000025c 	.word	0x2000025c
 80a28bc:	20000250 	.word	0x20000250
 80a28c0:	20000260 	.word	0x20000260

080a28c4 <_GLOBAL__sub_I_strip>:
                }
            }
        }
        strcpy(dowVal,tempdat);
    }
}
 80a28c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 80a28c6:	2601      	movs	r6, #1
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
 80a28c8:	4c13      	ldr	r4, [pc, #76]	; (80a2918 <_GLOBAL__sub_I_strip+0x54>)
 80a28ca:	4b14      	ldr	r3, [pc, #80]	; (80a291c <_GLOBAL__sub_I_strip+0x58>)
 80a28cc:	220d      	movs	r2, #13
 80a28ce:	701e      	strb	r6, [r3, #0]
 80a28d0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80a28d4:	2302      	movs	r3, #2
 80a28d6:	4620      	mov	r0, r4
 80a28d8:	f000 f87b 	bl	80a29d2 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a28dc:	4620      	mov	r0, r4
              error_(SYSTEM_ERROR_NONE) {
 80a28de:	2400      	movs	r4, #0
 80a28e0:	4f0f      	ldr	r7, [pc, #60]	; (80a2920 <_GLOBAL__sub_I_strip+0x5c>)
 80a28e2:	4910      	ldr	r1, [pc, #64]	; (80a2924 <_GLOBAL__sub_I_strip+0x60>)
 80a28e4:	463a      	mov	r2, r7
 80a28e6:	f002 fd65 	bl	80a53b4 <__aeabi_atexit>
 80a28ea:	4d0f      	ldr	r5, [pc, #60]	; (80a2928 <_GLOBAL__sub_I_strip+0x64>)
    SleepResult() {}
 80a28ec:	4b0f      	ldr	r3, [pc, #60]	; (80a292c <_GLOBAL__sub_I_strip+0x68>)
        set_system_mode(mode);
 80a28ee:	4630      	mov	r0, r6
    SleepResult() {}
 80a28f0:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a28f2:	602c      	str	r4, [r5, #0]
 80a28f4:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 80a28f6:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 80a28f8:	f001 faf2 	bl	80a3ee0 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
 80a28fc:	463a      	mov	r2, r7
 80a28fe:	4628      	mov	r0, r5
 80a2900:	490b      	ldr	r1, [pc, #44]	; (80a2930 <_GLOBAL__sub_I_strip+0x6c>)
 80a2902:	f002 fd57 	bl	80a53b4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80a2906:	4630      	mov	r0, r6
 80a2908:	4621      	mov	r1, r4
 80a290a:	f001 faf9 	bl	80a3f00 <system_thread_set_state>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a290e:	4620      	mov	r0, r4
}
 80a2910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80a2914:	f001 baa4 	b.w	80a3e60 <wlan_select_antenna>
 80a2918:	20000aa0 	.word	0x20000aa0
 80a291c:	20000254 	.word	0x20000254
 80a2920:	20000240 	.word	0x20000240
 80a2924:	080a2935 	.word	0x080a2935
 80a2928:	20000244 	.word	0x20000244
 80a292c:	ffff0000 	.word	0xffff0000
 80a2930:	080a0235 	.word	0x080a0235

080a2934 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a2934:	b510      	push	{r4, lr}
 80a2936:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a2938:	68c0      	ldr	r0, [r0, #12]
 80a293a:	b108      	cbz	r0, 80a2940 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a293c:	f001 fba4 	bl	80a4088 <free>
  if (begun) pinMode(pin, INPUT);
 80a2940:	7823      	ldrb	r3, [r4, #0]
 80a2942:	b11b      	cbz	r3, 80a294c <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a2944:	2100      	movs	r1, #0
 80a2946:	79e0      	ldrb	r0, [r4, #7]
 80a2948:	f002 fc72 	bl	80a5230 <pinMode>
}
 80a294c:	4620      	mov	r0, r4
 80a294e:	bd10      	pop	{r4, pc}

080a2950 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a2950:	b538      	push	{r3, r4, r5, lr}
 80a2952:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a2954:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a2956:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a2958:	b108      	cbz	r0, 80a295e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a295a:	f001 fb95 	bl	80a4088 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a295e:	79a3      	ldrb	r3, [r4, #6]
 80a2960:	2b06      	cmp	r3, #6
 80a2962:	bf0c      	ite	eq
 80a2964:	2004      	moveq	r0, #4
 80a2966:	2003      	movne	r0, #3
 80a2968:	4368      	muls	r0, r5
 80a296a:	b280      	uxth	r0, r0
 80a296c:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a296e:	f001 fb83 	bl	80a4078 <malloc>
 80a2972:	60e0      	str	r0, [r4, #12]
 80a2974:	b128      	cbz	r0, 80a2982 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a2976:	2100      	movs	r1, #0
 80a2978:	88a2      	ldrh	r2, [r4, #4]
 80a297a:	f004 f843 	bl	80a6a04 <memset>
    numLEDs = n;
 80a297e:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a2980:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a2982:	80a0      	strh	r0, [r4, #4]
 80a2984:	8060      	strh	r0, [r4, #2]
}
 80a2986:	e7fb      	b.n	80a2980 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a2988 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a2988:	b510      	push	{r4, lr}
 80a298a:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a298c:	2101      	movs	r1, #1
 80a298e:	79c0      	ldrb	r0, [r0, #7]
 80a2990:	f002 fc4e 	bl	80a5230 <pinMode>
  digitalWrite(pin, LOW);
 80a2994:	2100      	movs	r1, #0
 80a2996:	79e0      	ldrb	r0, [r4, #7]
 80a2998:	f002 fc5b 	bl	80a5252 <digitalWrite>
  begun = true;
 80a299c:	2301      	movs	r3, #1
 80a299e:	7023      	strb	r3, [r4, #0]
}
 80a29a0:	bd10      	pop	{r4, pc}

080a29a2 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a29a2:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a29a4:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a29a6:	4605      	mov	r5, r0
 80a29a8:	460c      	mov	r4, r1
    if (begun) {
 80a29aa:	b11b      	cbz	r3, 80a29b4 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a29ac:	2100      	movs	r1, #0
 80a29ae:	79c0      	ldrb	r0, [r0, #7]
 80a29b0:	f002 fc3e 	bl	80a5230 <pinMode>
    }
    pin = p;
    if (begun) {
 80a29b4:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a29b6:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a29b8:	b153      	cbz	r3, 80a29d0 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a29ba:	b2a4      	uxth	r4, r4
 80a29bc:	4620      	mov	r0, r4
 80a29be:	2101      	movs	r1, #1
 80a29c0:	f002 fc36 	bl	80a5230 <pinMode>
        digitalWrite(p, LOW);
 80a29c4:	4620      	mov	r0, r4
    }
}
 80a29c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a29ca:	2100      	movs	r1, #0
 80a29cc:	f002 bc41 	b.w	80a5252 <digitalWrite>
}
 80a29d0:	bd38      	pop	{r3, r4, r5, pc}

080a29d2 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a29d2:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a29d4:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a29d6:	4604      	mov	r4, r0
 80a29d8:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a29da:	7183      	strb	r3, [r0, #6]
 80a29dc:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a29e0:	7005      	strb	r5, [r0, #0]
 80a29e2:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a29e4:	f7ff ffb4 	bl	80a2950 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a29e8:	4620      	mov	r0, r4
 80a29ea:	4631      	mov	r1, r6
 80a29ec:	f7ff ffd9 	bl	80a29a2 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a29f0:	4620      	mov	r0, r4
 80a29f2:	bd70      	pop	{r4, r5, r6, pc}

080a29f4 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a29f4:	68c3      	ldr	r3, [r0, #12]
 80a29f6:	2b00      	cmp	r3, #0
 80a29f8:	f000 8441 	beq.w	80a327e <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a29fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a29fe:	7983      	ldrb	r3, [r0, #6]
 80a2a00:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a2a02:	3b02      	subs	r3, #2
 80a2a04:	b2db      	uxtb	r3, r3
 80a2a06:	2b04      	cmp	r3, #4
 80a2a08:	bf8c      	ite	hi
 80a2a0a:	2532      	movhi	r5, #50	; 0x32
 80a2a0c:	4a28      	ldrls	r2, [pc, #160]	; (80a2ab0 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a2a0e:	b087      	sub	sp, #28
 80a2a10:	bf98      	it	ls
 80a2a12:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a2a16:	f001 f911 	bl	80a3c3c <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a2a1a:	6923      	ldr	r3, [r4, #16]
 80a2a1c:	1ac0      	subs	r0, r0, r3
 80a2a1e:	42a8      	cmp	r0, r5
 80a2a20:	d3f9      	bcc.n	80a2a16 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a2a22:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a2a24:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a2a26:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a2a28:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2a2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a2a30:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a2a32:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2a34:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a2a36:	f000 826e 	beq.w	80a2f16 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a2a3a:	2d07      	cmp	r5, #7
 80a2a3c:	f000 826b 	beq.w	80a2f16 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a2a40:	2d06      	cmp	r5, #6
 80a2a42:	f000 841d 	beq.w	80a3280 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a2a46:	2d05      	cmp	r5, #5
 80a2a48:	f000 83a1 	beq.w	80a318e <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a2a4c:	2d08      	cmp	r5, #8
 80a2a4e:	f000 839e 	beq.w	80a318e <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a2a52:	2d00      	cmp	r5, #0
 80a2a54:	f040 854f 	bne.w	80a34f6 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2a58:	2b00      	cmp	r3, #0
 80a2a5a:	f000 8392 	beq.w	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a2a5e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a2a62:	4a14      	ldr	r2, [pc, #80]	; (80a2ab4 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a2a64:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2a66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a2a6a:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a2a6c:	3b03      	subs	r3, #3
 80a2a6e:	b29b      	uxth	r3, r3
 80a2a70:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2a74:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a2a78:	b2db      	uxtb	r3, r3
 80a2a7a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a2a7e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a2a82:	b2db      	uxtb	r3, r3
 80a2a84:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a2a88:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a2a8c:	b2db      	uxtb	r3, r3
 80a2a8e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2a92:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2a96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2a9a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a2a9e:	021b      	lsls	r3, r3, #8
 80a2aa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2aa4:	4303      	orrs	r3, r0
 80a2aa6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2aa8:	f88d 5005 	strb.w	r5, [sp, #5]
 80a2aac:	e11b      	b.n	80a2ce6 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a2aae:	bf00      	nop
 80a2ab0:	080a9028 	.word	0x080a9028
 80a2ab4:	20000abc 	.word	0x20000abc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2ab8:	4600      	mov	r0, r0
 80a2aba:	bf00      	nop
 80a2abc:	bf00      	nop
 80a2abe:	bf00      	nop
 80a2ac0:	bf00      	nop
 80a2ac2:	bf00      	nop
 80a2ac4:	bf00      	nop
 80a2ac6:	bf00      	nop
 80a2ac8:	bf00      	nop
 80a2aca:	bf00      	nop
 80a2acc:	bf00      	nop
 80a2ace:	bf00      	nop
 80a2ad0:	bf00      	nop
 80a2ad2:	bf00      	nop
 80a2ad4:	bf00      	nop
 80a2ad6:	bf00      	nop
 80a2ad8:	bf00      	nop
 80a2ada:	bf00      	nop
 80a2adc:	bf00      	nop
 80a2ade:	bf00      	nop
 80a2ae0:	bf00      	nop
 80a2ae2:	bf00      	nop
 80a2ae4:	bf00      	nop
 80a2ae6:	bf00      	nop
 80a2ae8:	bf00      	nop
 80a2aea:	bf00      	nop
 80a2aec:	bf00      	nop
 80a2aee:	bf00      	nop
 80a2af0:	bf00      	nop
 80a2af2:	bf00      	nop
 80a2af4:	bf00      	nop
 80a2af6:	bf00      	nop
 80a2af8:	bf00      	nop
 80a2afa:	bf00      	nop
 80a2afc:	bf00      	nop
 80a2afe:	bf00      	nop
 80a2b00:	bf00      	nop
 80a2b02:	bf00      	nop
 80a2b04:	bf00      	nop
 80a2b06:	bf00      	nop
 80a2b08:	bf00      	nop
 80a2b0a:	bf00      	nop
 80a2b0c:	bf00      	nop
 80a2b0e:	bf00      	nop
 80a2b10:	bf00      	nop
 80a2b12:	bf00      	nop
 80a2b14:	bf00      	nop
 80a2b16:	bf00      	nop
 80a2b18:	bf00      	nop
 80a2b1a:	bf00      	nop
 80a2b1c:	bf00      	nop
 80a2b1e:	bf00      	nop
 80a2b20:	bf00      	nop
 80a2b22:	bf00      	nop
 80a2b24:	bf00      	nop
 80a2b26:	bf00      	nop
 80a2b28:	bf00      	nop
 80a2b2a:	bf00      	nop
 80a2b2c:	bf00      	nop
 80a2b2e:	bf00      	nop
 80a2b30:	bf00      	nop
 80a2b32:	bf00      	nop
 80a2b34:	bf00      	nop
 80a2b36:	bf00      	nop
 80a2b38:	bf00      	nop
 80a2b3a:	bf00      	nop
 80a2b3c:	bf00      	nop
 80a2b3e:	bf00      	nop
 80a2b40:	bf00      	nop
 80a2b42:	bf00      	nop
 80a2b44:	bf00      	nop
 80a2b46:	bf00      	nop
 80a2b48:	bf00      	nop
 80a2b4a:	bf00      	nop
 80a2b4c:	bf00      	nop
 80a2b4e:	bf00      	nop
 80a2b50:	bf00      	nop
 80a2b52:	bf00      	nop
 80a2b54:	bf00      	nop
 80a2b56:	bf00      	nop
 80a2b58:	bf00      	nop
 80a2b5a:	bf00      	nop
 80a2b5c:	bf00      	nop
 80a2b5e:	bf00      	nop
 80a2b60:	bf00      	nop
 80a2b62:	bf00      	nop
 80a2b64:	bf00      	nop
 80a2b66:	bf00      	nop
 80a2b68:	bf00      	nop
 80a2b6a:	bf00      	nop
 80a2b6c:	bf00      	nop
 80a2b6e:	bf00      	nop
 80a2b70:	bf00      	nop
 80a2b72:	bf00      	nop
 80a2b74:	bf00      	nop
 80a2b76:	bf00      	nop
 80a2b78:	bf00      	nop
 80a2b7a:	bf00      	nop
 80a2b7c:	bf00      	nop
 80a2b7e:	bf00      	nop
 80a2b80:	bf00      	nop
 80a2b82:	bf00      	nop
 80a2b84:	bf00      	nop
 80a2b86:	bf00      	nop
 80a2b88:	bf00      	nop
 80a2b8a:	bf00      	nop
 80a2b8c:	bf00      	nop
 80a2b8e:	bf00      	nop
 80a2b90:	bf00      	nop
 80a2b92:	bf00      	nop
 80a2b94:	bf00      	nop
 80a2b96:	bf00      	nop
 80a2b98:	bf00      	nop
 80a2b9a:	bf00      	nop
 80a2b9c:	bf00      	nop
 80a2b9e:	bf00      	nop
 80a2ba0:	bf00      	nop
 80a2ba2:	bf00      	nop
 80a2ba4:	bf00      	nop
 80a2ba6:	bf00      	nop
 80a2ba8:	bf00      	nop
 80a2baa:	bf00      	nop
 80a2bac:	bf00      	nop
 80a2bae:	bf00      	nop
 80a2bb0:	bf00      	nop
 80a2bb2:	bf00      	nop
 80a2bb4:	bf00      	nop
 80a2bb6:	bf00      	nop
 80a2bb8:	bf00      	nop
 80a2bba:	bf00      	nop
 80a2bbc:	bf00      	nop
 80a2bbe:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a2bc0:	79e3      	ldrb	r3, [r4, #7]
 80a2bc2:	6810      	ldr	r0, [r2, #0]
 80a2bc4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2bc8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2bcc:	88bf      	ldrh	r7, [r7, #4]
 80a2bce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2bd2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2bd4:	4600      	mov	r0, r0
 80a2bd6:	bf00      	nop
 80a2bd8:	bf00      	nop
 80a2bda:	bf00      	nop
 80a2bdc:	bf00      	nop
 80a2bde:	bf00      	nop
 80a2be0:	bf00      	nop
 80a2be2:	bf00      	nop
 80a2be4:	bf00      	nop
 80a2be6:	bf00      	nop
 80a2be8:	bf00      	nop
 80a2bea:	bf00      	nop
 80a2bec:	bf00      	nop
 80a2bee:	bf00      	nop
 80a2bf0:	bf00      	nop
 80a2bf2:	bf00      	nop
 80a2bf4:	bf00      	nop
 80a2bf6:	bf00      	nop
 80a2bf8:	bf00      	nop
 80a2bfa:	bf00      	nop
 80a2bfc:	bf00      	nop
 80a2bfe:	bf00      	nop
 80a2c00:	bf00      	nop
 80a2c02:	bf00      	nop
 80a2c04:	bf00      	nop
 80a2c06:	bf00      	nop
 80a2c08:	bf00      	nop
 80a2c0a:	bf00      	nop
 80a2c0c:	bf00      	nop
 80a2c0e:	bf00      	nop
 80a2c10:	bf00      	nop
 80a2c12:	bf00      	nop
 80a2c14:	bf00      	nop
 80a2c16:	bf00      	nop
 80a2c18:	bf00      	nop
 80a2c1a:	bf00      	nop
 80a2c1c:	bf00      	nop
 80a2c1e:	bf00      	nop
 80a2c20:	bf00      	nop
 80a2c22:	bf00      	nop
 80a2c24:	bf00      	nop
 80a2c26:	bf00      	nop
 80a2c28:	bf00      	nop
 80a2c2a:	bf00      	nop
 80a2c2c:	bf00      	nop
 80a2c2e:	bf00      	nop
 80a2c30:	bf00      	nop
 80a2c32:	bf00      	nop
 80a2c34:	bf00      	nop
 80a2c36:	bf00      	nop
 80a2c38:	bf00      	nop
 80a2c3a:	bf00      	nop
 80a2c3c:	bf00      	nop
 80a2c3e:	bf00      	nop
 80a2c40:	bf00      	nop
 80a2c42:	bf00      	nop
 80a2c44:	bf00      	nop
 80a2c46:	bf00      	nop
 80a2c48:	bf00      	nop
 80a2c4a:	bf00      	nop
 80a2c4c:	bf00      	nop
 80a2c4e:	bf00      	nop
 80a2c50:	bf00      	nop
 80a2c52:	bf00      	nop
 80a2c54:	bf00      	nop
 80a2c56:	bf00      	nop
 80a2c58:	bf00      	nop
 80a2c5a:	bf00      	nop
 80a2c5c:	bf00      	nop
 80a2c5e:	bf00      	nop
 80a2c60:	bf00      	nop
 80a2c62:	bf00      	nop
 80a2c64:	bf00      	nop
 80a2c66:	bf00      	nop
 80a2c68:	bf00      	nop
 80a2c6a:	bf00      	nop
 80a2c6c:	bf00      	nop
 80a2c6e:	bf00      	nop
 80a2c70:	bf00      	nop
 80a2c72:	bf00      	nop
 80a2c74:	bf00      	nop
 80a2c76:	bf00      	nop
 80a2c78:	bf00      	nop
 80a2c7a:	bf00      	nop
 80a2c7c:	bf00      	nop
 80a2c7e:	bf00      	nop
 80a2c80:	bf00      	nop
 80a2c82:	bf00      	nop
 80a2c84:	bf00      	nop
 80a2c86:	bf00      	nop
 80a2c88:	bf00      	nop
 80a2c8a:	bf00      	nop
 80a2c8c:	bf00      	nop
 80a2c8e:	bf00      	nop
 80a2c90:	bf00      	nop
 80a2c92:	bf00      	nop
 80a2c94:	bf00      	nop
 80a2c96:	bf00      	nop
 80a2c98:	bf00      	nop
 80a2c9a:	bf00      	nop
 80a2c9c:	bf00      	nop
 80a2c9e:	bf00      	nop
 80a2ca0:	bf00      	nop
 80a2ca2:	bf00      	nop
 80a2ca4:	bf00      	nop
 80a2ca6:	bf00      	nop
 80a2ca8:	bf00      	nop
 80a2caa:	bf00      	nop
 80a2cac:	bf00      	nop
 80a2cae:	bf00      	nop
 80a2cb0:	bf00      	nop
 80a2cb2:	bf00      	nop
 80a2cb4:	bf00      	nop
 80a2cb6:	bf00      	nop
 80a2cb8:	bf00      	nop
 80a2cba:	bf00      	nop
 80a2cbc:	bf00      	nop
 80a2cbe:	bf00      	nop
 80a2cc0:	bf00      	nop
 80a2cc2:	bf00      	nop
 80a2cc4:	bf00      	nop
 80a2cc6:	bf00      	nop
 80a2cc8:	bf00      	nop
 80a2cca:	bf00      	nop
 80a2ccc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a2cce:	9b04      	ldr	r3, [sp, #16]
 80a2cd0:	085b      	lsrs	r3, r3, #1
 80a2cd2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2cd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2cd8:	3301      	adds	r3, #1
 80a2cda:	b2db      	uxtb	r3, r3
 80a2cdc:	2b17      	cmp	r3, #23
 80a2cde:	f88d 3005 	strb.w	r3, [sp, #5]
 80a2ce2:	f200 8727 	bhi.w	80a3b34 <_ZN17Adafruit_NeoPixel4showEv+0x1140>
        pinSet(pin, HIGH); // HIGH
 80a2ce6:	79e3      	ldrb	r3, [r4, #7]
 80a2ce8:	6810      	ldr	r0, [r2, #0]
 80a2cea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2cee:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2cf2:	88bf      	ldrh	r7, [r7, #4]
 80a2cf4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2cf8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2cfa:	9803      	ldr	r0, [sp, #12]
 80a2cfc:	9b04      	ldr	r3, [sp, #16]
 80a2cfe:	4218      	tst	r0, r3
 80a2d00:	f47f aeda 	bne.w	80a2ab8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
            ::: "r0", "cc", "memory");
 80a2d04:	4600      	mov	r0, r0
 80a2d06:	bf00      	nop
 80a2d08:	bf00      	nop
 80a2d0a:	bf00      	nop
 80a2d0c:	bf00      	nop
 80a2d0e:	bf00      	nop
 80a2d10:	bf00      	nop
 80a2d12:	bf00      	nop
 80a2d14:	bf00      	nop
 80a2d16:	bf00      	nop
 80a2d18:	bf00      	nop
 80a2d1a:	bf00      	nop
 80a2d1c:	bf00      	nop
 80a2d1e:	bf00      	nop
 80a2d20:	bf00      	nop
 80a2d22:	bf00      	nop
 80a2d24:	bf00      	nop
 80a2d26:	bf00      	nop
 80a2d28:	bf00      	nop
 80a2d2a:	bf00      	nop
 80a2d2c:	bf00      	nop
 80a2d2e:	bf00      	nop
 80a2d30:	bf00      	nop
 80a2d32:	bf00      	nop
 80a2d34:	bf00      	nop
 80a2d36:	bf00      	nop
 80a2d38:	bf00      	nop
 80a2d3a:	bf00      	nop
 80a2d3c:	bf00      	nop
 80a2d3e:	bf00      	nop
 80a2d40:	bf00      	nop
 80a2d42:	bf00      	nop
 80a2d44:	bf00      	nop
 80a2d46:	bf00      	nop
 80a2d48:	bf00      	nop
 80a2d4a:	bf00      	nop
 80a2d4c:	bf00      	nop
 80a2d4e:	bf00      	nop
 80a2d50:	bf00      	nop
 80a2d52:	bf00      	nop
 80a2d54:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2d56:	79e3      	ldrb	r3, [r4, #7]
 80a2d58:	6810      	ldr	r0, [r2, #0]
 80a2d5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2d5e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2d62:	88bf      	ldrh	r7, [r7, #4]
 80a2d64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2d68:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2d6a:	4600      	mov	r0, r0
 80a2d6c:	bf00      	nop
 80a2d6e:	bf00      	nop
 80a2d70:	bf00      	nop
 80a2d72:	bf00      	nop
 80a2d74:	bf00      	nop
 80a2d76:	bf00      	nop
 80a2d78:	bf00      	nop
 80a2d7a:	bf00      	nop
 80a2d7c:	bf00      	nop
 80a2d7e:	bf00      	nop
 80a2d80:	bf00      	nop
 80a2d82:	bf00      	nop
 80a2d84:	bf00      	nop
 80a2d86:	bf00      	nop
 80a2d88:	bf00      	nop
 80a2d8a:	bf00      	nop
 80a2d8c:	bf00      	nop
 80a2d8e:	bf00      	nop
 80a2d90:	bf00      	nop
 80a2d92:	bf00      	nop
 80a2d94:	bf00      	nop
 80a2d96:	bf00      	nop
 80a2d98:	bf00      	nop
 80a2d9a:	bf00      	nop
 80a2d9c:	bf00      	nop
 80a2d9e:	bf00      	nop
 80a2da0:	bf00      	nop
 80a2da2:	bf00      	nop
 80a2da4:	bf00      	nop
 80a2da6:	bf00      	nop
 80a2da8:	bf00      	nop
 80a2daa:	bf00      	nop
 80a2dac:	bf00      	nop
 80a2dae:	bf00      	nop
 80a2db0:	bf00      	nop
 80a2db2:	bf00      	nop
 80a2db4:	bf00      	nop
 80a2db6:	bf00      	nop
 80a2db8:	bf00      	nop
 80a2dba:	bf00      	nop
 80a2dbc:	bf00      	nop
 80a2dbe:	bf00      	nop
 80a2dc0:	bf00      	nop
 80a2dc2:	bf00      	nop
 80a2dc4:	bf00      	nop
 80a2dc6:	bf00      	nop
 80a2dc8:	bf00      	nop
 80a2dca:	bf00      	nop
 80a2dcc:	bf00      	nop
 80a2dce:	bf00      	nop
 80a2dd0:	bf00      	nop
 80a2dd2:	bf00      	nop
 80a2dd4:	bf00      	nop
 80a2dd6:	bf00      	nop
 80a2dd8:	bf00      	nop
 80a2dda:	bf00      	nop
 80a2ddc:	bf00      	nop
 80a2dde:	bf00      	nop
 80a2de0:	bf00      	nop
 80a2de2:	bf00      	nop
 80a2de4:	bf00      	nop
 80a2de6:	bf00      	nop
 80a2de8:	bf00      	nop
 80a2dea:	bf00      	nop
 80a2dec:	bf00      	nop
 80a2dee:	bf00      	nop
 80a2df0:	bf00      	nop
 80a2df2:	bf00      	nop
 80a2df4:	bf00      	nop
 80a2df6:	bf00      	nop
 80a2df8:	bf00      	nop
 80a2dfa:	bf00      	nop
 80a2dfc:	bf00      	nop
 80a2dfe:	bf00      	nop
 80a2e00:	bf00      	nop
 80a2e02:	bf00      	nop
 80a2e04:	bf00      	nop
 80a2e06:	bf00      	nop
 80a2e08:	bf00      	nop
 80a2e0a:	bf00      	nop
 80a2e0c:	bf00      	nop
 80a2e0e:	bf00      	nop
 80a2e10:	bf00      	nop
 80a2e12:	bf00      	nop
 80a2e14:	bf00      	nop
 80a2e16:	bf00      	nop
 80a2e18:	bf00      	nop
 80a2e1a:	bf00      	nop
 80a2e1c:	bf00      	nop
 80a2e1e:	bf00      	nop
 80a2e20:	bf00      	nop
 80a2e22:	bf00      	nop
 80a2e24:	bf00      	nop
 80a2e26:	bf00      	nop
 80a2e28:	bf00      	nop
 80a2e2a:	bf00      	nop
 80a2e2c:	bf00      	nop
 80a2e2e:	bf00      	nop
 80a2e30:	bf00      	nop
 80a2e32:	bf00      	nop
 80a2e34:	bf00      	nop
 80a2e36:	bf00      	nop
 80a2e38:	bf00      	nop
 80a2e3a:	bf00      	nop
 80a2e3c:	bf00      	nop
 80a2e3e:	bf00      	nop
 80a2e40:	bf00      	nop
 80a2e42:	bf00      	nop
 80a2e44:	bf00      	nop
 80a2e46:	bf00      	nop
 80a2e48:	bf00      	nop
 80a2e4a:	bf00      	nop
 80a2e4c:	bf00      	nop
 80a2e4e:	bf00      	nop
 80a2e50:	bf00      	nop
 80a2e52:	bf00      	nop
 80a2e54:	bf00      	nop
 80a2e56:	bf00      	nop
 80a2e58:	bf00      	nop
 80a2e5a:	bf00      	nop
 80a2e5c:	bf00      	nop
 80a2e5e:	bf00      	nop
 80a2e60:	bf00      	nop
 80a2e62:	bf00      	nop
 80a2e64:	bf00      	nop
 80a2e66:	bf00      	nop
 80a2e68:	bf00      	nop
 80a2e6a:	bf00      	nop
 80a2e6c:	bf00      	nop
 80a2e6e:	bf00      	nop
 80a2e70:	bf00      	nop
 80a2e72:	bf00      	nop
 80a2e74:	bf00      	nop
 80a2e76:	bf00      	nop
 80a2e78:	bf00      	nop
 80a2e7a:	bf00      	nop
 80a2e7c:	bf00      	nop
 80a2e7e:	bf00      	nop
 80a2e80:	bf00      	nop
 80a2e82:	bf00      	nop
 80a2e84:	bf00      	nop
 80a2e86:	bf00      	nop
 80a2e88:	bf00      	nop
 80a2e8a:	bf00      	nop
 80a2e8c:	bf00      	nop
 80a2e8e:	bf00      	nop
 80a2e90:	bf00      	nop
 80a2e92:	bf00      	nop
 80a2e94:	bf00      	nop
 80a2e96:	bf00      	nop
 80a2e98:	bf00      	nop
 80a2e9a:	bf00      	nop
 80a2e9c:	bf00      	nop
 80a2e9e:	bf00      	nop
 80a2ea0:	bf00      	nop
 80a2ea2:	bf00      	nop
 80a2ea4:	bf00      	nop
 80a2ea6:	bf00      	nop
 80a2ea8:	bf00      	nop
 80a2eaa:	bf00      	nop
 80a2eac:	bf00      	nop
 80a2eae:	bf00      	nop
 80a2eb0:	bf00      	nop
 80a2eb2:	bf00      	nop
 80a2eb4:	bf00      	nop
 80a2eb6:	bf00      	nop
 80a2eb8:	bf00      	nop
 80a2eba:	bf00      	nop
 80a2ebc:	bf00      	nop
 80a2ebe:	bf00      	nop
 80a2ec0:	bf00      	nop
 80a2ec2:	bf00      	nop
 80a2ec4:	bf00      	nop
 80a2ec6:	bf00      	nop
 80a2ec8:	bf00      	nop
 80a2eca:	bf00      	nop
 80a2ecc:	bf00      	nop
 80a2ece:	bf00      	nop
 80a2ed0:	bf00      	nop
 80a2ed2:	bf00      	nop
 80a2ed4:	bf00      	nop
 80a2ed6:	bf00      	nop
 80a2ed8:	bf00      	nop
 80a2eda:	bf00      	nop
 80a2edc:	bf00      	nop
 80a2ede:	bf00      	nop
 80a2ee0:	bf00      	nop
 80a2ee2:	bf00      	nop
 80a2ee4:	bf00      	nop
 80a2ee6:	bf00      	nop
 80a2ee8:	bf00      	nop
 80a2eea:	bf00      	nop
 80a2eec:	bf00      	nop
 80a2eee:	bf00      	nop
 80a2ef0:	bf00      	nop
 80a2ef2:	bf00      	nop
 80a2ef4:	bf00      	nop
 80a2ef6:	bf00      	nop
 80a2ef8:	bf00      	nop
 80a2efa:	bf00      	nop
 80a2efc:	bf00      	nop
 80a2efe:	bf00      	nop
 80a2f00:	bf00      	nop
 80a2f02:	bf00      	nop
 80a2f04:	bf00      	nop
 80a2f06:	bf00      	nop
 80a2f08:	bf00      	nop
 80a2f0a:	bf00      	nop
 80a2f0c:	bf00      	nop
 80a2f0e:	bf00      	nop
 80a2f10:	bf00      	nop
 80a2f12:	bf00      	nop
 80a2f14:	e6db      	b.n	80a2cce <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2f16:	2b00      	cmp	r3, #0
 80a2f18:	f000 8133 	beq.w	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a2f1c:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2f20:	2600      	movs	r6, #0
 80a2f22:	4a13      	ldr	r2, [pc, #76]	; (80a2f70 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a2f24:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2f26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2f2a:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a2f2c:	3b03      	subs	r3, #3
 80a2f2e:	b29b      	uxth	r3, r3
 80a2f30:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2f34:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a2f38:	b2db      	uxtb	r3, r3
 80a2f3a:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a2f3e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a2f42:	b2db      	uxtb	r3, r3
 80a2f44:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a2f48:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a2f4c:	b2db      	uxtb	r3, r3
 80a2f4e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2f52:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a2f56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a2f5a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a2f5e:	021b      	lsls	r3, r3, #8
 80a2f60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2f64:	4303      	orrs	r3, r0
 80a2f66:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2f68:	f88d 6005 	strb.w	r6, [sp, #5]
 80a2f6c:	e080      	b.n	80a3070 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a2f6e:	bf00      	nop
 80a2f70:	20000abc 	.word	0x20000abc
            ::: "r0", "cc", "memory");
 80a2f74:	4600      	mov	r0, r0
 80a2f76:	bf00      	nop
 80a2f78:	bf00      	nop
 80a2f7a:	bf00      	nop
 80a2f7c:	bf00      	nop
 80a2f7e:	bf00      	nop
 80a2f80:	bf00      	nop
 80a2f82:	bf00      	nop
 80a2f84:	bf00      	nop
 80a2f86:	bf00      	nop
 80a2f88:	bf00      	nop
 80a2f8a:	bf00      	nop
 80a2f8c:	bf00      	nop
 80a2f8e:	bf00      	nop
 80a2f90:	bf00      	nop
 80a2f92:	bf00      	nop
 80a2f94:	bf00      	nop
 80a2f96:	bf00      	nop
 80a2f98:	bf00      	nop
 80a2f9a:	bf00      	nop
 80a2f9c:	bf00      	nop
 80a2f9e:	bf00      	nop
 80a2fa0:	bf00      	nop
 80a2fa2:	bf00      	nop
 80a2fa4:	bf00      	nop
 80a2fa6:	bf00      	nop
 80a2fa8:	bf00      	nop
 80a2faa:	bf00      	nop
 80a2fac:	bf00      	nop
 80a2fae:	bf00      	nop
 80a2fb0:	bf00      	nop
 80a2fb2:	bf00      	nop
 80a2fb4:	bf00      	nop
 80a2fb6:	bf00      	nop
 80a2fb8:	bf00      	nop
 80a2fba:	bf00      	nop
 80a2fbc:	bf00      	nop
 80a2fbe:	bf00      	nop
 80a2fc0:	bf00      	nop
 80a2fc2:	bf00      	nop
 80a2fc4:	bf00      	nop
 80a2fc6:	bf00      	nop
 80a2fc8:	bf00      	nop
 80a2fca:	bf00      	nop
 80a2fcc:	bf00      	nop
 80a2fce:	bf00      	nop
 80a2fd0:	bf00      	nop
 80a2fd2:	bf00      	nop
 80a2fd4:	bf00      	nop
 80a2fd6:	bf00      	nop
 80a2fd8:	bf00      	nop
 80a2fda:	bf00      	nop
 80a2fdc:	bf00      	nop
 80a2fde:	bf00      	nop
 80a2fe0:	bf00      	nop
 80a2fe2:	bf00      	nop
 80a2fe4:	bf00      	nop
 80a2fe6:	bf00      	nop
 80a2fe8:	bf00      	nop
 80a2fea:	bf00      	nop
 80a2fec:	bf00      	nop
 80a2fee:	bf00      	nop
 80a2ff0:	bf00      	nop
 80a2ff2:	bf00      	nop
 80a2ff4:	bf00      	nop
 80a2ff6:	bf00      	nop
 80a2ff8:	bf00      	nop
 80a2ffa:	bf00      	nop
 80a2ffc:	bf00      	nop
 80a2ffe:	bf00      	nop
 80a3000:	bf00      	nop
 80a3002:	bf00      	nop
 80a3004:	bf00      	nop
 80a3006:	bf00      	nop
 80a3008:	bf00      	nop
 80a300a:	bf00      	nop
 80a300c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a300e:	79e3      	ldrb	r3, [r4, #7]
 80a3010:	6810      	ldr	r0, [r2, #0]
 80a3012:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3016:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a301a:	88bf      	ldrh	r7, [r7, #4]
 80a301c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3020:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3022:	4600      	mov	r0, r0
 80a3024:	bf00      	nop
 80a3026:	bf00      	nop
 80a3028:	bf00      	nop
 80a302a:	bf00      	nop
 80a302c:	bf00      	nop
 80a302e:	bf00      	nop
 80a3030:	bf00      	nop
 80a3032:	bf00      	nop
 80a3034:	bf00      	nop
 80a3036:	bf00      	nop
 80a3038:	bf00      	nop
 80a303a:	bf00      	nop
 80a303c:	bf00      	nop
 80a303e:	bf00      	nop
 80a3040:	bf00      	nop
 80a3042:	bf00      	nop
 80a3044:	bf00      	nop
 80a3046:	bf00      	nop
 80a3048:	bf00      	nop
 80a304a:	bf00      	nop
 80a304c:	bf00      	nop
 80a304e:	bf00      	nop
 80a3050:	bf00      	nop
 80a3052:	bf00      	nop
 80a3054:	bf00      	nop
 80a3056:	bf00      	nop
        mask >>= 1;
 80a3058:	9b04      	ldr	r3, [sp, #16]
 80a305a:	085b      	lsrs	r3, r3, #1
 80a305c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a305e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a3062:	3301      	adds	r3, #1
 80a3064:	b2db      	uxtb	r3, r3
 80a3066:	2b17      	cmp	r3, #23
 80a3068:	f88d 3005 	strb.w	r3, [sp, #5]
 80a306c:	f200 8083 	bhi.w	80a3176 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a3070:	79e3      	ldrb	r3, [r4, #7]
 80a3072:	6810      	ldr	r0, [r2, #0]
 80a3074:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3078:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a307c:	88bf      	ldrh	r7, [r7, #4]
 80a307e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3082:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a3084:	9803      	ldr	r0, [sp, #12]
 80a3086:	9b04      	ldr	r3, [sp, #16]
 80a3088:	4218      	tst	r0, r3
 80a308a:	f47f af73 	bne.w	80a2f74 <_ZN17Adafruit_NeoPixel4showEv+0x580>
            ::: "r0", "cc", "memory");
 80a308e:	4600      	mov	r0, r0
 80a3090:	bf00      	nop
 80a3092:	bf00      	nop
 80a3094:	bf00      	nop
 80a3096:	bf00      	nop
 80a3098:	bf00      	nop
 80a309a:	bf00      	nop
 80a309c:	bf00      	nop
 80a309e:	bf00      	nop
 80a30a0:	bf00      	nop
 80a30a2:	bf00      	nop
 80a30a4:	bf00      	nop
 80a30a6:	bf00      	nop
 80a30a8:	bf00      	nop
 80a30aa:	bf00      	nop
 80a30ac:	bf00      	nop
 80a30ae:	bf00      	nop
 80a30b0:	bf00      	nop
 80a30b2:	bf00      	nop
 80a30b4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a30b6:	79e3      	ldrb	r3, [r4, #7]
 80a30b8:	6810      	ldr	r0, [r2, #0]
 80a30ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a30be:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a30c2:	88bf      	ldrh	r7, [r7, #4]
 80a30c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a30c8:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a30ca:	4600      	mov	r0, r0
 80a30cc:	bf00      	nop
 80a30ce:	bf00      	nop
 80a30d0:	bf00      	nop
 80a30d2:	bf00      	nop
 80a30d4:	bf00      	nop
 80a30d6:	bf00      	nop
 80a30d8:	bf00      	nop
 80a30da:	bf00      	nop
 80a30dc:	bf00      	nop
 80a30de:	bf00      	nop
 80a30e0:	bf00      	nop
 80a30e2:	bf00      	nop
 80a30e4:	bf00      	nop
 80a30e6:	bf00      	nop
 80a30e8:	bf00      	nop
 80a30ea:	bf00      	nop
 80a30ec:	bf00      	nop
 80a30ee:	bf00      	nop
 80a30f0:	bf00      	nop
 80a30f2:	bf00      	nop
 80a30f4:	bf00      	nop
 80a30f6:	bf00      	nop
 80a30f8:	bf00      	nop
 80a30fa:	bf00      	nop
 80a30fc:	bf00      	nop
 80a30fe:	bf00      	nop
 80a3100:	bf00      	nop
 80a3102:	bf00      	nop
 80a3104:	bf00      	nop
 80a3106:	bf00      	nop
 80a3108:	bf00      	nop
 80a310a:	bf00      	nop
 80a310c:	bf00      	nop
 80a310e:	bf00      	nop
 80a3110:	bf00      	nop
 80a3112:	bf00      	nop
 80a3114:	bf00      	nop
 80a3116:	bf00      	nop
 80a3118:	bf00      	nop
 80a311a:	bf00      	nop
 80a311c:	bf00      	nop
 80a311e:	bf00      	nop
 80a3120:	bf00      	nop
 80a3122:	bf00      	nop
 80a3124:	bf00      	nop
 80a3126:	bf00      	nop
 80a3128:	bf00      	nop
 80a312a:	bf00      	nop
 80a312c:	bf00      	nop
 80a312e:	bf00      	nop
 80a3130:	bf00      	nop
 80a3132:	bf00      	nop
 80a3134:	bf00      	nop
 80a3136:	bf00      	nop
 80a3138:	bf00      	nop
 80a313a:	bf00      	nop
 80a313c:	bf00      	nop
 80a313e:	bf00      	nop
 80a3140:	bf00      	nop
 80a3142:	bf00      	nop
 80a3144:	bf00      	nop
 80a3146:	bf00      	nop
 80a3148:	bf00      	nop
 80a314a:	bf00      	nop
 80a314c:	bf00      	nop
 80a314e:	bf00      	nop
 80a3150:	bf00      	nop
 80a3152:	bf00      	nop
 80a3154:	bf00      	nop
 80a3156:	bf00      	nop
 80a3158:	bf00      	nop
 80a315a:	bf00      	nop
 80a315c:	bf00      	nop
 80a315e:	bf00      	nop
 80a3160:	bf00      	nop
 80a3162:	bf00      	nop
 80a3164:	bf00      	nop
 80a3166:	bf00      	nop
 80a3168:	bf00      	nop
 80a316a:	bf00      	nop
 80a316c:	bf00      	nop
 80a316e:	bf00      	nop
 80a3170:	bf00      	nop
 80a3172:	bf00      	nop
 80a3174:	e770      	b.n	80a3058 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3176:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a317a:	b29b      	uxth	r3, r3
 80a317c:	2b00      	cmp	r3, #0
 80a317e:	f47f aed1 	bne.w	80a2f24 <_ZN17Adafruit_NeoPixel4showEv+0x530>
  __ASM volatile ("cpsie i");
 80a3182:	b662      	cpsie	i
 80a3184:	f000 fd5a 	bl	80a3c3c <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a3188:	6120      	str	r0, [r4, #16]
}
 80a318a:	b007      	add	sp, #28
 80a318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a318e:	2b00      	cmp	r3, #0
 80a3190:	d0f7      	beq.n	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a3192:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a3196:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a3198:	4b54      	ldr	r3, [pc, #336]	; (80a32ec <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a319a:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a319c:	4b54      	ldr	r3, [pc, #336]	; (80a32f0 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a319e:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a31a2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a31a6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a31a8:	3a03      	subs	r2, #3
 80a31aa:	b292      	uxth	r2, r2
 80a31ac:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a31b0:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a31b4:	b2d2      	uxtb	r2, r2
 80a31b6:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a31ba:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a31be:	b2d2      	uxtb	r2, r2
 80a31c0:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a31c4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a31c8:	b2d2      	uxtb	r2, r2
 80a31ca:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a31ce:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a31d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a31d6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a31da:	0212      	lsls	r2, r2, #8
 80a31dc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a31e0:	433a      	orrs	r2, r7
 80a31e2:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a31e4:	f88d 6005 	strb.w	r6, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a31e8:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a31ea:	685d      	ldr	r5, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a31ec:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a31f0:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a31f4:	88bf      	ldrh	r7, [r7, #4]
 80a31f6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a31fa:	9505      	str	r5, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a31fc:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a31fe:	9f03      	ldr	r7, [sp, #12]
 80a3200:	9a04      	ldr	r2, [sp, #16]
 80a3202:	4217      	tst	r7, r2
 80a3204:	d025      	beq.n	80a3252 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a3206:	685a      	ldr	r2, [r3, #4]
 80a3208:	9f05      	ldr	r7, [sp, #20]
 80a320a:	1bd2      	subs	r2, r2, r7
 80a320c:	2a4f      	cmp	r2, #79	; 0x4f
 80a320e:	d9fa      	bls.n	80a3206 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a3210:	79e2      	ldrb	r2, [r4, #7]
 80a3212:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a3216:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a321a:	88bf      	ldrh	r7, [r7, #4]
 80a321c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a3220:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a3222:	685a      	ldr	r2, [r3, #4]
 80a3224:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a3226:	685a      	ldr	r2, [r3, #4]
 80a3228:	9f05      	ldr	r7, [sp, #20]
 80a322a:	1bd2      	subs	r2, r2, r7
 80a322c:	2a07      	cmp	r2, #7
 80a322e:	d9fa      	bls.n	80a3226 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a3230:	9a04      	ldr	r2, [sp, #16]
 80a3232:	0852      	lsrs	r2, r2, #1
 80a3234:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a3236:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a323a:	3201      	adds	r2, #1
 80a323c:	b2d2      	uxtb	r2, r2
 80a323e:	2a17      	cmp	r2, #23
 80a3240:	f88d 2005 	strb.w	r2, [sp, #5]
 80a3244:	d9d0      	bls.n	80a31e8 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3246:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a324a:	b292      	uxth	r2, r2
 80a324c:	2a00      	cmp	r2, #0
 80a324e:	d1a6      	bne.n	80a319e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a3250:	e797      	b.n	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a3252:	685a      	ldr	r2, [r3, #4]
 80a3254:	9f05      	ldr	r7, [sp, #20]
 80a3256:	1bd2      	subs	r2, r2, r7
 80a3258:	2a18      	cmp	r2, #24
 80a325a:	d9fa      	bls.n	80a3252 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a325c:	79e2      	ldrb	r2, [r4, #7]
 80a325e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a3262:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a3266:	88bf      	ldrh	r7, [r7, #4]
 80a3268:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a326c:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a326e:	685a      	ldr	r2, [r3, #4]
 80a3270:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a3272:	685a      	ldr	r2, [r3, #4]
 80a3274:	9f05      	ldr	r7, [sp, #20]
 80a3276:	1bd2      	subs	r2, r2, r7
 80a3278:	2a45      	cmp	r2, #69	; 0x45
 80a327a:	d9fa      	bls.n	80a3272 <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a327c:	e7d8      	b.n	80a3230 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a327e:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a3280:	2b00      	cmp	r3, #0
 80a3282:	f43f af7e 	beq.w	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a3286:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a328a:	2600      	movs	r6, #0
 80a328c:	4a17      	ldr	r2, [pc, #92]	; (80a32ec <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a328e:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a3290:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a3294:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a3296:	3b04      	subs	r3, #4
 80a3298:	b29b      	uxth	r3, r3
 80a329a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a329e:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a32a2:	b2db      	uxtb	r3, r3
 80a32a4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a32a8:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a32ac:	b2db      	uxtb	r3, r3
 80a32ae:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a32b2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a32b6:	b2db      	uxtb	r3, r3
 80a32b8:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a32bc:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a32c0:	b2db      	uxtb	r3, r3
 80a32c2:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a32c6:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a32ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a32ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a32d2:	041b      	lsls	r3, r3, #16
 80a32d4:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a32d8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a32dc:	433b      	orrs	r3, r7
 80a32de:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a32e2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a32e4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a32e8:	e07f      	b.n	80a33ea <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a32ea:	bf00      	nop
 80a32ec:	20000abc 	.word	0x20000abc
 80a32f0:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a32f4:	4600      	mov	r0, r0
 80a32f6:	bf00      	nop
 80a32f8:	bf00      	nop
 80a32fa:	bf00      	nop
 80a32fc:	bf00      	nop
 80a32fe:	bf00      	nop
 80a3300:	bf00      	nop
 80a3302:	bf00      	nop
 80a3304:	bf00      	nop
 80a3306:	bf00      	nop
 80a3308:	bf00      	nop
 80a330a:	bf00      	nop
 80a330c:	bf00      	nop
 80a330e:	bf00      	nop
 80a3310:	bf00      	nop
 80a3312:	bf00      	nop
 80a3314:	bf00      	nop
 80a3316:	bf00      	nop
 80a3318:	bf00      	nop
 80a331a:	bf00      	nop
 80a331c:	bf00      	nop
 80a331e:	bf00      	nop
 80a3320:	bf00      	nop
 80a3322:	bf00      	nop
 80a3324:	bf00      	nop
 80a3326:	bf00      	nop
 80a3328:	bf00      	nop
 80a332a:	bf00      	nop
 80a332c:	bf00      	nop
 80a332e:	bf00      	nop
 80a3330:	bf00      	nop
 80a3332:	bf00      	nop
 80a3334:	bf00      	nop
 80a3336:	bf00      	nop
 80a3338:	bf00      	nop
 80a333a:	bf00      	nop
 80a333c:	bf00      	nop
 80a333e:	bf00      	nop
 80a3340:	bf00      	nop
 80a3342:	bf00      	nop
 80a3344:	bf00      	nop
 80a3346:	bf00      	nop
 80a3348:	bf00      	nop
 80a334a:	bf00      	nop
 80a334c:	bf00      	nop
 80a334e:	bf00      	nop
 80a3350:	bf00      	nop
 80a3352:	bf00      	nop
 80a3354:	bf00      	nop
 80a3356:	bf00      	nop
 80a3358:	bf00      	nop
 80a335a:	bf00      	nop
 80a335c:	bf00      	nop
 80a335e:	bf00      	nop
 80a3360:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3362:	79e3      	ldrb	r3, [r4, #7]
 80a3364:	6810      	ldr	r0, [r2, #0]
 80a3366:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a336a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a336e:	88bf      	ldrh	r7, [r7, #4]
 80a3370:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3374:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3376:	4600      	mov	r0, r0
 80a3378:	bf00      	nop
 80a337a:	bf00      	nop
 80a337c:	bf00      	nop
 80a337e:	bf00      	nop
 80a3380:	bf00      	nop
 80a3382:	bf00      	nop
 80a3384:	bf00      	nop
 80a3386:	bf00      	nop
 80a3388:	bf00      	nop
 80a338a:	bf00      	nop
 80a338c:	bf00      	nop
 80a338e:	bf00      	nop
 80a3390:	bf00      	nop
 80a3392:	bf00      	nop
 80a3394:	bf00      	nop
 80a3396:	bf00      	nop
 80a3398:	bf00      	nop
 80a339a:	bf00      	nop
 80a339c:	bf00      	nop
 80a339e:	bf00      	nop
 80a33a0:	bf00      	nop
 80a33a2:	bf00      	nop
 80a33a4:	bf00      	nop
 80a33a6:	bf00      	nop
 80a33a8:	bf00      	nop
 80a33aa:	bf00      	nop
 80a33ac:	bf00      	nop
 80a33ae:	bf00      	nop
 80a33b0:	bf00      	nop
 80a33b2:	bf00      	nop
 80a33b4:	bf00      	nop
 80a33b6:	bf00      	nop
 80a33b8:	bf00      	nop
 80a33ba:	bf00      	nop
 80a33bc:	bf00      	nop
 80a33be:	bf00      	nop
 80a33c0:	bf00      	nop
 80a33c2:	bf00      	nop
 80a33c4:	bf00      	nop
 80a33c6:	bf00      	nop
 80a33c8:	bf00      	nop
 80a33ca:	bf00      	nop
 80a33cc:	bf00      	nop
 80a33ce:	bf00      	nop
 80a33d0:	bf00      	nop
 80a33d2:	bf00      	nop
        mask >>= 1;
 80a33d4:	9b04      	ldr	r3, [sp, #16]
 80a33d6:	085b      	lsrs	r3, r3, #1
 80a33d8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a33da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a33de:	3301      	adds	r3, #1
 80a33e0:	b2db      	uxtb	r3, r3
 80a33e2:	2b1f      	cmp	r3, #31
 80a33e4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a33e8:	d87e      	bhi.n	80a34e8 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a33ea:	79e3      	ldrb	r3, [r4, #7]
 80a33ec:	6810      	ldr	r0, [r2, #0]
 80a33ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a33f2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a33f6:	88bf      	ldrh	r7, [r7, #4]
 80a33f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a33fc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a33fe:	9803      	ldr	r0, [sp, #12]
 80a3400:	9b04      	ldr	r3, [sp, #16]
 80a3402:	4218      	tst	r0, r3
 80a3404:	f47f af76 	bne.w	80a32f4 <_ZN17Adafruit_NeoPixel4showEv+0x900>
            ::: "r0", "cc", "memory");
 80a3408:	4600      	mov	r0, r0
 80a340a:	bf00      	nop
 80a340c:	bf00      	nop
 80a340e:	bf00      	nop
 80a3410:	bf00      	nop
 80a3412:	bf00      	nop
 80a3414:	bf00      	nop
 80a3416:	bf00      	nop
 80a3418:	bf00      	nop
 80a341a:	bf00      	nop
 80a341c:	bf00      	nop
 80a341e:	bf00      	nop
 80a3420:	bf00      	nop
 80a3422:	bf00      	nop
 80a3424:	bf00      	nop
 80a3426:	bf00      	nop
 80a3428:	bf00      	nop
 80a342a:	bf00      	nop
 80a342c:	bf00      	nop
 80a342e:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3430:	79e3      	ldrb	r3, [r4, #7]
 80a3432:	6810      	ldr	r0, [r2, #0]
 80a3434:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3438:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a343c:	88bf      	ldrh	r7, [r7, #4]
 80a343e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3442:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3444:	4600      	mov	r0, r0
 80a3446:	bf00      	nop
 80a3448:	bf00      	nop
 80a344a:	bf00      	nop
 80a344c:	bf00      	nop
 80a344e:	bf00      	nop
 80a3450:	bf00      	nop
 80a3452:	bf00      	nop
 80a3454:	bf00      	nop
 80a3456:	bf00      	nop
 80a3458:	bf00      	nop
 80a345a:	bf00      	nop
 80a345c:	bf00      	nop
 80a345e:	bf00      	nop
 80a3460:	bf00      	nop
 80a3462:	bf00      	nop
 80a3464:	bf00      	nop
 80a3466:	bf00      	nop
 80a3468:	bf00      	nop
 80a346a:	bf00      	nop
 80a346c:	bf00      	nop
 80a346e:	bf00      	nop
 80a3470:	bf00      	nop
 80a3472:	bf00      	nop
 80a3474:	bf00      	nop
 80a3476:	bf00      	nop
 80a3478:	bf00      	nop
 80a347a:	bf00      	nop
 80a347c:	bf00      	nop
 80a347e:	bf00      	nop
 80a3480:	bf00      	nop
 80a3482:	bf00      	nop
 80a3484:	bf00      	nop
 80a3486:	bf00      	nop
 80a3488:	bf00      	nop
 80a348a:	bf00      	nop
 80a348c:	bf00      	nop
 80a348e:	bf00      	nop
 80a3490:	bf00      	nop
 80a3492:	bf00      	nop
 80a3494:	bf00      	nop
 80a3496:	bf00      	nop
 80a3498:	bf00      	nop
 80a349a:	bf00      	nop
 80a349c:	bf00      	nop
 80a349e:	bf00      	nop
 80a34a0:	bf00      	nop
 80a34a2:	bf00      	nop
 80a34a4:	bf00      	nop
 80a34a6:	bf00      	nop
 80a34a8:	bf00      	nop
 80a34aa:	bf00      	nop
 80a34ac:	bf00      	nop
 80a34ae:	bf00      	nop
 80a34b0:	bf00      	nop
 80a34b2:	bf00      	nop
 80a34b4:	bf00      	nop
 80a34b6:	bf00      	nop
 80a34b8:	bf00      	nop
 80a34ba:	bf00      	nop
 80a34bc:	bf00      	nop
 80a34be:	bf00      	nop
 80a34c0:	bf00      	nop
 80a34c2:	bf00      	nop
 80a34c4:	bf00      	nop
 80a34c6:	bf00      	nop
 80a34c8:	bf00      	nop
 80a34ca:	bf00      	nop
 80a34cc:	bf00      	nop
 80a34ce:	bf00      	nop
 80a34d0:	bf00      	nop
 80a34d2:	bf00      	nop
 80a34d4:	bf00      	nop
 80a34d6:	bf00      	nop
 80a34d8:	bf00      	nop
 80a34da:	bf00      	nop
 80a34dc:	bf00      	nop
 80a34de:	bf00      	nop
 80a34e0:	bf00      	nop
 80a34e2:	bf00      	nop
 80a34e4:	bf00      	nop
 80a34e6:	e775      	b.n	80a33d4 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a34e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a34ec:	b29b      	uxth	r3, r3
 80a34ee:	2b00      	cmp	r3, #0
 80a34f0:	f47f aecd 	bne.w	80a328e <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a34f4:	e645      	b.n	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a34f6:	2d03      	cmp	r5, #3
 80a34f8:	f000 812b 	beq.w	80a3752 <_ZN17Adafruit_NeoPixel4showEv+0xd5e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a34fc:	2b00      	cmp	r3, #0
 80a34fe:	f43f ae40 	beq.w	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a3502:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a3506:	2600      	movs	r6, #0
 80a3508:	4a17      	ldr	r2, [pc, #92]	; (80a3568 <_ZN17Adafruit_NeoPixel4showEv+0xb74>)
      mask = 0x800000; // reset the mask
 80a350a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a350c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a3510:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a3512:	3b03      	subs	r3, #3
 80a3514:	b29b      	uxth	r3, r3
 80a3516:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a351a:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a351c:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a351e:	b2db      	uxtb	r3, r3
 80a3520:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a3524:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a3526:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a352a:	b2db      	uxtb	r3, r3
 80a352c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a3530:	788b      	ldrb	r3, [r1, #2]
      pinSet(pin, LOW); // LOW
 80a3532:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a3536:	b2db      	uxtb	r3, r3
 80a3538:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a353c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a3540:	f89d 3008 	ldrb.w	r3, [sp, #8]
      pinSet(pin, LOW); // LOW
 80a3544:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a3548:	021b      	lsls	r3, r3, #8
 80a354a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a354e:	f89d e006 	ldrb.w	lr, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a3552:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a3556:	ea43 030e 	orr.w	r3, r3, lr
 80a355a:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a355c:	3103      	adds	r1, #3
      j = 0;        // reset the 24-bit counter
 80a355e:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a3562:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a3566:	e07c      	b.n	80a3662 <_ZN17Adafruit_NeoPixel4showEv+0xc6e>
 80a3568:	20000abc 	.word	0x20000abc
          mask >>= 1; // Do this task during the long delay of this bit
 80a356c:	9b04      	ldr	r3, [sp, #16]
 80a356e:	085b      	lsrs	r3, r3, #1
 80a3570:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a3572:	4600      	mov	r0, r0
 80a3574:	bf00      	nop
 80a3576:	bf00      	nop
 80a3578:	bf00      	nop
 80a357a:	bf00      	nop
 80a357c:	bf00      	nop
 80a357e:	bf00      	nop
 80a3580:	bf00      	nop
 80a3582:	bf00      	nop
 80a3584:	bf00      	nop
 80a3586:	bf00      	nop
 80a3588:	bf00      	nop
 80a358a:	bf00      	nop
 80a358c:	bf00      	nop
 80a358e:	bf00      	nop
 80a3590:	bf00      	nop
 80a3592:	bf00      	nop
 80a3594:	bf00      	nop
 80a3596:	bf00      	nop
 80a3598:	bf00      	nop
 80a359a:	bf00      	nop
 80a359c:	bf00      	nop
 80a359e:	bf00      	nop
 80a35a0:	bf00      	nop
 80a35a2:	bf00      	nop
 80a35a4:	bf00      	nop
 80a35a6:	bf00      	nop
 80a35a8:	bf00      	nop
 80a35aa:	bf00      	nop
 80a35ac:	bf00      	nop
 80a35ae:	bf00      	nop
 80a35b0:	bf00      	nop
 80a35b2:	bf00      	nop
 80a35b4:	bf00      	nop
 80a35b6:	bf00      	nop
 80a35b8:	bf00      	nop
 80a35ba:	bf00      	nop
 80a35bc:	bf00      	nop
 80a35be:	bf00      	nop
 80a35c0:	bf00      	nop
 80a35c2:	bf00      	nop
 80a35c4:	bf00      	nop
 80a35c6:	bf00      	nop
 80a35c8:	bf00      	nop
 80a35ca:	bf00      	nop
 80a35cc:	bf00      	nop
 80a35ce:	bf00      	nop
 80a35d0:	bf00      	nop
 80a35d2:	bf00      	nop
 80a35d4:	bf00      	nop
 80a35d6:	bf00      	nop
 80a35d8:	bf00      	nop
 80a35da:	bf00      	nop
 80a35dc:	bf00      	nop
 80a35de:	bf00      	nop
 80a35e0:	bf00      	nop
 80a35e2:	bf00      	nop
 80a35e4:	bf00      	nop
 80a35e6:	bf00      	nop
 80a35e8:	bf00      	nop
 80a35ea:	bf00      	nop
 80a35ec:	bf00      	nop
 80a35ee:	bf00      	nop
 80a35f0:	bf00      	nop
 80a35f2:	bf00      	nop
 80a35f4:	bf00      	nop
 80a35f6:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a35f8:	79e0      	ldrb	r0, [r4, #7]
 80a35fa:	6817      	ldr	r7, [r2, #0]
          j++;
 80a35fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a3600:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a3604:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a3608:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a360c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a3610:	3301      	adds	r3, #1
 80a3612:	b2db      	uxtb	r3, r3
 80a3614:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a3618:	f8a0 c018 	strh.w	ip, [r0, #24]
            ::: "r0", "cc", "memory");
 80a361c:	4600      	mov	r0, r0
 80a361e:	bf00      	nop
 80a3620:	bf00      	nop
 80a3622:	bf00      	nop
 80a3624:	bf00      	nop
 80a3626:	bf00      	nop
 80a3628:	bf00      	nop
 80a362a:	bf00      	nop
 80a362c:	bf00      	nop
 80a362e:	bf00      	nop
 80a3630:	bf00      	nop
 80a3632:	bf00      	nop
 80a3634:	bf00      	nop
 80a3636:	bf00      	nop
 80a3638:	bf00      	nop
 80a363a:	bf00      	nop
 80a363c:	bf00      	nop
 80a363e:	bf00      	nop
 80a3640:	bf00      	nop
 80a3642:	bf00      	nop
 80a3644:	bf00      	nop
          if(j==24) break;
 80a3646:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a364a:	2b18      	cmp	r3, #24
 80a364c:	d07a      	beq.n	80a3744 <_ZN17Adafruit_NeoPixel4showEv+0xd50>
          pinSet(pin, LOW); // LOW
 80a364e:	79e3      	ldrb	r3, [r4, #7]
 80a3650:	6810      	ldr	r0, [r2, #0]
 80a3652:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3656:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a365a:	88bf      	ldrh	r7, [r7, #4]
 80a365c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3660:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a3662:	9803      	ldr	r0, [sp, #12]
 80a3664:	9b04      	ldr	r3, [sp, #16]
 80a3666:	4218      	tst	r0, r3
 80a3668:	d180      	bne.n	80a356c <_ZN17Adafruit_NeoPixel4showEv+0xb78>
            ::: "r0", "cc", "memory");
 80a366a:	4600      	mov	r0, r0
 80a366c:	bf00      	nop
 80a366e:	bf00      	nop
 80a3670:	bf00      	nop
 80a3672:	bf00      	nop
 80a3674:	bf00      	nop
 80a3676:	bf00      	nop
 80a3678:	bf00      	nop
 80a367a:	bf00      	nop
 80a367c:	bf00      	nop
 80a367e:	bf00      	nop
 80a3680:	bf00      	nop
 80a3682:	bf00      	nop
 80a3684:	bf00      	nop
 80a3686:	bf00      	nop
 80a3688:	bf00      	nop
 80a368a:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a368c:	79e3      	ldrb	r3, [r4, #7]
 80a368e:	6810      	ldr	r0, [r2, #0]
 80a3690:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3694:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3698:	88bf      	ldrh	r7, [r7, #4]
 80a369a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a369e:	831f      	strh	r7, [r3, #24]
          j++;
 80a36a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a36a4:	3301      	adds	r3, #1
 80a36a6:	b2db      	uxtb	r3, r3
 80a36a8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a36ac:	9b04      	ldr	r3, [sp, #16]
 80a36ae:	085b      	lsrs	r3, r3, #1
 80a36b0:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a36b2:	4600      	mov	r0, r0
 80a36b4:	bf00      	nop
 80a36b6:	bf00      	nop
 80a36b8:	bf00      	nop
 80a36ba:	bf00      	nop
 80a36bc:	bf00      	nop
 80a36be:	bf00      	nop
 80a36c0:	bf00      	nop
 80a36c2:	bf00      	nop
 80a36c4:	bf00      	nop
 80a36c6:	bf00      	nop
 80a36c8:	bf00      	nop
 80a36ca:	bf00      	nop
 80a36cc:	bf00      	nop
 80a36ce:	bf00      	nop
 80a36d0:	bf00      	nop
 80a36d2:	bf00      	nop
 80a36d4:	bf00      	nop
 80a36d6:	bf00      	nop
 80a36d8:	bf00      	nop
 80a36da:	bf00      	nop
 80a36dc:	bf00      	nop
 80a36de:	bf00      	nop
 80a36e0:	bf00      	nop
 80a36e2:	bf00      	nop
 80a36e4:	bf00      	nop
 80a36e6:	bf00      	nop
 80a36e8:	bf00      	nop
 80a36ea:	bf00      	nop
 80a36ec:	bf00      	nop
 80a36ee:	bf00      	nop
 80a36f0:	bf00      	nop
 80a36f2:	bf00      	nop
 80a36f4:	bf00      	nop
 80a36f6:	bf00      	nop
 80a36f8:	bf00      	nop
 80a36fa:	bf00      	nop
 80a36fc:	bf00      	nop
 80a36fe:	bf00      	nop
 80a3700:	bf00      	nop
 80a3702:	bf00      	nop
 80a3704:	bf00      	nop
 80a3706:	bf00      	nop
 80a3708:	bf00      	nop
 80a370a:	bf00      	nop
 80a370c:	bf00      	nop
 80a370e:	bf00      	nop
 80a3710:	bf00      	nop
 80a3712:	bf00      	nop
 80a3714:	bf00      	nop
 80a3716:	bf00      	nop
 80a3718:	bf00      	nop
 80a371a:	bf00      	nop
 80a371c:	bf00      	nop
 80a371e:	bf00      	nop
 80a3720:	bf00      	nop
 80a3722:	bf00      	nop
 80a3724:	bf00      	nop
 80a3726:	bf00      	nop
 80a3728:	bf00      	nop
 80a372a:	bf00      	nop
 80a372c:	bf00      	nop
 80a372e:	bf00      	nop
 80a3730:	bf00      	nop
 80a3732:	bf00      	nop
 80a3734:	bf00      	nop
 80a3736:	bf00      	nop
 80a3738:	bf00      	nop
 80a373a:	bf00      	nop
          if(j==24) break;
 80a373c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a3740:	2b18      	cmp	r3, #24
 80a3742:	d184      	bne.n	80a364e <_ZN17Adafruit_NeoPixel4showEv+0xc5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3744:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a3748:	b29b      	uxth	r3, r3
 80a374a:	2b00      	cmp	r3, #0
 80a374c:	f47f aedd 	bne.w	80a350a <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a3750:	e517      	b.n	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3752:	2b00      	cmp	r3, #0
 80a3754:	f43f ad15 	beq.w	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a3758:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a375c:	2600      	movs	r6, #0
 80a375e:	4a13      	ldr	r2, [pc, #76]	; (80a37ac <_ZN17Adafruit_NeoPixel4showEv+0xdb8>)
      mask = 0x800000; // reset the mask
 80a3760:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a3762:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a3766:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a3768:	3b03      	subs	r3, #3
 80a376a:	b29b      	uxth	r3, r3
 80a376c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a3770:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a3774:	b2db      	uxtb	r3, r3
 80a3776:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a377a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a377e:	b2db      	uxtb	r3, r3
 80a3780:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a3784:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a3788:	b2db      	uxtb	r3, r3
 80a378a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a378e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a3792:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a3796:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a379a:	021b      	lsls	r3, r3, #8
 80a379c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a37a0:	4303      	orrs	r3, r0
 80a37a2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a37a4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a37a8:	e0e1      	b.n	80a396e <_ZN17Adafruit_NeoPixel4showEv+0xf7a>
 80a37aa:	bf00      	nop
 80a37ac:	20000abc 	.word	0x20000abc
            ::: "r0", "cc", "memory");
 80a37b0:	4600      	mov	r0, r0
 80a37b2:	bf00      	nop
 80a37b4:	bf00      	nop
 80a37b6:	bf00      	nop
 80a37b8:	bf00      	nop
 80a37ba:	bf00      	nop
 80a37bc:	bf00      	nop
 80a37be:	bf00      	nop
 80a37c0:	bf00      	nop
 80a37c2:	bf00      	nop
 80a37c4:	bf00      	nop
 80a37c6:	bf00      	nop
 80a37c8:	bf00      	nop
 80a37ca:	bf00      	nop
 80a37cc:	bf00      	nop
 80a37ce:	bf00      	nop
 80a37d0:	bf00      	nop
 80a37d2:	bf00      	nop
 80a37d4:	bf00      	nop
 80a37d6:	bf00      	nop
 80a37d8:	bf00      	nop
 80a37da:	bf00      	nop
 80a37dc:	bf00      	nop
 80a37de:	bf00      	nop
 80a37e0:	bf00      	nop
 80a37e2:	bf00      	nop
 80a37e4:	bf00      	nop
 80a37e6:	bf00      	nop
 80a37e8:	bf00      	nop
 80a37ea:	bf00      	nop
 80a37ec:	bf00      	nop
 80a37ee:	bf00      	nop
 80a37f0:	bf00      	nop
 80a37f2:	bf00      	nop
 80a37f4:	bf00      	nop
 80a37f6:	bf00      	nop
 80a37f8:	bf00      	nop
 80a37fa:	bf00      	nop
 80a37fc:	bf00      	nop
 80a37fe:	bf00      	nop
 80a3800:	bf00      	nop
 80a3802:	bf00      	nop
 80a3804:	bf00      	nop
 80a3806:	bf00      	nop
 80a3808:	bf00      	nop
 80a380a:	bf00      	nop
 80a380c:	bf00      	nop
 80a380e:	bf00      	nop
 80a3810:	bf00      	nop
 80a3812:	bf00      	nop
 80a3814:	bf00      	nop
 80a3816:	bf00      	nop
 80a3818:	bf00      	nop
 80a381a:	bf00      	nop
 80a381c:	bf00      	nop
 80a381e:	bf00      	nop
 80a3820:	bf00      	nop
 80a3822:	bf00      	nop
 80a3824:	bf00      	nop
 80a3826:	bf00      	nop
 80a3828:	bf00      	nop
 80a382a:	bf00      	nop
 80a382c:	bf00      	nop
 80a382e:	bf00      	nop
 80a3830:	bf00      	nop
 80a3832:	bf00      	nop
 80a3834:	bf00      	nop
 80a3836:	bf00      	nop
 80a3838:	bf00      	nop
 80a383a:	bf00      	nop
 80a383c:	bf00      	nop
 80a383e:	bf00      	nop
 80a3840:	bf00      	nop
 80a3842:	bf00      	nop
 80a3844:	bf00      	nop
 80a3846:	bf00      	nop
 80a3848:	bf00      	nop
 80a384a:	bf00      	nop
 80a384c:	bf00      	nop
 80a384e:	bf00      	nop
 80a3850:	bf00      	nop
 80a3852:	bf00      	nop
 80a3854:	bf00      	nop
 80a3856:	bf00      	nop
 80a3858:	bf00      	nop
 80a385a:	bf00      	nop
 80a385c:	bf00      	nop
 80a385e:	bf00      	nop
 80a3860:	bf00      	nop
 80a3862:	bf00      	nop
 80a3864:	bf00      	nop
 80a3866:	bf00      	nop
 80a3868:	bf00      	nop
 80a386a:	bf00      	nop
 80a386c:	bf00      	nop
 80a386e:	bf00      	nop
 80a3870:	bf00      	nop
 80a3872:	bf00      	nop
 80a3874:	bf00      	nop
 80a3876:	bf00      	nop
 80a3878:	bf00      	nop
 80a387a:	bf00      	nop
 80a387c:	bf00      	nop
 80a387e:	bf00      	nop
 80a3880:	bf00      	nop
 80a3882:	bf00      	nop
 80a3884:	bf00      	nop
 80a3886:	bf00      	nop
 80a3888:	bf00      	nop
 80a388a:	bf00      	nop
 80a388c:	bf00      	nop
 80a388e:	bf00      	nop
 80a3890:	bf00      	nop
 80a3892:	bf00      	nop
 80a3894:	bf00      	nop
 80a3896:	bf00      	nop
 80a3898:	bf00      	nop
 80a389a:	bf00      	nop
 80a389c:	bf00      	nop
 80a389e:	bf00      	nop
 80a38a0:	bf00      	nop
 80a38a2:	bf00      	nop
 80a38a4:	bf00      	nop
 80a38a6:	bf00      	nop
 80a38a8:	bf00      	nop
 80a38aa:	bf00      	nop
 80a38ac:	bf00      	nop
 80a38ae:	bf00      	nop
 80a38b0:	bf00      	nop
 80a38b2:	bf00      	nop
 80a38b4:	bf00      	nop
 80a38b6:	bf00      	nop
 80a38b8:	bf00      	nop
 80a38ba:	bf00      	nop
 80a38bc:	bf00      	nop
 80a38be:	bf00      	nop
 80a38c0:	bf00      	nop
 80a38c2:	bf00      	nop
 80a38c4:	bf00      	nop
 80a38c6:	bf00      	nop
 80a38c8:	bf00      	nop
 80a38ca:	bf00      	nop
 80a38cc:	bf00      	nop
 80a38ce:	bf00      	nop
 80a38d0:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a38d2:	79e3      	ldrb	r3, [r4, #7]
 80a38d4:	6810      	ldr	r0, [r2, #0]
 80a38d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a38da:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a38de:	88bf      	ldrh	r7, [r7, #4]
 80a38e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a38e4:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a38e6:	4600      	mov	r0, r0
 80a38e8:	bf00      	nop
 80a38ea:	bf00      	nop
 80a38ec:	bf00      	nop
 80a38ee:	bf00      	nop
 80a38f0:	bf00      	nop
 80a38f2:	bf00      	nop
 80a38f4:	bf00      	nop
 80a38f6:	bf00      	nop
 80a38f8:	bf00      	nop
 80a38fa:	bf00      	nop
 80a38fc:	bf00      	nop
 80a38fe:	bf00      	nop
 80a3900:	bf00      	nop
 80a3902:	bf00      	nop
 80a3904:	bf00      	nop
 80a3906:	bf00      	nop
 80a3908:	bf00      	nop
 80a390a:	bf00      	nop
 80a390c:	bf00      	nop
 80a390e:	bf00      	nop
 80a3910:	bf00      	nop
 80a3912:	bf00      	nop
 80a3914:	bf00      	nop
 80a3916:	bf00      	nop
 80a3918:	bf00      	nop
 80a391a:	bf00      	nop
 80a391c:	bf00      	nop
 80a391e:	bf00      	nop
 80a3920:	bf00      	nop
 80a3922:	bf00      	nop
 80a3924:	bf00      	nop
 80a3926:	bf00      	nop
 80a3928:	bf00      	nop
 80a392a:	bf00      	nop
 80a392c:	bf00      	nop
 80a392e:	bf00      	nop
 80a3930:	bf00      	nop
 80a3932:	bf00      	nop
 80a3934:	bf00      	nop
 80a3936:	bf00      	nop
 80a3938:	bf00      	nop
 80a393a:	bf00      	nop
 80a393c:	bf00      	nop
 80a393e:	bf00      	nop
 80a3940:	bf00      	nop
 80a3942:	bf00      	nop
 80a3944:	bf00      	nop
 80a3946:	bf00      	nop
 80a3948:	bf00      	nop
 80a394a:	bf00      	nop
 80a394c:	bf00      	nop
 80a394e:	bf00      	nop
 80a3950:	bf00      	nop
 80a3952:	bf00      	nop
 80a3954:	bf00      	nop
        mask >>= 1;
 80a3956:	9b04      	ldr	r3, [sp, #16]
 80a3958:	085b      	lsrs	r3, r3, #1
 80a395a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a395c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a3960:	3301      	adds	r3, #1
 80a3962:	b2db      	uxtb	r3, r3
 80a3964:	2b17      	cmp	r3, #23
 80a3966:	f88d 3005 	strb.w	r3, [sp, #5]
 80a396a:	f200 80eb 	bhi.w	80a3b44 <_ZN17Adafruit_NeoPixel4showEv+0x1150>
        pinSet(pin, HIGH); // HIGH
 80a396e:	79e3      	ldrb	r3, [r4, #7]
 80a3970:	6810      	ldr	r0, [r2, #0]
 80a3972:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3976:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a397a:	88bf      	ldrh	r7, [r7, #4]
 80a397c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3980:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a3982:	9803      	ldr	r0, [sp, #12]
 80a3984:	9b04      	ldr	r3, [sp, #16]
 80a3986:	4218      	tst	r0, r3
 80a3988:	f47f af12 	bne.w	80a37b0 <_ZN17Adafruit_NeoPixel4showEv+0xdbc>
            ::: "r0", "cc", "memory");
 80a398c:	4600      	mov	r0, r0
 80a398e:	bf00      	nop
 80a3990:	bf00      	nop
 80a3992:	bf00      	nop
 80a3994:	bf00      	nop
 80a3996:	bf00      	nop
 80a3998:	bf00      	nop
 80a399a:	bf00      	nop
 80a399c:	bf00      	nop
 80a399e:	bf00      	nop
 80a39a0:	bf00      	nop
 80a39a2:	bf00      	nop
 80a39a4:	bf00      	nop
 80a39a6:	bf00      	nop
 80a39a8:	bf00      	nop
 80a39aa:	bf00      	nop
 80a39ac:	bf00      	nop
 80a39ae:	bf00      	nop
 80a39b0:	bf00      	nop
 80a39b2:	bf00      	nop
 80a39b4:	bf00      	nop
 80a39b6:	bf00      	nop
 80a39b8:	bf00      	nop
 80a39ba:	bf00      	nop
 80a39bc:	bf00      	nop
 80a39be:	bf00      	nop
 80a39c0:	bf00      	nop
 80a39c2:	bf00      	nop
 80a39c4:	bf00      	nop
 80a39c6:	bf00      	nop
 80a39c8:	bf00      	nop
 80a39ca:	bf00      	nop
 80a39cc:	bf00      	nop
 80a39ce:	bf00      	nop
 80a39d0:	bf00      	nop
 80a39d2:	bf00      	nop
 80a39d4:	bf00      	nop
 80a39d6:	bf00      	nop
 80a39d8:	bf00      	nop
 80a39da:	bf00      	nop
 80a39dc:	bf00      	nop
 80a39de:	bf00      	nop
 80a39e0:	bf00      	nop
 80a39e2:	bf00      	nop
 80a39e4:	bf00      	nop
 80a39e6:	bf00      	nop
 80a39e8:	bf00      	nop
 80a39ea:	bf00      	nop
 80a39ec:	bf00      	nop
 80a39ee:	bf00      	nop
 80a39f0:	bf00      	nop
 80a39f2:	bf00      	nop
 80a39f4:	bf00      	nop
 80a39f6:	bf00      	nop
 80a39f8:	bf00      	nop
 80a39fa:	bf00      	nop
 80a39fc:	bf00      	nop
 80a39fe:	bf00      	nop
 80a3a00:	bf00      	nop
 80a3a02:	bf00      	nop
 80a3a04:	bf00      	nop
 80a3a06:	bf00      	nop
 80a3a08:	bf00      	nop
 80a3a0a:	bf00      	nop
 80a3a0c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3a0e:	79e3      	ldrb	r3, [r4, #7]
 80a3a10:	6810      	ldr	r0, [r2, #0]
 80a3a12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3a16:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3a1a:	88bf      	ldrh	r7, [r7, #4]
 80a3a1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3a20:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3a22:	4600      	mov	r0, r0
 80a3a24:	bf00      	nop
 80a3a26:	bf00      	nop
 80a3a28:	bf00      	nop
 80a3a2a:	bf00      	nop
 80a3a2c:	bf00      	nop
 80a3a2e:	bf00      	nop
 80a3a30:	bf00      	nop
 80a3a32:	bf00      	nop
 80a3a34:	bf00      	nop
 80a3a36:	bf00      	nop
 80a3a38:	bf00      	nop
 80a3a3a:	bf00      	nop
 80a3a3c:	bf00      	nop
 80a3a3e:	bf00      	nop
 80a3a40:	bf00      	nop
 80a3a42:	bf00      	nop
 80a3a44:	bf00      	nop
 80a3a46:	bf00      	nop
 80a3a48:	bf00      	nop
 80a3a4a:	bf00      	nop
 80a3a4c:	bf00      	nop
 80a3a4e:	bf00      	nop
 80a3a50:	bf00      	nop
 80a3a52:	bf00      	nop
 80a3a54:	bf00      	nop
 80a3a56:	bf00      	nop
 80a3a58:	bf00      	nop
 80a3a5a:	bf00      	nop
 80a3a5c:	bf00      	nop
 80a3a5e:	bf00      	nop
 80a3a60:	bf00      	nop
 80a3a62:	bf00      	nop
 80a3a64:	bf00      	nop
 80a3a66:	bf00      	nop
 80a3a68:	bf00      	nop
 80a3a6a:	bf00      	nop
 80a3a6c:	bf00      	nop
 80a3a6e:	bf00      	nop
 80a3a70:	bf00      	nop
 80a3a72:	bf00      	nop
 80a3a74:	bf00      	nop
 80a3a76:	bf00      	nop
 80a3a78:	bf00      	nop
 80a3a7a:	bf00      	nop
 80a3a7c:	bf00      	nop
 80a3a7e:	bf00      	nop
 80a3a80:	bf00      	nop
 80a3a82:	bf00      	nop
 80a3a84:	bf00      	nop
 80a3a86:	bf00      	nop
 80a3a88:	bf00      	nop
 80a3a8a:	bf00      	nop
 80a3a8c:	bf00      	nop
 80a3a8e:	bf00      	nop
 80a3a90:	bf00      	nop
 80a3a92:	bf00      	nop
 80a3a94:	bf00      	nop
 80a3a96:	bf00      	nop
 80a3a98:	bf00      	nop
 80a3a9a:	bf00      	nop
 80a3a9c:	bf00      	nop
 80a3a9e:	bf00      	nop
 80a3aa0:	bf00      	nop
 80a3aa2:	bf00      	nop
 80a3aa4:	bf00      	nop
 80a3aa6:	bf00      	nop
 80a3aa8:	bf00      	nop
 80a3aaa:	bf00      	nop
 80a3aac:	bf00      	nop
 80a3aae:	bf00      	nop
 80a3ab0:	bf00      	nop
 80a3ab2:	bf00      	nop
 80a3ab4:	bf00      	nop
 80a3ab6:	bf00      	nop
 80a3ab8:	bf00      	nop
 80a3aba:	bf00      	nop
 80a3abc:	bf00      	nop
 80a3abe:	bf00      	nop
 80a3ac0:	bf00      	nop
 80a3ac2:	bf00      	nop
 80a3ac4:	bf00      	nop
 80a3ac6:	bf00      	nop
 80a3ac8:	bf00      	nop
 80a3aca:	bf00      	nop
 80a3acc:	bf00      	nop
 80a3ace:	bf00      	nop
 80a3ad0:	bf00      	nop
 80a3ad2:	bf00      	nop
 80a3ad4:	bf00      	nop
 80a3ad6:	bf00      	nop
 80a3ad8:	bf00      	nop
 80a3ada:	bf00      	nop
 80a3adc:	bf00      	nop
 80a3ade:	bf00      	nop
 80a3ae0:	bf00      	nop
 80a3ae2:	bf00      	nop
 80a3ae4:	bf00      	nop
 80a3ae6:	bf00      	nop
 80a3ae8:	bf00      	nop
 80a3aea:	bf00      	nop
 80a3aec:	bf00      	nop
 80a3aee:	bf00      	nop
 80a3af0:	bf00      	nop
 80a3af2:	bf00      	nop
 80a3af4:	bf00      	nop
 80a3af6:	bf00      	nop
 80a3af8:	bf00      	nop
 80a3afa:	bf00      	nop
 80a3afc:	bf00      	nop
 80a3afe:	bf00      	nop
 80a3b00:	bf00      	nop
 80a3b02:	bf00      	nop
 80a3b04:	bf00      	nop
 80a3b06:	bf00      	nop
 80a3b08:	bf00      	nop
 80a3b0a:	bf00      	nop
 80a3b0c:	bf00      	nop
 80a3b0e:	bf00      	nop
 80a3b10:	bf00      	nop
 80a3b12:	bf00      	nop
 80a3b14:	bf00      	nop
 80a3b16:	bf00      	nop
 80a3b18:	bf00      	nop
 80a3b1a:	bf00      	nop
 80a3b1c:	bf00      	nop
 80a3b1e:	bf00      	nop
 80a3b20:	bf00      	nop
 80a3b22:	bf00      	nop
 80a3b24:	bf00      	nop
 80a3b26:	bf00      	nop
 80a3b28:	bf00      	nop
 80a3b2a:	bf00      	nop
 80a3b2c:	bf00      	nop
 80a3b2e:	bf00      	nop
 80a3b30:	bf00      	nop
 80a3b32:	e710      	b.n	80a3956 <_ZN17Adafruit_NeoPixel4showEv+0xf62>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3b34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a3b38:	b29b      	uxth	r3, r3
 80a3b3a:	2b00      	cmp	r3, #0
 80a3b3c:	f47e af92 	bne.w	80a2a64 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a3b40:	f7ff bb1f 	b.w	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3b44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a3b48:	b29b      	uxth	r3, r3
 80a3b4a:	2b00      	cmp	r3, #0
 80a3b4c:	f47f ae08 	bne.w	80a3760 <_ZN17Adafruit_NeoPixel4showEv+0xd6c>
 80a3b50:	f7ff bb17 	b.w	80a3182 <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a3b54 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a3b54:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a3b56:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a3b58:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
 80a3b5c:	428c      	cmp	r4, r1
 80a3b5e:	d918      	bls.n	80a3b92 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3e>
    if(brightness) { // See notes in setBrightness()
 80a3b60:	7a04      	ldrb	r4, [r0, #8]
 80a3b62:	b12c      	cbz	r4, 80a3b70 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x1c>
      r = (r * brightness) >> 8;
 80a3b64:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a3b66:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a3b68:	436c      	muls	r4, r5
      r = (r * brightness) >> 8;
 80a3b6a:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a3b6c:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a3b6e:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a3b70:	68c6      	ldr	r6, [r0, #12]
 80a3b72:	7980      	ldrb	r0, [r0, #6]
 80a3b74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a3b78:	3802      	subs	r0, #2
 80a3b7a:	1874      	adds	r4, r6, r1
    switch(type) {
 80a3b7c:	2806      	cmp	r0, #6
 80a3b7e:	d810      	bhi.n	80a3ba2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a3b80:	e8df f000 	tbb	[pc, r0]
 80a3b84:	04080f04 	.word	0x04080f04
 80a3b88:	040f      	.short	0x040f
 80a3b8a:	04          	.byte	0x04
 80a3b8b:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a3b8c:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a3b8e:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a3b90:	70a5      	strb	r5, [r4, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a3b92:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
 80a3b94:	2afe      	cmp	r2, #254	; 0xfe
 80a3b96:	bf28      	it	cs
 80a3b98:	22fe      	movcs	r2, #254	; 0xfe
 80a3b9a:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a3b9c:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a3b9e:	70a3      	strb	r3, [r4, #2]
        } break;
 80a3ba0:	e7f7      	b.n	80a3b92 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3e>
          *p++ = r;
 80a3ba2:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a3ba4:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a3ba6:	70a5      	strb	r5, [r4, #2]
}
 80a3ba8:	e7f3      	b.n	80a3b92 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3e>
	...

080a3bac <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a3bac:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a3bae:	f000 f805 	bl	80a3bbc <HAL_Pin_Map>
 80a3bb2:	4b01      	ldr	r3, [pc, #4]	; (80a3bb8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a3bb4:	6018      	str	r0, [r3, #0]
}
 80a3bb6:	bd08      	pop	{r3, pc}
 80a3bb8:	20000abc 	.word	0x20000abc

080a3bbc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3bbc:	b508      	push	{r3, lr}
 80a3bbe:	4b02      	ldr	r3, [pc, #8]	; (80a3bc8 <HAL_Pin_Map+0xc>)
 80a3bc0:	681b      	ldr	r3, [r3, #0]
 80a3bc2:	681b      	ldr	r3, [r3, #0]
 80a3bc4:	9301      	str	r3, [sp, #4]
 80a3bc6:	bd08      	pop	{r3, pc}
 80a3bc8:	080601b0 	.word	0x080601b0

080a3bcc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3bcc:	b508      	push	{r3, lr}
 80a3bce:	4b02      	ldr	r3, [pc, #8]	; (80a3bd8 <HAL_Validate_Pin_Function+0xc>)
 80a3bd0:	681b      	ldr	r3, [r3, #0]
 80a3bd2:	685b      	ldr	r3, [r3, #4]
 80a3bd4:	9301      	str	r3, [sp, #4]
 80a3bd6:	bd08      	pop	{r3, pc}
 80a3bd8:	080601b0 	.word	0x080601b0

080a3bdc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3bdc:	b508      	push	{r3, lr}
 80a3bde:	4b02      	ldr	r3, [pc, #8]	; (80a3be8 <HAL_Pin_Mode+0xc>)
 80a3be0:	681b      	ldr	r3, [r3, #0]
 80a3be2:	689b      	ldr	r3, [r3, #8]
 80a3be4:	9301      	str	r3, [sp, #4]
 80a3be6:	bd08      	pop	{r3, pc}
 80a3be8:	080601b0 	.word	0x080601b0

080a3bec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3bec:	b508      	push	{r3, lr}
 80a3bee:	4b02      	ldr	r3, [pc, #8]	; (80a3bf8 <HAL_Get_Pin_Mode+0xc>)
 80a3bf0:	681b      	ldr	r3, [r3, #0]
 80a3bf2:	68db      	ldr	r3, [r3, #12]
 80a3bf4:	9301      	str	r3, [sp, #4]
 80a3bf6:	bd08      	pop	{r3, pc}
 80a3bf8:	080601b0 	.word	0x080601b0

080a3bfc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3bfc:	b508      	push	{r3, lr}
 80a3bfe:	4b02      	ldr	r3, [pc, #8]	; (80a3c08 <HAL_GPIO_Write+0xc>)
 80a3c00:	681b      	ldr	r3, [r3, #0]
 80a3c02:	691b      	ldr	r3, [r3, #16]
 80a3c04:	9301      	str	r3, [sp, #4]
 80a3c06:	bd08      	pop	{r3, pc}
 80a3c08:	080601b0 	.word	0x080601b0

080a3c0c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3c0c:	b508      	push	{r3, lr}
 80a3c0e:	4b02      	ldr	r3, [pc, #8]	; (80a3c18 <HAL_GPIO_Read+0xc>)
 80a3c10:	681b      	ldr	r3, [r3, #0]
 80a3c12:	695b      	ldr	r3, [r3, #20]
 80a3c14:	9301      	str	r3, [sp, #4]
 80a3c16:	bd08      	pop	{r3, pc}
 80a3c18:	080601b0 	.word	0x080601b0

080a3c1c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a3c1c:	b508      	push	{r3, lr}
 80a3c1e:	4b02      	ldr	r3, [pc, #8]	; (80a3c28 <hal_adc_read+0xc>)
 80a3c20:	681b      	ldr	r3, [r3, #0]
 80a3c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3c24:	9301      	str	r3, [sp, #4]
 80a3c26:	bd08      	pop	{r3, pc}
 80a3c28:	080601b0 	.word	0x080601b0

080a3c2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3c2c:	b508      	push	{r3, lr}
 80a3c2e:	4b02      	ldr	r3, [pc, #8]	; (80a3c38 <HAL_RNG_GetRandomNumber+0xc>)
 80a3c30:	681b      	ldr	r3, [r3, #0]
 80a3c32:	685b      	ldr	r3, [r3, #4]
 80a3c34:	9301      	str	r3, [sp, #4]
 80a3c36:	bd08      	pop	{r3, pc}
 80a3c38:	0806019c 	.word	0x0806019c

080a3c3c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a3c3c:	b508      	push	{r3, lr}
 80a3c3e:	4b02      	ldr	r3, [pc, #8]	; (80a3c48 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a3c40:	681b      	ldr	r3, [r3, #0]
 80a3c42:	691b      	ldr	r3, [r3, #16]
 80a3c44:	9301      	str	r3, [sp, #4]
 80a3c46:	bd08      	pop	{r3, pc}
 80a3c48:	0806019c 	.word	0x0806019c

080a3c4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3c4c:	b508      	push	{r3, lr}
 80a3c4e:	4b02      	ldr	r3, [pc, #8]	; (80a3c58 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3c50:	681b      	ldr	r3, [r3, #0]
 80a3c52:	695b      	ldr	r3, [r3, #20]
 80a3c54:	9301      	str	r3, [sp, #4]
 80a3c56:	bd08      	pop	{r3, pc}
 80a3c58:	0806019c 	.word	0x0806019c

080a3c5c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a3c5c:	b508      	push	{r3, lr}
 80a3c5e:	4b02      	ldr	r3, [pc, #8]	; (80a3c68 <HAL_EEPROM_Init+0xc>)
 80a3c60:	681b      	ldr	r3, [r3, #0]
 80a3c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3c64:	9301      	str	r3, [sp, #4]
 80a3c66:	bd08      	pop	{r3, pc}
 80a3c68:	0806019c 	.word	0x0806019c

080a3c6c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80a3c6c:	b508      	push	{r3, lr}
 80a3c6e:	4b02      	ldr	r3, [pc, #8]	; (80a3c78 <HAL_EEPROM_Read+0xc>)
 80a3c70:	681b      	ldr	r3, [r3, #0]
 80a3c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3c74:	9301      	str	r3, [sp, #4]
 80a3c76:	bd08      	pop	{r3, pc}
 80a3c78:	0806019c 	.word	0x0806019c

080a3c7c <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 80a3c7c:	b508      	push	{r3, lr}
 80a3c7e:	4b02      	ldr	r3, [pc, #8]	; (80a3c88 <HAL_EEPROM_Write+0xc>)
 80a3c80:	681b      	ldr	r3, [r3, #0]
 80a3c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3c84:	9301      	str	r3, [sp, #4]
 80a3c86:	bd08      	pop	{r3, pc}
 80a3c88:	0806019c 	.word	0x0806019c

080a3c8c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a3c8c:	b508      	push	{r3, lr}
 80a3c8e:	4b02      	ldr	r3, [pc, #8]	; (80a3c98 <hal_rtc_time_is_valid+0xc>)
 80a3c90:	681b      	ldr	r3, [r3, #0]
 80a3c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3c94:	9301      	str	r3, [sp, #4]
 80a3c96:	bd08      	pop	{r3, pc}
 80a3c98:	0806019c 	.word	0x0806019c

080a3c9c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a3c9c:	b508      	push	{r3, lr}
 80a3c9e:	4b02      	ldr	r3, [pc, #8]	; (80a3ca8 <hal_timer_millis+0xc>)
 80a3ca0:	681b      	ldr	r3, [r3, #0]
 80a3ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a3ca4:	9301      	str	r3, [sp, #4]
 80a3ca6:	bd08      	pop	{r3, pc}
 80a3ca8:	0806019c 	.word	0x0806019c

080a3cac <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a3cac:	b508      	push	{r3, lr}
 80a3cae:	4b02      	ldr	r3, [pc, #8]	; (80a3cb8 <hal_rtc_get_time+0xc>)
 80a3cb0:	681b      	ldr	r3, [r3, #0]
 80a3cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3cb4:	9301      	str	r3, [sp, #4]
 80a3cb6:	bd08      	pop	{r3, pc}
 80a3cb8:	0806019c 	.word	0x0806019c

080a3cbc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3cbc:	b508      	push	{r3, lr}
 80a3cbe:	4b02      	ldr	r3, [pc, #8]	; (80a3cc8 <os_mutex_recursive_create+0xc>)
 80a3cc0:	681b      	ldr	r3, [r3, #0]
 80a3cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3cc4:	9301      	str	r3, [sp, #4]
 80a3cc6:	bd08      	pop	{r3, pc}
 80a3cc8:	080601d0 	.word	0x080601d0

080a3ccc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3ccc:	b508      	push	{r3, lr}
 80a3cce:	4b02      	ldr	r3, [pc, #8]	; (80a3cd8 <os_mutex_recursive_destroy+0xc>)
 80a3cd0:	681b      	ldr	r3, [r3, #0]
 80a3cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3cd4:	9301      	str	r3, [sp, #4]
 80a3cd6:	bd08      	pop	{r3, pc}
 80a3cd8:	080601d0 	.word	0x080601d0

080a3cdc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a3cdc:	b508      	push	{r3, lr}
 80a3cde:	4b02      	ldr	r3, [pc, #8]	; (80a3ce8 <hal_usart_init+0xc>)
 80a3ce0:	681b      	ldr	r3, [r3, #0]
 80a3ce2:	699b      	ldr	r3, [r3, #24]
 80a3ce4:	9301      	str	r3, [sp, #4]
 80a3ce6:	bd08      	pop	{r3, pc}
 80a3ce8:	080601c4 	.word	0x080601c4

080a3cec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3cec:	b508      	push	{r3, lr}
 80a3cee:	4b02      	ldr	r3, [pc, #8]	; (80a3cf8 <hal_usart_write+0xc>)
 80a3cf0:	681b      	ldr	r3, [r3, #0]
 80a3cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3cf4:	9301      	str	r3, [sp, #4]
 80a3cf6:	bd08      	pop	{r3, pc}
 80a3cf8:	080601c4 	.word	0x080601c4

080a3cfc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3cfc:	b508      	push	{r3, lr}
 80a3cfe:	4b02      	ldr	r3, [pc, #8]	; (80a3d08 <hal_usart_available+0xc>)
 80a3d00:	681b      	ldr	r3, [r3, #0]
 80a3d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3d04:	9301      	str	r3, [sp, #4]
 80a3d06:	bd08      	pop	{r3, pc}
 80a3d08:	080601c4 	.word	0x080601c4

080a3d0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3d0c:	b508      	push	{r3, lr}
 80a3d0e:	4b02      	ldr	r3, [pc, #8]	; (80a3d18 <hal_usart_read+0xc>)
 80a3d10:	681b      	ldr	r3, [r3, #0]
 80a3d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3d14:	9301      	str	r3, [sp, #4]
 80a3d16:	bd08      	pop	{r3, pc}
 80a3d18:	080601c4 	.word	0x080601c4

080a3d1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a3d1c:	b508      	push	{r3, lr}
 80a3d1e:	4b02      	ldr	r3, [pc, #8]	; (80a3d28 <hal_usart_peek+0xc>)
 80a3d20:	681b      	ldr	r3, [r3, #0]
 80a3d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3d24:	9301      	str	r3, [sp, #4]
 80a3d26:	bd08      	pop	{r3, pc}
 80a3d28:	080601c4 	.word	0x080601c4

080a3d2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3d2c:	b508      	push	{r3, lr}
 80a3d2e:	4b02      	ldr	r3, [pc, #8]	; (80a3d38 <hal_usart_flush+0xc>)
 80a3d30:	681b      	ldr	r3, [r3, #0]
 80a3d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3d34:	9301      	str	r3, [sp, #4]
 80a3d36:	bd08      	pop	{r3, pc}
 80a3d38:	080601c4 	.word	0x080601c4

080a3d3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a3d3c:	b508      	push	{r3, lr}
 80a3d3e:	4b02      	ldr	r3, [pc, #8]	; (80a3d48 <hal_usart_is_enabled+0xc>)
 80a3d40:	681b      	ldr	r3, [r3, #0]
 80a3d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3d44:	9301      	str	r3, [sp, #4]
 80a3d46:	bd08      	pop	{r3, pc}
 80a3d48:	080601c4 	.word	0x080601c4

080a3d4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a3d4c:	b508      	push	{r3, lr}
 80a3d4e:	4b02      	ldr	r3, [pc, #8]	; (80a3d58 <hal_usart_available_data_for_write+0xc>)
 80a3d50:	681b      	ldr	r3, [r3, #0]
 80a3d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3d54:	9301      	str	r3, [sp, #4]
 80a3d56:	bd08      	pop	{r3, pc}
 80a3d58:	080601c4 	.word	0x080601c4

080a3d5c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a3d5c:	b508      	push	{r3, lr}
 80a3d5e:	4b02      	ldr	r3, [pc, #8]	; (80a3d68 <hal_i2c_write+0xc>)
 80a3d60:	681b      	ldr	r3, [r3, #0]
 80a3d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3d64:	9301      	str	r3, [sp, #4]
 80a3d66:	bd08      	pop	{r3, pc}
 80a3d68:	080601ac 	.word	0x080601ac

080a3d6c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a3d6c:	b508      	push	{r3, lr}
 80a3d6e:	4b02      	ldr	r3, [pc, #8]	; (80a3d78 <hal_i2c_available+0xc>)
 80a3d70:	681b      	ldr	r3, [r3, #0]
 80a3d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3d74:	9301      	str	r3, [sp, #4]
 80a3d76:	bd08      	pop	{r3, pc}
 80a3d78:	080601ac 	.word	0x080601ac

080a3d7c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a3d7c:	b508      	push	{r3, lr}
 80a3d7e:	4b02      	ldr	r3, [pc, #8]	; (80a3d88 <hal_i2c_read+0xc>)
 80a3d80:	681b      	ldr	r3, [r3, #0]
 80a3d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3d84:	9301      	str	r3, [sp, #4]
 80a3d86:	bd08      	pop	{r3, pc}
 80a3d88:	080601ac 	.word	0x080601ac

080a3d8c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3d8c:	b508      	push	{r3, lr}
 80a3d8e:	4b02      	ldr	r3, [pc, #8]	; (80a3d98 <hal_i2c_peek+0xc>)
 80a3d90:	681b      	ldr	r3, [r3, #0]
 80a3d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3d94:	9301      	str	r3, [sp, #4]
 80a3d96:	bd08      	pop	{r3, pc}
 80a3d98:	080601ac 	.word	0x080601ac

080a3d9c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3d9c:	b508      	push	{r3, lr}
 80a3d9e:	4b02      	ldr	r3, [pc, #8]	; (80a3da8 <hal_i2c_flush+0xc>)
 80a3da0:	681b      	ldr	r3, [r3, #0]
 80a3da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3da4:	9301      	str	r3, [sp, #4]
 80a3da6:	bd08      	pop	{r3, pc}
 80a3da8:	080601ac 	.word	0x080601ac

080a3dac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3dac:	b508      	push	{r3, lr}
 80a3dae:	4b02      	ldr	r3, [pc, #8]	; (80a3db8 <hal_i2c_is_enabled+0xc>)
 80a3db0:	681b      	ldr	r3, [r3, #0]
 80a3db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3db4:	9301      	str	r3, [sp, #4]
 80a3db6:	bd08      	pop	{r3, pc}
 80a3db8:	080601ac 	.word	0x080601ac

080a3dbc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3dbc:	b508      	push	{r3, lr}
 80a3dbe:	4b03      	ldr	r3, [pc, #12]	; (80a3dcc <hal_i2c_init+0x10>)
 80a3dc0:	681b      	ldr	r3, [r3, #0]
 80a3dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a3dc6:	9301      	str	r3, [sp, #4]
 80a3dc8:	bd08      	pop	{r3, pc}
 80a3dca:	0000      	.short	0x0000
 80a3dcc:	080601ac 	.word	0x080601ac

080a3dd0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a3dd0:	b508      	push	{r3, lr}
 80a3dd2:	4b02      	ldr	r3, [pc, #8]	; (80a3ddc <hal_spi_init+0xc>)
 80a3dd4:	681b      	ldr	r3, [r3, #0]
 80a3dd6:	69db      	ldr	r3, [r3, #28]
 80a3dd8:	9301      	str	r3, [sp, #4]
 80a3dda:	bd08      	pop	{r3, pc}
 80a3ddc:	080601b4 	.word	0x080601b4

080a3de0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a3de0:	b508      	push	{r3, lr}
 80a3de2:	4b02      	ldr	r3, [pc, #8]	; (80a3dec <hal_spi_is_enabled+0xc>)
 80a3de4:	681b      	ldr	r3, [r3, #0]
 80a3de6:	6a1b      	ldr	r3, [r3, #32]
 80a3de8:	9301      	str	r3, [sp, #4]
 80a3dea:	bd08      	pop	{r3, pc}
 80a3dec:	080601b4 	.word	0x080601b4

080a3df0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3df0:	b508      	push	{r3, lr}
 80a3df2:	4b02      	ldr	r3, [pc, #8]	; (80a3dfc <HAL_USB_USART_Init+0xc>)
 80a3df4:	681b      	ldr	r3, [r3, #0]
 80a3df6:	681b      	ldr	r3, [r3, #0]
 80a3df8:	9301      	str	r3, [sp, #4]
 80a3dfa:	bd08      	pop	{r3, pc}
 80a3dfc:	080601d8 	.word	0x080601d8

080a3e00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3e00:	b508      	push	{r3, lr}
 80a3e02:	4b02      	ldr	r3, [pc, #8]	; (80a3e0c <HAL_USB_USART_Available_Data+0xc>)
 80a3e04:	681b      	ldr	r3, [r3, #0]
 80a3e06:	691b      	ldr	r3, [r3, #16]
 80a3e08:	9301      	str	r3, [sp, #4]
 80a3e0a:	bd08      	pop	{r3, pc}
 80a3e0c:	080601d8 	.word	0x080601d8

080a3e10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3e10:	b508      	push	{r3, lr}
 80a3e12:	4b02      	ldr	r3, [pc, #8]	; (80a3e1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3e14:	681b      	ldr	r3, [r3, #0]
 80a3e16:	695b      	ldr	r3, [r3, #20]
 80a3e18:	9301      	str	r3, [sp, #4]
 80a3e1a:	bd08      	pop	{r3, pc}
 80a3e1c:	080601d8 	.word	0x080601d8

080a3e20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3e20:	b508      	push	{r3, lr}
 80a3e22:	4b02      	ldr	r3, [pc, #8]	; (80a3e2c <HAL_USB_USART_Receive_Data+0xc>)
 80a3e24:	681b      	ldr	r3, [r3, #0]
 80a3e26:	699b      	ldr	r3, [r3, #24]
 80a3e28:	9301      	str	r3, [sp, #4]
 80a3e2a:	bd08      	pop	{r3, pc}
 80a3e2c:	080601d8 	.word	0x080601d8

080a3e30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3e30:	b508      	push	{r3, lr}
 80a3e32:	4b02      	ldr	r3, [pc, #8]	; (80a3e3c <HAL_USB_USART_Send_Data+0xc>)
 80a3e34:	681b      	ldr	r3, [r3, #0]
 80a3e36:	69db      	ldr	r3, [r3, #28]
 80a3e38:	9301      	str	r3, [sp, #4]
 80a3e3a:	bd08      	pop	{r3, pc}
 80a3e3c:	080601d8 	.word	0x080601d8

080a3e40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3e40:	b508      	push	{r3, lr}
 80a3e42:	4b02      	ldr	r3, [pc, #8]	; (80a3e4c <HAL_USB_USART_Flush_Data+0xc>)
 80a3e44:	681b      	ldr	r3, [r3, #0]
 80a3e46:	6a1b      	ldr	r3, [r3, #32]
 80a3e48:	9301      	str	r3, [sp, #4]
 80a3e4a:	bd08      	pop	{r3, pc}
 80a3e4c:	080601d8 	.word	0x080601d8

080a3e50 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3e50:	b508      	push	{r3, lr}
 80a3e52:	4b02      	ldr	r3, [pc, #8]	; (80a3e5c <inet_gethostbyname+0xc>)
 80a3e54:	681b      	ldr	r3, [r3, #0]
 80a3e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3e58:	9301      	str	r3, [sp, #4]
 80a3e5a:	bd08      	pop	{r3, pc}
 80a3e5c:	080601c0 	.word	0x080601c0

080a3e60 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a3e60:	b508      	push	{r3, lr}
 80a3e62:	4b02      	ldr	r3, [pc, #8]	; (80a3e6c <wlan_select_antenna+0xc>)
 80a3e64:	681b      	ldr	r3, [r3, #0]
 80a3e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3e68:	9301      	str	r3, [sp, #4]
 80a3e6a:	bd08      	pop	{r3, pc}
 80a3e6c:	080601c0 	.word	0x080601c0

080a3e70 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a3e70:	b508      	push	{r3, lr}
 80a3e72:	4b02      	ldr	r3, [pc, #8]	; (80a3e7c <wlan_connected_info+0xc>)
 80a3e74:	681b      	ldr	r3, [r3, #0]
 80a3e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3e78:	9301      	str	r3, [sp, #4]
 80a3e7a:	bd08      	pop	{r3, pc}
 80a3e7c:	080601c0 	.word	0x080601c0

080a3e80 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a3e80:	b508      	push	{r3, lr}
 80a3e82:	4b02      	ldr	r3, [pc, #8]	; (80a3e8c <LED_SetSignalingColor+0xc>)
 80a3e84:	681b      	ldr	r3, [r3, #0]
 80a3e86:	685b      	ldr	r3, [r3, #4]
 80a3e88:	9301      	str	r3, [sp, #4]
 80a3e8a:	bd08      	pop	{r3, pc}
 80a3e8c:	080201a8 	.word	0x080201a8

080a3e90 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a3e90:	b508      	push	{r3, lr}
 80a3e92:	4b02      	ldr	r3, [pc, #8]	; (80a3e9c <LED_Signaling_Start+0xc>)
 80a3e94:	681b      	ldr	r3, [r3, #0]
 80a3e96:	689b      	ldr	r3, [r3, #8]
 80a3e98:	9301      	str	r3, [sp, #4]
 80a3e9a:	bd08      	pop	{r3, pc}
 80a3e9c:	080201a8 	.word	0x080201a8

080a3ea0 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a3ea0:	b508      	push	{r3, lr}
 80a3ea2:	4b02      	ldr	r3, [pc, #8]	; (80a3eac <LED_Signaling_Stop+0xc>)
 80a3ea4:	681b      	ldr	r3, [r3, #0]
 80a3ea6:	68db      	ldr	r3, [r3, #12]
 80a3ea8:	9301      	str	r3, [sp, #4]
 80a3eaa:	bd08      	pop	{r3, pc}
 80a3eac:	080201a8 	.word	0x080201a8

080a3eb0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a3eb0:	b508      	push	{r3, lr}
 80a3eb2:	4b02      	ldr	r3, [pc, #8]	; (80a3ebc <LED_RGB_IsOverRidden+0xc>)
 80a3eb4:	681b      	ldr	r3, [r3, #0]
 80a3eb6:	699b      	ldr	r3, [r3, #24]
 80a3eb8:	9301      	str	r3, [sp, #4]
 80a3eba:	bd08      	pop	{r3, pc}
 80a3ebc:	080201a8 	.word	0x080201a8

080a3ec0 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a3ec0:	b508      	push	{r3, lr}
 80a3ec2:	4b02      	ldr	r3, [pc, #8]	; (80a3ecc <LED_On+0xc>)
 80a3ec4:	681b      	ldr	r3, [r3, #0]
 80a3ec6:	69db      	ldr	r3, [r3, #28]
 80a3ec8:	9301      	str	r3, [sp, #4]
 80a3eca:	bd08      	pop	{r3, pc}
 80a3ecc:	080201a8 	.word	0x080201a8

080a3ed0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3ed0:	b508      	push	{r3, lr}
 80a3ed2:	4b02      	ldr	r3, [pc, #8]	; (80a3edc <system_mode+0xc>)
 80a3ed4:	681b      	ldr	r3, [r3, #0]
 80a3ed6:	681b      	ldr	r3, [r3, #0]
 80a3ed8:	9301      	str	r3, [sp, #4]
 80a3eda:	bd08      	pop	{r3, pc}
 80a3edc:	080601a4 	.word	0x080601a4

080a3ee0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3ee0:	b508      	push	{r3, lr}
 80a3ee2:	4b02      	ldr	r3, [pc, #8]	; (80a3eec <set_system_mode+0xc>)
 80a3ee4:	681b      	ldr	r3, [r3, #0]
 80a3ee6:	685b      	ldr	r3, [r3, #4]
 80a3ee8:	9301      	str	r3, [sp, #4]
 80a3eea:	bd08      	pop	{r3, pc}
 80a3eec:	080601a4 	.word	0x080601a4

080a3ef0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3ef0:	b508      	push	{r3, lr}
 80a3ef2:	4b02      	ldr	r3, [pc, #8]	; (80a3efc <system_delay_ms+0xc>)
 80a3ef4:	681b      	ldr	r3, [r3, #0]
 80a3ef6:	695b      	ldr	r3, [r3, #20]
 80a3ef8:	9301      	str	r3, [sp, #4]
 80a3efa:	bd08      	pop	{r3, pc}
 80a3efc:	080601a4 	.word	0x080601a4

080a3f00 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a3f00:	b508      	push	{r3, lr}
 80a3f02:	4b02      	ldr	r3, [pc, #8]	; (80a3f0c <system_thread_set_state+0xc>)
 80a3f04:	681b      	ldr	r3, [r3, #0]
 80a3f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3f08:	9301      	str	r3, [sp, #4]
 80a3f0a:	bd08      	pop	{r3, pc}
 80a3f0c:	080601a4 	.word	0x080601a4

080a3f10 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a3f10:	b508      	push	{r3, lr}
 80a3f12:	4b02      	ldr	r3, [pc, #8]	; (80a3f1c <application_thread_current+0xc>)
 80a3f14:	681b      	ldr	r3, [r3, #0]
 80a3f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3f18:	9301      	str	r3, [sp, #4]
 80a3f1a:	bd08      	pop	{r3, pc}
 80a3f1c:	080601a4 	.word	0x080601a4

080a3f20 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a3f20:	b508      	push	{r3, lr}
 80a3f22:	4b02      	ldr	r3, [pc, #8]	; (80a3f2c <application_thread_invoke+0xc>)
 80a3f24:	681b      	ldr	r3, [r3, #0]
 80a3f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3f28:	9301      	str	r3, [sp, #4]
 80a3f2a:	bd08      	pop	{r3, pc}
 80a3f2c:	080601a4 	.word	0x080601a4

080a3f30 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3f30:	b508      	push	{r3, lr}
 80a3f32:	4b02      	ldr	r3, [pc, #8]	; (80a3f3c <system_thread_get_state+0xc>)
 80a3f34:	681b      	ldr	r3, [r3, #0]
 80a3f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3f38:	9301      	str	r3, [sp, #4]
 80a3f3a:	bd08      	pop	{r3, pc}
 80a3f3c:	080601a4 	.word	0x080601a4

080a3f40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3f40:	b508      	push	{r3, lr}
 80a3f42:	4b03      	ldr	r3, [pc, #12]	; (80a3f50 <system_ctrl_set_app_request_handler+0x10>)
 80a3f44:	681b      	ldr	r3, [r3, #0]
 80a3f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3f4a:	9301      	str	r3, [sp, #4]
 80a3f4c:	bd08      	pop	{r3, pc}
 80a3f4e:	0000      	.short	0x0000
 80a3f50:	080601a4 	.word	0x080601a4

080a3f54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3f54:	b508      	push	{r3, lr}
 80a3f56:	4b03      	ldr	r3, [pc, #12]	; (80a3f64 <system_ctrl_set_result+0x10>)
 80a3f58:	681b      	ldr	r3, [r3, #0]
 80a3f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3f5e:	9301      	str	r3, [sp, #4]
 80a3f60:	bd08      	pop	{r3, pc}
 80a3f62:	0000      	.short	0x0000
 80a3f64:	080601a4 	.word	0x080601a4

080a3f68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3f68:	b508      	push	{r3, lr}
 80a3f6a:	4b02      	ldr	r3, [pc, #8]	; (80a3f74 <network_connect+0xc>)
 80a3f6c:	681b      	ldr	r3, [r3, #0]
 80a3f6e:	685b      	ldr	r3, [r3, #4]
 80a3f70:	9301      	str	r3, [sp, #4]
 80a3f72:	bd08      	pop	{r3, pc}
 80a3f74:	080601c8 	.word	0x080601c8

080a3f78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3f78:	b508      	push	{r3, lr}
 80a3f7a:	4b02      	ldr	r3, [pc, #8]	; (80a3f84 <network_connecting+0xc>)
 80a3f7c:	681b      	ldr	r3, [r3, #0]
 80a3f7e:	689b      	ldr	r3, [r3, #8]
 80a3f80:	9301      	str	r3, [sp, #4]
 80a3f82:	bd08      	pop	{r3, pc}
 80a3f84:	080601c8 	.word	0x080601c8

080a3f88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3f88:	b508      	push	{r3, lr}
 80a3f8a:	4b02      	ldr	r3, [pc, #8]	; (80a3f94 <network_disconnect+0xc>)
 80a3f8c:	681b      	ldr	r3, [r3, #0]
 80a3f8e:	68db      	ldr	r3, [r3, #12]
 80a3f90:	9301      	str	r3, [sp, #4]
 80a3f92:	bd08      	pop	{r3, pc}
 80a3f94:	080601c8 	.word	0x080601c8

080a3f98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3f98:	b508      	push	{r3, lr}
 80a3f9a:	4b02      	ldr	r3, [pc, #8]	; (80a3fa4 <network_ready+0xc>)
 80a3f9c:	681b      	ldr	r3, [r3, #0]
 80a3f9e:	691b      	ldr	r3, [r3, #16]
 80a3fa0:	9301      	str	r3, [sp, #4]
 80a3fa2:	bd08      	pop	{r3, pc}
 80a3fa4:	080601c8 	.word	0x080601c8

080a3fa8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3fa8:	b508      	push	{r3, lr}
 80a3faa:	4b02      	ldr	r3, [pc, #8]	; (80a3fb4 <network_on+0xc>)
 80a3fac:	681b      	ldr	r3, [r3, #0]
 80a3fae:	695b      	ldr	r3, [r3, #20]
 80a3fb0:	9301      	str	r3, [sp, #4]
 80a3fb2:	bd08      	pop	{r3, pc}
 80a3fb4:	080601c8 	.word	0x080601c8

080a3fb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3fb8:	b508      	push	{r3, lr}
 80a3fba:	4b02      	ldr	r3, [pc, #8]	; (80a3fc4 <network_off+0xc>)
 80a3fbc:	681b      	ldr	r3, [r3, #0]
 80a3fbe:	699b      	ldr	r3, [r3, #24]
 80a3fc0:	9301      	str	r3, [sp, #4]
 80a3fc2:	bd08      	pop	{r3, pc}
 80a3fc4:	080601c8 	.word	0x080601c8

080a3fc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3fc8:	b508      	push	{r3, lr}
 80a3fca:	4b02      	ldr	r3, [pc, #8]	; (80a3fd4 <network_listen+0xc>)
 80a3fcc:	681b      	ldr	r3, [r3, #0]
 80a3fce:	69db      	ldr	r3, [r3, #28]
 80a3fd0:	9301      	str	r3, [sp, #4]
 80a3fd2:	bd08      	pop	{r3, pc}
 80a3fd4:	080601c8 	.word	0x080601c8

080a3fd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3fd8:	b508      	push	{r3, lr}
 80a3fda:	4b02      	ldr	r3, [pc, #8]	; (80a3fe4 <network_listening+0xc>)
 80a3fdc:	681b      	ldr	r3, [r3, #0]
 80a3fde:	6a1b      	ldr	r3, [r3, #32]
 80a3fe0:	9301      	str	r3, [sp, #4]
 80a3fe2:	bd08      	pop	{r3, pc}
 80a3fe4:	080601c8 	.word	0x080601c8

080a3fe8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3fe8:	b508      	push	{r3, lr}
 80a3fea:	4b02      	ldr	r3, [pc, #8]	; (80a3ff4 <network_set_listen_timeout+0xc>)
 80a3fec:	681b      	ldr	r3, [r3, #0]
 80a3fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3ff0:	9301      	str	r3, [sp, #4]
 80a3ff2:	bd08      	pop	{r3, pc}
 80a3ff4:	080601c8 	.word	0x080601c8

080a3ff8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3ff8:	b508      	push	{r3, lr}
 80a3ffa:	4b02      	ldr	r3, [pc, #8]	; (80a4004 <network_get_listen_timeout+0xc>)
 80a3ffc:	681b      	ldr	r3, [r3, #0]
 80a3ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a4000:	9301      	str	r3, [sp, #4]
 80a4002:	bd08      	pop	{r3, pc}
 80a4004:	080601c8 	.word	0x080601c8

080a4008 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a4008:	b508      	push	{r3, lr}
 80a400a:	4b02      	ldr	r3, [pc, #8]	; (80a4014 <spark_variable+0xc>)
 80a400c:	681b      	ldr	r3, [r3, #0]
 80a400e:	681b      	ldr	r3, [r3, #0]
 80a4010:	9301      	str	r3, [sp, #4]
 80a4012:	bd08      	pop	{r3, pc}
 80a4014:	080601cc 	.word	0x080601cc

080a4018 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a4018:	b508      	push	{r3, lr}
 80a401a:	4b02      	ldr	r3, [pc, #8]	; (80a4024 <spark_process+0xc>)
 80a401c:	681b      	ldr	r3, [r3, #0]
 80a401e:	689b      	ldr	r3, [r3, #8]
 80a4020:	9301      	str	r3, [sp, #4]
 80a4022:	bd08      	pop	{r3, pc}
 80a4024:	080601cc 	.word	0x080601cc

080a4028 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a4028:	b508      	push	{r3, lr}
 80a402a:	4b02      	ldr	r3, [pc, #8]	; (80a4034 <spark_cloud_flag_connected+0xc>)
 80a402c:	681b      	ldr	r3, [r3, #0]
 80a402e:	695b      	ldr	r3, [r3, #20]
 80a4030:	9301      	str	r3, [sp, #4]
 80a4032:	bd08      	pop	{r3, pc}
 80a4034:	080601cc 	.word	0x080601cc

080a4038 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a4038:	b508      	push	{r3, lr}
 80a403a:	4b02      	ldr	r3, [pc, #8]	; (80a4044 <spark_send_event+0xc>)
 80a403c:	681b      	ldr	r3, [r3, #0]
 80a403e:	6a1b      	ldr	r3, [r3, #32]
 80a4040:	9301      	str	r3, [sp, #4]
 80a4042:	bd08      	pop	{r3, pc}
 80a4044:	080601cc 	.word	0x080601cc

080a4048 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a4048:	b508      	push	{r3, lr}
 80a404a:	4b02      	ldr	r3, [pc, #8]	; (80a4054 <spark_subscribe+0xc>)
 80a404c:	681b      	ldr	r3, [r3, #0]
 80a404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a4050:	9301      	str	r3, [sp, #4]
 80a4052:	bd08      	pop	{r3, pc}
 80a4054:	080601cc 	.word	0x080601cc

080a4058 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a4058:	b508      	push	{r3, lr}
 80a405a:	4b02      	ldr	r3, [pc, #8]	; (80a4064 <spark_sync_time_pending+0xc>)
 80a405c:	681b      	ldr	r3, [r3, #0]
 80a405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4060:	9301      	str	r3, [sp, #4]
 80a4062:	bd08      	pop	{r3, pc}
 80a4064:	080601cc 	.word	0x080601cc

080a4068 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a4068:	b508      	push	{r3, lr}
 80a406a:	4b02      	ldr	r3, [pc, #8]	; (80a4074 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a406c:	681b      	ldr	r3, [r3, #0]
 80a406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a4070:	9301      	str	r3, [sp, #4]
 80a4072:	bd08      	pop	{r3, pc}
 80a4074:	080601cc 	.word	0x080601cc

080a4078 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a4078:	b508      	push	{r3, lr}
 80a407a:	4b02      	ldr	r3, [pc, #8]	; (80a4084 <malloc+0xc>)
 80a407c:	681b      	ldr	r3, [r3, #0]
 80a407e:	681b      	ldr	r3, [r3, #0]
 80a4080:	9301      	str	r3, [sp, #4]
 80a4082:	bd08      	pop	{r3, pc}
 80a4084:	080601a0 	.word	0x080601a0

080a4088 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a4088:	b508      	push	{r3, lr}
 80a408a:	4b02      	ldr	r3, [pc, #8]	; (80a4094 <free+0xc>)
 80a408c:	681b      	ldr	r3, [r3, #0]
 80a408e:	685b      	ldr	r3, [r3, #4]
 80a4090:	9301      	str	r3, [sp, #4]
 80a4092:	bd08      	pop	{r3, pc}
 80a4094:	080601a0 	.word	0x080601a0

080a4098 <siscanf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a4098:	b508      	push	{r3, lr}
 80a409a:	4b02      	ldr	r3, [pc, #8]	; (80a40a4 <siscanf+0xc>)
 80a409c:	681b      	ldr	r3, [r3, #0]
 80a409e:	699b      	ldr	r3, [r3, #24]
 80a40a0:	9301      	str	r3, [sp, #4]
 80a40a2:	bd08      	pop	{r3, pc}
 80a40a4:	080601a0 	.word	0x080601a0

080a40a8 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a40a8:	b508      	push	{r3, lr}
 80a40aa:	4b02      	ldr	r3, [pc, #8]	; (80a40b4 <abort+0xc>)
 80a40ac:	681b      	ldr	r3, [r3, #0]
 80a40ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a40b0:	9301      	str	r3, [sp, #4]
 80a40b2:	bd08      	pop	{r3, pc}
 80a40b4:	080601a0 	.word	0x080601a0

080a40b8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a40b8:	b508      	push	{r3, lr}
 80a40ba:	4b02      	ldr	r3, [pc, #8]	; (80a40c4 <_malloc_r+0xc>)
 80a40bc:	681b      	ldr	r3, [r3, #0]
 80a40be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a40c0:	9301      	str	r3, [sp, #4]
 80a40c2:	bd08      	pop	{r3, pc}
 80a40c4:	080601a0 	.word	0x080601a0

080a40c8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a40c8:	b508      	push	{r3, lr}
 80a40ca:	4b02      	ldr	r3, [pc, #8]	; (80a40d4 <newlib_impure_ptr_callback+0xc>)
 80a40cc:	681b      	ldr	r3, [r3, #0]
 80a40ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a40d0:	9301      	str	r3, [sp, #4]
 80a40d2:	bd08      	pop	{r3, pc}
 80a40d4:	080601a0 	.word	0x080601a0

080a40d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a40d8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a40da:	2600      	movs	r6, #0
 80a40dc:	4604      	mov	r4, r0
 80a40de:	460d      	mov	r5, r1
 80a40e0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a40e4:	f7ff fdea 	bl	80a3cbc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a40e8:	4628      	mov	r0, r5
    _spi = spi;
 80a40ea:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a40ec:	f7ff fe70 	bl	80a3dd0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a40f0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a40f2:	6066      	str	r6, [r4, #4]
}
 80a40f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a40f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a40f8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a40fa:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a40fc:	b510      	push	{r4, lr}
 80a40fe:	4b08      	ldr	r3, [pc, #32]	; (80a4120 <_GLOBAL__sub_I_System+0x28>)
 80a4100:	4c08      	ldr	r4, [pc, #32]	; (80a4124 <_GLOBAL__sub_I_System+0x2c>)
 80a4102:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a4104:	4b08      	ldr	r3, [pc, #32]	; (80a4128 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a4106:	6020      	str	r0, [r4, #0]
 80a4108:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a410a:	71a0      	strb	r0, [r4, #6]
 80a410c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a410e:	f7ff fee7 	bl	80a3ee0 <set_system_mode>
SystemClass System;
 80a4112:	4620      	mov	r0, r4
 80a4114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a4118:	4a04      	ldr	r2, [pc, #16]	; (80a412c <_GLOBAL__sub_I_System+0x34>)
 80a411a:	4905      	ldr	r1, [pc, #20]	; (80a4130 <_GLOBAL__sub_I_System+0x38>)
 80a411c:	f001 b94a 	b.w	80a53b4 <__aeabi_atexit>
 80a4120:	20000acc 	.word	0x20000acc
 80a4124:	20000ac0 	.word	0x20000ac0
 80a4128:	ffff0000 	.word	0xffff0000
 80a412c:	20000240 	.word	0x20000240
 80a4130:	080a0235 	.word	0x080a0235

080a4134 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a4134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4136:	4606      	mov	r6, r0
 80a4138:	460d      	mov	r5, r1
  size_t n = 0;
 80a413a:	2400      	movs	r4, #0
 80a413c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a413e:	42bd      	cmp	r5, r7
 80a4140:	d00c      	beq.n	80a415c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a4142:	6833      	ldr	r3, [r6, #0]
 80a4144:	4630      	mov	r0, r6
 80a4146:	689b      	ldr	r3, [r3, #8]
 80a4148:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a414c:	4798      	blx	r3
     if (chunk>=0)
 80a414e:	1e03      	subs	r3, r0, #0
 80a4150:	db01      	blt.n	80a4156 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a4152:	441c      	add	r4, r3
  while (size--) {
 80a4154:	e7f3      	b.n	80a413e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a4156:	2c00      	cmp	r4, #0
 80a4158:	bf08      	it	eq
 80a415a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a415c:	4620      	mov	r0, r4
 80a415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4160 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a4160:	b570      	push	{r4, r5, r6, lr}
 80a4162:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a4164:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a4166:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a4168:	b149      	cbz	r1, 80a417e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a416a:	f002 fca4 	bl	80a6ab6 <strlen>
 80a416e:	682b      	ldr	r3, [r5, #0]
 80a4170:	4602      	mov	r2, r0
 80a4172:	4621      	mov	r1, r4
 80a4174:	4628      	mov	r0, r5
    }
 80a4176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a417a:	68db      	ldr	r3, [r3, #12]
 80a417c:	4718      	bx	r3
    }
 80a417e:	bd70      	pop	{r4, r5, r6, pc}

080a4180 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a4180:	6803      	ldr	r3, [r0, #0]
 80a4182:	689b      	ldr	r3, [r3, #8]
 80a4184:	4718      	bx	r3

080a4186 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a4186:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a4188:	2a01      	cmp	r2, #1
 80a418a:	bf98      	it	ls
 80a418c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a418e:	b530      	push	{r4, r5, lr}
 80a4190:	b08b      	sub	sp, #44	; 0x2c
 80a4192:	460c      	mov	r4, r1
  *str = '\0';
 80a4194:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a4198:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a419a:	4625      	mov	r5, r4
 80a419c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a41a0:	fb04 5312 	mls	r3, r4, r2, r5
 80a41a4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a41a6:	2b09      	cmp	r3, #9
 80a41a8:	bf94      	ite	ls
 80a41aa:	3330      	addls	r3, #48	; 0x30
 80a41ac:	3337      	addhi	r3, #55	; 0x37
 80a41ae:	b2db      	uxtb	r3, r3
  } while(n);
 80a41b0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a41b2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a41b6:	d9f0      	bls.n	80a419a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a41b8:	f7ff ffd2 	bl	80a4160 <_ZN5Print5writeEPKc>
}
 80a41bc:	b00b      	add	sp, #44	; 0x2c
 80a41be:	bd30      	pop	{r4, r5, pc}

080a41c0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a41c0:	2300      	movs	r3, #0
 80a41c2:	6840      	ldr	r0, [r0, #4]
 80a41c4:	461a      	mov	r2, r3
 80a41c6:	4619      	mov	r1, r3
 80a41c8:	f7ff beee 	b.w	80a3fa8 <network_on>

080a41cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a41cc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a41ce:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a41d0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a41d2:	b17c      	cbz	r4, 80a41f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a41d4:	6863      	ldr	r3, [r4, #4]
 80a41d6:	3b01      	subs	r3, #1
 80a41d8:	6063      	str	r3, [r4, #4]
 80a41da:	b95b      	cbnz	r3, 80a41f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a41dc:	6823      	ldr	r3, [r4, #0]
 80a41de:	4620      	mov	r0, r4
 80a41e0:	689b      	ldr	r3, [r3, #8]
 80a41e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a41e4:	68a3      	ldr	r3, [r4, #8]
 80a41e6:	3b01      	subs	r3, #1
 80a41e8:	60a3      	str	r3, [r4, #8]
 80a41ea:	b91b      	cbnz	r3, 80a41f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a41ec:	6823      	ldr	r3, [r4, #0]
 80a41ee:	4620      	mov	r0, r4
 80a41f0:	68db      	ldr	r3, [r3, #12]
 80a41f2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a41f4:	4628      	mov	r0, r5
 80a41f6:	bd38      	pop	{r3, r4, r5, pc}

080a41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a41f8:	680b      	ldr	r3, [r1, #0]
 80a41fa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a41fc:	b113      	cbz	r3, 80a4204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a41fe:	685a      	ldr	r2, [r3, #4]
 80a4200:	3201      	adds	r2, #1
 80a4202:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a4204:	4770      	bx	lr
	...

080a4208 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4208:	4b01      	ldr	r3, [pc, #4]	; (80a4210 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a420a:	4a02      	ldr	r2, [pc, #8]	; (80a4214 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a420c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a420e:	4770      	bx	lr
 80a4210:	20000ad0 	.word	0x20000ad0
 80a4214:	080a903c 	.word	0x080a903c

080a4218 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a4218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a421c:	4a15      	ldr	r2, [pc, #84]	; (80a4274 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a421e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a4280 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80a4222:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a4226:	18c0      	adds	r0, r0, r3
 80a4228:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80a422c:	4a12      	ldr	r2, [pc, #72]	; (80a4278 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80a422e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80a4230:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a4234:	18c6      	adds	r6, r0, r3
 80a4236:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80a423a:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a423e:	42bb      	cmp	r3, r7
 80a4240:	bf08      	it	eq
 80a4242:	42b2      	cmpeq	r2, r6
 80a4244:	d013      	beq.n	80a426e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a4246:	a903      	add	r1, sp, #12
 80a4248:	4668      	mov	r0, sp
 80a424a:	e9cd 6700 	strd	r6, r7, [sp]
 80a424e:	f002 fad5 	bl	80a67fc <localtime_r>
	calendar_time.tm_year += 1900;
 80a4252:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a4254:	4d09      	ldr	r5, [pc, #36]	; (80a427c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80a4256:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a425a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a425c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a425e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a4266:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a426a:	6823      	ldr	r3, [r4, #0]
 80a426c:	602b      	str	r3, [r5, #0]
    }
}
 80a426e:	b00c      	add	sp, #48	; 0x30
 80a4270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4274:	20000b08 	.word	0x20000b08
 80a4278:	20000b00 	.word	0x20000b00
 80a427c:	20000ad8 	.word	0x20000ad8
 80a4280:	20000b10 	.word	0x20000b10

080a4284 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a4284:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4286:	2000      	movs	r0, #0
 80a4288:	f7ff fee6 	bl	80a4058 <spark_sync_time_pending>
 80a428c:	b128      	cbz	r0, 80a429a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a428e:	f7ff fecb 	bl	80a4028 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4292:	f080 0001 	eor.w	r0, r0, #1
 80a4296:	b2c0      	uxtb	r0, r0
    }
 80a4298:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a429a:	2001      	movs	r0, #1
 80a429c:	e7fc      	b.n	80a4298 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a42a0 <_ZN9TimeClass12hourFormat12Ex>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
 80a42a0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a42a2:	f7ff ffb9 	bl	80a4218 <_ZL22Refresh_UnixTime_Cachex>
	if(calendar_time_cache.tm_hour == 0)
 80a42a6:	4b04      	ldr	r3, [pc, #16]	; (80a42b8 <_ZN9TimeClass12hourFormat12Ex+0x18>)
 80a42a8:	6898      	ldr	r0, [r3, #8]
 80a42aa:	b118      	cbz	r0, 80a42b4 <_ZN9TimeClass12hourFormat12Ex+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
 80a42ac:	280c      	cmp	r0, #12
 80a42ae:	dd00      	ble.n	80a42b2 <_ZN9TimeClass12hourFormat12Ex+0x12>
		return calendar_time_cache.tm_hour - 12 ;
 80a42b0:	380c      	subs	r0, #12
	else
		return calendar_time_cache.tm_hour ;
}
 80a42b2:	bd08      	pop	{r3, pc}
		return 12;	//midnight
 80a42b4:	200c      	movs	r0, #12
 80a42b6:	e7fc      	b.n	80a42b2 <_ZN9TimeClass12hourFormat12Ex+0x12>
 80a42b8:	20000ad8 	.word	0x20000ad8

080a42bc <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a42bc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a42be:	490a      	ldr	r1, [pc, #40]	; (80a42e8 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a42c0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a42c2:	f002 f865 	bl	80a6390 <__aeabi_fcmplt>
 80a42c6:	b968      	cbnz	r0, 80a42e4 <_ZN9TimeClass4zoneEf+0x28>
 80a42c8:	4620      	mov	r0, r4
 80a42ca:	4908      	ldr	r1, [pc, #32]	; (80a42ec <_ZN9TimeClass4zoneEf+0x30>)
 80a42cc:	f002 f87e 	bl	80a63cc <__aeabi_fcmpgt>
 80a42d0:	b940      	cbnz	r0, 80a42e4 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a42d2:	4907      	ldr	r1, [pc, #28]	; (80a42f0 <_ZN9TimeClass4zoneEf+0x34>)
 80a42d4:	4620      	mov	r0, r4
 80a42d6:	f001 febd 	bl	80a6054 <__aeabi_fmul>
 80a42da:	f002 f8c7 	bl	80a646c <__aeabi_f2lz>
 80a42de:	4b05      	ldr	r3, [pc, #20]	; (80a42f4 <_ZN9TimeClass4zoneEf+0x38>)
 80a42e0:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a42e4:	bd10      	pop	{r4, pc}
 80a42e6:	bf00      	nop
 80a42e8:	c1400000 	.word	0xc1400000
 80a42ec:	41600000 	.word	0x41600000
 80a42f0:	45610000 	.word	0x45610000
 80a42f4:	20000b08 	.word	0x20000b08

080a42f8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a42f8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a42fa:	2000      	movs	r0, #0
 80a42fc:	f7ff fcc6 	bl	80a3c8c <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4300:	4604      	mov	r4, r0
 80a4302:	b9a0      	cbnz	r0, 80a432e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4304:	f7ff fde4 	bl	80a3ed0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4308:	2801      	cmp	r0, #1
 80a430a:	d110      	bne.n	80a432e <_ZN9TimeClass7isValidEv+0x36>
 80a430c:	4620      	mov	r0, r4
 80a430e:	f7ff fe0f 	bl	80a3f30 <system_thread_get_state>
 80a4312:	b960      	cbnz	r0, 80a432e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a4314:	f7ff ffb6 	bl	80a4284 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4318:	b910      	cbnz	r0, 80a4320 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a431a:	f7ff fe7d 	bl	80a4018 <spark_process>
        while (_while() && !_condition()) {
 80a431e:	e7f9      	b.n	80a4314 <_ZN9TimeClass7isValidEv+0x1c>
 80a4320:	f7ff ffb0 	bl	80a4284 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a4324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a4328:	2000      	movs	r0, #0
 80a432a:	f7ff bcaf 	b.w	80a3c8c <hal_rtc_time_is_valid>
}
 80a432e:	4620      	mov	r0, r4
 80a4330:	bd10      	pop	{r4, pc}

080a4332 <_ZN9TimeClass3nowEv>:
{
 80a4332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4334:	f7ff ffe0 	bl	80a42f8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4338:	2210      	movs	r2, #16
 80a433a:	2100      	movs	r1, #0
 80a433c:	4668      	mov	r0, sp
 80a433e:	f002 fb61 	bl	80a6a04 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a4342:	2100      	movs	r1, #0
 80a4344:	4668      	mov	r0, sp
 80a4346:	f7ff fcb1 	bl	80a3cac <hal_rtc_get_time>
}
 80a434a:	9800      	ldr	r0, [sp, #0]
 80a434c:	b005      	add	sp, #20
 80a434e:	f85d fb04 	ldr.w	pc, [sp], #4

080a4352 <_ZN9TimeClass12hourFormat12Ev>:
{
 80a4352:	b508      	push	{r3, lr}
	return hourFormat12(now());
 80a4354:	f7ff ffed 	bl	80a4332 <_ZN9TimeClass3nowEv>
}
 80a4358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return hourFormat12(now());
 80a435c:	17c1      	asrs	r1, r0, #31
 80a435e:	f7ff bf9f 	b.w	80a42a0 <_ZN9TimeClass12hourFormat12Ex>
	...

080a4364 <_ZN9TimeClass6minuteEv>:
{
 80a4364:	b508      	push	{r3, lr}
	return minute(now());
 80a4366:	f7ff ffe4 	bl	80a4332 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a436a:	17c1      	asrs	r1, r0, #31
 80a436c:	f7ff ff54 	bl	80a4218 <_ZL22Refresh_UnixTime_Cachex>
}
 80a4370:	4b01      	ldr	r3, [pc, #4]	; (80a4378 <_ZN9TimeClass6minuteEv+0x14>)
 80a4372:	6858      	ldr	r0, [r3, #4]
 80a4374:	bd08      	pop	{r3, pc}
 80a4376:	bf00      	nop
 80a4378:	20000ad8 	.word	0x20000ad8

080a437c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a437c:	4b02      	ldr	r3, [pc, #8]	; (80a4388 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a437e:	681a      	ldr	r2, [r3, #0]
 80a4380:	4b02      	ldr	r3, [pc, #8]	; (80a438c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4382:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4384:	4770      	bx	lr
 80a4386:	bf00      	nop
 80a4388:	20000000 	.word	0x20000000
 80a438c:	20000ad4 	.word	0x20000ad4

080a4390 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4390:	2100      	movs	r1, #0
 80a4392:	f7ff bdad 	b.w	80a3ef0 <system_delay_ms>

080a4396 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a4396:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a4398:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a439a:	4604      	mov	r4, r0
      if (_M_manager)
 80a439c:	b113      	cbz	r3, 80a43a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a439e:	2203      	movs	r2, #3
 80a43a0:	4601      	mov	r1, r0
 80a43a2:	4798      	blx	r3
    }
 80a43a4:	4620      	mov	r0, r4
 80a43a6:	bd10      	pop	{r4, pc}

080a43a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a43a8:	b510      	push	{r4, lr}
 80a43aa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a43ac:	f7ff fff3 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
 80a43b0:	4620      	mov	r0, r4
 80a43b2:	bd10      	pop	{r4, pc}

080a43b4 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a43b4:	b510      	push	{r4, lr}
 80a43b6:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a43b8:	f7ff fd7a 	bl	80a3eb0 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a43bc:	4284      	cmp	r4, r0
 80a43be:	d008      	beq.n	80a43d2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a43c0:	b11c      	cbz	r4, 80a43ca <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a43c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a43c6:	f7ff bd63 	b.w	80a3e90 <LED_Signaling_Start>
}
 80a43ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a43ce:	f7ff bd67 	b.w	80a3ea0 <LED_Signaling_Stop>
}
 80a43d2:	bd10      	pop	{r4, pc}

080a43d4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a43d4:	b570      	push	{r4, r5, r6, lr}
 80a43d6:	4605      	mov	r5, r0
 80a43d8:	460e      	mov	r6, r1
 80a43da:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a43dc:	f7ff fd68 	bl	80a3eb0 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a43e0:	b150      	cbz	r0, 80a43f8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a43e2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a43e6:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a43ea:	f7ff fd49 	bl	80a3e80 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a43ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
 80a43f2:	20e7      	movs	r0, #231	; 0xe7
 80a43f4:	f7ff bd64 	b.w	80a3ec0 <LED_On>
}
 80a43f8:	bd70      	pop	{r4, r5, r6, pc}

080a43fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a43fa:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a43fc:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a43fe:	460b      	mov	r3, r1
 80a4400:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4402:	c803      	ldmia	r0, {r0, r1}
 80a4404:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a4408:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a440c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a4410:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a4414:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a4418:	b002      	add	sp, #8
 80a441a:	bd10      	pop	{r4, pc}

080a441c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a441c:	2300      	movs	r3, #0
 80a441e:	4803      	ldr	r0, [pc, #12]	; (80a442c <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
 80a4420:	4a03      	ldr	r2, [pc, #12]	; (80a4430 <_GLOBAL__sub_I_RGB+0x14>)
 80a4422:	4904      	ldr	r1, [pc, #16]	; (80a4434 <_GLOBAL__sub_I_RGB+0x18>)
 80a4424:	6083      	str	r3, [r0, #8]
 80a4426:	f000 bfc5 	b.w	80a53b4 <__aeabi_atexit>
 80a442a:	bf00      	nop
 80a442c:	20000b18 	.word	0x20000b18
 80a4430:	20000240 	.word	0x20000240
 80a4434:	080a43a9 	.word	0x080a43a9

080a4438 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a4438:	4b01      	ldr	r3, [pc, #4]	; (80a4440 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a443a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a443c:	4770      	bx	lr
 80a443e:	bf00      	nop
 80a4440:	20000004 	.word	0x20000004

080a4444 <serialEventRun>:
{
 80a4444:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a4446:	4b13      	ldr	r3, [pc, #76]	; (80a4494 <serialEventRun+0x50>)
 80a4448:	b143      	cbz	r3, 80a445c <serialEventRun+0x18>
 80a444a:	f000 fc01 	bl	80a4c50 <_Z16_fetch_usbserialv>
 80a444e:	6803      	ldr	r3, [r0, #0]
 80a4450:	691b      	ldr	r3, [r3, #16]
 80a4452:	4798      	blx	r3
 80a4454:	2800      	cmp	r0, #0
 80a4456:	dd01      	ble.n	80a445c <serialEventRun+0x18>
        serialEvent();
 80a4458:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a445c:	4b0e      	ldr	r3, [pc, #56]	; (80a4498 <serialEventRun+0x54>)
 80a445e:	b143      	cbz	r3, 80a4472 <serialEventRun+0x2e>
 80a4460:	f000 fcae 	bl	80a4dc0 <_Z22__fetch_global_Serial1v>
 80a4464:	6803      	ldr	r3, [r0, #0]
 80a4466:	691b      	ldr	r3, [r3, #16]
 80a4468:	4798      	blx	r3
 80a446a:	2800      	cmp	r0, #0
 80a446c:	dd01      	ble.n	80a4472 <serialEventRun+0x2e>
        serialEvent1();
 80a446e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a4472:	4b0a      	ldr	r3, [pc, #40]	; (80a449c <serialEventRun+0x58>)
 80a4474:	b10b      	cbz	r3, 80a447a <serialEventRun+0x36>
 80a4476:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a447a:	4b09      	ldr	r3, [pc, #36]	; (80a44a0 <serialEventRun+0x5c>)
 80a447c:	b143      	cbz	r3, 80a4490 <serialEventRun+0x4c>
 80a447e:	f000 fc25 	bl	80a4ccc <_Z17_fetch_usbserial1v>
 80a4482:	6803      	ldr	r3, [r0, #0]
 80a4484:	691b      	ldr	r3, [r3, #16]
 80a4486:	4798      	blx	r3
 80a4488:	2800      	cmp	r0, #0
 80a448a:	dd01      	ble.n	80a4490 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a448c:	f3af 8000 	nop.w
}
 80a4490:	bd08      	pop	{r3, pc}
 80a4492:	bf00      	nop
	...

080a44a4 <_post_loop>:
{
 80a44a4:	b508      	push	{r3, lr}
	serialEventRun();
 80a44a6:	f7ff ffcd 	bl	80a4444 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a44aa:	f7ff fbcf 	bl	80a3c4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a44ae:	4b01      	ldr	r3, [pc, #4]	; (80a44b4 <_post_loop+0x10>)
 80a44b0:	6018      	str	r0, [r3, #0]
}
 80a44b2:	bd08      	pop	{r3, pc}
 80a44b4:	20000fa4 	.word	0x20000fa4

080a44b8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a44b8:	4802      	ldr	r0, [pc, #8]	; (80a44c4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a44ba:	4a03      	ldr	r2, [pc, #12]	; (80a44c8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a44bc:	4903      	ldr	r1, [pc, #12]	; (80a44cc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a44be:	1a12      	subs	r2, r2, r0
 80a44c0:	f002 ba92 	b.w	80a69e8 <memcpy>
 80a44c4:	40024000 	.word	0x40024000
 80a44c8:	40024004 	.word	0x40024004
 80a44cc:	080a94e8 	.word	0x080a94e8

080a44d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a44d0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a44d2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a44d4:	461a      	mov	r2, r3
 80a44d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a44da:	9300      	str	r3, [sp, #0]
 80a44dc:	f7ff fd3a 	bl	80a3f54 <system_ctrl_set_result>
}
 80a44e0:	b003      	add	sp, #12
 80a44e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a44e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a44e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a44ea:	8843      	ldrh	r3, [r0, #2]
 80a44ec:	2b0a      	cmp	r3, #10
 80a44ee:	d008      	beq.n	80a4502 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a44f0:	2b50      	cmp	r3, #80	; 0x50
 80a44f2:	d10b      	bne.n	80a450c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a44f4:	4b09      	ldr	r3, [pc, #36]	; (80a451c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a44f6:	681b      	ldr	r3, [r3, #0]
 80a44f8:	b14b      	cbz	r3, 80a450e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a44fa:	b003      	add	sp, #12
 80a44fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a4500:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a4502:	f7ff ffe5 	bl	80a44d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4506:	b003      	add	sp, #12
 80a4508:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a450c:	2300      	movs	r3, #0
 80a450e:	461a      	mov	r2, r3
 80a4510:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4514:	9300      	str	r3, [sp, #0]
 80a4516:	f7ff fd1d 	bl	80a3f54 <system_ctrl_set_result>
}
 80a451a:	e7f4      	b.n	80a4506 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a451c:	20000b2c 	.word	0x20000b2c

080a4520 <module_user_init_hook>:
{
 80a4520:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4522:	4c12      	ldr	r4, [pc, #72]	; (80a456c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4524:	2100      	movs	r1, #0
 80a4526:	4812      	ldr	r0, [pc, #72]	; (80a4570 <module_user_init_hook+0x50>)
 80a4528:	f7ff fdce 	bl	80a40c8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a452c:	4d11      	ldr	r5, [pc, #68]	; (80a4574 <module_user_init_hook+0x54>)
 80a452e:	6823      	ldr	r3, [r4, #0]
 80a4530:	42ab      	cmp	r3, r5
 80a4532:	bf0c      	ite	eq
 80a4534:	2201      	moveq	r2, #1
 80a4536:	2200      	movne	r2, #0
 80a4538:	4b0f      	ldr	r3, [pc, #60]	; (80a4578 <module_user_init_hook+0x58>)
 80a453a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a453c:	d002      	beq.n	80a4544 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a453e:	f7ff ffbb 	bl	80a44b8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a4542:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4544:	f7ff fb72 	bl	80a3c2c <HAL_RNG_GetRandomNumber>
 80a4548:	4604      	mov	r4, r0
    srand(seed);
 80a454a:	f002 fa63 	bl	80a6a14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a454e:	4b0b      	ldr	r3, [pc, #44]	; (80a457c <module_user_init_hook+0x5c>)
 80a4550:	b113      	cbz	r3, 80a4558 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a4552:	4620      	mov	r0, r4
 80a4554:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4558:	2100      	movs	r1, #0
 80a455a:	4808      	ldr	r0, [pc, #32]	; (80a457c <module_user_init_hook+0x5c>)
 80a455c:	f7ff fd84 	bl	80a4068 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4564:	2100      	movs	r1, #0
 80a4566:	4806      	ldr	r0, [pc, #24]	; (80a4580 <module_user_init_hook+0x60>)
 80a4568:	f7ff bcea 	b.w	80a3f40 <system_ctrl_set_app_request_handler>
 80a456c:	40024000 	.word	0x40024000
 80a4570:	080a4439 	.word	0x080a4439
 80a4574:	9a271c1e 	.word	0x9a271c1e
 80a4578:	20000b28 	.word	0x20000b28
 80a457c:	00000000 	.word	0x00000000
 80a4580:	080a44e9 	.word	0x080a44e9

080a4584 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4584:	4770      	bx	lr

080a4586 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a4586:	2000      	movs	r0, #0
 80a4588:	4770      	bx	lr

080a458a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a458a:	b510      	push	{r4, lr}
 80a458c:	4604      	mov	r4, r0
 80a458e:	2110      	movs	r1, #16
 80a4590:	f000 ff15 	bl	80a53be <_ZdlPvj>
 80a4594:	4620      	mov	r0, r4
 80a4596:	bd10      	pop	{r4, pc}

080a4598 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a4598:	b508      	push	{r3, lr}
      { delete this; }
 80a459a:	f7ff fff6 	bl	80a458a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a459e:	bd08      	pop	{r3, pc}

080a45a0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a45a0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a45a2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a45a4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a45a8:	6002      	str	r2, [r0, #0]
 80a45aa:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a45ac:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a45ae:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a45b0:	680c      	ldr	r4, [r1, #0]
 80a45b2:	8085      	strh	r5, [r0, #4]
 80a45b4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a45b6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a45b8:	bd30      	pop	{r4, r5, pc}

080a45ba <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a45ba:	b510      	push	{r4, lr}
 80a45bc:	4604      	mov	r4, r0
    free((void*)msg_);
 80a45be:	6800      	ldr	r0, [r0, #0]
 80a45c0:	f7ff fd62 	bl	80a4088 <free>
}
 80a45c4:	4620      	mov	r0, r4
 80a45c6:	bd10      	pop	{r4, pc}

080a45c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a45c8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a45ca:	68c4      	ldr	r4, [r0, #12]
 80a45cc:	b1f4      	cbz	r4, 80a460c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a45ce:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a45d0:	2b02      	cmp	r3, #2
 80a45d2:	d103      	bne.n	80a45dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a45d4:	f104 000c 	add.w	r0, r4, #12
 80a45d8:	f7ff ffef 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a45dc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a45de:	b135      	cbz	r5, 80a45ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a45e0:	4628      	mov	r0, r5
 80a45e2:	f7ff fed8 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
 80a45e6:	2110      	movs	r1, #16
 80a45e8:	4628      	mov	r0, r5
 80a45ea:	f000 fee8 	bl	80a53be <_ZdlPvj>
 80a45ee:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a45f0:	b135      	cbz	r5, 80a4600 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a45f2:	4628      	mov	r0, r5
 80a45f4:	f7ff fecf 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
 80a45f8:	2110      	movs	r1, #16
 80a45fa:	4628      	mov	r0, r5
 80a45fc:	f000 fedf 	bl	80a53be <_ZdlPvj>
 80a4600:	4620      	mov	r0, r4
 80a4602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4606:	2114      	movs	r1, #20
 80a4608:	f000 bed9 	b.w	80a53be <_ZdlPvj>
 80a460c:	bd38      	pop	{r3, r4, r5, pc}

080a460e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a460e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4610:	460e      	mov	r6, r1
 80a4612:	4604      	mov	r4, r0
 80a4614:	f856 3b04 	ldr.w	r3, [r6], #4
 80a4618:	460d      	mov	r5, r1
 80a461a:	a801      	add	r0, sp, #4
 80a461c:	4631      	mov	r1, r6
 80a461e:	9300      	str	r3, [sp, #0]
 80a4620:	f7ff fdea 	bl	80a41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4624:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4626:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4628:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a462a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a462c:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a462e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a4630:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a4632:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a4634:	f7ff fdca 	bl	80a41cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4638:	4630      	mov	r0, r6
 80a463a:	f7ff fdc7 	bl	80a41cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a463e:	4628      	mov	r0, r5
 80a4640:	2108      	movs	r1, #8
 80a4642:	f000 febc 	bl	80a53be <_ZdlPvj>
        return p;
    }
 80a4646:	4620      	mov	r0, r4
 80a4648:	b002      	add	sp, #8
 80a464a:	bd70      	pop	{r4, r5, r6, pc}

080a464c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a464c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a464e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4650:	b90a      	cbnz	r2, 80a4656 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a4652:	f000 feb8 	bl	80a53c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4656:	68c3      	ldr	r3, [r0, #12]
    }
 80a4658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a465c:	4718      	bx	r3

080a465e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a465e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4660:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a4662:	f100 0110 	add.w	r1, r0, #16
 80a4666:	f7ff fff1 	bl	80a464c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a466a:	bd08      	pop	{r3, pc}

080a466c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a466c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a466e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4670:	b90a      	cbnz	r2, 80a4676 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a4672:	f000 fea8 	bl	80a53c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4676:	68c3      	ldr	r3, [r0, #12]
    }
 80a4678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a467c:	4718      	bx	r3

080a467e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a467e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4680:	6800      	ldr	r0, [r0, #0]
 80a4682:	f100 0110 	add.w	r1, r0, #16
 80a4686:	f7ff fff1 	bl	80a466c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a468a:	bd08      	pop	{r3, pc}

080a468c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a468c:	b538      	push	{r3, r4, r5, lr}
 80a468e:	2300      	movs	r3, #0
 80a4690:	4604      	mov	r4, r0
 80a4692:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4694:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4696:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4698:	f7fb fcff 	bl	80a009a <_Znwj>
 80a469c:	b128      	cbz	r0, 80a46aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a469e:	2301      	movs	r3, #1
 80a46a0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a46a4:	4b02      	ldr	r3, [pc, #8]	; (80a46b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a46a6:	60c5      	str	r5, [r0, #12]
 80a46a8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a46aa:	6020      	str	r0, [r4, #0]
	}
 80a46ac:	4620      	mov	r0, r4
 80a46ae:	bd38      	pop	{r3, r4, r5, pc}
 80a46b0:	080a9064 	.word	0x080a9064

080a46b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a46b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a46b6:	2300      	movs	r3, #0
 80a46b8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a46ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a46bc:	4604      	mov	r4, r0
 80a46be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a46c0:	b12b      	cbz	r3, 80a46ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a46c2:	2202      	movs	r2, #2
 80a46c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a46c6:	68eb      	ldr	r3, [r5, #12]
 80a46c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a46ca:	68ab      	ldr	r3, [r5, #8]
 80a46cc:	60a3      	str	r3, [r4, #8]
    }
 80a46ce:	4620      	mov	r0, r4
 80a46d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a46d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a46d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a46d6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a46d8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a46da:	4668      	mov	r0, sp
 80a46dc:	f7ff ff60 	bl	80a45a0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a46e0:	f04f 0302 	mov.w	r3, #2
 80a46e4:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a46e8:	2a00      	cmp	r2, #0
 80a46ea:	d103      	bne.n	80a46f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a46ec:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a46f0:	2900      	cmp	r1, #0
 80a46f2:	d1f7      	bne.n	80a46e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a46f4:	d125      	bne.n	80a4742 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a46f6:	f104 050c 	add.w	r5, r4, #12
 80a46fa:	4669      	mov	r1, sp
 80a46fc:	4628      	mov	r0, r5
 80a46fe:	f7ff ff4f 	bl	80a45a0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4702:	2301      	movs	r3, #1
 80a4704:	f3bf 8f5b 	dmb	ish
 80a4708:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a470a:	2000      	movs	r0, #0
 80a470c:	f3bf 8f5b 	dmb	ish
 80a4710:	f104 0308 	add.w	r3, r4, #8
 80a4714:	e853 6f00 	ldrex	r6, [r3]
 80a4718:	e843 0200 	strex	r2, r0, [r3]
 80a471c:	2a00      	cmp	r2, #0
 80a471e:	d1f9      	bne.n	80a4714 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a4720:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4724:	b16e      	cbz	r6, 80a4742 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a4726:	f7ff fbf3 	bl	80a3f10 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a472a:	b178      	cbz	r0, 80a474c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a472c:	4629      	mov	r1, r5
 80a472e:	4630      	mov	r0, r6
 80a4730:	f7ff ff8c 	bl	80a464c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a4734:	4630      	mov	r0, r6
 80a4736:	f7ff fe2e 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a473a:	2110      	movs	r1, #16
 80a473c:	4630      	mov	r0, r6
 80a473e:	f000 fe3e 	bl	80a53be <_ZdlPvj>
        p_->setError(std::move(error));
 80a4742:	4668      	mov	r0, sp
 80a4744:	f7ff ff39 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
    }
 80a4748:	b009      	add	sp, #36	; 0x24
 80a474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a474c:	4631      	mov	r1, r6
 80a474e:	a802      	add	r0, sp, #8
 80a4750:	f7ff ffb0 	bl	80a46b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4754:	68e0      	ldr	r0, [r4, #12]
 80a4756:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a475a:	b108      	cbz	r0, 80a4760 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a475c:	f002 f990 	bl	80a6a80 <strdup>
        type_(type) {
 80a4760:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4762:	2010      	movs	r0, #16
 80a4764:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a4768:	f7fb fc97 	bl	80a009a <_Znwj>
 80a476c:	4605      	mov	r5, r0
 80a476e:	b1e8      	cbz	r0, 80a47ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a4770:	2700      	movs	r7, #0
 80a4772:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4774:	2018      	movs	r0, #24
 80a4776:	f7fb fc90 	bl	80a009a <_Znwj>
 80a477a:	4604      	mov	r4, r0
 80a477c:	b188      	cbz	r0, 80a47a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a477e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4780:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4782:	a802      	add	r0, sp, #8
 80a4784:	f7ff fe39 	bl	80a43fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4788:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a478a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a478c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a478e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4790:	9204      	str	r2, [sp, #16]
 80a4792:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4794:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a4796:	60e3      	str	r3, [r4, #12]
 80a4798:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a479c:	9205      	str	r2, [sp, #20]
 80a479e:	f7ff feff 	bl	80a45a0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a47a2:	4b08      	ldr	r3, [pc, #32]	; (80a47c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a47a4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a47a6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a47a8:	4b07      	ldr	r3, [pc, #28]	; (80a47c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a47aa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a47ac:	a806      	add	r0, sp, #24
 80a47ae:	f7ff ff04 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a47b2:	a802      	add	r0, sp, #8
 80a47b4:	f7ff fdef 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a47b8:	2200      	movs	r2, #0
 80a47ba:	4629      	mov	r1, r5
 80a47bc:	4803      	ldr	r0, [pc, #12]	; (80a47cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a47be:	f7ff fbaf 	bl	80a3f20 <application_thread_invoke>
 80a47c2:	e7b7      	b.n	80a4734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a47c4:	080a465f 	.word	0x080a465f
 80a47c8:	080a48f5 	.word	0x080a48f5
 80a47cc:	080a4e11 	.word	0x080a4e11

080a47d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a47d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a47d4:	b08a      	sub	sp, #40	; 0x28
 80a47d6:	4605      	mov	r5, r0
 80a47d8:	460c      	mov	r4, r1
 80a47da:	4617      	mov	r7, r2
 80a47dc:	4698      	mov	r8, r3
 80a47de:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a47e2:	f7ff fc21 	bl	80a4028 <spark_cloud_flag_connected>
 80a47e6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a47e8:	4682      	mov	sl, r0
 80a47ea:	bb38      	cbnz	r0, 80a483c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a47ec:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a47f0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a47f2:	a905      	add	r1, sp, #20
 80a47f4:	4630      	mov	r0, r6
 80a47f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a47fa:	f7ff fed1 	bl	80a45a0 <_ZN8particle5ErrorC1EOS0_>
 80a47fe:	2014      	movs	r0, #20
 80a4800:	f7fb fc4b 	bl	80a009a <_Znwj>
 80a4804:	4604      	mov	r4, r0
 80a4806:	b148      	cbz	r0, 80a481c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a4808:	2302      	movs	r3, #2
 80a480a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a480c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a480e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4812:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a4814:	4631      	mov	r1, r6
 80a4816:	300c      	adds	r0, #12
 80a4818:	f7ff fec2 	bl	80a45a0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a481c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a481e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4820:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a4824:	f7ff ff32 	bl	80a468c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4828:	4630      	mov	r0, r6
 80a482a:	f7ff fec6 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a482e:	a805      	add	r0, sp, #20
 80a4830:	f7ff fec3 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a4834:	4628      	mov	r0, r5
 80a4836:	b00a      	add	sp, #40	; 0x28
 80a4838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a483c:	230c      	movs	r3, #12
 80a483e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a4842:	2014      	movs	r0, #20
 80a4844:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a4848:	9307      	str	r3, [sp, #28]
 80a484a:	f7fb fc26 	bl	80a009a <_Znwj>
 80a484e:	4601      	mov	r1, r0
 80a4850:	b128      	cbz	r0, 80a485e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4852:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a4856:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a485a:	f880 a001 	strb.w	sl, [r0, #1]
 80a485e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4860:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a4862:	f7ff ff13 	bl	80a468c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a4866:	4b22      	ldr	r3, [pc, #136]	; (80a48f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a4868:	2008      	movs	r0, #8
 80a486a:	9308      	str	r3, [sp, #32]
 80a486c:	f7fb fc15 	bl	80a009a <_Znwj>
 80a4870:	4682      	mov	sl, r0
 80a4872:	b128      	cbz	r0, 80a4880 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4874:	9b03      	ldr	r3, [sp, #12]
 80a4876:	a904      	add	r1, sp, #16
 80a4878:	f840 3b04 	str.w	r3, [r0], #4
 80a487c:	f7ff fcbc 	bl	80a41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4880:	4642      	mov	r2, r8
 80a4882:	4639      	mov	r1, r7
 80a4884:	4620      	mov	r0, r4
 80a4886:	9600      	str	r6, [sp, #0]
 80a4888:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a488c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4890:	f7ff fbd2 	bl	80a4038 <spark_send_event>
 80a4894:	b9b8      	cbnz	r0, 80a48c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a4896:	9b03      	ldr	r3, [sp, #12]
 80a4898:	785b      	ldrb	r3, [r3, #1]
 80a489a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a489e:	b993      	cbnz	r3, 80a48c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a48a0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a48a4:	a905      	add	r1, sp, #20
 80a48a6:	a803      	add	r0, sp, #12
 80a48a8:	9205      	str	r2, [sp, #20]
 80a48aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a48ae:	f7ff ff11 	bl	80a46d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a48b2:	a805      	add	r0, sp, #20
 80a48b4:	f7ff fe81 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a48b8:	a805      	add	r0, sp, #20
 80a48ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a48bc:	f7ff fea7 	bl	80a460e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a48c0:	a806      	add	r0, sp, #24
 80a48c2:	f7ff fc83 	bl	80a41cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a48c6:	9b03      	ldr	r3, [sp, #12]
 80a48c8:	a904      	add	r1, sp, #16
 80a48ca:	a806      	add	r0, sp, #24
 80a48cc:	9305      	str	r3, [sp, #20]
 80a48ce:	f7ff fc93 	bl	80a41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a48d2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a48d4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a48d6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a48d8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a48da:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a48dc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a48de:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a48e0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a48e2:	f7ff fc73 	bl	80a41cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a48e6:	a804      	add	r0, sp, #16
 80a48e8:	f7ff fc70 	bl	80a41cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a48ec:	e7a2      	b.n	80a4834 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a48ee:	bf00      	nop
 80a48f0:	080a49b9 	.word	0x080a49b9

080a48f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a48f4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a48f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a48f8:	4605      	mov	r5, r0
	  switch (__op)
 80a48fa:	d007      	beq.n	80a490c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a48fc:	2a03      	cmp	r2, #3
 80a48fe:	d018      	beq.n	80a4932 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a4900:	2a01      	cmp	r2, #1
 80a4902:	d101      	bne.n	80a4908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a4904:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a4906:	6003      	str	r3, [r0, #0]
	}
 80a4908:	2000      	movs	r0, #0
 80a490a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a490c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a490e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4910:	f7fb fbc3 	bl	80a009a <_Znwj>
 80a4914:	4604      	mov	r4, r0
 80a4916:	b150      	cbz	r0, 80a492e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4918:	4631      	mov	r1, r6
 80a491a:	f7ff fecb 	bl	80a46b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a491e:	6930      	ldr	r0, [r6, #16]
 80a4920:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4924:	b108      	cbz	r0, 80a492a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a4926:	f002 f8ab 	bl	80a6a80 <strdup>
        type_(type) {
 80a492a:	6120      	str	r0, [r4, #16]
 80a492c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a492e:	602c      	str	r4, [r5, #0]
	}
 80a4930:	e7ea      	b.n	80a4908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a4932:	6804      	ldr	r4, [r0, #0]
 80a4934:	2c00      	cmp	r4, #0
 80a4936:	d0e7      	beq.n	80a4908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a4938:	f104 0010 	add.w	r0, r4, #16
 80a493c:	f7ff fe3d 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4940:	4620      	mov	r0, r4
 80a4942:	f7ff fd28 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4946:	2118      	movs	r1, #24
 80a4948:	4620      	mov	r0, r4
 80a494a:	f000 fd38 	bl	80a53be <_ZdlPvj>
 80a494e:	e7db      	b.n	80a4908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a4950 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a4950:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a4952:	2300      	movs	r3, #0
 80a4954:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a4956:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4958:	4604      	mov	r4, r0
 80a495a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a495c:	b12b      	cbz	r3, 80a496a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a495e:	2202      	movs	r2, #2
 80a4960:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4962:	68eb      	ldr	r3, [r5, #12]
 80a4964:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4966:	68ab      	ldr	r3, [r5, #8]
 80a4968:	60a3      	str	r3, [r4, #8]
    }
 80a496a:	4620      	mov	r0, r4
 80a496c:	bd38      	pop	{r3, r4, r5, pc}

080a496e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a496e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4970:	b570      	push	{r4, r5, r6, lr}
 80a4972:	4604      	mov	r4, r0
	  switch (__op)
 80a4974:	d007      	beq.n	80a4986 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a4976:	2a03      	cmp	r2, #3
 80a4978:	d012      	beq.n	80a49a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a497a:	2a01      	cmp	r2, #1
 80a497c:	d101      	bne.n	80a4982 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a497e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a4980:	6003      	str	r3, [r0, #0]
	}
 80a4982:	2000      	movs	r0, #0
 80a4984:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4986:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a4988:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a498a:	f7fb fb86 	bl	80a009a <_Znwj>
 80a498e:	4605      	mov	r5, r0
 80a4990:	b120      	cbz	r0, 80a499c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a4992:	4631      	mov	r1, r6
 80a4994:	f7ff ffdc 	bl	80a4950 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a4998:	7c33      	ldrb	r3, [r6, #16]
 80a499a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a499c:	6025      	str	r5, [r4, #0]
	}
 80a499e:	e7f0      	b.n	80a4982 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a49a0:	6804      	ldr	r4, [r0, #0]
 80a49a2:	2c00      	cmp	r4, #0
 80a49a4:	d0ed      	beq.n	80a4982 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a49a6:	4620      	mov	r0, r4
 80a49a8:	f7ff fcf5 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a49ac:	2114      	movs	r1, #20
 80a49ae:	4620      	mov	r0, r4
 80a49b0:	f000 fd05 	bl	80a53be <_ZdlPvj>
 80a49b4:	e7e5      	b.n	80a4982 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a49b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a49ba:	4604      	mov	r4, r0
 80a49bc:	b089      	sub	sp, #36	; 0x24
 80a49be:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a49c0:	a801      	add	r0, sp, #4
 80a49c2:	4611      	mov	r1, r2
 80a49c4:	f7ff fe23 	bl	80a460e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a49c8:	b1a4      	cbz	r4, 80a49f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a49ca:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a49cc:	b11d      	cbz	r5, 80a49d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a49ce:	4628      	mov	r0, r5
 80a49d0:	f002 f856 	bl	80a6a80 <strdup>
 80a49d4:	4605      	mov	r5, r0
 80a49d6:	a801      	add	r0, sp, #4
 80a49d8:	a903      	add	r1, sp, #12
        type_(type) {
 80a49da:	9503      	str	r5, [sp, #12]
 80a49dc:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a49e0:	f7ff fe78 	bl	80a46d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a49e4:	a803      	add	r0, sp, #12
 80a49e6:	f7ff fde8 	bl	80a45ba <_ZN8particle5ErrorD1Ev>
 80a49ea:	a802      	add	r0, sp, #8
 80a49ec:	f7ff fbee 	bl	80a41cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a49f0:	b009      	add	sp, #36	; 0x24
 80a49f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a49f4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a49f6:	9d01      	ldr	r5, [sp, #4]
 80a49f8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a49fc:	2a00      	cmp	r2, #0
 80a49fe:	d103      	bne.n	80a4a08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a4a00:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a4a04:	2900      	cmp	r1, #0
 80a4a06:	d1f7      	bne.n	80a49f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a4a08:	d1ef      	bne.n	80a49ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a4a0a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4a0c:	f3bf 8f5b 	dmb	ish
 80a4a10:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4a12:	f3bf 8f5b 	dmb	ish
 80a4a16:	1d2b      	adds	r3, r5, #4
 80a4a18:	e853 6f00 	ldrex	r6, [r3]
 80a4a1c:	e843 4200 	strex	r2, r4, [r3]
 80a4a20:	2a00      	cmp	r2, #0
 80a4a22:	d1f9      	bne.n	80a4a18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a4a24:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4a28:	2e00      	cmp	r6, #0
 80a4a2a:	d0de      	beq.n	80a49ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a4a2c:	4620      	mov	r0, r4
 80a4a2e:	f7ff fa6f 	bl	80a3f10 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4a32:	4607      	mov	r7, r0
 80a4a34:	b160      	cbz	r0, 80a4a50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4a36:	4630      	mov	r0, r6
 80a4a38:	f105 010c 	add.w	r1, r5, #12
 80a4a3c:	f7ff fe16 	bl	80a466c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a4a40:	4630      	mov	r0, r6
 80a4a42:	f7ff fca8 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4a46:	2110      	movs	r1, #16
 80a4a48:	4630      	mov	r0, r6
 80a4a4a:	f000 fcb8 	bl	80a53be <_ZdlPvj>
 80a4a4e:	e7cc      	b.n	80a49ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4a50:	4631      	mov	r1, r6
 80a4a52:	a803      	add	r0, sp, #12
 80a4a54:	f7ff ff7c 	bl	80a4950 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4a58:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4a5a:	2010      	movs	r0, #16
 80a4a5c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a4a60:	f7fb fb1b 	bl	80a009a <_Znwj>
 80a4a64:	4605      	mov	r5, r0
 80a4a66:	b1d0      	cbz	r0, 80a4a9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a4a68:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4a6a:	2014      	movs	r0, #20
 80a4a6c:	f7fb fb15 	bl	80a009a <_Znwj>
 80a4a70:	4604      	mov	r4, r0
 80a4a72:	b178      	cbz	r0, 80a4a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a4a74:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4a76:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4a78:	a803      	add	r0, sp, #12
 80a4a7a:	f7ff fcbe 	bl	80a43fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4a7e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4a80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4a82:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4a84:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a4a86:	9205      	str	r2, [sp, #20]
 80a4a88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4a8a:	60e3      	str	r3, [r4, #12]
 80a4a8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a4a90:	9206      	str	r2, [sp, #24]
 80a4a92:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4a94:	4b06      	ldr	r3, [pc, #24]	; (80a4ab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4a96:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4a98:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4a9a:	4b06      	ldr	r3, [pc, #24]	; (80a4ab4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a4a9c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a4a9e:	a803      	add	r0, sp, #12
 80a4aa0:	f7ff fc79 	bl	80a4396 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4aa4:	2200      	movs	r2, #0
 80a4aa6:	4629      	mov	r1, r5
 80a4aa8:	4803      	ldr	r0, [pc, #12]	; (80a4ab8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a4aaa:	f7ff fa39 	bl	80a3f20 <application_thread_invoke>
 80a4aae:	e7c7      	b.n	80a4a40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a4ab0:	080a467f 	.word	0x080a467f
 80a4ab4:	080a496f 	.word	0x080a496f
 80a4ab8:	080a4e11 	.word	0x080a4e11

080a4abc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4abc:	4770      	bx	lr

080a4abe <_ZN9IPAddressD0Ev>:
 80a4abe:	b510      	push	{r4, lr}
 80a4ac0:	4604      	mov	r4, r0
 80a4ac2:	2118      	movs	r1, #24
 80a4ac4:	f000 fc7b 	bl	80a53be <_ZdlPvj>
 80a4ac8:	4620      	mov	r0, r4
 80a4aca:	bd10      	pop	{r4, pc}

080a4acc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4ace:	460e      	mov	r6, r1
 80a4ad0:	2400      	movs	r4, #0
 80a4ad2:	f100 0708 	add.w	r7, r0, #8
 80a4ad6:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a4ad8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4adc:	220a      	movs	r2, #10
 80a4ade:	4630      	mov	r0, r6
 80a4ae0:	f7ff fb51 	bl	80a4186 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4ae4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4ae6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4ae8:	d101      	bne.n	80a4aee <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4aea:	4620      	mov	r0, r4
 80a4aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4aee:	2c00      	cmp	r4, #0
 80a4af0:	d0f2      	beq.n	80a4ad8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4af2:	212e      	movs	r1, #46	; 0x2e
 80a4af4:	4630      	mov	r0, r6
 80a4af6:	f7ff fb43 	bl	80a4180 <_ZN5Print5printEc>
 80a4afa:	4404      	add	r4, r0
 80a4afc:	e7ec      	b.n	80a4ad8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a4b00 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4b00:	b510      	push	{r4, lr}
 80a4b02:	4604      	mov	r4, r0
 80a4b04:	4b04      	ldr	r3, [pc, #16]	; (80a4b18 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a4b06:	2211      	movs	r2, #17
 80a4b08:	2100      	movs	r1, #0
 80a4b0a:	f840 3b04 	str.w	r3, [r0], #4
 80a4b0e:	f001 ff79 	bl	80a6a04 <memset>
}
 80a4b12:	4620      	mov	r0, r4
 80a4b14:	bd10      	pop	{r4, pc}
 80a4b16:	bf00      	nop
 80a4b18:	080a9080 	.word	0x080a9080

080a4b1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4b1c:	4603      	mov	r3, r0
 80a4b1e:	4a07      	ldr	r2, [pc, #28]	; (80a4b3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4b20:	b510      	push	{r4, lr}
 80a4b22:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4b26:	f101 0210 	add.w	r2, r1, #16
 80a4b2a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4b2e:	4291      	cmp	r1, r2
 80a4b30:	f843 4b04 	str.w	r4, [r3], #4
 80a4b34:	d1f9      	bne.n	80a4b2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4b36:	780a      	ldrb	r2, [r1, #0]
 80a4b38:	701a      	strb	r2, [r3, #0]
}
 80a4b3a:	bd10      	pop	{r4, pc}
 80a4b3c:	080a9080 	.word	0x080a9080

080a4b40 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a4b40:	4a02      	ldr	r2, [pc, #8]	; (80a4b4c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a4b42:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4b46:	2204      	movs	r2, #4
 80a4b48:	7502      	strb	r2, [r0, #20]
}
 80a4b4a:	4770      	bx	lr
 80a4b4c:	080a9080 	.word	0x080a9080

080a4b50 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4b50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4b52:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4b56:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4b5a:	2304      	movs	r3, #4
 80a4b5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4b60:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4b64:	6044      	str	r4, [r0, #4]
 80a4b66:	7503      	strb	r3, [r0, #20]
}
 80a4b68:	bd10      	pop	{r4, pc}
	...

080a4b6c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4b6e:	4d04      	ldr	r5, [pc, #16]	; (80a4b80 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4b70:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4b72:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4b76:	9500      	str	r5, [sp, #0]
 80a4b78:	f7ff ffea 	bl	80a4b50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4b7c:	b003      	add	sp, #12
 80a4b7e:	bd30      	pop	{r4, r5, pc}
 80a4b80:	080a9080 	.word	0x080a9080

080a4b84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4b84:	7441      	strb	r1, [r0, #17]
}
 80a4b86:	4770      	bx	lr

080a4b88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4b88:	4770      	bx	lr

080a4b8a <_ZN9USBSerial4readEv>:
{
 80a4b8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4b8c:	2100      	movs	r1, #0
 80a4b8e:	7c00      	ldrb	r0, [r0, #16]
 80a4b90:	f7ff f946 	bl	80a3e20 <HAL_USB_USART_Receive_Data>
}
 80a4b94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4b98:	bd08      	pop	{r3, pc}

080a4b9a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a4b9a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4b9c:	2101      	movs	r1, #1
 80a4b9e:	7c00      	ldrb	r0, [r0, #16]
 80a4ba0:	f7ff f93e 	bl	80a3e20 <HAL_USB_USART_Receive_Data>
}
 80a4ba4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4ba8:	bd08      	pop	{r3, pc}

080a4baa <_ZN9USBSerial17availableForWriteEv>:
{
 80a4baa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4bac:	7c00      	ldrb	r0, [r0, #16]
 80a4bae:	f7ff f92f 	bl	80a3e10 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4bb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4bb6:	bd08      	pop	{r3, pc}

080a4bb8 <_ZN9USBSerial9availableEv>:
{
 80a4bb8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4bba:	7c00      	ldrb	r0, [r0, #16]
 80a4bbc:	f7ff f920 	bl	80a3e00 <HAL_USB_USART_Available_Data>
}
 80a4bc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4bc4:	bd08      	pop	{r3, pc}

080a4bc6 <_ZN9USBSerial5writeEh>:
{
 80a4bc6:	b538      	push	{r3, r4, r5, lr}
 80a4bc8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4bca:	7c00      	ldrb	r0, [r0, #16]
{
 80a4bcc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4bce:	f7ff f91f 	bl	80a3e10 <HAL_USB_USART_Available_Data_For_Write>
 80a4bd2:	2800      	cmp	r0, #0
 80a4bd4:	dc01      	bgt.n	80a4bda <_ZN9USBSerial5writeEh+0x14>
 80a4bd6:	7c60      	ldrb	r0, [r4, #17]
 80a4bd8:	b128      	cbz	r0, 80a4be6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4bda:	4629      	mov	r1, r5
 80a4bdc:	7c20      	ldrb	r0, [r4, #16]
 80a4bde:	f7ff f927 	bl	80a3e30 <HAL_USB_USART_Send_Data>
 80a4be2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4be6:	bd38      	pop	{r3, r4, r5, pc}

080a4be8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4be8:	7c00      	ldrb	r0, [r0, #16]
 80a4bea:	f7ff b929 	b.w	80a3e40 <HAL_USB_USART_Flush_Data>

080a4bee <_ZN9USBSerialD0Ev>:
 80a4bee:	b510      	push	{r4, lr}
 80a4bf0:	4604      	mov	r4, r0
 80a4bf2:	2114      	movs	r1, #20
 80a4bf4:	f000 fbe3 	bl	80a53be <_ZdlPvj>
 80a4bf8:	4620      	mov	r0, r4
 80a4bfa:	bd10      	pop	{r4, pc}

080a4bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4bfc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a4bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4c02:	4604      	mov	r4, r0
 80a4c04:	4608      	mov	r0, r1
 80a4c06:	2100      	movs	r1, #0
 80a4c08:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4c0c:	4b04      	ldr	r3, [pc, #16]	; (80a4c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4c0e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4c10:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4c12:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4c14:	4611      	mov	r1, r2
  _blocking = true;
 80a4c16:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4c18:	f7ff f8ea 	bl	80a3df0 <HAL_USB_USART_Init>
}
 80a4c1c:	4620      	mov	r0, r4
 80a4c1e:	bd10      	pop	{r4, pc}
 80a4c20:	080a9094 	.word	0x080a9094

080a4c24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4c24:	b510      	push	{r4, lr}
 80a4c26:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4c28:	2214      	movs	r2, #20
 80a4c2a:	2100      	movs	r1, #0
 80a4c2c:	f001 feea 	bl	80a6a04 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a4c30:	4b05      	ldr	r3, [pc, #20]	; (80a4c48 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4c32:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a4c34:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a4c36:	4b05      	ldr	r3, [pc, #20]	; (80a4c4c <_Z19acquireSerialBufferv+0x28>)
 80a4c38:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4c3a:	f240 1301 	movw	r3, #257	; 0x101
 80a4c3e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4c40:	2381      	movs	r3, #129	; 0x81
 80a4c42:	8223      	strh	r3, [r4, #16]
}
 80a4c44:	bd10      	pop	{r4, pc}
 80a4c46:	bf00      	nop
 80a4c48:	20000b60 	.word	0x20000b60
 80a4c4c:	20000c61 	.word	0x20000c61

080a4c50 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4c50:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4c52:	4d0f      	ldr	r5, [pc, #60]	; (80a4c90 <_Z16_fetch_usbserialv+0x40>)
{
 80a4c54:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4c56:	a801      	add	r0, sp, #4
 80a4c58:	f7ff ffe4 	bl	80a4c24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4c5c:	7829      	ldrb	r1, [r5, #0]
 80a4c5e:	f3bf 8f5b 	dmb	ish
 80a4c62:	f011 0401 	ands.w	r4, r1, #1
 80a4c66:	d110      	bne.n	80a4c8a <_Z16_fetch_usbserialv+0x3a>
 80a4c68:	4628      	mov	r0, r5
 80a4c6a:	f7fb fa1c 	bl	80a00a6 <__cxa_guard_acquire>
 80a4c6e:	b160      	cbz	r0, 80a4c8a <_Z16_fetch_usbserialv+0x3a>
 80a4c70:	4621      	mov	r1, r4
 80a4c72:	aa01      	add	r2, sp, #4
 80a4c74:	4807      	ldr	r0, [pc, #28]	; (80a4c94 <_Z16_fetch_usbserialv+0x44>)
 80a4c76:	f7ff ffc1 	bl	80a4bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4c7a:	4628      	mov	r0, r5
 80a4c7c:	f7fb fa18 	bl	80a00b0 <__cxa_guard_release>
 80a4c80:	4a05      	ldr	r2, [pc, #20]	; (80a4c98 <_Z16_fetch_usbserialv+0x48>)
 80a4c82:	4906      	ldr	r1, [pc, #24]	; (80a4c9c <_Z16_fetch_usbserialv+0x4c>)
 80a4c84:	4803      	ldr	r0, [pc, #12]	; (80a4c94 <_Z16_fetch_usbserialv+0x44>)
 80a4c86:	f000 fb95 	bl	80a53b4 <__aeabi_atexit>
	return _usbserial;
}
 80a4c8a:	4802      	ldr	r0, [pc, #8]	; (80a4c94 <_Z16_fetch_usbserialv+0x44>)
 80a4c8c:	b007      	add	sp, #28
 80a4c8e:	bd30      	pop	{r4, r5, pc}
 80a4c90:	20000b30 	.word	0x20000b30
 80a4c94:	20000b38 	.word	0x20000b38
 80a4c98:	20000240 	.word	0x20000240
 80a4c9c:	080a4b89 	.word	0x080a4b89

080a4ca0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4ca0:	b510      	push	{r4, lr}
 80a4ca2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4ca4:	2214      	movs	r2, #20
 80a4ca6:	2100      	movs	r1, #0
 80a4ca8:	f001 feac 	bl	80a6a04 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4cac:	4b05      	ldr	r3, [pc, #20]	; (80a4cc4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4cae:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a4cb0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a4cb2:	4b05      	ldr	r3, [pc, #20]	; (80a4cc8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a4cb4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4cb6:	f240 1301 	movw	r3, #257	; 0x101
 80a4cba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4cbc:	2381      	movs	r3, #129	; 0x81
 80a4cbe:	8223      	strh	r3, [r4, #16]
}
 80a4cc0:	bd10      	pop	{r4, pc}
 80a4cc2:	bf00      	nop
 80a4cc4:	20000ce2 	.word	0x20000ce2
 80a4cc8:	20000de3 	.word	0x20000de3

080a4ccc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4ccc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4cce:	4c0f      	ldr	r4, [pc, #60]	; (80a4d0c <_Z17_fetch_usbserial1v+0x40>)
{
 80a4cd0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4cd2:	a801      	add	r0, sp, #4
 80a4cd4:	f7ff ffe4 	bl	80a4ca0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4cd8:	7823      	ldrb	r3, [r4, #0]
 80a4cda:	f3bf 8f5b 	dmb	ish
 80a4cde:	07db      	lsls	r3, r3, #31
 80a4ce0:	d410      	bmi.n	80a4d04 <_Z17_fetch_usbserial1v+0x38>
 80a4ce2:	4620      	mov	r0, r4
 80a4ce4:	f7fb f9df 	bl	80a00a6 <__cxa_guard_acquire>
 80a4ce8:	b160      	cbz	r0, 80a4d04 <_Z17_fetch_usbserial1v+0x38>
 80a4cea:	2101      	movs	r1, #1
 80a4cec:	aa01      	add	r2, sp, #4
 80a4cee:	4808      	ldr	r0, [pc, #32]	; (80a4d10 <_Z17_fetch_usbserial1v+0x44>)
 80a4cf0:	f7ff ff84 	bl	80a4bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4cf4:	4620      	mov	r0, r4
 80a4cf6:	f7fb f9db 	bl	80a00b0 <__cxa_guard_release>
 80a4cfa:	4a06      	ldr	r2, [pc, #24]	; (80a4d14 <_Z17_fetch_usbserial1v+0x48>)
 80a4cfc:	4906      	ldr	r1, [pc, #24]	; (80a4d18 <_Z17_fetch_usbserial1v+0x4c>)
 80a4cfe:	4804      	ldr	r0, [pc, #16]	; (80a4d10 <_Z17_fetch_usbserial1v+0x44>)
 80a4d00:	f000 fb58 	bl	80a53b4 <__aeabi_atexit>
  return _usbserial1;
}
 80a4d04:	4802      	ldr	r0, [pc, #8]	; (80a4d10 <_Z17_fetch_usbserial1v+0x44>)
 80a4d06:	b006      	add	sp, #24
 80a4d08:	bd10      	pop	{r4, pc}
 80a4d0a:	bf00      	nop
 80a4d0c:	20000b34 	.word	0x20000b34
 80a4d10:	20000b4c 	.word	0x20000b4c
 80a4d14:	20000240 	.word	0x20000240
 80a4d18:	080a4b89 	.word	0x080a4b89

080a4d1c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4d1c:	4770      	bx	lr

080a4d1e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4d1e:	7441      	strb	r1, [r0, #17]
}
 80a4d20:	4770      	bx	lr

080a4d22 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4d22:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4d24:	7c00      	ldrb	r0, [r0, #16]
 80a4d26:	f7ff f811 	bl	80a3d4c <hal_usart_available_data_for_write>
}
 80a4d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d2e:	bd08      	pop	{r3, pc}

080a4d30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4d30:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4d32:	7c00      	ldrb	r0, [r0, #16]
 80a4d34:	f7fe ffe2 	bl	80a3cfc <hal_usart_available>
}
 80a4d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d3c:	bd08      	pop	{r3, pc}

080a4d3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4d3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4d40:	7c00      	ldrb	r0, [r0, #16]
 80a4d42:	f7fe ffeb 	bl	80a3d1c <hal_usart_peek>
}
 80a4d46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d4a:	bd08      	pop	{r3, pc}

080a4d4c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4d4c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4d4e:	7c00      	ldrb	r0, [r0, #16]
 80a4d50:	f7fe ffdc 	bl	80a3d0c <hal_usart_read>
}
 80a4d54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d58:	bd08      	pop	{r3, pc}

080a4d5a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4d5a:	7c00      	ldrb	r0, [r0, #16]
 80a4d5c:	f7fe bfe6 	b.w	80a3d2c <hal_usart_flush>

080a4d60 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4d60:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4d62:	7c46      	ldrb	r6, [r0, #17]
{
 80a4d64:	4604      	mov	r4, r0
 80a4d66:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4d68:	b12e      	cbz	r6, 80a4d76 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4d6a:	4629      	mov	r1, r5
 80a4d6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4d72:	f7fe bfbb 	b.w	80a3cec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4d76:	7c00      	ldrb	r0, [r0, #16]
 80a4d78:	f7fe ffe8 	bl	80a3d4c <hal_usart_available_data_for_write>
 80a4d7c:	2800      	cmp	r0, #0
 80a4d7e:	dcf4      	bgt.n	80a4d6a <_ZN11USARTSerial5writeEh+0xa>
}
 80a4d80:	4630      	mov	r0, r6
 80a4d82:	bd70      	pop	{r4, r5, r6, pc}

080a4d84 <_ZN11USARTSerialD0Ev>:
 80a4d84:	b510      	push	{r4, lr}
 80a4d86:	4604      	mov	r4, r0
 80a4d88:	2114      	movs	r1, #20
 80a4d8a:	f000 fb18 	bl	80a53be <_ZdlPvj>
 80a4d8e:	4620      	mov	r0, r4
 80a4d90:	bd10      	pop	{r4, pc}
	...

080a4d94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4d94:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4d98:	b510      	push	{r4, lr}
 80a4d9a:	4604      	mov	r4, r0
 80a4d9c:	4608      	mov	r0, r1
 80a4d9e:	4611      	mov	r1, r2
 80a4da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4da4:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4da8:	4a04      	ldr	r2, [pc, #16]	; (80a4dbc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4daa:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4dac:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4dae:	2201      	movs	r2, #1
 80a4db0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4db2:	461a      	mov	r2, r3
 80a4db4:	f7fe ff92 	bl	80a3cdc <hal_usart_init>
}
 80a4db8:	4620      	mov	r0, r4
 80a4dba:	bd10      	pop	{r4, pc}
 80a4dbc:	080a90c4 	.word	0x080a90c4

080a4dc0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4dc0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a4dc2:	4d0d      	ldr	r5, [pc, #52]	; (80a4df8 <_Z22__fetch_global_Serial1v+0x38>)
 80a4dc4:	7829      	ldrb	r1, [r5, #0]
 80a4dc6:	f3bf 8f5b 	dmb	ish
 80a4dca:	f011 0401 	ands.w	r4, r1, #1
 80a4dce:	d111      	bne.n	80a4df4 <_Z22__fetch_global_Serial1v+0x34>
 80a4dd0:	4628      	mov	r0, r5
 80a4dd2:	f7fb f968 	bl	80a00a6 <__cxa_guard_acquire>
 80a4dd6:	b168      	cbz	r0, 80a4df4 <_Z22__fetch_global_Serial1v+0x34>
 80a4dd8:	4621      	mov	r1, r4
 80a4dda:	4a08      	ldr	r2, [pc, #32]	; (80a4dfc <_Z22__fetch_global_Serial1v+0x3c>)
 80a4ddc:	4b08      	ldr	r3, [pc, #32]	; (80a4e00 <_Z22__fetch_global_Serial1v+0x40>)
 80a4dde:	4809      	ldr	r0, [pc, #36]	; (80a4e04 <_Z22__fetch_global_Serial1v+0x44>)
 80a4de0:	f7ff ffd8 	bl	80a4d94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a4de4:	4628      	mov	r0, r5
 80a4de6:	f7fb f963 	bl	80a00b0 <__cxa_guard_release>
 80a4dea:	4a07      	ldr	r2, [pc, #28]	; (80a4e08 <_Z22__fetch_global_Serial1v+0x48>)
 80a4dec:	4907      	ldr	r1, [pc, #28]	; (80a4e0c <_Z22__fetch_global_Serial1v+0x4c>)
 80a4dee:	4805      	ldr	r0, [pc, #20]	; (80a4e04 <_Z22__fetch_global_Serial1v+0x44>)
 80a4df0:	f000 fae0 	bl	80a53b4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a4df4:	4803      	ldr	r0, [pc, #12]	; (80a4e04 <_Z22__fetch_global_Serial1v+0x44>)
 80a4df6:	bd38      	pop	{r3, r4, r5, pc}
 80a4df8:	20000e64 	.word	0x20000e64
 80a4dfc:	20000e68 	.word	0x20000e68
 80a4e00:	20000eec 	.word	0x20000eec
 80a4e04:	20000f70 	.word	0x20000f70
 80a4e08:	20000240 	.word	0x20000240
 80a4e0c:	080a4d1d 	.word	0x080a4d1d

080a4e10 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a4e10:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4e12:	6883      	ldr	r3, [r0, #8]
 80a4e14:	4604      	mov	r4, r0
 80a4e16:	b90b      	cbnz	r3, 80a4e1c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a4e18:	f000 fad5 	bl	80a53c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4e1c:	68c3      	ldr	r3, [r0, #12]
 80a4e1e:	4798      	blx	r3
      if (_M_manager)
 80a4e20:	68a3      	ldr	r3, [r4, #8]
 80a4e22:	b11b      	cbz	r3, 80a4e2c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4e24:	2203      	movs	r2, #3
 80a4e26:	4621      	mov	r1, r4
 80a4e28:	4620      	mov	r0, r4
 80a4e2a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4e2c:	4620      	mov	r0, r4
}
 80a4e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a4e32:	2110      	movs	r1, #16
 80a4e34:	f000 bac3 	b.w	80a53be <_ZdlPvj>

080a4e38 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4e38:	4770      	bx	lr

080a4e3a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4e3c:	4606      	mov	r6, r0
 80a4e3e:	4615      	mov	r5, r2
 80a4e40:	460c      	mov	r4, r1
 80a4e42:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4e44:	42bc      	cmp	r4, r7
 80a4e46:	d006      	beq.n	80a4e56 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4e48:	6833      	ldr	r3, [r6, #0]
 80a4e4a:	4630      	mov	r0, r6
 80a4e4c:	689b      	ldr	r3, [r3, #8]
 80a4e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4e52:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4e54:	e7f6      	b.n	80a4e44 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a4e56:	4628      	mov	r0, r5
 80a4e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4e5a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4e5a:	2200      	movs	r2, #0
 80a4e5c:	7c00      	ldrb	r0, [r0, #16]
 80a4e5e:	f7fe bf7d 	b.w	80a3d5c <hal_i2c_write>

080a4e62 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a4e62:	2100      	movs	r1, #0
 80a4e64:	7c00      	ldrb	r0, [r0, #16]
 80a4e66:	f7fe bf81 	b.w	80a3d6c <hal_i2c_available>

080a4e6a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4e6a:	2100      	movs	r1, #0
 80a4e6c:	7c00      	ldrb	r0, [r0, #16]
 80a4e6e:	f7fe bf85 	b.w	80a3d7c <hal_i2c_read>

080a4e72 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a4e72:	2100      	movs	r1, #0
 80a4e74:	7c00      	ldrb	r0, [r0, #16]
 80a4e76:	f7fe bf89 	b.w	80a3d8c <hal_i2c_peek>

080a4e7a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a4e7a:	2100      	movs	r1, #0
 80a4e7c:	7c00      	ldrb	r0, [r0, #16]
 80a4e7e:	f7fe bf8d 	b.w	80a3d9c <hal_i2c_flush>

080a4e82 <_ZN7TwoWireD0Ev>:
 80a4e82:	b510      	push	{r4, lr}
 80a4e84:	4604      	mov	r4, r0
 80a4e86:	2114      	movs	r1, #20
 80a4e88:	f000 fa99 	bl	80a53be <_ZdlPvj>
 80a4e8c:	4620      	mov	r0, r4
 80a4e8e:	bd10      	pop	{r4, pc}

080a4e90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4e90:	b510      	push	{r4, lr}
 80a4e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4e96:	4604      	mov	r4, r0
 80a4e98:	4608      	mov	r0, r1
 80a4e9a:	2100      	movs	r1, #0
 80a4e9c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4ea0:	4b03      	ldr	r3, [pc, #12]	; (80a4eb0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a4ea2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4ea4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a4ea6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a4ea8:	f7fe ff88 	bl	80a3dbc <hal_i2c_init>
}
 80a4eac:	4620      	mov	r0, r4
 80a4eae:	bd10      	pop	{r4, pc}
 80a4eb0:	080a90f4 	.word	0x080a90f4

080a4eb4 <_ZN10WiFiSignalD1Ev>:
    virtual ~WiFiSignal() {};
 80a4eb4:	4770      	bx	lr

080a4eb6 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a4eb6:	2001      	movs	r0, #1
 80a4eb8:	4770      	bx	lr

080a4eba <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a4eba:	2200      	movs	r2, #0
 80a4ebc:	6840      	ldr	r0, [r0, #4]
 80a4ebe:	4611      	mov	r1, r2
 80a4ec0:	f7ff b86a 	b.w	80a3f98 <network_ready>

080a4ec4 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 80a4ec4:	b510      	push	{r4, lr}
 80a4ec6:	4604      	mov	r4, r0
 80a4ec8:	2124      	movs	r1, #36	; 0x24
 80a4eca:	f000 fa78 	bl	80a53be <_ZdlPvj>
 80a4ece:	4620      	mov	r0, r4
 80a4ed0:	bd10      	pop	{r4, pc}

080a4ed2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4ed4:	4615      	mov	r5, r2
 80a4ed6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4ed8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a4eda:	460e      	mov	r6, r1
 80a4edc:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a4ede:	2100      	movs	r1, #0
 80a4ee0:	a803      	add	r0, sp, #12
 80a4ee2:	f001 fd8f 	bl	80a6a04 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4ee6:	4628      	mov	r0, r5
 80a4ee8:	f001 fde5 	bl	80a6ab6 <strlen>
 80a4eec:	2700      	movs	r7, #0
 80a4eee:	b281      	uxth	r1, r0
 80a4ef0:	6873      	ldr	r3, [r6, #4]
 80a4ef2:	4628      	mov	r0, r5
 80a4ef4:	9700      	str	r7, [sp, #0]
 80a4ef6:	aa03      	add	r2, sp, #12
 80a4ef8:	f7fe ffaa 	bl	80a3e50 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4efc:	b130      	cbz	r0, 80a4f0c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a4efe:	4639      	mov	r1, r7
 80a4f00:	4620      	mov	r0, r4
 80a4f02:	f7ff fe1d 	bl	80a4b40 <_ZN9IPAddressC1Em>
    }
 80a4f06:	4620      	mov	r0, r4
 80a4f08:	b009      	add	sp, #36	; 0x24
 80a4f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4f0c:	4620      	mov	r0, r4
 80a4f0e:	a903      	add	r1, sp, #12
 80a4f10:	f7ff fe04 	bl	80a4b1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a4f14:	e7f7      	b.n	80a4f06 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a4f16 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a4f16:	2200      	movs	r2, #0
 80a4f18:	6840      	ldr	r0, [r0, #4]
 80a4f1a:	4611      	mov	r1, r2
 80a4f1c:	f7ff b85c 	b.w	80a3fd8 <network_listening>

080a4f20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a4f20:	2200      	movs	r2, #0
 80a4f22:	6840      	ldr	r0, [r0, #4]
 80a4f24:	4611      	mov	r1, r2
 80a4f26:	f7ff b867 	b.w	80a3ff8 <network_get_listen_timeout>

080a4f2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a4f2a:	2200      	movs	r2, #0
 80a4f2c:	6840      	ldr	r0, [r0, #4]
 80a4f2e:	f7ff b85b 	b.w	80a3fe8 <network_set_listen_timeout>

080a4f32 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4f32:	2200      	movs	r2, #0
 80a4f34:	6840      	ldr	r0, [r0, #4]
 80a4f36:	f081 0101 	eor.w	r1, r1, #1
 80a4f3a:	f7ff b845 	b.w	80a3fc8 <network_listen>

080a4f3e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a4f3e:	2300      	movs	r3, #0
 80a4f40:	6840      	ldr	r0, [r0, #4]
 80a4f42:	461a      	mov	r2, r3
 80a4f44:	4619      	mov	r1, r3
 80a4f46:	f7ff b837 	b.w	80a3fb8 <network_off>

080a4f4a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a4f4a:	2200      	movs	r2, #0
 80a4f4c:	6840      	ldr	r0, [r0, #4]
 80a4f4e:	4611      	mov	r1, r2
 80a4f50:	f7ff b812 	b.w	80a3f78 <network_connecting>

080a4f54 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4f54:	2200      	movs	r2, #0
 80a4f56:	2102      	movs	r1, #2
 80a4f58:	6840      	ldr	r0, [r0, #4]
 80a4f5a:	f7ff b815 	b.w	80a3f88 <network_disconnect>

080a4f5e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a4f5e:	2300      	movs	r3, #0
 80a4f60:	6840      	ldr	r0, [r0, #4]
 80a4f62:	461a      	mov	r2, r3
 80a4f64:	f7ff b800 	b.w	80a3f68 <network_connect>

080a4f68 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
 80a4f68:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a4f6a:	8983      	ldrh	r3, [r0, #12]
 80a4f6c:	b15b      	cbz	r3, 80a4f86 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a4f6e:	6940      	ldr	r0, [r0, #20]
 80a4f70:	2800      	cmp	r0, #0
 80a4f72:	db08      	blt.n	80a4f86 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a4f74:	f001 f81a 	bl	80a5fac <__aeabi_i2f>
 80a4f78:	4904      	ldr	r1, [pc, #16]	; (80a4f8c <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a4f7a:	f001 f91f 	bl	80a61bc <__aeabi_fdiv>
 80a4f7e:	4904      	ldr	r1, [pc, #16]	; (80a4f90 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a4f80:	f001 f868 	bl	80a6054 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a4f84:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a4f86:	4803      	ldr	r0, [pc, #12]	; (80a4f94 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
 80a4f88:	e7fc      	b.n	80a4f84 <_ZNK10WiFiSignal11getStrengthEv+0x1c>
 80a4f8a:	bf00      	nop
 80a4f8c:	477fff00 	.word	0x477fff00
 80a4f90:	42c80000 	.word	0x42c80000
 80a4f94:	bf800000 	.word	0xbf800000

080a4f98 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
 80a4f98:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a4f9a:	8983      	ldrh	r3, [r0, #12]
 80a4f9c:	b14b      	cbz	r3, 80a4fb2 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
 80a4f9e:	6900      	ldr	r0, [r0, #16]
 80a4fa0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a4fa4:	d005      	beq.n	80a4fb2 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
        return inf_.rssi / 100.0f;
 80a4fa6:	f001 f801 	bl	80a5fac <__aeabi_i2f>
 80a4faa:	4903      	ldr	r1, [pc, #12]	; (80a4fb8 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a4fac:	f001 f906 	bl	80a61bc <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a4fb0:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a4fb2:	2000      	movs	r0, #0
 80a4fb4:	e7fc      	b.n	80a4fb0 <_ZNK10WiFiSignal16getStrengthValueEv+0x18>
 80a4fb6:	bf00      	nop
 80a4fb8:	42c80000 	.word	0x42c80000

080a4fbc <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
 80a4fbc:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a4fbe:	8983      	ldrh	r3, [r0, #12]
 80a4fc0:	b15b      	cbz	r3, 80a4fda <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a4fc2:	6a00      	ldr	r0, [r0, #32]
 80a4fc4:	2800      	cmp	r0, #0
 80a4fc6:	db08      	blt.n	80a4fda <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a4fc8:	f000 fff0 	bl	80a5fac <__aeabi_i2f>
 80a4fcc:	4904      	ldr	r1, [pc, #16]	; (80a4fe0 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a4fce:	f001 f8f5 	bl	80a61bc <__aeabi_fdiv>
 80a4fd2:	4904      	ldr	r1, [pc, #16]	; (80a4fe4 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a4fd4:	f001 f83e 	bl	80a6054 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a4fd8:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a4fda:	4803      	ldr	r0, [pc, #12]	; (80a4fe8 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
 80a4fdc:	e7fc      	b.n	80a4fd8 <_ZNK10WiFiSignal10getQualityEv+0x1c>
 80a4fde:	bf00      	nop
 80a4fe0:	477fff00 	.word	0x477fff00
 80a4fe4:	42c80000 	.word	0x42c80000
 80a4fe8:	bf800000 	.word	0xbf800000

080a4fec <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
 80a4fec:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a4fee:	8983      	ldrh	r3, [r0, #12]
 80a4ff0:	b14b      	cbz	r3, 80a5006 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
 80a4ff2:	6980      	ldr	r0, [r0, #24]
 80a4ff4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a4ff8:	d005      	beq.n	80a5006 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
        return inf_.snr / 100.0f;
 80a4ffa:	f000 ffd7 	bl	80a5fac <__aeabi_i2f>
 80a4ffe:	4903      	ldr	r1, [pc, #12]	; (80a500c <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a5000:	f001 f8dc 	bl	80a61bc <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a5004:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a5006:	2000      	movs	r0, #0
 80a5008:	e7fc      	b.n	80a5004 <_ZNK10WiFiSignal15getQualityValueEv+0x18>
 80a500a:	bf00      	nop
 80a500c:	42c80000 	.word	0x42c80000

080a5010 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a5010:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a5012:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a5014:	4606      	mov	r6, r0
    inf_ = inf;
 80a5016:	f100 050c 	add.w	r5, r0, #12
 80a501a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a501c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a501e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a5022:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5026:	6933      	ldr	r3, [r6, #16]
}
 80a5028:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a502a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a502e:	bf16      	itet	ne
 80a5030:	2264      	movne	r2, #100	; 0x64
 80a5032:	2302      	moveq	r3, #2
 80a5034:	fb93 f3f2 	sdivne	r3, r3, r2
 80a5038:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a503a:	69b3      	ldr	r3, [r6, #24]
 80a503c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5040:	bf16      	itet	ne
 80a5042:	2264      	movne	r2, #100	; 0x64
 80a5044:	2300      	moveq	r3, #0
 80a5046:	fb93 f3f2 	sdivne	r3, r3, r2
 80a504a:	60b3      	str	r3, [r6, #8]
}
 80a504c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a5050 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a5050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 80a5054:	2500      	movs	r5, #0
 80a5056:	f04f 0802 	mov.w	r8, #2
 80a505a:	2618      	movs	r6, #24
 80a505c:	460f      	mov	r7, r1
 80a505e:	4b14      	ldr	r3, [pc, #80]	; (80a50b0 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a5060:	4632      	mov	r2, r6
 80a5062:	4629      	mov	r1, r5
 80a5064:	e9c0 8501 	strd	r8, r5, [r0, #4]
 80a5068:	b086      	sub	sp, #24
 80a506a:	6003      	str	r3, [r0, #0]
 80a506c:	4604      	mov	r4, r0
 80a506e:	300c      	adds	r0, #12
 80a5070:	f001 fcc8 	bl	80a6a04 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a5074:	462a      	mov	r2, r5
 80a5076:	4629      	mov	r1, r5
 80a5078:	6878      	ldr	r0, [r7, #4]
 80a507a:	f7fe ff8d 	bl	80a3f98 <network_ready>
 80a507e:	b180      	cbz	r0, 80a50a2 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a5080:	4632      	mov	r2, r6
 80a5082:	4629      	mov	r1, r5
 80a5084:	4668      	mov	r0, sp
 80a5086:	f001 fcbd 	bl	80a6a04 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a508a:	462a      	mov	r2, r5
 80a508c:	4669      	mov	r1, sp
 80a508e:	4628      	mov	r0, r5
        info.size = sizeof(info);
 80a5090:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a5094:	f7fe feec 	bl	80a3e70 <wlan_connected_info>
        if (r == 0) {
 80a5098:	b938      	cbnz	r0, 80a50aa <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 80a509a:	4669      	mov	r1, sp
 80a509c:	4620      	mov	r0, r4
 80a509e:	f7ff ffb7 	bl	80a5010 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 80a50a2:	4620      	mov	r0, r4
 80a50a4:	b006      	add	sp, #24
 80a50a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 80a50aa:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 80a50ae:	e7f8      	b.n	80a50a2 <_ZN5spark9WiFiClass4RSSIEv+0x52>
 80a50b0:	080a9150 	.word	0x080a9150

080a50b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a50b4:	2204      	movs	r2, #4
 80a50b6:	4b02      	ldr	r3, [pc, #8]	; (80a50c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a50b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a50ba:	4a02      	ldr	r2, [pc, #8]	; (80a50c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a50bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a50be:	4770      	bx	lr
 80a50c0:	20000f84 	.word	0x20000f84
 80a50c4:	080a911c 	.word	0x080a911c

080a50c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a50c8:	2300      	movs	r3, #0
 80a50ca:	6840      	ldr	r0, [r0, #4]
 80a50cc:	461a      	mov	r2, r3
 80a50ce:	f7fe bf4b 	b.w	80a3f68 <network_connect>

080a50d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a50d2:	2200      	movs	r2, #0
 80a50d4:	2102      	movs	r1, #2
 80a50d6:	6840      	ldr	r0, [r0, #4]
 80a50d8:	f7fe bf56 	b.w	80a3f88 <network_disconnect>

080a50dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a50dc:	2200      	movs	r2, #0
 80a50de:	6840      	ldr	r0, [r0, #4]
 80a50e0:	4611      	mov	r1, r2
 80a50e2:	f7fe bf49 	b.w	80a3f78 <network_connecting>

080a50e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a50e6:	2200      	movs	r2, #0
 80a50e8:	6840      	ldr	r0, [r0, #4]
 80a50ea:	4611      	mov	r1, r2
 80a50ec:	f7fe bf54 	b.w	80a3f98 <network_ready>

080a50f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a50f0:	2300      	movs	r3, #0
 80a50f2:	6840      	ldr	r0, [r0, #4]
 80a50f4:	461a      	mov	r2, r3
 80a50f6:	4619      	mov	r1, r3
 80a50f8:	f7fe bf56 	b.w	80a3fa8 <network_on>

080a50fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a50fc:	2300      	movs	r3, #0
 80a50fe:	6840      	ldr	r0, [r0, #4]
 80a5100:	461a      	mov	r2, r3
 80a5102:	4619      	mov	r1, r3
 80a5104:	f7fe bf58 	b.w	80a3fb8 <network_off>

080a5108 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a5108:	2200      	movs	r2, #0
 80a510a:	6840      	ldr	r0, [r0, #4]
 80a510c:	f081 0101 	eor.w	r1, r1, #1
 80a5110:	f7fe bf5a 	b.w	80a3fc8 <network_listen>

080a5114 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a5114:	2200      	movs	r2, #0
 80a5116:	6840      	ldr	r0, [r0, #4]
 80a5118:	f7fe bf66 	b.w	80a3fe8 <network_set_listen_timeout>

080a511c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a511c:	2200      	movs	r2, #0
 80a511e:	6840      	ldr	r0, [r0, #4]
 80a5120:	4611      	mov	r1, r2
 80a5122:	f7fe bf69 	b.w	80a3ff8 <network_get_listen_timeout>

080a5126 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a5126:	2200      	movs	r2, #0
 80a5128:	6840      	ldr	r0, [r0, #4]
 80a512a:	4611      	mov	r1, r2
 80a512c:	f7fe bf54 	b.w	80a3fd8 <network_listening>

080a5130 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a5130:	b570      	push	{r4, r5, r6, lr}
 80a5132:	4615      	mov	r5, r2
 80a5134:	b08e      	sub	sp, #56	; 0x38
 80a5136:	4604      	mov	r4, r0
    IPAddress addr;
 80a5138:	a808      	add	r0, sp, #32
 80a513a:	f7ff fce1 	bl	80a4b00 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a513e:	2211      	movs	r2, #17
 80a5140:	2100      	movs	r1, #0
 80a5142:	a803      	add	r0, sp, #12
 80a5144:	f001 fc5e 	bl	80a6a04 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5148:	2600      	movs	r6, #0
 80a514a:	4628      	mov	r0, r5
 80a514c:	f001 fcb3 	bl	80a6ab6 <strlen>
 80a5150:	4b0a      	ldr	r3, [pc, #40]	; (80a517c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a5152:	9600      	str	r6, [sp, #0]
 80a5154:	b281      	uxth	r1, r0
 80a5156:	685b      	ldr	r3, [r3, #4]
 80a5158:	4628      	mov	r0, r5
 80a515a:	aa03      	add	r2, sp, #12
 80a515c:	f7fe fe78 	bl	80a3e50 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5160:	b130      	cbz	r0, 80a5170 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a5162:	4631      	mov	r1, r6
 80a5164:	4620      	mov	r0, r4
 80a5166:	f7ff fceb 	bl	80a4b40 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a516a:	4620      	mov	r0, r4
 80a516c:	b00e      	add	sp, #56	; 0x38
 80a516e:	bd70      	pop	{r4, r5, r6, pc}
 80a5170:	4620      	mov	r0, r4
 80a5172:	a903      	add	r1, sp, #12
 80a5174:	f7ff fcd2 	bl	80a4b1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a5178:	e7f7      	b.n	80a516a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a517a:	bf00      	nop
 80a517c:	20000f84 	.word	0x20000f84

080a5180 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a5180:	4b02      	ldr	r3, [pc, #8]	; (80a518c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a5182:	4a03      	ldr	r2, [pc, #12]	; (80a5190 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a5184:	601a      	str	r2, [r3, #0]
 80a5186:	2200      	movs	r2, #0
 80a5188:	605a      	str	r2, [r3, #4]

} // spark
 80a518a:	4770      	bx	lr
 80a518c:	20000f8c 	.word	0x20000f8c
 80a5190:	080a9174 	.word	0x080a9174

080a5194 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a5194:	b510      	push	{r4, lr}
 80a5196:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a5198:	6880      	ldr	r0, [r0, #8]
 80a519a:	b108      	cbz	r0, 80a51a0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a519c:	f7fe fd96 	bl	80a3ccc <os_mutex_recursive_destroy>
 80a51a0:	4620      	mov	r0, r4
 80a51a2:	bd10      	pop	{r4, pc}

080a51a4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a51a4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a51a6:	b570      	push	{r4, r5, r6, lr}
 80a51a8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a51aa:	d901      	bls.n	80a51b0 <pinAvailable+0xc>
    return false;
 80a51ac:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a51ae:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a51b0:	f1a0 030d 	sub.w	r3, r0, #13
 80a51b4:	2b02      	cmp	r3, #2
 80a51b6:	d90b      	bls.n	80a51d0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a51b8:	2801      	cmp	r0, #1
 80a51ba:	d826      	bhi.n	80a520a <pinAvailable+0x66>
 80a51bc:	f000 f8d2 	bl	80a5364 <_Z19__fetch_global_Wirev>
 80a51c0:	2100      	movs	r1, #0
 80a51c2:	7c00      	ldrb	r0, [r0, #16]
 80a51c4:	f7fe fdf2 	bl	80a3dac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a51c8:	f080 0001 	eor.w	r0, r0, #1
 80a51cc:	b2c0      	uxtb	r0, r0
 80a51ce:	e7ee      	b.n	80a51ae <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a51d0:	4e13      	ldr	r6, [pc, #76]	; (80a5220 <pinAvailable+0x7c>)
 80a51d2:	7831      	ldrb	r1, [r6, #0]
 80a51d4:	f3bf 8f5b 	dmb	ish
 80a51d8:	f011 0501 	ands.w	r5, r1, #1
 80a51dc:	d10f      	bne.n	80a51fe <pinAvailable+0x5a>
 80a51de:	4630      	mov	r0, r6
 80a51e0:	f7fa ff61 	bl	80a00a6 <__cxa_guard_acquire>
 80a51e4:	b158      	cbz	r0, 80a51fe <pinAvailable+0x5a>
 80a51e6:	4629      	mov	r1, r5
 80a51e8:	480e      	ldr	r0, [pc, #56]	; (80a5224 <pinAvailable+0x80>)
 80a51ea:	f7fe ff75 	bl	80a40d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a51ee:	4630      	mov	r0, r6
 80a51f0:	f7fa ff5e 	bl	80a00b0 <__cxa_guard_release>
 80a51f4:	4a0c      	ldr	r2, [pc, #48]	; (80a5228 <pinAvailable+0x84>)
 80a51f6:	490d      	ldr	r1, [pc, #52]	; (80a522c <pinAvailable+0x88>)
 80a51f8:	480a      	ldr	r0, [pc, #40]	; (80a5224 <pinAvailable+0x80>)
 80a51fa:	f000 f8db 	bl	80a53b4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a51fe:	4b09      	ldr	r3, [pc, #36]	; (80a5224 <pinAvailable+0x80>)
 80a5200:	7818      	ldrb	r0, [r3, #0]
 80a5202:	f7fe fded 	bl	80a3de0 <hal_spi_is_enabled>
 80a5206:	2800      	cmp	r0, #0
 80a5208:	d1d0      	bne.n	80a51ac <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a520a:	3c12      	subs	r4, #18
 80a520c:	2c01      	cmp	r4, #1
 80a520e:	d805      	bhi.n	80a521c <pinAvailable+0x78>
 80a5210:	f7ff fdd6 	bl	80a4dc0 <_Z22__fetch_global_Serial1v>
 80a5214:	7c00      	ldrb	r0, [r0, #16]
 80a5216:	f7fe fd91 	bl	80a3d3c <hal_usart_is_enabled>
 80a521a:	e7d5      	b.n	80a51c8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a521c:	2001      	movs	r0, #1
 80a521e:	e7c6      	b.n	80a51ae <pinAvailable+0xa>
 80a5220:	20000f94 	.word	0x20000f94
 80a5224:	20000f98 	.word	0x20000f98
 80a5228:	20000240 	.word	0x20000240
 80a522c:	080a5195 	.word	0x080a5195

080a5230 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5230:	2817      	cmp	r0, #23
{
 80a5232:	b538      	push	{r3, r4, r5, lr}
 80a5234:	4604      	mov	r4, r0
 80a5236:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5238:	d80a      	bhi.n	80a5250 <pinMode+0x20>
 80a523a:	29ff      	cmp	r1, #255	; 0xff
 80a523c:	d008      	beq.n	80a5250 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a523e:	f7ff ffb1 	bl	80a51a4 <pinAvailable>
 80a5242:	b128      	cbz	r0, 80a5250 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a5244:	4629      	mov	r1, r5
 80a5246:	4620      	mov	r0, r4
}
 80a5248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a524c:	f7fe bcc6 	b.w	80a3bdc <HAL_Pin_Mode>
}
 80a5250:	bd38      	pop	{r3, r4, r5, pc}

080a5252 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a5252:	b538      	push	{r3, r4, r5, lr}
 80a5254:	4604      	mov	r4, r0
 80a5256:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5258:	f7fe fcc8 	bl	80a3bec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a525c:	28ff      	cmp	r0, #255	; 0xff
 80a525e:	d010      	beq.n	80a5282 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a5260:	2806      	cmp	r0, #6
 80a5262:	d804      	bhi.n	80a526e <digitalWrite+0x1c>
 80a5264:	234d      	movs	r3, #77	; 0x4d
 80a5266:	fa23 f000 	lsr.w	r0, r3, r0
 80a526a:	07c3      	lsls	r3, r0, #31
 80a526c:	d409      	bmi.n	80a5282 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a526e:	4620      	mov	r0, r4
 80a5270:	f7ff ff98 	bl	80a51a4 <pinAvailable>
 80a5274:	b128      	cbz	r0, 80a5282 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a5276:	4629      	mov	r1, r5
 80a5278:	4620      	mov	r0, r4
}
 80a527a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a527e:	f7fe bcbd 	b.w	80a3bfc <HAL_GPIO_Write>
}
 80a5282:	bd38      	pop	{r3, r4, r5, pc}

080a5284 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a5284:	b510      	push	{r4, lr}
 80a5286:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5288:	f7fe fcb0 	bl	80a3bec <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a528c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a528e:	b2db      	uxtb	r3, r3
 80a5290:	2b01      	cmp	r3, #1
 80a5292:	d908      	bls.n	80a52a6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5294:	4620      	mov	r0, r4
 80a5296:	f7ff ff85 	bl	80a51a4 <pinAvailable>
 80a529a:	b120      	cbz	r0, 80a52a6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a529c:	4620      	mov	r0, r4
}
 80a529e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a52a2:	f7fe bcb3 	b.w	80a3c0c <HAL_GPIO_Read>
}
 80a52a6:	2000      	movs	r0, #0
 80a52a8:	bd10      	pop	{r4, pc}

080a52aa <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a52aa:	b510      	push	{r4, lr}
 80a52ac:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a52ae:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a52b0:	bf9c      	itt	ls
 80a52b2:	340a      	addls	r4, #10
 80a52b4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a52b6:	4620      	mov	r0, r4
 80a52b8:	f7ff ff74 	bl	80a51a4 <pinAvailable>
 80a52bc:	b150      	cbz	r0, 80a52d4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a52be:	2103      	movs	r1, #3
 80a52c0:	4620      	mov	r0, r4
 80a52c2:	f7fe fc83 	bl	80a3bcc <HAL_Validate_Pin_Function>
 80a52c6:	2803      	cmp	r0, #3
 80a52c8:	d104      	bne.n	80a52d4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a52ca:	4620      	mov	r0, r4
}
 80a52cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a52d0:	f7fe bca4 	b.w	80a3c1c <hal_adc_read>
}
 80a52d4:	2000      	movs	r0, #0
 80a52d6:	bd10      	pop	{r4, pc}

080a52d8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a52d8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a52da:	4c08      	ldr	r4, [pc, #32]	; (80a52fc <_Z21__fetch_global_EEPROMv+0x24>)
 80a52dc:	7823      	ldrb	r3, [r4, #0]
 80a52de:	f3bf 8f5b 	dmb	ish
 80a52e2:	07db      	lsls	r3, r3, #31
 80a52e4:	d408      	bmi.n	80a52f8 <_Z21__fetch_global_EEPROMv+0x20>
 80a52e6:	4620      	mov	r0, r4
 80a52e8:	f7fa fedd 	bl	80a00a6 <__cxa_guard_acquire>
 80a52ec:	b120      	cbz	r0, 80a52f8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a52ee:	f7fe fcb5 	bl	80a3c5c <HAL_EEPROM_Init>
 80a52f2:	4620      	mov	r0, r4
 80a52f4:	f7fa fedc 	bl	80a00b0 <__cxa_guard_release>
	return eeprom;
}
 80a52f8:	4801      	ldr	r0, [pc, #4]	; (80a5300 <_Z21__fetch_global_EEPROMv+0x28>)
 80a52fa:	bd10      	pop	{r4, pc}
 80a52fc:	20000fa8 	.word	0x20000fa8
 80a5300:	20000fac 	.word	0x20000fac

080a5304 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5304:	2300      	movs	r3, #0
 80a5306:	b513      	push	{r0, r1, r4, lr}
 80a5308:	4c07      	ldr	r4, [pc, #28]	; (80a5328 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a530a:	461a      	mov	r2, r3
 80a530c:	4619      	mov	r1, r3
 80a530e:	4620      	mov	r0, r4
 80a5310:	9300      	str	r3, [sp, #0]
 80a5312:	f7ff fc2b 	bl	80a4b6c <_ZN9IPAddressC1Ehhhh>
 80a5316:	4620      	mov	r0, r4
 80a5318:	4a04      	ldr	r2, [pc, #16]	; (80a532c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a531a:	4905      	ldr	r1, [pc, #20]	; (80a5330 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a531c:	b002      	add	sp, #8
 80a531e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a5322:	f000 b847 	b.w	80a53b4 <__aeabi_atexit>
 80a5326:	bf00      	nop
 80a5328:	20000fb0 	.word	0x20000fb0
 80a532c:	20000240 	.word	0x20000240
 80a5330:	080a4abd 	.word	0x080a4abd

080a5334 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a5334:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a5336:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a5338:	2520      	movs	r5, #32
 80a533a:	8043      	strh	r3, [r0, #2]
 80a533c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a533e:	4e08      	ldr	r6, [pc, #32]	; (80a5360 <_Z17acquireWireBufferv+0x2c>)
{
 80a5340:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a5342:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5344:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a5346:	6085      	str	r5, [r0, #8]
 80a5348:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a534a:	4628      	mov	r0, r5
 80a534c:	f000 f839 	bl	80a53c2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5350:	4631      	mov	r1, r6
	};
 80a5352:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5354:	4628      	mov	r0, r5
 80a5356:	f000 f834 	bl	80a53c2 <_ZnajRKSt9nothrow_t>
	};
 80a535a:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a535c:	4620      	mov	r0, r4
 80a535e:	bd70      	pop	{r4, r5, r6, pc}
 80a5360:	080a91a0 	.word	0x080a91a0

080a5364 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5364:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5366:	4d0f      	ldr	r5, [pc, #60]	; (80a53a4 <_Z19__fetch_global_Wirev+0x40>)
{
 80a5368:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a536a:	7829      	ldrb	r1, [r5, #0]
 80a536c:	f3bf 8f5b 	dmb	ish
 80a5370:	f011 0401 	ands.w	r4, r1, #1
 80a5374:	d113      	bne.n	80a539e <_Z19__fetch_global_Wirev+0x3a>
 80a5376:	4628      	mov	r0, r5
 80a5378:	f7fa fe95 	bl	80a00a6 <__cxa_guard_acquire>
 80a537c:	b178      	cbz	r0, 80a539e <_Z19__fetch_global_Wirev+0x3a>
 80a537e:	a801      	add	r0, sp, #4
 80a5380:	f7ff ffd8 	bl	80a5334 <_Z17acquireWireBufferv>
 80a5384:	4621      	mov	r1, r4
 80a5386:	aa01      	add	r2, sp, #4
 80a5388:	4807      	ldr	r0, [pc, #28]	; (80a53a8 <_Z19__fetch_global_Wirev+0x44>)
 80a538a:	f7ff fd81 	bl	80a4e90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a538e:	4628      	mov	r0, r5
 80a5390:	f7fa fe8e 	bl	80a00b0 <__cxa_guard_release>
 80a5394:	4a05      	ldr	r2, [pc, #20]	; (80a53ac <_Z19__fetch_global_Wirev+0x48>)
 80a5396:	4906      	ldr	r1, [pc, #24]	; (80a53b0 <_Z19__fetch_global_Wirev+0x4c>)
 80a5398:	4803      	ldr	r0, [pc, #12]	; (80a53a8 <_Z19__fetch_global_Wirev+0x44>)
 80a539a:	f000 f80b 	bl	80a53b4 <__aeabi_atexit>
	return wire;
}
 80a539e:	4802      	ldr	r0, [pc, #8]	; (80a53a8 <_Z19__fetch_global_Wirev+0x44>)
 80a53a0:	b007      	add	sp, #28
 80a53a2:	bd30      	pop	{r4, r5, pc}
 80a53a4:	20000fc8 	.word	0x20000fc8
 80a53a8:	20000fcc 	.word	0x20000fcc
 80a53ac:	20000240 	.word	0x20000240
 80a53b0:	080a4e39 	.word	0x080a4e39

080a53b4 <__aeabi_atexit>:
 80a53b4:	460b      	mov	r3, r1
 80a53b6:	4601      	mov	r1, r0
 80a53b8:	4618      	mov	r0, r3
 80a53ba:	f001 ba11 	b.w	80a67e0 <__cxa_atexit>

080a53be <_ZdlPvj>:
 80a53be:	f7fa be70 	b.w	80a00a2 <_ZdlPv>

080a53c2 <_ZnajRKSt9nothrow_t>:
 80a53c2:	f7fa be6c 	b.w	80a009e <_Znaj>

080a53c6 <_ZSt25__throw_bad_function_callv>:
 80a53c6:	b508      	push	{r3, lr}
 80a53c8:	f7fe fe6e 	bl	80a40a8 <abort>

080a53cc <round>:
 80a53cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a53ce:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80a53d2:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80a53d6:	2c13      	cmp	r4, #19
 80a53d8:	4606      	mov	r6, r0
 80a53da:	460b      	mov	r3, r1
 80a53dc:	460d      	mov	r5, r1
 80a53de:	4602      	mov	r2, r0
 80a53e0:	dc0f      	bgt.n	80a5402 <round+0x36>
 80a53e2:	2c00      	cmp	r4, #0
 80a53e4:	db2a      	blt.n	80a543c <round+0x70>
 80a53e6:	491c      	ldr	r1, [pc, #112]	; (80a5458 <round+0x8c>)
 80a53e8:	4121      	asrs	r1, r4
 80a53ea:	ea03 0001 	and.w	r0, r3, r1
 80a53ee:	4330      	orrs	r0, r6
 80a53f0:	d02f      	beq.n	80a5452 <round+0x86>
 80a53f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a53f6:	4123      	asrs	r3, r4
 80a53f8:	441d      	add	r5, r3
 80a53fa:	ea25 0501 	bic.w	r5, r5, r1
 80a53fe:	2300      	movs	r3, #0
 80a5400:	e025      	b.n	80a544e <round+0x82>
 80a5402:	2c33      	cmp	r4, #51	; 0x33
 80a5404:	dd07      	ble.n	80a5416 <round+0x4a>
 80a5406:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80a540a:	d122      	bne.n	80a5452 <round+0x86>
 80a540c:	f000 f82c 	bl	80a5468 <__adddf3>
 80a5410:	4602      	mov	r2, r0
 80a5412:	460b      	mov	r3, r1
 80a5414:	e01d      	b.n	80a5452 <round+0x86>
 80a5416:	f04f 31ff 	mov.w	r1, #4294967295
 80a541a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80a541e:	fa21 f707 	lsr.w	r7, r1, r7
 80a5422:	4238      	tst	r0, r7
 80a5424:	d015      	beq.n	80a5452 <round+0x86>
 80a5426:	2201      	movs	r2, #1
 80a5428:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
 80a542c:	fa02 f303 	lsl.w	r3, r2, r3
 80a5430:	18c3      	adds	r3, r0, r3
 80a5432:	bf28      	it	cs
 80a5434:	18ad      	addcs	r5, r5, r2
 80a5436:	ea23 0307 	bic.w	r3, r3, r7
 80a543a:	e008      	b.n	80a544e <round+0x82>
 80a543c:	2300      	movs	r3, #0
 80a543e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5442:	3401      	adds	r4, #1
 80a5444:	bf04      	itt	eq
 80a5446:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 80a544a:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
 80a544e:	461a      	mov	r2, r3
 80a5450:	462b      	mov	r3, r5
 80a5452:	4610      	mov	r0, r2
 80a5454:	4619      	mov	r1, r3
 80a5456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5458:	000fffff 	.word	0x000fffff

080a545c <__aeabi_drsub>:
 80a545c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5460:	e002      	b.n	80a5468 <__adddf3>
 80a5462:	bf00      	nop

080a5464 <__aeabi_dsub>:
 80a5464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5468 <__adddf3>:
 80a5468:	b530      	push	{r4, r5, lr}
 80a546a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a546e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a5472:	ea94 0f05 	teq	r4, r5
 80a5476:	bf08      	it	eq
 80a5478:	ea90 0f02 	teqeq	r0, r2
 80a547c:	bf1f      	itttt	ne
 80a547e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a5482:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a5486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a548a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a548e:	f000 80e2 	beq.w	80a5656 <__adddf3+0x1ee>
 80a5492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a5496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a549a:	bfb8      	it	lt
 80a549c:	426d      	neglt	r5, r5
 80a549e:	dd0c      	ble.n	80a54ba <__adddf3+0x52>
 80a54a0:	442c      	add	r4, r5
 80a54a2:	ea80 0202 	eor.w	r2, r0, r2
 80a54a6:	ea81 0303 	eor.w	r3, r1, r3
 80a54aa:	ea82 0000 	eor.w	r0, r2, r0
 80a54ae:	ea83 0101 	eor.w	r1, r3, r1
 80a54b2:	ea80 0202 	eor.w	r2, r0, r2
 80a54b6:	ea81 0303 	eor.w	r3, r1, r3
 80a54ba:	2d36      	cmp	r5, #54	; 0x36
 80a54bc:	bf88      	it	hi
 80a54be:	bd30      	pophi	{r4, r5, pc}
 80a54c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a54c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a54c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a54cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a54d0:	d002      	beq.n	80a54d8 <__adddf3+0x70>
 80a54d2:	4240      	negs	r0, r0
 80a54d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a54d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a54dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a54e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a54e4:	d002      	beq.n	80a54ec <__adddf3+0x84>
 80a54e6:	4252      	negs	r2, r2
 80a54e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a54ec:	ea94 0f05 	teq	r4, r5
 80a54f0:	f000 80a7 	beq.w	80a5642 <__adddf3+0x1da>
 80a54f4:	f1a4 0401 	sub.w	r4, r4, #1
 80a54f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a54fc:	db0d      	blt.n	80a551a <__adddf3+0xb2>
 80a54fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a5502:	fa22 f205 	lsr.w	r2, r2, r5
 80a5506:	1880      	adds	r0, r0, r2
 80a5508:	f141 0100 	adc.w	r1, r1, #0
 80a550c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5510:	1880      	adds	r0, r0, r2
 80a5512:	fa43 f305 	asr.w	r3, r3, r5
 80a5516:	4159      	adcs	r1, r3
 80a5518:	e00e      	b.n	80a5538 <__adddf3+0xd0>
 80a551a:	f1a5 0520 	sub.w	r5, r5, #32
 80a551e:	f10e 0e20 	add.w	lr, lr, #32
 80a5522:	2a01      	cmp	r2, #1
 80a5524:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5528:	bf28      	it	cs
 80a552a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a552e:	fa43 f305 	asr.w	r3, r3, r5
 80a5532:	18c0      	adds	r0, r0, r3
 80a5534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a553c:	d507      	bpl.n	80a554e <__adddf3+0xe6>
 80a553e:	f04f 0e00 	mov.w	lr, #0
 80a5542:	f1dc 0c00 	rsbs	ip, ip, #0
 80a5546:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a554a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a554e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a5552:	d31b      	bcc.n	80a558c <__adddf3+0x124>
 80a5554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5558:	d30c      	bcc.n	80a5574 <__adddf3+0x10c>
 80a555a:	0849      	lsrs	r1, r1, #1
 80a555c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5564:	f104 0401 	add.w	r4, r4, #1
 80a5568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a556c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5570:	f080 809a 	bcs.w	80a56a8 <__adddf3+0x240>
 80a5574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5578:	bf08      	it	eq
 80a557a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a557e:	f150 0000 	adcs.w	r0, r0, #0
 80a5582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5586:	ea41 0105 	orr.w	r1, r1, r5
 80a558a:	bd30      	pop	{r4, r5, pc}
 80a558c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5590:	4140      	adcs	r0, r0
 80a5592:	eb41 0101 	adc.w	r1, r1, r1
 80a5596:	3c01      	subs	r4, #1
 80a5598:	bf28      	it	cs
 80a559a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a559e:	d2e9      	bcs.n	80a5574 <__adddf3+0x10c>
 80a55a0:	f091 0f00 	teq	r1, #0
 80a55a4:	bf04      	itt	eq
 80a55a6:	4601      	moveq	r1, r0
 80a55a8:	2000      	moveq	r0, #0
 80a55aa:	fab1 f381 	clz	r3, r1
 80a55ae:	bf08      	it	eq
 80a55b0:	3320      	addeq	r3, #32
 80a55b2:	f1a3 030b 	sub.w	r3, r3, #11
 80a55b6:	f1b3 0220 	subs.w	r2, r3, #32
 80a55ba:	da0c      	bge.n	80a55d6 <__adddf3+0x16e>
 80a55bc:	320c      	adds	r2, #12
 80a55be:	dd08      	ble.n	80a55d2 <__adddf3+0x16a>
 80a55c0:	f102 0c14 	add.w	ip, r2, #20
 80a55c4:	f1c2 020c 	rsb	r2, r2, #12
 80a55c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a55cc:	fa21 f102 	lsr.w	r1, r1, r2
 80a55d0:	e00c      	b.n	80a55ec <__adddf3+0x184>
 80a55d2:	f102 0214 	add.w	r2, r2, #20
 80a55d6:	bfd8      	it	le
 80a55d8:	f1c2 0c20 	rsble	ip, r2, #32
 80a55dc:	fa01 f102 	lsl.w	r1, r1, r2
 80a55e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a55e4:	bfdc      	itt	le
 80a55e6:	ea41 010c 	orrle.w	r1, r1, ip
 80a55ea:	4090      	lslle	r0, r2
 80a55ec:	1ae4      	subs	r4, r4, r3
 80a55ee:	bfa2      	ittt	ge
 80a55f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a55f4:	4329      	orrge	r1, r5
 80a55f6:	bd30      	popge	{r4, r5, pc}
 80a55f8:	ea6f 0404 	mvn.w	r4, r4
 80a55fc:	3c1f      	subs	r4, #31
 80a55fe:	da1c      	bge.n	80a563a <__adddf3+0x1d2>
 80a5600:	340c      	adds	r4, #12
 80a5602:	dc0e      	bgt.n	80a5622 <__adddf3+0x1ba>
 80a5604:	f104 0414 	add.w	r4, r4, #20
 80a5608:	f1c4 0220 	rsb	r2, r4, #32
 80a560c:	fa20 f004 	lsr.w	r0, r0, r4
 80a5610:	fa01 f302 	lsl.w	r3, r1, r2
 80a5614:	ea40 0003 	orr.w	r0, r0, r3
 80a5618:	fa21 f304 	lsr.w	r3, r1, r4
 80a561c:	ea45 0103 	orr.w	r1, r5, r3
 80a5620:	bd30      	pop	{r4, r5, pc}
 80a5622:	f1c4 040c 	rsb	r4, r4, #12
 80a5626:	f1c4 0220 	rsb	r2, r4, #32
 80a562a:	fa20 f002 	lsr.w	r0, r0, r2
 80a562e:	fa01 f304 	lsl.w	r3, r1, r4
 80a5632:	ea40 0003 	orr.w	r0, r0, r3
 80a5636:	4629      	mov	r1, r5
 80a5638:	bd30      	pop	{r4, r5, pc}
 80a563a:	fa21 f004 	lsr.w	r0, r1, r4
 80a563e:	4629      	mov	r1, r5
 80a5640:	bd30      	pop	{r4, r5, pc}
 80a5642:	f094 0f00 	teq	r4, #0
 80a5646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a564a:	bf06      	itte	eq
 80a564c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5650:	3401      	addeq	r4, #1
 80a5652:	3d01      	subne	r5, #1
 80a5654:	e74e      	b.n	80a54f4 <__adddf3+0x8c>
 80a5656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a565a:	bf18      	it	ne
 80a565c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5660:	d029      	beq.n	80a56b6 <__adddf3+0x24e>
 80a5662:	ea94 0f05 	teq	r4, r5
 80a5666:	bf08      	it	eq
 80a5668:	ea90 0f02 	teqeq	r0, r2
 80a566c:	d005      	beq.n	80a567a <__adddf3+0x212>
 80a566e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a5672:	bf04      	itt	eq
 80a5674:	4619      	moveq	r1, r3
 80a5676:	4610      	moveq	r0, r2
 80a5678:	bd30      	pop	{r4, r5, pc}
 80a567a:	ea91 0f03 	teq	r1, r3
 80a567e:	bf1e      	ittt	ne
 80a5680:	2100      	movne	r1, #0
 80a5682:	2000      	movne	r0, #0
 80a5684:	bd30      	popne	{r4, r5, pc}
 80a5686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a568a:	d105      	bne.n	80a5698 <__adddf3+0x230>
 80a568c:	0040      	lsls	r0, r0, #1
 80a568e:	4149      	adcs	r1, r1
 80a5690:	bf28      	it	cs
 80a5692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5696:	bd30      	pop	{r4, r5, pc}
 80a5698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a569c:	bf3c      	itt	cc
 80a569e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a56a2:	bd30      	popcc	{r4, r5, pc}
 80a56a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a56a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a56ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a56b0:	f04f 0000 	mov.w	r0, #0
 80a56b4:	bd30      	pop	{r4, r5, pc}
 80a56b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a56ba:	bf1a      	itte	ne
 80a56bc:	4619      	movne	r1, r3
 80a56be:	4610      	movne	r0, r2
 80a56c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a56c4:	bf1c      	itt	ne
 80a56c6:	460b      	movne	r3, r1
 80a56c8:	4602      	movne	r2, r0
 80a56ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a56ce:	bf06      	itte	eq
 80a56d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a56d4:	ea91 0f03 	teqeq	r1, r3
 80a56d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a56dc:	bd30      	pop	{r4, r5, pc}
 80a56de:	bf00      	nop

080a56e0 <__aeabi_ui2d>:
 80a56e0:	f090 0f00 	teq	r0, #0
 80a56e4:	bf04      	itt	eq
 80a56e6:	2100      	moveq	r1, #0
 80a56e8:	4770      	bxeq	lr
 80a56ea:	b530      	push	{r4, r5, lr}
 80a56ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a56f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a56f4:	f04f 0500 	mov.w	r5, #0
 80a56f8:	f04f 0100 	mov.w	r1, #0
 80a56fc:	e750      	b.n	80a55a0 <__adddf3+0x138>
 80a56fe:	bf00      	nop

080a5700 <__aeabi_i2d>:
 80a5700:	f090 0f00 	teq	r0, #0
 80a5704:	bf04      	itt	eq
 80a5706:	2100      	moveq	r1, #0
 80a5708:	4770      	bxeq	lr
 80a570a:	b530      	push	{r4, r5, lr}
 80a570c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5718:	bf48      	it	mi
 80a571a:	4240      	negmi	r0, r0
 80a571c:	f04f 0100 	mov.w	r1, #0
 80a5720:	e73e      	b.n	80a55a0 <__adddf3+0x138>
 80a5722:	bf00      	nop

080a5724 <__aeabi_f2d>:
 80a5724:	0042      	lsls	r2, r0, #1
 80a5726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a572a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a572e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a5732:	bf1f      	itttt	ne
 80a5734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a573c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a5740:	4770      	bxne	lr
 80a5742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a5746:	bf08      	it	eq
 80a5748:	4770      	bxeq	lr
 80a574a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a574e:	bf04      	itt	eq
 80a5750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a5754:	4770      	bxeq	lr
 80a5756:	b530      	push	{r4, r5, lr}
 80a5758:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a575c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5764:	e71c      	b.n	80a55a0 <__adddf3+0x138>
 80a5766:	bf00      	nop

080a5768 <__aeabi_ul2d>:
 80a5768:	ea50 0201 	orrs.w	r2, r0, r1
 80a576c:	bf08      	it	eq
 80a576e:	4770      	bxeq	lr
 80a5770:	b530      	push	{r4, r5, lr}
 80a5772:	f04f 0500 	mov.w	r5, #0
 80a5776:	e00a      	b.n	80a578e <__aeabi_l2d+0x16>

080a5778 <__aeabi_l2d>:
 80a5778:	ea50 0201 	orrs.w	r2, r0, r1
 80a577c:	bf08      	it	eq
 80a577e:	4770      	bxeq	lr
 80a5780:	b530      	push	{r4, r5, lr}
 80a5782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a5786:	d502      	bpl.n	80a578e <__aeabi_l2d+0x16>
 80a5788:	4240      	negs	r0, r0
 80a578a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a578e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a579a:	f43f aed8 	beq.w	80a554e <__adddf3+0xe6>
 80a579e:	f04f 0203 	mov.w	r2, #3
 80a57a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a57a6:	bf18      	it	ne
 80a57a8:	3203      	addne	r2, #3
 80a57aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a57ae:	bf18      	it	ne
 80a57b0:	3203      	addne	r2, #3
 80a57b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a57b6:	f1c2 0320 	rsb	r3, r2, #32
 80a57ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80a57be:	fa20 f002 	lsr.w	r0, r0, r2
 80a57c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a57c6:	ea40 000e 	orr.w	r0, r0, lr
 80a57ca:	fa21 f102 	lsr.w	r1, r1, r2
 80a57ce:	4414      	add	r4, r2
 80a57d0:	e6bd      	b.n	80a554e <__adddf3+0xe6>
 80a57d2:	bf00      	nop

080a57d4 <__aeabi_dmul>:
 80a57d4:	b570      	push	{r4, r5, r6, lr}
 80a57d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a57da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a57de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a57e2:	bf1d      	ittte	ne
 80a57e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a57e8:	ea94 0f0c 	teqne	r4, ip
 80a57ec:	ea95 0f0c 	teqne	r5, ip
 80a57f0:	f000 f8de 	bleq	80a59b0 <__aeabi_dmul+0x1dc>
 80a57f4:	442c      	add	r4, r5
 80a57f6:	ea81 0603 	eor.w	r6, r1, r3
 80a57fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a57fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5802:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5806:	bf18      	it	ne
 80a5808:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a580c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5814:	d038      	beq.n	80a5888 <__aeabi_dmul+0xb4>
 80a5816:	fba0 ce02 	umull	ip, lr, r0, r2
 80a581a:	f04f 0500 	mov.w	r5, #0
 80a581e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5822:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5826:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a582a:	f04f 0600 	mov.w	r6, #0
 80a582e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5832:	f09c 0f00 	teq	ip, #0
 80a5836:	bf18      	it	ne
 80a5838:	f04e 0e01 	orrne.w	lr, lr, #1
 80a583c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5840:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5844:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5848:	d204      	bcs.n	80a5854 <__aeabi_dmul+0x80>
 80a584a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a584e:	416d      	adcs	r5, r5
 80a5850:	eb46 0606 	adc.w	r6, r6, r6
 80a5854:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5858:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a585c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5860:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5864:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5868:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a586c:	bf88      	it	hi
 80a586e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5872:	d81e      	bhi.n	80a58b2 <__aeabi_dmul+0xde>
 80a5874:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5878:	bf08      	it	eq
 80a587a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a587e:	f150 0000 	adcs.w	r0, r0, #0
 80a5882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5886:	bd70      	pop	{r4, r5, r6, pc}
 80a5888:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a588c:	ea46 0101 	orr.w	r1, r6, r1
 80a5890:	ea40 0002 	orr.w	r0, r0, r2
 80a5894:	ea81 0103 	eor.w	r1, r1, r3
 80a5898:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a589c:	bfc2      	ittt	gt
 80a589e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a58a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a58a6:	bd70      	popgt	{r4, r5, r6, pc}
 80a58a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a58ac:	f04f 0e00 	mov.w	lr, #0
 80a58b0:	3c01      	subs	r4, #1
 80a58b2:	f300 80ab 	bgt.w	80a5a0c <__aeabi_dmul+0x238>
 80a58b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a58ba:	bfde      	ittt	le
 80a58bc:	2000      	movle	r0, #0
 80a58be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a58c2:	bd70      	pople	{r4, r5, r6, pc}
 80a58c4:	f1c4 0400 	rsb	r4, r4, #0
 80a58c8:	3c20      	subs	r4, #32
 80a58ca:	da35      	bge.n	80a5938 <__aeabi_dmul+0x164>
 80a58cc:	340c      	adds	r4, #12
 80a58ce:	dc1b      	bgt.n	80a5908 <__aeabi_dmul+0x134>
 80a58d0:	f104 0414 	add.w	r4, r4, #20
 80a58d4:	f1c4 0520 	rsb	r5, r4, #32
 80a58d8:	fa00 f305 	lsl.w	r3, r0, r5
 80a58dc:	fa20 f004 	lsr.w	r0, r0, r4
 80a58e0:	fa01 f205 	lsl.w	r2, r1, r5
 80a58e4:	ea40 0002 	orr.w	r0, r0, r2
 80a58e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a58ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a58f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a58f4:	fa21 f604 	lsr.w	r6, r1, r4
 80a58f8:	eb42 0106 	adc.w	r1, r2, r6
 80a58fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5900:	bf08      	it	eq
 80a5902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5906:	bd70      	pop	{r4, r5, r6, pc}
 80a5908:	f1c4 040c 	rsb	r4, r4, #12
 80a590c:	f1c4 0520 	rsb	r5, r4, #32
 80a5910:	fa00 f304 	lsl.w	r3, r0, r4
 80a5914:	fa20 f005 	lsr.w	r0, r0, r5
 80a5918:	fa01 f204 	lsl.w	r2, r1, r4
 80a591c:	ea40 0002 	orr.w	r0, r0, r2
 80a5920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5924:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5928:	f141 0100 	adc.w	r1, r1, #0
 80a592c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5930:	bf08      	it	eq
 80a5932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5936:	bd70      	pop	{r4, r5, r6, pc}
 80a5938:	f1c4 0520 	rsb	r5, r4, #32
 80a593c:	fa00 f205 	lsl.w	r2, r0, r5
 80a5940:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5944:	fa20 f304 	lsr.w	r3, r0, r4
 80a5948:	fa01 f205 	lsl.w	r2, r1, r5
 80a594c:	ea43 0302 	orr.w	r3, r3, r2
 80a5950:	fa21 f004 	lsr.w	r0, r1, r4
 80a5954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5958:	fa21 f204 	lsr.w	r2, r1, r4
 80a595c:	ea20 0002 	bic.w	r0, r0, r2
 80a5960:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5968:	bf08      	it	eq
 80a596a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a596e:	bd70      	pop	{r4, r5, r6, pc}
 80a5970:	f094 0f00 	teq	r4, #0
 80a5974:	d10f      	bne.n	80a5996 <__aeabi_dmul+0x1c2>
 80a5976:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a597a:	0040      	lsls	r0, r0, #1
 80a597c:	eb41 0101 	adc.w	r1, r1, r1
 80a5980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5984:	bf08      	it	eq
 80a5986:	3c01      	subeq	r4, #1
 80a5988:	d0f7      	beq.n	80a597a <__aeabi_dmul+0x1a6>
 80a598a:	ea41 0106 	orr.w	r1, r1, r6
 80a598e:	f095 0f00 	teq	r5, #0
 80a5992:	bf18      	it	ne
 80a5994:	4770      	bxne	lr
 80a5996:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a599a:	0052      	lsls	r2, r2, #1
 80a599c:	eb43 0303 	adc.w	r3, r3, r3
 80a59a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a59a4:	bf08      	it	eq
 80a59a6:	3d01      	subeq	r5, #1
 80a59a8:	d0f7      	beq.n	80a599a <__aeabi_dmul+0x1c6>
 80a59aa:	ea43 0306 	orr.w	r3, r3, r6
 80a59ae:	4770      	bx	lr
 80a59b0:	ea94 0f0c 	teq	r4, ip
 80a59b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a59b8:	bf18      	it	ne
 80a59ba:	ea95 0f0c 	teqne	r5, ip
 80a59be:	d00c      	beq.n	80a59da <__aeabi_dmul+0x206>
 80a59c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a59c4:	bf18      	it	ne
 80a59c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a59ca:	d1d1      	bne.n	80a5970 <__aeabi_dmul+0x19c>
 80a59cc:	ea81 0103 	eor.w	r1, r1, r3
 80a59d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a59d4:	f04f 0000 	mov.w	r0, #0
 80a59d8:	bd70      	pop	{r4, r5, r6, pc}
 80a59da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a59de:	bf06      	itte	eq
 80a59e0:	4610      	moveq	r0, r2
 80a59e2:	4619      	moveq	r1, r3
 80a59e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a59e8:	d019      	beq.n	80a5a1e <__aeabi_dmul+0x24a>
 80a59ea:	ea94 0f0c 	teq	r4, ip
 80a59ee:	d102      	bne.n	80a59f6 <__aeabi_dmul+0x222>
 80a59f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a59f4:	d113      	bne.n	80a5a1e <__aeabi_dmul+0x24a>
 80a59f6:	ea95 0f0c 	teq	r5, ip
 80a59fa:	d105      	bne.n	80a5a08 <__aeabi_dmul+0x234>
 80a59fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5a00:	bf1c      	itt	ne
 80a5a02:	4610      	movne	r0, r2
 80a5a04:	4619      	movne	r1, r3
 80a5a06:	d10a      	bne.n	80a5a1e <__aeabi_dmul+0x24a>
 80a5a08:	ea81 0103 	eor.w	r1, r1, r3
 80a5a0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5a10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5a14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5a18:	f04f 0000 	mov.w	r0, #0
 80a5a1c:	bd70      	pop	{r4, r5, r6, pc}
 80a5a1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5a22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5a26:	bd70      	pop	{r4, r5, r6, pc}

080a5a28 <__aeabi_ddiv>:
 80a5a28:	b570      	push	{r4, r5, r6, lr}
 80a5a2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5a2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5a32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5a36:	bf1d      	ittte	ne
 80a5a38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5a3c:	ea94 0f0c 	teqne	r4, ip
 80a5a40:	ea95 0f0c 	teqne	r5, ip
 80a5a44:	f000 f8a7 	bleq	80a5b96 <__aeabi_ddiv+0x16e>
 80a5a48:	eba4 0405 	sub.w	r4, r4, r5
 80a5a4c:	ea81 0e03 	eor.w	lr, r1, r3
 80a5a50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5a54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5a58:	f000 8088 	beq.w	80a5b6c <__aeabi_ddiv+0x144>
 80a5a5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5a60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5a64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5a68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5a6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5a70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5a74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5a78:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5a7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5a80:	429d      	cmp	r5, r3
 80a5a82:	bf08      	it	eq
 80a5a84:	4296      	cmpeq	r6, r2
 80a5a86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5a8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5a8e:	d202      	bcs.n	80a5a96 <__aeabi_ddiv+0x6e>
 80a5a90:	085b      	lsrs	r3, r3, #1
 80a5a92:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5a96:	1ab6      	subs	r6, r6, r2
 80a5a98:	eb65 0503 	sbc.w	r5, r5, r3
 80a5a9c:	085b      	lsrs	r3, r3, #1
 80a5a9e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5aa2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5aa6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5aaa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5aae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5ab2:	bf22      	ittt	cs
 80a5ab4:	1ab6      	subcs	r6, r6, r2
 80a5ab6:	4675      	movcs	r5, lr
 80a5ab8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5abc:	085b      	lsrs	r3, r3, #1
 80a5abe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5ac2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5ac6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5aca:	bf22      	ittt	cs
 80a5acc:	1ab6      	subcs	r6, r6, r2
 80a5ace:	4675      	movcs	r5, lr
 80a5ad0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5ad4:	085b      	lsrs	r3, r3, #1
 80a5ad6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5ada:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5ade:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5ae2:	bf22      	ittt	cs
 80a5ae4:	1ab6      	subcs	r6, r6, r2
 80a5ae6:	4675      	movcs	r5, lr
 80a5ae8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5aec:	085b      	lsrs	r3, r3, #1
 80a5aee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5af2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5af6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5afa:	bf22      	ittt	cs
 80a5afc:	1ab6      	subcs	r6, r6, r2
 80a5afe:	4675      	movcs	r5, lr
 80a5b00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5b04:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5b08:	d018      	beq.n	80a5b3c <__aeabi_ddiv+0x114>
 80a5b0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5b0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5b12:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5b16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5b1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5b1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5b22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5b26:	d1c0      	bne.n	80a5aaa <__aeabi_ddiv+0x82>
 80a5b28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5b2c:	d10b      	bne.n	80a5b46 <__aeabi_ddiv+0x11e>
 80a5b2e:	ea41 0100 	orr.w	r1, r1, r0
 80a5b32:	f04f 0000 	mov.w	r0, #0
 80a5b36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5b3a:	e7b6      	b.n	80a5aaa <__aeabi_ddiv+0x82>
 80a5b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5b40:	bf04      	itt	eq
 80a5b42:	4301      	orreq	r1, r0
 80a5b44:	2000      	moveq	r0, #0
 80a5b46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5b4a:	bf88      	it	hi
 80a5b4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5b50:	f63f aeaf 	bhi.w	80a58b2 <__aeabi_dmul+0xde>
 80a5b54:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5b58:	bf04      	itt	eq
 80a5b5a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5b5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5b62:	f150 0000 	adcs.w	r0, r0, #0
 80a5b66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5b6a:	bd70      	pop	{r4, r5, r6, pc}
 80a5b6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5b70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5b74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5b78:	bfc2      	ittt	gt
 80a5b7a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5b7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5b82:	bd70      	popgt	{r4, r5, r6, pc}
 80a5b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5b88:	f04f 0e00 	mov.w	lr, #0
 80a5b8c:	3c01      	subs	r4, #1
 80a5b8e:	e690      	b.n	80a58b2 <__aeabi_dmul+0xde>
 80a5b90:	ea45 0e06 	orr.w	lr, r5, r6
 80a5b94:	e68d      	b.n	80a58b2 <__aeabi_dmul+0xde>
 80a5b96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5b9a:	ea94 0f0c 	teq	r4, ip
 80a5b9e:	bf08      	it	eq
 80a5ba0:	ea95 0f0c 	teqeq	r5, ip
 80a5ba4:	f43f af3b 	beq.w	80a5a1e <__aeabi_dmul+0x24a>
 80a5ba8:	ea94 0f0c 	teq	r4, ip
 80a5bac:	d10a      	bne.n	80a5bc4 <__aeabi_ddiv+0x19c>
 80a5bae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5bb2:	f47f af34 	bne.w	80a5a1e <__aeabi_dmul+0x24a>
 80a5bb6:	ea95 0f0c 	teq	r5, ip
 80a5bba:	f47f af25 	bne.w	80a5a08 <__aeabi_dmul+0x234>
 80a5bbe:	4610      	mov	r0, r2
 80a5bc0:	4619      	mov	r1, r3
 80a5bc2:	e72c      	b.n	80a5a1e <__aeabi_dmul+0x24a>
 80a5bc4:	ea95 0f0c 	teq	r5, ip
 80a5bc8:	d106      	bne.n	80a5bd8 <__aeabi_ddiv+0x1b0>
 80a5bca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5bce:	f43f aefd 	beq.w	80a59cc <__aeabi_dmul+0x1f8>
 80a5bd2:	4610      	mov	r0, r2
 80a5bd4:	4619      	mov	r1, r3
 80a5bd6:	e722      	b.n	80a5a1e <__aeabi_dmul+0x24a>
 80a5bd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5bdc:	bf18      	it	ne
 80a5bde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5be2:	f47f aec5 	bne.w	80a5970 <__aeabi_dmul+0x19c>
 80a5be6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5bea:	f47f af0d 	bne.w	80a5a08 <__aeabi_dmul+0x234>
 80a5bee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5bf2:	f47f aeeb 	bne.w	80a59cc <__aeabi_dmul+0x1f8>
 80a5bf6:	e712      	b.n	80a5a1e <__aeabi_dmul+0x24a>

080a5bf8 <__gedf2>:
 80a5bf8:	f04f 3cff 	mov.w	ip, #4294967295
 80a5bfc:	e006      	b.n	80a5c0c <__cmpdf2+0x4>
 80a5bfe:	bf00      	nop

080a5c00 <__ledf2>:
 80a5c00:	f04f 0c01 	mov.w	ip, #1
 80a5c04:	e002      	b.n	80a5c0c <__cmpdf2+0x4>
 80a5c06:	bf00      	nop

080a5c08 <__cmpdf2>:
 80a5c08:	f04f 0c01 	mov.w	ip, #1
 80a5c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5c10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5c18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5c1c:	bf18      	it	ne
 80a5c1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5c22:	d01b      	beq.n	80a5c5c <__cmpdf2+0x54>
 80a5c24:	b001      	add	sp, #4
 80a5c26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5c2a:	bf0c      	ite	eq
 80a5c2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5c30:	ea91 0f03 	teqne	r1, r3
 80a5c34:	bf02      	ittt	eq
 80a5c36:	ea90 0f02 	teqeq	r0, r2
 80a5c3a:	2000      	moveq	r0, #0
 80a5c3c:	4770      	bxeq	lr
 80a5c3e:	f110 0f00 	cmn.w	r0, #0
 80a5c42:	ea91 0f03 	teq	r1, r3
 80a5c46:	bf58      	it	pl
 80a5c48:	4299      	cmppl	r1, r3
 80a5c4a:	bf08      	it	eq
 80a5c4c:	4290      	cmpeq	r0, r2
 80a5c4e:	bf2c      	ite	cs
 80a5c50:	17d8      	asrcs	r0, r3, #31
 80a5c52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5c56:	f040 0001 	orr.w	r0, r0, #1
 80a5c5a:	4770      	bx	lr
 80a5c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5c64:	d102      	bne.n	80a5c6c <__cmpdf2+0x64>
 80a5c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5c6a:	d107      	bne.n	80a5c7c <__cmpdf2+0x74>
 80a5c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5c74:	d1d6      	bne.n	80a5c24 <__cmpdf2+0x1c>
 80a5c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5c7a:	d0d3      	beq.n	80a5c24 <__cmpdf2+0x1c>
 80a5c7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5c80:	4770      	bx	lr
 80a5c82:	bf00      	nop

080a5c84 <__aeabi_cdrcmple>:
 80a5c84:	4684      	mov	ip, r0
 80a5c86:	4610      	mov	r0, r2
 80a5c88:	4662      	mov	r2, ip
 80a5c8a:	468c      	mov	ip, r1
 80a5c8c:	4619      	mov	r1, r3
 80a5c8e:	4663      	mov	r3, ip
 80a5c90:	e000      	b.n	80a5c94 <__aeabi_cdcmpeq>
 80a5c92:	bf00      	nop

080a5c94 <__aeabi_cdcmpeq>:
 80a5c94:	b501      	push	{r0, lr}
 80a5c96:	f7ff ffb7 	bl	80a5c08 <__cmpdf2>
 80a5c9a:	2800      	cmp	r0, #0
 80a5c9c:	bf48      	it	mi
 80a5c9e:	f110 0f00 	cmnmi.w	r0, #0
 80a5ca2:	bd01      	pop	{r0, pc}

080a5ca4 <__aeabi_dcmpeq>:
 80a5ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ca8:	f7ff fff4 	bl	80a5c94 <__aeabi_cdcmpeq>
 80a5cac:	bf0c      	ite	eq
 80a5cae:	2001      	moveq	r0, #1
 80a5cb0:	2000      	movne	r0, #0
 80a5cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5cb6:	bf00      	nop

080a5cb8 <__aeabi_dcmplt>:
 80a5cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5cbc:	f7ff ffea 	bl	80a5c94 <__aeabi_cdcmpeq>
 80a5cc0:	bf34      	ite	cc
 80a5cc2:	2001      	movcc	r0, #1
 80a5cc4:	2000      	movcs	r0, #0
 80a5cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5cca:	bf00      	nop

080a5ccc <__aeabi_dcmple>:
 80a5ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5cd0:	f7ff ffe0 	bl	80a5c94 <__aeabi_cdcmpeq>
 80a5cd4:	bf94      	ite	ls
 80a5cd6:	2001      	movls	r0, #1
 80a5cd8:	2000      	movhi	r0, #0
 80a5cda:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5cde:	bf00      	nop

080a5ce0 <__aeabi_dcmpge>:
 80a5ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ce4:	f7ff ffce 	bl	80a5c84 <__aeabi_cdrcmple>
 80a5ce8:	bf94      	ite	ls
 80a5cea:	2001      	movls	r0, #1
 80a5cec:	2000      	movhi	r0, #0
 80a5cee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5cf2:	bf00      	nop

080a5cf4 <__aeabi_dcmpgt>:
 80a5cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5cf8:	f7ff ffc4 	bl	80a5c84 <__aeabi_cdrcmple>
 80a5cfc:	bf34      	ite	cc
 80a5cfe:	2001      	movcc	r0, #1
 80a5d00:	2000      	movcs	r0, #0
 80a5d02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5d06:	bf00      	nop

080a5d08 <__aeabi_d2iz>:
 80a5d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5d0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5d10:	d215      	bcs.n	80a5d3e <__aeabi_d2iz+0x36>
 80a5d12:	d511      	bpl.n	80a5d38 <__aeabi_d2iz+0x30>
 80a5d14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5d18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5d1c:	d912      	bls.n	80a5d44 <__aeabi_d2iz+0x3c>
 80a5d1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5d26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5d2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5d2e:	fa23 f002 	lsr.w	r0, r3, r2
 80a5d32:	bf18      	it	ne
 80a5d34:	4240      	negne	r0, r0
 80a5d36:	4770      	bx	lr
 80a5d38:	f04f 0000 	mov.w	r0, #0
 80a5d3c:	4770      	bx	lr
 80a5d3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5d42:	d105      	bne.n	80a5d50 <__aeabi_d2iz+0x48>
 80a5d44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5d48:	bf08      	it	eq
 80a5d4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5d4e:	4770      	bx	lr
 80a5d50:	f04f 0000 	mov.w	r0, #0
 80a5d54:	4770      	bx	lr
 80a5d56:	bf00      	nop

080a5d58 <__aeabi_d2uiz>:
 80a5d58:	004a      	lsls	r2, r1, #1
 80a5d5a:	d211      	bcs.n	80a5d80 <__aeabi_d2uiz+0x28>
 80a5d5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5d60:	d211      	bcs.n	80a5d86 <__aeabi_d2uiz+0x2e>
 80a5d62:	d50d      	bpl.n	80a5d80 <__aeabi_d2uiz+0x28>
 80a5d64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5d68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5d6c:	d40e      	bmi.n	80a5d8c <__aeabi_d2uiz+0x34>
 80a5d6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5d72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5d76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5d7a:	fa23 f002 	lsr.w	r0, r3, r2
 80a5d7e:	4770      	bx	lr
 80a5d80:	f04f 0000 	mov.w	r0, #0
 80a5d84:	4770      	bx	lr
 80a5d86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5d8a:	d102      	bne.n	80a5d92 <__aeabi_d2uiz+0x3a>
 80a5d8c:	f04f 30ff 	mov.w	r0, #4294967295
 80a5d90:	4770      	bx	lr
 80a5d92:	f04f 0000 	mov.w	r0, #0
 80a5d96:	4770      	bx	lr

080a5d98 <__aeabi_d2f>:
 80a5d98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5d9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a5da0:	bf24      	itt	cs
 80a5da2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5da6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5daa:	d90d      	bls.n	80a5dc8 <__aeabi_d2f+0x30>
 80a5dac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5db0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5db4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5db8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5dbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5dc0:	bf08      	it	eq
 80a5dc2:	f020 0001 	biceq.w	r0, r0, #1
 80a5dc6:	4770      	bx	lr
 80a5dc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5dcc:	d121      	bne.n	80a5e12 <__aeabi_d2f+0x7a>
 80a5dce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5dd2:	bfbc      	itt	lt
 80a5dd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5dd8:	4770      	bxlt	lr
 80a5dda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5dde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5de2:	f1c2 0218 	rsb	r2, r2, #24
 80a5de6:	f1c2 0c20 	rsb	ip, r2, #32
 80a5dea:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5dee:	fa20 f002 	lsr.w	r0, r0, r2
 80a5df2:	bf18      	it	ne
 80a5df4:	f040 0001 	orrne.w	r0, r0, #1
 80a5df8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5dfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5e00:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5e04:	ea40 000c 	orr.w	r0, r0, ip
 80a5e08:	fa23 f302 	lsr.w	r3, r3, r2
 80a5e0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5e10:	e7cc      	b.n	80a5dac <__aeabi_d2f+0x14>
 80a5e12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5e16:	d107      	bne.n	80a5e28 <__aeabi_d2f+0x90>
 80a5e18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5e1c:	bf1e      	ittt	ne
 80a5e1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5e22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5e26:	4770      	bxne	lr
 80a5e28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5e2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5e34:	4770      	bx	lr
 80a5e36:	bf00      	nop

080a5e38 <__aeabi_frsub>:
 80a5e38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5e3c:	e002      	b.n	80a5e44 <__addsf3>
 80a5e3e:	bf00      	nop

080a5e40 <__aeabi_fsub>:
 80a5e40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5e44 <__addsf3>:
 80a5e44:	0042      	lsls	r2, r0, #1
 80a5e46:	bf1f      	itttt	ne
 80a5e48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5e4c:	ea92 0f03 	teqne	r2, r3
 80a5e50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5e54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5e58:	d06a      	beq.n	80a5f30 <__addsf3+0xec>
 80a5e5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5e5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5e62:	bfc1      	itttt	gt
 80a5e64:	18d2      	addgt	r2, r2, r3
 80a5e66:	4041      	eorgt	r1, r0
 80a5e68:	4048      	eorgt	r0, r1
 80a5e6a:	4041      	eorgt	r1, r0
 80a5e6c:	bfb8      	it	lt
 80a5e6e:	425b      	neglt	r3, r3
 80a5e70:	2b19      	cmp	r3, #25
 80a5e72:	bf88      	it	hi
 80a5e74:	4770      	bxhi	lr
 80a5e76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5e7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5e7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5e82:	bf18      	it	ne
 80a5e84:	4240      	negne	r0, r0
 80a5e86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5e8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5e8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5e92:	bf18      	it	ne
 80a5e94:	4249      	negne	r1, r1
 80a5e96:	ea92 0f03 	teq	r2, r3
 80a5e9a:	d03f      	beq.n	80a5f1c <__addsf3+0xd8>
 80a5e9c:	f1a2 0201 	sub.w	r2, r2, #1
 80a5ea0:	fa41 fc03 	asr.w	ip, r1, r3
 80a5ea4:	eb10 000c 	adds.w	r0, r0, ip
 80a5ea8:	f1c3 0320 	rsb	r3, r3, #32
 80a5eac:	fa01 f103 	lsl.w	r1, r1, r3
 80a5eb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5eb4:	d502      	bpl.n	80a5ebc <__addsf3+0x78>
 80a5eb6:	4249      	negs	r1, r1
 80a5eb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5ebc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5ec0:	d313      	bcc.n	80a5eea <__addsf3+0xa6>
 80a5ec2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5ec6:	d306      	bcc.n	80a5ed6 <__addsf3+0x92>
 80a5ec8:	0840      	lsrs	r0, r0, #1
 80a5eca:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5ece:	f102 0201 	add.w	r2, r2, #1
 80a5ed2:	2afe      	cmp	r2, #254	; 0xfe
 80a5ed4:	d251      	bcs.n	80a5f7a <__addsf3+0x136>
 80a5ed6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5eda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5ede:	bf08      	it	eq
 80a5ee0:	f020 0001 	biceq.w	r0, r0, #1
 80a5ee4:	ea40 0003 	orr.w	r0, r0, r3
 80a5ee8:	4770      	bx	lr
 80a5eea:	0049      	lsls	r1, r1, #1
 80a5eec:	eb40 0000 	adc.w	r0, r0, r0
 80a5ef0:	3a01      	subs	r2, #1
 80a5ef2:	bf28      	it	cs
 80a5ef4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a5ef8:	d2ed      	bcs.n	80a5ed6 <__addsf3+0x92>
 80a5efa:	fab0 fc80 	clz	ip, r0
 80a5efe:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5f02:	ebb2 020c 	subs.w	r2, r2, ip
 80a5f06:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5f0a:	bfaa      	itet	ge
 80a5f0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5f10:	4252      	neglt	r2, r2
 80a5f12:	4318      	orrge	r0, r3
 80a5f14:	bfbc      	itt	lt
 80a5f16:	40d0      	lsrlt	r0, r2
 80a5f18:	4318      	orrlt	r0, r3
 80a5f1a:	4770      	bx	lr
 80a5f1c:	f092 0f00 	teq	r2, #0
 80a5f20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5f24:	bf06      	itte	eq
 80a5f26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5f2a:	3201      	addeq	r2, #1
 80a5f2c:	3b01      	subne	r3, #1
 80a5f2e:	e7b5      	b.n	80a5e9c <__addsf3+0x58>
 80a5f30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5f34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5f38:	bf18      	it	ne
 80a5f3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5f3e:	d021      	beq.n	80a5f84 <__addsf3+0x140>
 80a5f40:	ea92 0f03 	teq	r2, r3
 80a5f44:	d004      	beq.n	80a5f50 <__addsf3+0x10c>
 80a5f46:	f092 0f00 	teq	r2, #0
 80a5f4a:	bf08      	it	eq
 80a5f4c:	4608      	moveq	r0, r1
 80a5f4e:	4770      	bx	lr
 80a5f50:	ea90 0f01 	teq	r0, r1
 80a5f54:	bf1c      	itt	ne
 80a5f56:	2000      	movne	r0, #0
 80a5f58:	4770      	bxne	lr
 80a5f5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5f5e:	d104      	bne.n	80a5f6a <__addsf3+0x126>
 80a5f60:	0040      	lsls	r0, r0, #1
 80a5f62:	bf28      	it	cs
 80a5f64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5f68:	4770      	bx	lr
 80a5f6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5f6e:	bf3c      	itt	cc
 80a5f70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5f74:	4770      	bxcc	lr
 80a5f76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5f7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5f7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5f82:	4770      	bx	lr
 80a5f84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5f88:	bf16      	itet	ne
 80a5f8a:	4608      	movne	r0, r1
 80a5f8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5f90:	4601      	movne	r1, r0
 80a5f92:	0242      	lsls	r2, r0, #9
 80a5f94:	bf06      	itte	eq
 80a5f96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5f9a:	ea90 0f01 	teqeq	r0, r1
 80a5f9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5fa2:	4770      	bx	lr

080a5fa4 <__aeabi_ui2f>:
 80a5fa4:	f04f 0300 	mov.w	r3, #0
 80a5fa8:	e004      	b.n	80a5fb4 <__aeabi_i2f+0x8>
 80a5faa:	bf00      	nop

080a5fac <__aeabi_i2f>:
 80a5fac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5fb0:	bf48      	it	mi
 80a5fb2:	4240      	negmi	r0, r0
 80a5fb4:	ea5f 0c00 	movs.w	ip, r0
 80a5fb8:	bf08      	it	eq
 80a5fba:	4770      	bxeq	lr
 80a5fbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5fc0:	4601      	mov	r1, r0
 80a5fc2:	f04f 0000 	mov.w	r0, #0
 80a5fc6:	e01c      	b.n	80a6002 <__aeabi_l2f+0x2a>

080a5fc8 <__aeabi_ul2f>:
 80a5fc8:	ea50 0201 	orrs.w	r2, r0, r1
 80a5fcc:	bf08      	it	eq
 80a5fce:	4770      	bxeq	lr
 80a5fd0:	f04f 0300 	mov.w	r3, #0
 80a5fd4:	e00a      	b.n	80a5fec <__aeabi_l2f+0x14>
 80a5fd6:	bf00      	nop

080a5fd8 <__aeabi_l2f>:
 80a5fd8:	ea50 0201 	orrs.w	r2, r0, r1
 80a5fdc:	bf08      	it	eq
 80a5fde:	4770      	bxeq	lr
 80a5fe0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5fe4:	d502      	bpl.n	80a5fec <__aeabi_l2f+0x14>
 80a5fe6:	4240      	negs	r0, r0
 80a5fe8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5fec:	ea5f 0c01 	movs.w	ip, r1
 80a5ff0:	bf02      	ittt	eq
 80a5ff2:	4684      	moveq	ip, r0
 80a5ff4:	4601      	moveq	r1, r0
 80a5ff6:	2000      	moveq	r0, #0
 80a5ff8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5ffc:	bf08      	it	eq
 80a5ffe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a6002:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a6006:	fabc f28c 	clz	r2, ip
 80a600a:	3a08      	subs	r2, #8
 80a600c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a6010:	db10      	blt.n	80a6034 <__aeabi_l2f+0x5c>
 80a6012:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6016:	4463      	add	r3, ip
 80a6018:	fa00 fc02 	lsl.w	ip, r0, r2
 80a601c:	f1c2 0220 	rsb	r2, r2, #32
 80a6020:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6024:	fa20 f202 	lsr.w	r2, r0, r2
 80a6028:	eb43 0002 	adc.w	r0, r3, r2
 80a602c:	bf08      	it	eq
 80a602e:	f020 0001 	biceq.w	r0, r0, #1
 80a6032:	4770      	bx	lr
 80a6034:	f102 0220 	add.w	r2, r2, #32
 80a6038:	fa01 fc02 	lsl.w	ip, r1, r2
 80a603c:	f1c2 0220 	rsb	r2, r2, #32
 80a6040:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a6044:	fa21 f202 	lsr.w	r2, r1, r2
 80a6048:	eb43 0002 	adc.w	r0, r3, r2
 80a604c:	bf08      	it	eq
 80a604e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6052:	4770      	bx	lr

080a6054 <__aeabi_fmul>:
 80a6054:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6058:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a605c:	bf1e      	ittt	ne
 80a605e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6062:	ea92 0f0c 	teqne	r2, ip
 80a6066:	ea93 0f0c 	teqne	r3, ip
 80a606a:	d06f      	beq.n	80a614c <__aeabi_fmul+0xf8>
 80a606c:	441a      	add	r2, r3
 80a606e:	ea80 0c01 	eor.w	ip, r0, r1
 80a6072:	0240      	lsls	r0, r0, #9
 80a6074:	bf18      	it	ne
 80a6076:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a607a:	d01e      	beq.n	80a60ba <__aeabi_fmul+0x66>
 80a607c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a6080:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a6084:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a6088:	fba0 3101 	umull	r3, r1, r0, r1
 80a608c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6090:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a6094:	bf3e      	ittt	cc
 80a6096:	0049      	lslcc	r1, r1, #1
 80a6098:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a609c:	005b      	lslcc	r3, r3, #1
 80a609e:	ea40 0001 	orr.w	r0, r0, r1
 80a60a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a60a6:	2afd      	cmp	r2, #253	; 0xfd
 80a60a8:	d81d      	bhi.n	80a60e6 <__aeabi_fmul+0x92>
 80a60aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a60ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a60b2:	bf08      	it	eq
 80a60b4:	f020 0001 	biceq.w	r0, r0, #1
 80a60b8:	4770      	bx	lr
 80a60ba:	f090 0f00 	teq	r0, #0
 80a60be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a60c2:	bf08      	it	eq
 80a60c4:	0249      	lsleq	r1, r1, #9
 80a60c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a60ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a60ce:	3a7f      	subs	r2, #127	; 0x7f
 80a60d0:	bfc2      	ittt	gt
 80a60d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a60d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a60da:	4770      	bxgt	lr
 80a60dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a60e0:	f04f 0300 	mov.w	r3, #0
 80a60e4:	3a01      	subs	r2, #1
 80a60e6:	dc5d      	bgt.n	80a61a4 <__aeabi_fmul+0x150>
 80a60e8:	f112 0f19 	cmn.w	r2, #25
 80a60ec:	bfdc      	itt	le
 80a60ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a60f2:	4770      	bxle	lr
 80a60f4:	f1c2 0200 	rsb	r2, r2, #0
 80a60f8:	0041      	lsls	r1, r0, #1
 80a60fa:	fa21 f102 	lsr.w	r1, r1, r2
 80a60fe:	f1c2 0220 	rsb	r2, r2, #32
 80a6102:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6106:	ea5f 0031 	movs.w	r0, r1, rrx
 80a610a:	f140 0000 	adc.w	r0, r0, #0
 80a610e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a6112:	bf08      	it	eq
 80a6114:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6118:	4770      	bx	lr
 80a611a:	f092 0f00 	teq	r2, #0
 80a611e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a6122:	bf02      	ittt	eq
 80a6124:	0040      	lsleq	r0, r0, #1
 80a6126:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a612a:	3a01      	subeq	r2, #1
 80a612c:	d0f9      	beq.n	80a6122 <__aeabi_fmul+0xce>
 80a612e:	ea40 000c 	orr.w	r0, r0, ip
 80a6132:	f093 0f00 	teq	r3, #0
 80a6136:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a613a:	bf02      	ittt	eq
 80a613c:	0049      	lsleq	r1, r1, #1
 80a613e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a6142:	3b01      	subeq	r3, #1
 80a6144:	d0f9      	beq.n	80a613a <__aeabi_fmul+0xe6>
 80a6146:	ea41 010c 	orr.w	r1, r1, ip
 80a614a:	e78f      	b.n	80a606c <__aeabi_fmul+0x18>
 80a614c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6150:	ea92 0f0c 	teq	r2, ip
 80a6154:	bf18      	it	ne
 80a6156:	ea93 0f0c 	teqne	r3, ip
 80a615a:	d00a      	beq.n	80a6172 <__aeabi_fmul+0x11e>
 80a615c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6160:	bf18      	it	ne
 80a6162:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6166:	d1d8      	bne.n	80a611a <__aeabi_fmul+0xc6>
 80a6168:	ea80 0001 	eor.w	r0, r0, r1
 80a616c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6170:	4770      	bx	lr
 80a6172:	f090 0f00 	teq	r0, #0
 80a6176:	bf17      	itett	ne
 80a6178:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a617c:	4608      	moveq	r0, r1
 80a617e:	f091 0f00 	teqne	r1, #0
 80a6182:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a6186:	d014      	beq.n	80a61b2 <__aeabi_fmul+0x15e>
 80a6188:	ea92 0f0c 	teq	r2, ip
 80a618c:	d101      	bne.n	80a6192 <__aeabi_fmul+0x13e>
 80a618e:	0242      	lsls	r2, r0, #9
 80a6190:	d10f      	bne.n	80a61b2 <__aeabi_fmul+0x15e>
 80a6192:	ea93 0f0c 	teq	r3, ip
 80a6196:	d103      	bne.n	80a61a0 <__aeabi_fmul+0x14c>
 80a6198:	024b      	lsls	r3, r1, #9
 80a619a:	bf18      	it	ne
 80a619c:	4608      	movne	r0, r1
 80a619e:	d108      	bne.n	80a61b2 <__aeabi_fmul+0x15e>
 80a61a0:	ea80 0001 	eor.w	r0, r0, r1
 80a61a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a61a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a61ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a61b0:	4770      	bx	lr
 80a61b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a61b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a61ba:	4770      	bx	lr

080a61bc <__aeabi_fdiv>:
 80a61bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a61c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a61c4:	bf1e      	ittt	ne
 80a61c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a61ca:	ea92 0f0c 	teqne	r2, ip
 80a61ce:	ea93 0f0c 	teqne	r3, ip
 80a61d2:	d069      	beq.n	80a62a8 <__aeabi_fdiv+0xec>
 80a61d4:	eba2 0203 	sub.w	r2, r2, r3
 80a61d8:	ea80 0c01 	eor.w	ip, r0, r1
 80a61dc:	0249      	lsls	r1, r1, #9
 80a61de:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a61e2:	d037      	beq.n	80a6254 <__aeabi_fdiv+0x98>
 80a61e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a61e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a61ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a61f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a61f4:	428b      	cmp	r3, r1
 80a61f6:	bf38      	it	cc
 80a61f8:	005b      	lslcc	r3, r3, #1
 80a61fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a61fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a6202:	428b      	cmp	r3, r1
 80a6204:	bf24      	itt	cs
 80a6206:	1a5b      	subcs	r3, r3, r1
 80a6208:	ea40 000c 	orrcs.w	r0, r0, ip
 80a620c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6210:	bf24      	itt	cs
 80a6212:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a6216:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a621a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a621e:	bf24      	itt	cs
 80a6220:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a6224:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6228:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a622c:	bf24      	itt	cs
 80a622e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a6232:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a6236:	011b      	lsls	r3, r3, #4
 80a6238:	bf18      	it	ne
 80a623a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a623e:	d1e0      	bne.n	80a6202 <__aeabi_fdiv+0x46>
 80a6240:	2afd      	cmp	r2, #253	; 0xfd
 80a6242:	f63f af50 	bhi.w	80a60e6 <__aeabi_fmul+0x92>
 80a6246:	428b      	cmp	r3, r1
 80a6248:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a624c:	bf08      	it	eq
 80a624e:	f020 0001 	biceq.w	r0, r0, #1
 80a6252:	4770      	bx	lr
 80a6254:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6258:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a625c:	327f      	adds	r2, #127	; 0x7f
 80a625e:	bfc2      	ittt	gt
 80a6260:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6264:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6268:	4770      	bxgt	lr
 80a626a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a626e:	f04f 0300 	mov.w	r3, #0
 80a6272:	3a01      	subs	r2, #1
 80a6274:	e737      	b.n	80a60e6 <__aeabi_fmul+0x92>
 80a6276:	f092 0f00 	teq	r2, #0
 80a627a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a627e:	bf02      	ittt	eq
 80a6280:	0040      	lsleq	r0, r0, #1
 80a6282:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6286:	3a01      	subeq	r2, #1
 80a6288:	d0f9      	beq.n	80a627e <__aeabi_fdiv+0xc2>
 80a628a:	ea40 000c 	orr.w	r0, r0, ip
 80a628e:	f093 0f00 	teq	r3, #0
 80a6292:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6296:	bf02      	ittt	eq
 80a6298:	0049      	lsleq	r1, r1, #1
 80a629a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a629e:	3b01      	subeq	r3, #1
 80a62a0:	d0f9      	beq.n	80a6296 <__aeabi_fdiv+0xda>
 80a62a2:	ea41 010c 	orr.w	r1, r1, ip
 80a62a6:	e795      	b.n	80a61d4 <__aeabi_fdiv+0x18>
 80a62a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a62ac:	ea92 0f0c 	teq	r2, ip
 80a62b0:	d108      	bne.n	80a62c4 <__aeabi_fdiv+0x108>
 80a62b2:	0242      	lsls	r2, r0, #9
 80a62b4:	f47f af7d 	bne.w	80a61b2 <__aeabi_fmul+0x15e>
 80a62b8:	ea93 0f0c 	teq	r3, ip
 80a62bc:	f47f af70 	bne.w	80a61a0 <__aeabi_fmul+0x14c>
 80a62c0:	4608      	mov	r0, r1
 80a62c2:	e776      	b.n	80a61b2 <__aeabi_fmul+0x15e>
 80a62c4:	ea93 0f0c 	teq	r3, ip
 80a62c8:	d104      	bne.n	80a62d4 <__aeabi_fdiv+0x118>
 80a62ca:	024b      	lsls	r3, r1, #9
 80a62cc:	f43f af4c 	beq.w	80a6168 <__aeabi_fmul+0x114>
 80a62d0:	4608      	mov	r0, r1
 80a62d2:	e76e      	b.n	80a61b2 <__aeabi_fmul+0x15e>
 80a62d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a62d8:	bf18      	it	ne
 80a62da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a62de:	d1ca      	bne.n	80a6276 <__aeabi_fdiv+0xba>
 80a62e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a62e4:	f47f af5c 	bne.w	80a61a0 <__aeabi_fmul+0x14c>
 80a62e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a62ec:	f47f af3c 	bne.w	80a6168 <__aeabi_fmul+0x114>
 80a62f0:	e75f      	b.n	80a61b2 <__aeabi_fmul+0x15e>
 80a62f2:	bf00      	nop

080a62f4 <__gesf2>:
 80a62f4:	f04f 3cff 	mov.w	ip, #4294967295
 80a62f8:	e006      	b.n	80a6308 <__cmpsf2+0x4>
 80a62fa:	bf00      	nop

080a62fc <__lesf2>:
 80a62fc:	f04f 0c01 	mov.w	ip, #1
 80a6300:	e002      	b.n	80a6308 <__cmpsf2+0x4>
 80a6302:	bf00      	nop

080a6304 <__cmpsf2>:
 80a6304:	f04f 0c01 	mov.w	ip, #1
 80a6308:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a630c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6310:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6314:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6318:	bf18      	it	ne
 80a631a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a631e:	d011      	beq.n	80a6344 <__cmpsf2+0x40>
 80a6320:	b001      	add	sp, #4
 80a6322:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a6326:	bf18      	it	ne
 80a6328:	ea90 0f01 	teqne	r0, r1
 80a632c:	bf58      	it	pl
 80a632e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a6332:	bf88      	it	hi
 80a6334:	17c8      	asrhi	r0, r1, #31
 80a6336:	bf38      	it	cc
 80a6338:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a633c:	bf18      	it	ne
 80a633e:	f040 0001 	orrne.w	r0, r0, #1
 80a6342:	4770      	bx	lr
 80a6344:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6348:	d102      	bne.n	80a6350 <__cmpsf2+0x4c>
 80a634a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a634e:	d105      	bne.n	80a635c <__cmpsf2+0x58>
 80a6350:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a6354:	d1e4      	bne.n	80a6320 <__cmpsf2+0x1c>
 80a6356:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a635a:	d0e1      	beq.n	80a6320 <__cmpsf2+0x1c>
 80a635c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6360:	4770      	bx	lr
 80a6362:	bf00      	nop

080a6364 <__aeabi_cfrcmple>:
 80a6364:	4684      	mov	ip, r0
 80a6366:	4608      	mov	r0, r1
 80a6368:	4661      	mov	r1, ip
 80a636a:	e7ff      	b.n	80a636c <__aeabi_cfcmpeq>

080a636c <__aeabi_cfcmpeq>:
 80a636c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a636e:	f7ff ffc9 	bl	80a6304 <__cmpsf2>
 80a6372:	2800      	cmp	r0, #0
 80a6374:	bf48      	it	mi
 80a6376:	f110 0f00 	cmnmi.w	r0, #0
 80a637a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a637c <__aeabi_fcmpeq>:
 80a637c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6380:	f7ff fff4 	bl	80a636c <__aeabi_cfcmpeq>
 80a6384:	bf0c      	ite	eq
 80a6386:	2001      	moveq	r0, #1
 80a6388:	2000      	movne	r0, #0
 80a638a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a638e:	bf00      	nop

080a6390 <__aeabi_fcmplt>:
 80a6390:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6394:	f7ff ffea 	bl	80a636c <__aeabi_cfcmpeq>
 80a6398:	bf34      	ite	cc
 80a639a:	2001      	movcc	r0, #1
 80a639c:	2000      	movcs	r0, #0
 80a639e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63a2:	bf00      	nop

080a63a4 <__aeabi_fcmple>:
 80a63a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a63a8:	f7ff ffe0 	bl	80a636c <__aeabi_cfcmpeq>
 80a63ac:	bf94      	ite	ls
 80a63ae:	2001      	movls	r0, #1
 80a63b0:	2000      	movhi	r0, #0
 80a63b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63b6:	bf00      	nop

080a63b8 <__aeabi_fcmpge>:
 80a63b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a63bc:	f7ff ffd2 	bl	80a6364 <__aeabi_cfrcmple>
 80a63c0:	bf94      	ite	ls
 80a63c2:	2001      	movls	r0, #1
 80a63c4:	2000      	movhi	r0, #0
 80a63c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63ca:	bf00      	nop

080a63cc <__aeabi_fcmpgt>:
 80a63cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a63d0:	f7ff ffc8 	bl	80a6364 <__aeabi_cfrcmple>
 80a63d4:	bf34      	ite	cc
 80a63d6:	2001      	movcc	r0, #1
 80a63d8:	2000      	movcs	r0, #0
 80a63da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a63de:	bf00      	nop

080a63e0 <__aeabi_f2iz>:
 80a63e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a63e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a63e8:	d30f      	bcc.n	80a640a <__aeabi_f2iz+0x2a>
 80a63ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a63ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a63f2:	d90d      	bls.n	80a6410 <__aeabi_f2iz+0x30>
 80a63f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a63f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a63fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6400:	fa23 f002 	lsr.w	r0, r3, r2
 80a6404:	bf18      	it	ne
 80a6406:	4240      	negne	r0, r0
 80a6408:	4770      	bx	lr
 80a640a:	f04f 0000 	mov.w	r0, #0
 80a640e:	4770      	bx	lr
 80a6410:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a6414:	d101      	bne.n	80a641a <__aeabi_f2iz+0x3a>
 80a6416:	0242      	lsls	r2, r0, #9
 80a6418:	d105      	bne.n	80a6426 <__aeabi_f2iz+0x46>
 80a641a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a641e:	bf08      	it	eq
 80a6420:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6424:	4770      	bx	lr
 80a6426:	f04f 0000 	mov.w	r0, #0
 80a642a:	4770      	bx	lr

080a642c <__aeabi_f2uiz>:
 80a642c:	0042      	lsls	r2, r0, #1
 80a642e:	d20e      	bcs.n	80a644e <__aeabi_f2uiz+0x22>
 80a6430:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a6434:	d30b      	bcc.n	80a644e <__aeabi_f2uiz+0x22>
 80a6436:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a643a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a643e:	d409      	bmi.n	80a6454 <__aeabi_f2uiz+0x28>
 80a6440:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a6444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6448:	fa23 f002 	lsr.w	r0, r3, r2
 80a644c:	4770      	bx	lr
 80a644e:	f04f 0000 	mov.w	r0, #0
 80a6452:	4770      	bx	lr
 80a6454:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a6458:	d101      	bne.n	80a645e <__aeabi_f2uiz+0x32>
 80a645a:	0242      	lsls	r2, r0, #9
 80a645c:	d102      	bne.n	80a6464 <__aeabi_f2uiz+0x38>
 80a645e:	f04f 30ff 	mov.w	r0, #4294967295
 80a6462:	4770      	bx	lr
 80a6464:	f04f 0000 	mov.w	r0, #0
 80a6468:	4770      	bx	lr
 80a646a:	bf00      	nop

080a646c <__aeabi_f2lz>:
 80a646c:	b510      	push	{r4, lr}
 80a646e:	2100      	movs	r1, #0
 80a6470:	4604      	mov	r4, r0
 80a6472:	f7ff ff8d 	bl	80a6390 <__aeabi_fcmplt>
 80a6476:	b920      	cbnz	r0, 80a6482 <__aeabi_f2lz+0x16>
 80a6478:	4620      	mov	r0, r4
 80a647a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a647e:	f000 b809 	b.w	80a6494 <__aeabi_f2ulz>
 80a6482:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a6486:	f000 f805 	bl	80a6494 <__aeabi_f2ulz>
 80a648a:	4240      	negs	r0, r0
 80a648c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6490:	bd10      	pop	{r4, pc}
 80a6492:	bf00      	nop

080a6494 <__aeabi_f2ulz>:
 80a6494:	b5d0      	push	{r4, r6, r7, lr}
 80a6496:	f7ff f945 	bl	80a5724 <__aeabi_f2d>
 80a649a:	2200      	movs	r2, #0
 80a649c:	4b0b      	ldr	r3, [pc, #44]	; (80a64cc <__aeabi_f2ulz+0x38>)
 80a649e:	4606      	mov	r6, r0
 80a64a0:	460f      	mov	r7, r1
 80a64a2:	f7ff f997 	bl	80a57d4 <__aeabi_dmul>
 80a64a6:	f7ff fc57 	bl	80a5d58 <__aeabi_d2uiz>
 80a64aa:	4604      	mov	r4, r0
 80a64ac:	f7ff f918 	bl	80a56e0 <__aeabi_ui2d>
 80a64b0:	2200      	movs	r2, #0
 80a64b2:	4b07      	ldr	r3, [pc, #28]	; (80a64d0 <__aeabi_f2ulz+0x3c>)
 80a64b4:	f7ff f98e 	bl	80a57d4 <__aeabi_dmul>
 80a64b8:	4602      	mov	r2, r0
 80a64ba:	460b      	mov	r3, r1
 80a64bc:	4630      	mov	r0, r6
 80a64be:	4639      	mov	r1, r7
 80a64c0:	f7fe ffd0 	bl	80a5464 <__aeabi_dsub>
 80a64c4:	f7ff fc48 	bl	80a5d58 <__aeabi_d2uiz>
 80a64c8:	4621      	mov	r1, r4
 80a64ca:	bdd0      	pop	{r4, r6, r7, pc}
 80a64cc:	3df00000 	.word	0x3df00000
 80a64d0:	41f00000 	.word	0x41f00000

080a64d4 <__aeabi_d2ulz>:
 80a64d4:	b5d0      	push	{r4, r6, r7, lr}
 80a64d6:	2200      	movs	r2, #0
 80a64d8:	4b0b      	ldr	r3, [pc, #44]	; (80a6508 <__aeabi_d2ulz+0x34>)
 80a64da:	4606      	mov	r6, r0
 80a64dc:	460f      	mov	r7, r1
 80a64de:	f7ff f979 	bl	80a57d4 <__aeabi_dmul>
 80a64e2:	f7ff fc39 	bl	80a5d58 <__aeabi_d2uiz>
 80a64e6:	4604      	mov	r4, r0
 80a64e8:	f7ff f8fa 	bl	80a56e0 <__aeabi_ui2d>
 80a64ec:	2200      	movs	r2, #0
 80a64ee:	4b07      	ldr	r3, [pc, #28]	; (80a650c <__aeabi_d2ulz+0x38>)
 80a64f0:	f7ff f970 	bl	80a57d4 <__aeabi_dmul>
 80a64f4:	4602      	mov	r2, r0
 80a64f6:	460b      	mov	r3, r1
 80a64f8:	4630      	mov	r0, r6
 80a64fa:	4639      	mov	r1, r7
 80a64fc:	f7fe ffb2 	bl	80a5464 <__aeabi_dsub>
 80a6500:	f7ff fc2a 	bl	80a5d58 <__aeabi_d2uiz>
 80a6504:	4621      	mov	r1, r4
 80a6506:	bdd0      	pop	{r4, r6, r7, pc}
 80a6508:	3df00000 	.word	0x3df00000
 80a650c:	41f00000 	.word	0x41f00000

080a6510 <__udivmoddi4>:
 80a6510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6514:	9e08      	ldr	r6, [sp, #32]
 80a6516:	460d      	mov	r5, r1
 80a6518:	4604      	mov	r4, r0
 80a651a:	468e      	mov	lr, r1
 80a651c:	2b00      	cmp	r3, #0
 80a651e:	f040 8083 	bne.w	80a6628 <__udivmoddi4+0x118>
 80a6522:	428a      	cmp	r2, r1
 80a6524:	4617      	mov	r7, r2
 80a6526:	d947      	bls.n	80a65b8 <__udivmoddi4+0xa8>
 80a6528:	fab2 f382 	clz	r3, r2
 80a652c:	b14b      	cbz	r3, 80a6542 <__udivmoddi4+0x32>
 80a652e:	f1c3 0120 	rsb	r1, r3, #32
 80a6532:	fa05 fe03 	lsl.w	lr, r5, r3
 80a6536:	fa20 f101 	lsr.w	r1, r0, r1
 80a653a:	409f      	lsls	r7, r3
 80a653c:	ea41 0e0e 	orr.w	lr, r1, lr
 80a6540:	409c      	lsls	r4, r3
 80a6542:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a6546:	fbbe fcf8 	udiv	ip, lr, r8
 80a654a:	fa1f f987 	uxth.w	r9, r7
 80a654e:	fb08 e21c 	mls	r2, r8, ip, lr
 80a6552:	fb0c f009 	mul.w	r0, ip, r9
 80a6556:	0c21      	lsrs	r1, r4, #16
 80a6558:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a655c:	4290      	cmp	r0, r2
 80a655e:	d90a      	bls.n	80a6576 <__udivmoddi4+0x66>
 80a6560:	18ba      	adds	r2, r7, r2
 80a6562:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a6566:	f080 8118 	bcs.w	80a679a <__udivmoddi4+0x28a>
 80a656a:	4290      	cmp	r0, r2
 80a656c:	f240 8115 	bls.w	80a679a <__udivmoddi4+0x28a>
 80a6570:	f1ac 0c02 	sub.w	ip, ip, #2
 80a6574:	443a      	add	r2, r7
 80a6576:	1a12      	subs	r2, r2, r0
 80a6578:	fbb2 f0f8 	udiv	r0, r2, r8
 80a657c:	fb08 2210 	mls	r2, r8, r0, r2
 80a6580:	fb00 f109 	mul.w	r1, r0, r9
 80a6584:	b2a4      	uxth	r4, r4
 80a6586:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a658a:	42a1      	cmp	r1, r4
 80a658c:	d909      	bls.n	80a65a2 <__udivmoddi4+0x92>
 80a658e:	193c      	adds	r4, r7, r4
 80a6590:	f100 32ff 	add.w	r2, r0, #4294967295
 80a6594:	f080 8103 	bcs.w	80a679e <__udivmoddi4+0x28e>
 80a6598:	42a1      	cmp	r1, r4
 80a659a:	f240 8100 	bls.w	80a679e <__udivmoddi4+0x28e>
 80a659e:	3802      	subs	r0, #2
 80a65a0:	443c      	add	r4, r7
 80a65a2:	1a64      	subs	r4, r4, r1
 80a65a4:	2100      	movs	r1, #0
 80a65a6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a65aa:	b11e      	cbz	r6, 80a65b4 <__udivmoddi4+0xa4>
 80a65ac:	2200      	movs	r2, #0
 80a65ae:	40dc      	lsrs	r4, r3
 80a65b0:	e9c6 4200 	strd	r4, r2, [r6]
 80a65b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a65b8:	b902      	cbnz	r2, 80a65bc <__udivmoddi4+0xac>
 80a65ba:	deff      	udf	#255	; 0xff
 80a65bc:	fab2 f382 	clz	r3, r2
 80a65c0:	2b00      	cmp	r3, #0
 80a65c2:	d14f      	bne.n	80a6664 <__udivmoddi4+0x154>
 80a65c4:	1a8d      	subs	r5, r1, r2
 80a65c6:	2101      	movs	r1, #1
 80a65c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a65cc:	fa1f f882 	uxth.w	r8, r2
 80a65d0:	fbb5 fcfe 	udiv	ip, r5, lr
 80a65d4:	fb0e 551c 	mls	r5, lr, ip, r5
 80a65d8:	fb08 f00c 	mul.w	r0, r8, ip
 80a65dc:	0c22      	lsrs	r2, r4, #16
 80a65de:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a65e2:	42a8      	cmp	r0, r5
 80a65e4:	d907      	bls.n	80a65f6 <__udivmoddi4+0xe6>
 80a65e6:	197d      	adds	r5, r7, r5
 80a65e8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a65ec:	d202      	bcs.n	80a65f4 <__udivmoddi4+0xe4>
 80a65ee:	42a8      	cmp	r0, r5
 80a65f0:	f200 80e9 	bhi.w	80a67c6 <__udivmoddi4+0x2b6>
 80a65f4:	4694      	mov	ip, r2
 80a65f6:	1a2d      	subs	r5, r5, r0
 80a65f8:	fbb5 f0fe 	udiv	r0, r5, lr
 80a65fc:	fb0e 5510 	mls	r5, lr, r0, r5
 80a6600:	fb08 f800 	mul.w	r8, r8, r0
 80a6604:	b2a4      	uxth	r4, r4
 80a6606:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a660a:	45a0      	cmp	r8, r4
 80a660c:	d907      	bls.n	80a661e <__udivmoddi4+0x10e>
 80a660e:	193c      	adds	r4, r7, r4
 80a6610:	f100 32ff 	add.w	r2, r0, #4294967295
 80a6614:	d202      	bcs.n	80a661c <__udivmoddi4+0x10c>
 80a6616:	45a0      	cmp	r8, r4
 80a6618:	f200 80d9 	bhi.w	80a67ce <__udivmoddi4+0x2be>
 80a661c:	4610      	mov	r0, r2
 80a661e:	eba4 0408 	sub.w	r4, r4, r8
 80a6622:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a6626:	e7c0      	b.n	80a65aa <__udivmoddi4+0x9a>
 80a6628:	428b      	cmp	r3, r1
 80a662a:	d908      	bls.n	80a663e <__udivmoddi4+0x12e>
 80a662c:	2e00      	cmp	r6, #0
 80a662e:	f000 80b1 	beq.w	80a6794 <__udivmoddi4+0x284>
 80a6632:	2100      	movs	r1, #0
 80a6634:	e9c6 0500 	strd	r0, r5, [r6]
 80a6638:	4608      	mov	r0, r1
 80a663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a663e:	fab3 f183 	clz	r1, r3
 80a6642:	2900      	cmp	r1, #0
 80a6644:	d14b      	bne.n	80a66de <__udivmoddi4+0x1ce>
 80a6646:	42ab      	cmp	r3, r5
 80a6648:	d302      	bcc.n	80a6650 <__udivmoddi4+0x140>
 80a664a:	4282      	cmp	r2, r0
 80a664c:	f200 80b9 	bhi.w	80a67c2 <__udivmoddi4+0x2b2>
 80a6650:	1a84      	subs	r4, r0, r2
 80a6652:	eb65 0303 	sbc.w	r3, r5, r3
 80a6656:	2001      	movs	r0, #1
 80a6658:	469e      	mov	lr, r3
 80a665a:	2e00      	cmp	r6, #0
 80a665c:	d0aa      	beq.n	80a65b4 <__udivmoddi4+0xa4>
 80a665e:	e9c6 4e00 	strd	r4, lr, [r6]
 80a6662:	e7a7      	b.n	80a65b4 <__udivmoddi4+0xa4>
 80a6664:	409f      	lsls	r7, r3
 80a6666:	f1c3 0220 	rsb	r2, r3, #32
 80a666a:	40d1      	lsrs	r1, r2
 80a666c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a6670:	fbb1 f0fe 	udiv	r0, r1, lr
 80a6674:	fa1f f887 	uxth.w	r8, r7
 80a6678:	fb0e 1110 	mls	r1, lr, r0, r1
 80a667c:	fa24 f202 	lsr.w	r2, r4, r2
 80a6680:	409d      	lsls	r5, r3
 80a6682:	fb00 fc08 	mul.w	ip, r0, r8
 80a6686:	432a      	orrs	r2, r5
 80a6688:	0c15      	lsrs	r5, r2, #16
 80a668a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a668e:	45ac      	cmp	ip, r5
 80a6690:	fa04 f403 	lsl.w	r4, r4, r3
 80a6694:	d909      	bls.n	80a66aa <__udivmoddi4+0x19a>
 80a6696:	197d      	adds	r5, r7, r5
 80a6698:	f100 31ff 	add.w	r1, r0, #4294967295
 80a669c:	f080 808f 	bcs.w	80a67be <__udivmoddi4+0x2ae>
 80a66a0:	45ac      	cmp	ip, r5
 80a66a2:	f240 808c 	bls.w	80a67be <__udivmoddi4+0x2ae>
 80a66a6:	3802      	subs	r0, #2
 80a66a8:	443d      	add	r5, r7
 80a66aa:	eba5 050c 	sub.w	r5, r5, ip
 80a66ae:	fbb5 f1fe 	udiv	r1, r5, lr
 80a66b2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a66b6:	fb01 f908 	mul.w	r9, r1, r8
 80a66ba:	b295      	uxth	r5, r2
 80a66bc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a66c0:	45a9      	cmp	r9, r5
 80a66c2:	d907      	bls.n	80a66d4 <__udivmoddi4+0x1c4>
 80a66c4:	197d      	adds	r5, r7, r5
 80a66c6:	f101 32ff 	add.w	r2, r1, #4294967295
 80a66ca:	d274      	bcs.n	80a67b6 <__udivmoddi4+0x2a6>
 80a66cc:	45a9      	cmp	r9, r5
 80a66ce:	d972      	bls.n	80a67b6 <__udivmoddi4+0x2a6>
 80a66d0:	3902      	subs	r1, #2
 80a66d2:	443d      	add	r5, r7
 80a66d4:	eba5 0509 	sub.w	r5, r5, r9
 80a66d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a66dc:	e778      	b.n	80a65d0 <__udivmoddi4+0xc0>
 80a66de:	f1c1 0720 	rsb	r7, r1, #32
 80a66e2:	408b      	lsls	r3, r1
 80a66e4:	fa22 fc07 	lsr.w	ip, r2, r7
 80a66e8:	ea4c 0c03 	orr.w	ip, ip, r3
 80a66ec:	fa25 f407 	lsr.w	r4, r5, r7
 80a66f0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a66f4:	fbb4 f9fe 	udiv	r9, r4, lr
 80a66f8:	fa1f f88c 	uxth.w	r8, ip
 80a66fc:	fb0e 4419 	mls	r4, lr, r9, r4
 80a6700:	fa20 f307 	lsr.w	r3, r0, r7
 80a6704:	fb09 fa08 	mul.w	sl, r9, r8
 80a6708:	408d      	lsls	r5, r1
 80a670a:	431d      	orrs	r5, r3
 80a670c:	0c2b      	lsrs	r3, r5, #16
 80a670e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a6712:	45a2      	cmp	sl, r4
 80a6714:	fa02 f201 	lsl.w	r2, r2, r1
 80a6718:	fa00 f301 	lsl.w	r3, r0, r1
 80a671c:	d909      	bls.n	80a6732 <__udivmoddi4+0x222>
 80a671e:	eb1c 0404 	adds.w	r4, ip, r4
 80a6722:	f109 30ff 	add.w	r0, r9, #4294967295
 80a6726:	d248      	bcs.n	80a67ba <__udivmoddi4+0x2aa>
 80a6728:	45a2      	cmp	sl, r4
 80a672a:	d946      	bls.n	80a67ba <__udivmoddi4+0x2aa>
 80a672c:	f1a9 0902 	sub.w	r9, r9, #2
 80a6730:	4464      	add	r4, ip
 80a6732:	eba4 040a 	sub.w	r4, r4, sl
 80a6736:	fbb4 f0fe 	udiv	r0, r4, lr
 80a673a:	fb0e 4410 	mls	r4, lr, r0, r4
 80a673e:	fb00 fa08 	mul.w	sl, r0, r8
 80a6742:	b2ad      	uxth	r5, r5
 80a6744:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a6748:	45a2      	cmp	sl, r4
 80a674a:	d908      	bls.n	80a675e <__udivmoddi4+0x24e>
 80a674c:	eb1c 0404 	adds.w	r4, ip, r4
 80a6750:	f100 35ff 	add.w	r5, r0, #4294967295
 80a6754:	d22d      	bcs.n	80a67b2 <__udivmoddi4+0x2a2>
 80a6756:	45a2      	cmp	sl, r4
 80a6758:	d92b      	bls.n	80a67b2 <__udivmoddi4+0x2a2>
 80a675a:	3802      	subs	r0, #2
 80a675c:	4464      	add	r4, ip
 80a675e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a6762:	fba0 8902 	umull	r8, r9, r0, r2
 80a6766:	eba4 040a 	sub.w	r4, r4, sl
 80a676a:	454c      	cmp	r4, r9
 80a676c:	46c6      	mov	lr, r8
 80a676e:	464d      	mov	r5, r9
 80a6770:	d319      	bcc.n	80a67a6 <__udivmoddi4+0x296>
 80a6772:	d016      	beq.n	80a67a2 <__udivmoddi4+0x292>
 80a6774:	b15e      	cbz	r6, 80a678e <__udivmoddi4+0x27e>
 80a6776:	ebb3 020e 	subs.w	r2, r3, lr
 80a677a:	eb64 0405 	sbc.w	r4, r4, r5
 80a677e:	fa04 f707 	lsl.w	r7, r4, r7
 80a6782:	fa22 f301 	lsr.w	r3, r2, r1
 80a6786:	431f      	orrs	r7, r3
 80a6788:	40cc      	lsrs	r4, r1
 80a678a:	e9c6 7400 	strd	r7, r4, [r6]
 80a678e:	2100      	movs	r1, #0
 80a6790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6794:	4631      	mov	r1, r6
 80a6796:	4630      	mov	r0, r6
 80a6798:	e70c      	b.n	80a65b4 <__udivmoddi4+0xa4>
 80a679a:	468c      	mov	ip, r1
 80a679c:	e6eb      	b.n	80a6576 <__udivmoddi4+0x66>
 80a679e:	4610      	mov	r0, r2
 80a67a0:	e6ff      	b.n	80a65a2 <__udivmoddi4+0x92>
 80a67a2:	4543      	cmp	r3, r8
 80a67a4:	d2e6      	bcs.n	80a6774 <__udivmoddi4+0x264>
 80a67a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80a67aa:	eb69 050c 	sbc.w	r5, r9, ip
 80a67ae:	3801      	subs	r0, #1
 80a67b0:	e7e0      	b.n	80a6774 <__udivmoddi4+0x264>
 80a67b2:	4628      	mov	r0, r5
 80a67b4:	e7d3      	b.n	80a675e <__udivmoddi4+0x24e>
 80a67b6:	4611      	mov	r1, r2
 80a67b8:	e78c      	b.n	80a66d4 <__udivmoddi4+0x1c4>
 80a67ba:	4681      	mov	r9, r0
 80a67bc:	e7b9      	b.n	80a6732 <__udivmoddi4+0x222>
 80a67be:	4608      	mov	r0, r1
 80a67c0:	e773      	b.n	80a66aa <__udivmoddi4+0x19a>
 80a67c2:	4608      	mov	r0, r1
 80a67c4:	e749      	b.n	80a665a <__udivmoddi4+0x14a>
 80a67c6:	f1ac 0c02 	sub.w	ip, ip, #2
 80a67ca:	443d      	add	r5, r7
 80a67cc:	e713      	b.n	80a65f6 <__udivmoddi4+0xe6>
 80a67ce:	3802      	subs	r0, #2
 80a67d0:	443c      	add	r4, r7
 80a67d2:	e724      	b.n	80a661e <__udivmoddi4+0x10e>

080a67d4 <__aeabi_idiv0>:
 80a67d4:	4770      	bx	lr
 80a67d6:	bf00      	nop

080a67d8 <atof>:
 80a67d8:	2100      	movs	r1, #0
 80a67da:	f000 bf9d 	b.w	80a7718 <strtod>
	...

080a67e0 <__cxa_atexit>:
 80a67e0:	b510      	push	{r4, lr}
 80a67e2:	4604      	mov	r4, r0
 80a67e4:	4804      	ldr	r0, [pc, #16]	; (80a67f8 <__cxa_atexit+0x18>)
 80a67e6:	4613      	mov	r3, r2
 80a67e8:	b120      	cbz	r0, 80a67f4 <__cxa_atexit+0x14>
 80a67ea:	460a      	mov	r2, r1
 80a67ec:	2002      	movs	r0, #2
 80a67ee:	4621      	mov	r1, r4
 80a67f0:	f3af 8000 	nop.w
 80a67f4:	bd10      	pop	{r4, pc}
 80a67f6:	bf00      	nop
 80a67f8:	00000000 	.word	0x00000000

080a67fc <localtime_r>:
 80a67fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6800:	460c      	mov	r4, r1
 80a6802:	4607      	mov	r7, r0
 80a6804:	f001 fdea 	bl	80a83dc <__gettzinfo>
 80a6808:	4621      	mov	r1, r4
 80a680a:	4680      	mov	r8, r0
 80a680c:	4638      	mov	r0, r7
 80a680e:	f001 fde9 	bl	80a83e4 <gmtime_r>
 80a6812:	6943      	ldr	r3, [r0, #20]
 80a6814:	4604      	mov	r4, r0
 80a6816:	079a      	lsls	r2, r3, #30
 80a6818:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a681c:	d105      	bne.n	80a682a <localtime_r+0x2e>
 80a681e:	2264      	movs	r2, #100	; 0x64
 80a6820:	fb96 f3f2 	sdiv	r3, r6, r2
 80a6824:	fb02 6313 	mls	r3, r2, r3, r6
 80a6828:	bb7b      	cbnz	r3, 80a688a <localtime_r+0x8e>
 80a682a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a682e:	fb96 f5f3 	sdiv	r5, r6, r3
 80a6832:	fb03 6515 	mls	r5, r3, r5, r6
 80a6836:	fab5 f585 	clz	r5, r5
 80a683a:	096d      	lsrs	r5, r5, #5
 80a683c:	2230      	movs	r2, #48	; 0x30
 80a683e:	4b68      	ldr	r3, [pc, #416]	; (80a69e0 <localtime_r+0x1e4>)
 80a6840:	fb02 3505 	mla	r5, r2, r5, r3
 80a6844:	f001 f8a2 	bl	80a798c <__tz_lock>
 80a6848:	f001 f8ac 	bl	80a79a4 <_tzset_unlocked>
 80a684c:	4b65      	ldr	r3, [pc, #404]	; (80a69e4 <localtime_r+0x1e8>)
 80a684e:	681b      	ldr	r3, [r3, #0]
 80a6850:	b353      	cbz	r3, 80a68a8 <localtime_r+0xac>
 80a6852:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a6856:	42b3      	cmp	r3, r6
 80a6858:	d119      	bne.n	80a688e <localtime_r+0x92>
 80a685a:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a685e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a6862:	f8d8 1000 	ldr.w	r1, [r8]
 80a6866:	b9d1      	cbnz	r1, 80a689e <localtime_r+0xa2>
 80a6868:	4296      	cmp	r6, r2
 80a686a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a686e:	da23      	bge.n	80a68b8 <localtime_r+0xbc>
 80a6870:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6874:	4296      	cmp	r6, r2
 80a6876:	eb77 0303 	sbcs.w	r3, r7, r3
 80a687a:	bfb4      	ite	lt
 80a687c:	2301      	movlt	r3, #1
 80a687e:	2300      	movge	r3, #0
 80a6880:	6223      	str	r3, [r4, #32]
 80a6882:	db1b      	blt.n	80a68bc <localtime_r+0xc0>
 80a6884:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a6888:	e01a      	b.n	80a68c0 <localtime_r+0xc4>
 80a688a:	2501      	movs	r5, #1
 80a688c:	e7d6      	b.n	80a683c <localtime_r+0x40>
 80a688e:	4630      	mov	r0, r6
 80a6890:	f000 ffd4 	bl	80a783c <__tzcalc_limits>
 80a6894:	2800      	cmp	r0, #0
 80a6896:	d1e0      	bne.n	80a685a <localtime_r+0x5e>
 80a6898:	f04f 33ff 	mov.w	r3, #4294967295
 80a689c:	e004      	b.n	80a68a8 <localtime_r+0xac>
 80a689e:	4296      	cmp	r6, r2
 80a68a0:	eb77 0303 	sbcs.w	r3, r7, r3
 80a68a4:	da02      	bge.n	80a68ac <localtime_r+0xb0>
 80a68a6:	2300      	movs	r3, #0
 80a68a8:	6223      	str	r3, [r4, #32]
 80a68aa:	e7eb      	b.n	80a6884 <localtime_r+0x88>
 80a68ac:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a68b0:	4296      	cmp	r6, r2
 80a68b2:	eb77 0303 	sbcs.w	r3, r7, r3
 80a68b6:	daf6      	bge.n	80a68a6 <localtime_r+0xaa>
 80a68b8:	2301      	movs	r3, #1
 80a68ba:	6223      	str	r3, [r4, #32]
 80a68bc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a68c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a68c4:	fb91 f6f3 	sdiv	r6, r1, r3
 80a68c8:	203c      	movs	r0, #60	; 0x3c
 80a68ca:	fb03 1316 	mls	r3, r3, r6, r1
 80a68ce:	fb93 f2f0 	sdiv	r2, r3, r0
 80a68d2:	fb00 3012 	mls	r0, r0, r2, r3
 80a68d6:	6861      	ldr	r1, [r4, #4]
 80a68d8:	6823      	ldr	r3, [r4, #0]
 80a68da:	1a89      	subs	r1, r1, r2
 80a68dc:	68a2      	ldr	r2, [r4, #8]
 80a68de:	1a1b      	subs	r3, r3, r0
 80a68e0:	1b92      	subs	r2, r2, r6
 80a68e2:	2b3b      	cmp	r3, #59	; 0x3b
 80a68e4:	6023      	str	r3, [r4, #0]
 80a68e6:	6061      	str	r1, [r4, #4]
 80a68e8:	60a2      	str	r2, [r4, #8]
 80a68ea:	dd34      	ble.n	80a6956 <localtime_r+0x15a>
 80a68ec:	3101      	adds	r1, #1
 80a68ee:	6061      	str	r1, [r4, #4]
 80a68f0:	3b3c      	subs	r3, #60	; 0x3c
 80a68f2:	6023      	str	r3, [r4, #0]
 80a68f4:	6863      	ldr	r3, [r4, #4]
 80a68f6:	2b3b      	cmp	r3, #59	; 0x3b
 80a68f8:	dd33      	ble.n	80a6962 <localtime_r+0x166>
 80a68fa:	3201      	adds	r2, #1
 80a68fc:	60a2      	str	r2, [r4, #8]
 80a68fe:	3b3c      	subs	r3, #60	; 0x3c
 80a6900:	6063      	str	r3, [r4, #4]
 80a6902:	68a3      	ldr	r3, [r4, #8]
 80a6904:	2b17      	cmp	r3, #23
 80a6906:	dd32      	ble.n	80a696e <localtime_r+0x172>
 80a6908:	69e2      	ldr	r2, [r4, #28]
 80a690a:	3b18      	subs	r3, #24
 80a690c:	3201      	adds	r2, #1
 80a690e:	61e2      	str	r2, [r4, #28]
 80a6910:	69a2      	ldr	r2, [r4, #24]
 80a6912:	60a3      	str	r3, [r4, #8]
 80a6914:	3201      	adds	r2, #1
 80a6916:	2a06      	cmp	r2, #6
 80a6918:	bfc8      	it	gt
 80a691a:	2200      	movgt	r2, #0
 80a691c:	61a2      	str	r2, [r4, #24]
 80a691e:	68e2      	ldr	r2, [r4, #12]
 80a6920:	6923      	ldr	r3, [r4, #16]
 80a6922:	3201      	adds	r2, #1
 80a6924:	60e2      	str	r2, [r4, #12]
 80a6926:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a692a:	428a      	cmp	r2, r1
 80a692c:	dd0e      	ble.n	80a694c <localtime_r+0x150>
 80a692e:	2b0b      	cmp	r3, #11
 80a6930:	eba2 0201 	sub.w	r2, r2, r1
 80a6934:	60e2      	str	r2, [r4, #12]
 80a6936:	f103 0201 	add.w	r2, r3, #1
 80a693a:	bf05      	ittet	eq
 80a693c:	2200      	moveq	r2, #0
 80a693e:	6963      	ldreq	r3, [r4, #20]
 80a6940:	6122      	strne	r2, [r4, #16]
 80a6942:	3301      	addeq	r3, #1
 80a6944:	bf02      	ittt	eq
 80a6946:	6122      	streq	r2, [r4, #16]
 80a6948:	6163      	streq	r3, [r4, #20]
 80a694a:	61e2      	streq	r2, [r4, #28]
 80a694c:	f001 f824 	bl	80a7998 <__tz_unlock>
 80a6950:	4620      	mov	r0, r4
 80a6952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6956:	2b00      	cmp	r3, #0
 80a6958:	dacc      	bge.n	80a68f4 <localtime_r+0xf8>
 80a695a:	3901      	subs	r1, #1
 80a695c:	6061      	str	r1, [r4, #4]
 80a695e:	333c      	adds	r3, #60	; 0x3c
 80a6960:	e7c7      	b.n	80a68f2 <localtime_r+0xf6>
 80a6962:	2b00      	cmp	r3, #0
 80a6964:	dacd      	bge.n	80a6902 <localtime_r+0x106>
 80a6966:	3a01      	subs	r2, #1
 80a6968:	60a2      	str	r2, [r4, #8]
 80a696a:	333c      	adds	r3, #60	; 0x3c
 80a696c:	e7c8      	b.n	80a6900 <localtime_r+0x104>
 80a696e:	2b00      	cmp	r3, #0
 80a6970:	daec      	bge.n	80a694c <localtime_r+0x150>
 80a6972:	69e2      	ldr	r2, [r4, #28]
 80a6974:	3318      	adds	r3, #24
 80a6976:	3a01      	subs	r2, #1
 80a6978:	61e2      	str	r2, [r4, #28]
 80a697a:	69a2      	ldr	r2, [r4, #24]
 80a697c:	60a3      	str	r3, [r4, #8]
 80a697e:	3a01      	subs	r2, #1
 80a6980:	bf48      	it	mi
 80a6982:	2206      	movmi	r2, #6
 80a6984:	61a2      	str	r2, [r4, #24]
 80a6986:	68e2      	ldr	r2, [r4, #12]
 80a6988:	3a01      	subs	r2, #1
 80a698a:	60e2      	str	r2, [r4, #12]
 80a698c:	2a00      	cmp	r2, #0
 80a698e:	d1dd      	bne.n	80a694c <localtime_r+0x150>
 80a6990:	6923      	ldr	r3, [r4, #16]
 80a6992:	3b01      	subs	r3, #1
 80a6994:	d405      	bmi.n	80a69a2 <localtime_r+0x1a6>
 80a6996:	6123      	str	r3, [r4, #16]
 80a6998:	6923      	ldr	r3, [r4, #16]
 80a699a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a699e:	60e3      	str	r3, [r4, #12]
 80a69a0:	e7d4      	b.n	80a694c <localtime_r+0x150>
 80a69a2:	230b      	movs	r3, #11
 80a69a4:	6123      	str	r3, [r4, #16]
 80a69a6:	6963      	ldr	r3, [r4, #20]
 80a69a8:	1e5a      	subs	r2, r3, #1
 80a69aa:	6162      	str	r2, [r4, #20]
 80a69ac:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a69b0:	0793      	lsls	r3, r2, #30
 80a69b2:	d105      	bne.n	80a69c0 <localtime_r+0x1c4>
 80a69b4:	2164      	movs	r1, #100	; 0x64
 80a69b6:	fb92 f3f1 	sdiv	r3, r2, r1
 80a69ba:	fb01 2313 	mls	r3, r1, r3, r2
 80a69be:	b963      	cbnz	r3, 80a69da <localtime_r+0x1de>
 80a69c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a69c4:	fb92 f3f1 	sdiv	r3, r2, r1
 80a69c8:	fb01 2313 	mls	r3, r1, r3, r2
 80a69cc:	fab3 f383 	clz	r3, r3
 80a69d0:	095b      	lsrs	r3, r3, #5
 80a69d2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a69d6:	61e3      	str	r3, [r4, #28]
 80a69d8:	e7de      	b.n	80a6998 <localtime_r+0x19c>
 80a69da:	2301      	movs	r3, #1
 80a69dc:	e7f9      	b.n	80a69d2 <localtime_r+0x1d6>
 80a69de:	bf00      	nop
 80a69e0:	080a91a4 	.word	0x080a91a4
 80a69e4:	20000ffc 	.word	0x20000ffc

080a69e8 <memcpy>:
 80a69e8:	440a      	add	r2, r1
 80a69ea:	4291      	cmp	r1, r2
 80a69ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80a69f0:	d100      	bne.n	80a69f4 <memcpy+0xc>
 80a69f2:	4770      	bx	lr
 80a69f4:	b510      	push	{r4, lr}
 80a69f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a69fa:	4291      	cmp	r1, r2
 80a69fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6a00:	d1f9      	bne.n	80a69f6 <memcpy+0xe>
 80a6a02:	bd10      	pop	{r4, pc}

080a6a04 <memset>:
 80a6a04:	4603      	mov	r3, r0
 80a6a06:	4402      	add	r2, r0
 80a6a08:	4293      	cmp	r3, r2
 80a6a0a:	d100      	bne.n	80a6a0e <memset+0xa>
 80a6a0c:	4770      	bx	lr
 80a6a0e:	f803 1b01 	strb.w	r1, [r3], #1
 80a6a12:	e7f9      	b.n	80a6a08 <memset+0x4>

080a6a14 <srand>:
 80a6a14:	b538      	push	{r3, r4, r5, lr}
 80a6a16:	4b0d      	ldr	r3, [pc, #52]	; (80a6a4c <srand+0x38>)
 80a6a18:	4604      	mov	r4, r0
 80a6a1a:	681d      	ldr	r5, [r3, #0]
 80a6a1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6a1e:	b97b      	cbnz	r3, 80a6a40 <srand+0x2c>
 80a6a20:	2018      	movs	r0, #24
 80a6a22:	f7fd fb29 	bl	80a4078 <malloc>
 80a6a26:	4a0a      	ldr	r2, [pc, #40]	; (80a6a50 <srand+0x3c>)
 80a6a28:	4b0a      	ldr	r3, [pc, #40]	; (80a6a54 <srand+0x40>)
 80a6a2a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6a2c:	e9c0 2300 	strd	r2, r3, [r0]
 80a6a30:	4b09      	ldr	r3, [pc, #36]	; (80a6a58 <srand+0x44>)
 80a6a32:	2201      	movs	r2, #1
 80a6a34:	6083      	str	r3, [r0, #8]
 80a6a36:	230b      	movs	r3, #11
 80a6a38:	8183      	strh	r3, [r0, #12]
 80a6a3a:	2300      	movs	r3, #0
 80a6a3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6a40:	2200      	movs	r2, #0
 80a6a42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6a44:	611c      	str	r4, [r3, #16]
 80a6a46:	615a      	str	r2, [r3, #20]
 80a6a48:	bd38      	pop	{r3, r4, r5, pc}
 80a6a4a:	bf00      	nop
 80a6a4c:	20000004 	.word	0x20000004
 80a6a50:	abcd330e 	.word	0xabcd330e
 80a6a54:	e66d1234 	.word	0xe66d1234
 80a6a58:	0005deec 	.word	0x0005deec

080a6a5c <strcmp>:
 80a6a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6a64:	2a01      	cmp	r2, #1
 80a6a66:	bf28      	it	cs
 80a6a68:	429a      	cmpcs	r2, r3
 80a6a6a:	d0f7      	beq.n	80a6a5c <strcmp>
 80a6a6c:	1ad0      	subs	r0, r2, r3
 80a6a6e:	4770      	bx	lr

080a6a70 <strcpy>:
 80a6a70:	4603      	mov	r3, r0
 80a6a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6a76:	f803 2b01 	strb.w	r2, [r3], #1
 80a6a7a:	2a00      	cmp	r2, #0
 80a6a7c:	d1f9      	bne.n	80a6a72 <strcpy+0x2>
 80a6a7e:	4770      	bx	lr

080a6a80 <strdup>:
 80a6a80:	4b02      	ldr	r3, [pc, #8]	; (80a6a8c <strdup+0xc>)
 80a6a82:	4601      	mov	r1, r0
 80a6a84:	6818      	ldr	r0, [r3, #0]
 80a6a86:	f000 b803 	b.w	80a6a90 <_strdup_r>
 80a6a8a:	bf00      	nop
 80a6a8c:	20000004 	.word	0x20000004

080a6a90 <_strdup_r>:
 80a6a90:	b570      	push	{r4, r5, r6, lr}
 80a6a92:	4604      	mov	r4, r0
 80a6a94:	4608      	mov	r0, r1
 80a6a96:	460d      	mov	r5, r1
 80a6a98:	f000 f80d 	bl	80a6ab6 <strlen>
 80a6a9c:	1c46      	adds	r6, r0, #1
 80a6a9e:	4631      	mov	r1, r6
 80a6aa0:	4620      	mov	r0, r4
 80a6aa2:	f7fd fb09 	bl	80a40b8 <_malloc_r>
 80a6aa6:	4604      	mov	r4, r0
 80a6aa8:	b118      	cbz	r0, 80a6ab2 <_strdup_r+0x22>
 80a6aaa:	4632      	mov	r2, r6
 80a6aac:	4629      	mov	r1, r5
 80a6aae:	f7ff ff9b 	bl	80a69e8 <memcpy>
 80a6ab2:	4620      	mov	r0, r4
 80a6ab4:	bd70      	pop	{r4, r5, r6, pc}

080a6ab6 <strlen>:
 80a6ab6:	4603      	mov	r3, r0
 80a6ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6abc:	2a00      	cmp	r2, #0
 80a6abe:	d1fb      	bne.n	80a6ab8 <strlen+0x2>
 80a6ac0:	1a18      	subs	r0, r3, r0
 80a6ac2:	3801      	subs	r0, #1
 80a6ac4:	4770      	bx	lr

080a6ac6 <strncmp>:
 80a6ac6:	b510      	push	{r4, lr}
 80a6ac8:	b16a      	cbz	r2, 80a6ae6 <strncmp+0x20>
 80a6aca:	3901      	subs	r1, #1
 80a6acc:	1884      	adds	r4, r0, r2
 80a6ace:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a6ad2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a6ad6:	4293      	cmp	r3, r2
 80a6ad8:	d103      	bne.n	80a6ae2 <strncmp+0x1c>
 80a6ada:	42a0      	cmp	r0, r4
 80a6adc:	d001      	beq.n	80a6ae2 <strncmp+0x1c>
 80a6ade:	2b00      	cmp	r3, #0
 80a6ae0:	d1f5      	bne.n	80a6ace <strncmp+0x8>
 80a6ae2:	1a98      	subs	r0, r3, r2
 80a6ae4:	bd10      	pop	{r4, pc}
 80a6ae6:	4610      	mov	r0, r2
 80a6ae8:	e7fc      	b.n	80a6ae4 <strncmp+0x1e>

080a6aea <sulp>:
 80a6aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6aee:	460f      	mov	r7, r1
 80a6af0:	4690      	mov	r8, r2
 80a6af2:	f002 f83b 	bl	80a8b6c <__ulp>
 80a6af6:	4604      	mov	r4, r0
 80a6af8:	460d      	mov	r5, r1
 80a6afa:	f1b8 0f00 	cmp.w	r8, #0
 80a6afe:	d011      	beq.n	80a6b24 <sulp+0x3a>
 80a6b00:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a6b04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a6b08:	2b00      	cmp	r3, #0
 80a6b0a:	dd0b      	ble.n	80a6b24 <sulp+0x3a>
 80a6b0c:	2400      	movs	r4, #0
 80a6b0e:	051b      	lsls	r3, r3, #20
 80a6b10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a6b14:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a6b18:	4622      	mov	r2, r4
 80a6b1a:	462b      	mov	r3, r5
 80a6b1c:	f7fe fe5a 	bl	80a57d4 <__aeabi_dmul>
 80a6b20:	4604      	mov	r4, r0
 80a6b22:	460d      	mov	r5, r1
 80a6b24:	4620      	mov	r0, r4
 80a6b26:	4629      	mov	r1, r5
 80a6b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6b2c:	0000      	movs	r0, r0
	...

080a6b30 <_strtod_l>:
 80a6b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6b34:	469b      	mov	fp, r3
 80a6b36:	2300      	movs	r3, #0
 80a6b38:	b0a1      	sub	sp, #132	; 0x84
 80a6b3a:	931c      	str	r3, [sp, #112]	; 0x70
 80a6b3c:	4ba1      	ldr	r3, [pc, #644]	; (80a6dc4 <_strtod_l+0x294>)
 80a6b3e:	4682      	mov	sl, r0
 80a6b40:	681f      	ldr	r7, [r3, #0]
 80a6b42:	460e      	mov	r6, r1
 80a6b44:	4638      	mov	r0, r7
 80a6b46:	9217      	str	r2, [sp, #92]	; 0x5c
 80a6b48:	f7ff ffb5 	bl	80a6ab6 <strlen>
 80a6b4c:	f04f 0800 	mov.w	r8, #0
 80a6b50:	4604      	mov	r4, r0
 80a6b52:	f04f 0900 	mov.w	r9, #0
 80a6b56:	961b      	str	r6, [sp, #108]	; 0x6c
 80a6b58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6b5a:	781a      	ldrb	r2, [r3, #0]
 80a6b5c:	2a2b      	cmp	r2, #43	; 0x2b
 80a6b5e:	d04c      	beq.n	80a6bfa <_strtod_l+0xca>
 80a6b60:	d83a      	bhi.n	80a6bd8 <_strtod_l+0xa8>
 80a6b62:	2a0d      	cmp	r2, #13
 80a6b64:	d833      	bhi.n	80a6bce <_strtod_l+0x9e>
 80a6b66:	2a08      	cmp	r2, #8
 80a6b68:	d833      	bhi.n	80a6bd2 <_strtod_l+0xa2>
 80a6b6a:	2a00      	cmp	r2, #0
 80a6b6c:	d03d      	beq.n	80a6bea <_strtod_l+0xba>
 80a6b6e:	2300      	movs	r3, #0
 80a6b70:	930c      	str	r3, [sp, #48]	; 0x30
 80a6b72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80a6b74:	782b      	ldrb	r3, [r5, #0]
 80a6b76:	2b30      	cmp	r3, #48	; 0x30
 80a6b78:	f040 80af 	bne.w	80a6cda <_strtod_l+0x1aa>
 80a6b7c:	786b      	ldrb	r3, [r5, #1]
 80a6b7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a6b82:	2b58      	cmp	r3, #88	; 0x58
 80a6b84:	d16c      	bne.n	80a6c60 <_strtod_l+0x130>
 80a6b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a6b88:	4650      	mov	r0, sl
 80a6b8a:	9301      	str	r3, [sp, #4]
 80a6b8c:	ab1c      	add	r3, sp, #112	; 0x70
 80a6b8e:	9300      	str	r3, [sp, #0]
 80a6b90:	4a8d      	ldr	r2, [pc, #564]	; (80a6dc8 <_strtod_l+0x298>)
 80a6b92:	f8cd b008 	str.w	fp, [sp, #8]
 80a6b96:	ab1d      	add	r3, sp, #116	; 0x74
 80a6b98:	a91b      	add	r1, sp, #108	; 0x6c
 80a6b9a:	f001 f8f1 	bl	80a7d80 <__gethex>
 80a6b9e:	f010 0607 	ands.w	r6, r0, #7
 80a6ba2:	4604      	mov	r4, r0
 80a6ba4:	d005      	beq.n	80a6bb2 <_strtod_l+0x82>
 80a6ba6:	2e06      	cmp	r6, #6
 80a6ba8:	d129      	bne.n	80a6bfe <_strtod_l+0xce>
 80a6baa:	2300      	movs	r3, #0
 80a6bac:	3501      	adds	r5, #1
 80a6bae:	951b      	str	r5, [sp, #108]	; 0x6c
 80a6bb0:	930c      	str	r3, [sp, #48]	; 0x30
 80a6bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a6bb4:	2b00      	cmp	r3, #0
 80a6bb6:	f040 8596 	bne.w	80a76e6 <_strtod_l+0xbb6>
 80a6bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a6bbc:	b1d3      	cbz	r3, 80a6bf4 <_strtod_l+0xc4>
 80a6bbe:	4642      	mov	r2, r8
 80a6bc0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a6bc4:	4610      	mov	r0, r2
 80a6bc6:	4619      	mov	r1, r3
 80a6bc8:	b021      	add	sp, #132	; 0x84
 80a6bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6bce:	2a20      	cmp	r2, #32
 80a6bd0:	d1cd      	bne.n	80a6b6e <_strtod_l+0x3e>
 80a6bd2:	3301      	adds	r3, #1
 80a6bd4:	931b      	str	r3, [sp, #108]	; 0x6c
 80a6bd6:	e7bf      	b.n	80a6b58 <_strtod_l+0x28>
 80a6bd8:	2a2d      	cmp	r2, #45	; 0x2d
 80a6bda:	d1c8      	bne.n	80a6b6e <_strtod_l+0x3e>
 80a6bdc:	2201      	movs	r2, #1
 80a6bde:	920c      	str	r2, [sp, #48]	; 0x30
 80a6be0:	1c5a      	adds	r2, r3, #1
 80a6be2:	921b      	str	r2, [sp, #108]	; 0x6c
 80a6be4:	785b      	ldrb	r3, [r3, #1]
 80a6be6:	2b00      	cmp	r3, #0
 80a6be8:	d1c3      	bne.n	80a6b72 <_strtod_l+0x42>
 80a6bea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a6bec:	961b      	str	r6, [sp, #108]	; 0x6c
 80a6bee:	2b00      	cmp	r3, #0
 80a6bf0:	f040 8577 	bne.w	80a76e2 <_strtod_l+0xbb2>
 80a6bf4:	4642      	mov	r2, r8
 80a6bf6:	464b      	mov	r3, r9
 80a6bf8:	e7e4      	b.n	80a6bc4 <_strtod_l+0x94>
 80a6bfa:	2200      	movs	r2, #0
 80a6bfc:	e7ef      	b.n	80a6bde <_strtod_l+0xae>
 80a6bfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a6c00:	b13a      	cbz	r2, 80a6c12 <_strtod_l+0xe2>
 80a6c02:	2135      	movs	r1, #53	; 0x35
 80a6c04:	a81e      	add	r0, sp, #120	; 0x78
 80a6c06:	f002 f8a8 	bl	80a8d5a <__copybits>
 80a6c0a:	4650      	mov	r0, sl
 80a6c0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a6c0e:	f001 fce3 	bl	80a85d8 <_Bfree>
 80a6c12:	3e01      	subs	r6, #1
 80a6c14:	2e05      	cmp	r6, #5
 80a6c16:	d807      	bhi.n	80a6c28 <_strtod_l+0xf8>
 80a6c18:	e8df f006 	tbb	[pc, r6]
 80a6c1c:	1d180b0e 	.word	0x1d180b0e
 80a6c20:	030e      	.short	0x030e
 80a6c22:	f04f 0900 	mov.w	r9, #0
 80a6c26:	46c8      	mov	r8, r9
 80a6c28:	0721      	lsls	r1, r4, #28
 80a6c2a:	d5c2      	bpl.n	80a6bb2 <_strtod_l+0x82>
 80a6c2c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a6c30:	e7bf      	b.n	80a6bb2 <_strtod_l+0x82>
 80a6c32:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80a6c36:	e7f7      	b.n	80a6c28 <_strtod_l+0xf8>
 80a6c38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80a6c3a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80a6c3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a6c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a6c46:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a6c4a:	e7ed      	b.n	80a6c28 <_strtod_l+0xf8>
 80a6c4c:	f04f 0800 	mov.w	r8, #0
 80a6c50:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a6dcc <_strtod_l+0x29c>
 80a6c54:	e7e8      	b.n	80a6c28 <_strtod_l+0xf8>
 80a6c56:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a6c5a:	f04f 38ff 	mov.w	r8, #4294967295
 80a6c5e:	e7e3      	b.n	80a6c28 <_strtod_l+0xf8>
 80a6c60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6c62:	1c5a      	adds	r2, r3, #1
 80a6c64:	921b      	str	r2, [sp, #108]	; 0x6c
 80a6c66:	785b      	ldrb	r3, [r3, #1]
 80a6c68:	2b30      	cmp	r3, #48	; 0x30
 80a6c6a:	d0f9      	beq.n	80a6c60 <_strtod_l+0x130>
 80a6c6c:	2b00      	cmp	r3, #0
 80a6c6e:	d0a0      	beq.n	80a6bb2 <_strtod_l+0x82>
 80a6c70:	2301      	movs	r3, #1
 80a6c72:	9307      	str	r3, [sp, #28]
 80a6c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6c76:	220a      	movs	r2, #10
 80a6c78:	9308      	str	r3, [sp, #32]
 80a6c7a:	2300      	movs	r3, #0
 80a6c7c:	469b      	mov	fp, r3
 80a6c7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80a6c82:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80a6c84:	7805      	ldrb	r5, [r0, #0]
 80a6c86:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80a6c8a:	b2d9      	uxtb	r1, r3
 80a6c8c:	2909      	cmp	r1, #9
 80a6c8e:	d926      	bls.n	80a6cde <_strtod_l+0x1ae>
 80a6c90:	4622      	mov	r2, r4
 80a6c92:	4639      	mov	r1, r7
 80a6c94:	f7ff ff17 	bl	80a6ac6 <strncmp>
 80a6c98:	2800      	cmp	r0, #0
 80a6c9a:	d032      	beq.n	80a6d02 <_strtod_l+0x1d2>
 80a6c9c:	2000      	movs	r0, #0
 80a6c9e:	462b      	mov	r3, r5
 80a6ca0:	465c      	mov	r4, fp
 80a6ca2:	4602      	mov	r2, r0
 80a6ca4:	9004      	str	r0, [sp, #16]
 80a6ca6:	2b65      	cmp	r3, #101	; 0x65
 80a6ca8:	d001      	beq.n	80a6cae <_strtod_l+0x17e>
 80a6caa:	2b45      	cmp	r3, #69	; 0x45
 80a6cac:	d113      	bne.n	80a6cd6 <_strtod_l+0x1a6>
 80a6cae:	b91c      	cbnz	r4, 80a6cb8 <_strtod_l+0x188>
 80a6cb0:	9b07      	ldr	r3, [sp, #28]
 80a6cb2:	4303      	orrs	r3, r0
 80a6cb4:	d099      	beq.n	80a6bea <_strtod_l+0xba>
 80a6cb6:	2400      	movs	r4, #0
 80a6cb8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80a6cba:	1c73      	adds	r3, r6, #1
 80a6cbc:	931b      	str	r3, [sp, #108]	; 0x6c
 80a6cbe:	7873      	ldrb	r3, [r6, #1]
 80a6cc0:	2b2b      	cmp	r3, #43	; 0x2b
 80a6cc2:	d078      	beq.n	80a6db6 <_strtod_l+0x286>
 80a6cc4:	2b2d      	cmp	r3, #45	; 0x2d
 80a6cc6:	d07b      	beq.n	80a6dc0 <_strtod_l+0x290>
 80a6cc8:	2700      	movs	r7, #0
 80a6cca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a6cce:	2909      	cmp	r1, #9
 80a6cd0:	f240 8082 	bls.w	80a6dd8 <_strtod_l+0x2a8>
 80a6cd4:	961b      	str	r6, [sp, #108]	; 0x6c
 80a6cd6:	2500      	movs	r5, #0
 80a6cd8:	e09e      	b.n	80a6e18 <_strtod_l+0x2e8>
 80a6cda:	2300      	movs	r3, #0
 80a6cdc:	e7c9      	b.n	80a6c72 <_strtod_l+0x142>
 80a6cde:	f1bb 0f08 	cmp.w	fp, #8
 80a6ce2:	bfd5      	itete	le
 80a6ce4:	9906      	ldrle	r1, [sp, #24]
 80a6ce6:	9905      	ldrgt	r1, [sp, #20]
 80a6ce8:	fb02 3301 	mlale	r3, r2, r1, r3
 80a6cec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a6cf0:	f100 0001 	add.w	r0, r0, #1
 80a6cf4:	bfd4      	ite	le
 80a6cf6:	9306      	strle	r3, [sp, #24]
 80a6cf8:	9305      	strgt	r3, [sp, #20]
 80a6cfa:	f10b 0b01 	add.w	fp, fp, #1
 80a6cfe:	901b      	str	r0, [sp, #108]	; 0x6c
 80a6d00:	e7bf      	b.n	80a6c82 <_strtod_l+0x152>
 80a6d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6d04:	191a      	adds	r2, r3, r4
 80a6d06:	921b      	str	r2, [sp, #108]	; 0x6c
 80a6d08:	5d1b      	ldrb	r3, [r3, r4]
 80a6d0a:	f1bb 0f00 	cmp.w	fp, #0
 80a6d0e:	d036      	beq.n	80a6d7e <_strtod_l+0x24e>
 80a6d10:	465c      	mov	r4, fp
 80a6d12:	9004      	str	r0, [sp, #16]
 80a6d14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80a6d18:	2a09      	cmp	r2, #9
 80a6d1a:	d912      	bls.n	80a6d42 <_strtod_l+0x212>
 80a6d1c:	2201      	movs	r2, #1
 80a6d1e:	e7c2      	b.n	80a6ca6 <_strtod_l+0x176>
 80a6d20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6d22:	3001      	adds	r0, #1
 80a6d24:	1c5a      	adds	r2, r3, #1
 80a6d26:	921b      	str	r2, [sp, #108]	; 0x6c
 80a6d28:	785b      	ldrb	r3, [r3, #1]
 80a6d2a:	2b30      	cmp	r3, #48	; 0x30
 80a6d2c:	d0f8      	beq.n	80a6d20 <_strtod_l+0x1f0>
 80a6d2e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a6d32:	2a08      	cmp	r2, #8
 80a6d34:	f200 84dc 	bhi.w	80a76f0 <_strtod_l+0xbc0>
 80a6d38:	9004      	str	r0, [sp, #16]
 80a6d3a:	2000      	movs	r0, #0
 80a6d3c:	4604      	mov	r4, r0
 80a6d3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80a6d40:	9208      	str	r2, [sp, #32]
 80a6d42:	3b30      	subs	r3, #48	; 0x30
 80a6d44:	f100 0201 	add.w	r2, r0, #1
 80a6d48:	d013      	beq.n	80a6d72 <_strtod_l+0x242>
 80a6d4a:	9904      	ldr	r1, [sp, #16]
 80a6d4c:	1905      	adds	r5, r0, r4
 80a6d4e:	4411      	add	r1, r2
 80a6d50:	9104      	str	r1, [sp, #16]
 80a6d52:	4622      	mov	r2, r4
 80a6d54:	210a      	movs	r1, #10
 80a6d56:	42aa      	cmp	r2, r5
 80a6d58:	d113      	bne.n	80a6d82 <_strtod_l+0x252>
 80a6d5a:	1822      	adds	r2, r4, r0
 80a6d5c:	2a08      	cmp	r2, #8
 80a6d5e:	f104 0401 	add.w	r4, r4, #1
 80a6d62:	4404      	add	r4, r0
 80a6d64:	dc1b      	bgt.n	80a6d9e <_strtod_l+0x26e>
 80a6d66:	220a      	movs	r2, #10
 80a6d68:	9906      	ldr	r1, [sp, #24]
 80a6d6a:	fb02 3301 	mla	r3, r2, r1, r3
 80a6d6e:	9306      	str	r3, [sp, #24]
 80a6d70:	2200      	movs	r2, #0
 80a6d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6d74:	4610      	mov	r0, r2
 80a6d76:	1c59      	adds	r1, r3, #1
 80a6d78:	911b      	str	r1, [sp, #108]	; 0x6c
 80a6d7a:	785b      	ldrb	r3, [r3, #1]
 80a6d7c:	e7ca      	b.n	80a6d14 <_strtod_l+0x1e4>
 80a6d7e:	4658      	mov	r0, fp
 80a6d80:	e7d3      	b.n	80a6d2a <_strtod_l+0x1fa>
 80a6d82:	2a08      	cmp	r2, #8
 80a6d84:	dc04      	bgt.n	80a6d90 <_strtod_l+0x260>
 80a6d86:	9f06      	ldr	r7, [sp, #24]
 80a6d88:	434f      	muls	r7, r1
 80a6d8a:	9706      	str	r7, [sp, #24]
 80a6d8c:	3201      	adds	r2, #1
 80a6d8e:	e7e2      	b.n	80a6d56 <_strtod_l+0x226>
 80a6d90:	1c57      	adds	r7, r2, #1
 80a6d92:	2f10      	cmp	r7, #16
 80a6d94:	bfde      	ittt	le
 80a6d96:	9f05      	ldrle	r7, [sp, #20]
 80a6d98:	434f      	mulle	r7, r1
 80a6d9a:	9705      	strle	r7, [sp, #20]
 80a6d9c:	e7f6      	b.n	80a6d8c <_strtod_l+0x25c>
 80a6d9e:	2c10      	cmp	r4, #16
 80a6da0:	bfdf      	itttt	le
 80a6da2:	220a      	movle	r2, #10
 80a6da4:	9905      	ldrle	r1, [sp, #20]
 80a6da6:	fb02 3301 	mlale	r3, r2, r1, r3
 80a6daa:	9305      	strle	r3, [sp, #20]
 80a6dac:	e7e0      	b.n	80a6d70 <_strtod_l+0x240>
 80a6dae:	2300      	movs	r3, #0
 80a6db0:	2201      	movs	r2, #1
 80a6db2:	9304      	str	r3, [sp, #16]
 80a6db4:	e77c      	b.n	80a6cb0 <_strtod_l+0x180>
 80a6db6:	2700      	movs	r7, #0
 80a6db8:	1cb3      	adds	r3, r6, #2
 80a6dba:	931b      	str	r3, [sp, #108]	; 0x6c
 80a6dbc:	78b3      	ldrb	r3, [r6, #2]
 80a6dbe:	e784      	b.n	80a6cca <_strtod_l+0x19a>
 80a6dc0:	2701      	movs	r7, #1
 80a6dc2:	e7f9      	b.n	80a6db8 <_strtod_l+0x288>
 80a6dc4:	080a93a0 	.word	0x080a93a0
 80a6dc8:	080a9210 	.word	0x080a9210
 80a6dcc:	7ff00000 	.word	0x7ff00000
 80a6dd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6dd2:	1c59      	adds	r1, r3, #1
 80a6dd4:	911b      	str	r1, [sp, #108]	; 0x6c
 80a6dd6:	785b      	ldrb	r3, [r3, #1]
 80a6dd8:	2b30      	cmp	r3, #48	; 0x30
 80a6dda:	d0f9      	beq.n	80a6dd0 <_strtod_l+0x2a0>
 80a6ddc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80a6de0:	2908      	cmp	r1, #8
 80a6de2:	f63f af78 	bhi.w	80a6cd6 <_strtod_l+0x1a6>
 80a6de6:	f04f 0e0a 	mov.w	lr, #10
 80a6dea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a6dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6df0:	9309      	str	r3, [sp, #36]	; 0x24
 80a6df2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6df4:	1c59      	adds	r1, r3, #1
 80a6df6:	911b      	str	r1, [sp, #108]	; 0x6c
 80a6df8:	785b      	ldrb	r3, [r3, #1]
 80a6dfa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80a6dfe:	2d09      	cmp	r5, #9
 80a6e00:	d935      	bls.n	80a6e6e <_strtod_l+0x33e>
 80a6e02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a6e04:	1b49      	subs	r1, r1, r5
 80a6e06:	2908      	cmp	r1, #8
 80a6e08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80a6e0c:	dc02      	bgt.n	80a6e14 <_strtod_l+0x2e4>
 80a6e0e:	4565      	cmp	r5, ip
 80a6e10:	bfa8      	it	ge
 80a6e12:	4665      	movge	r5, ip
 80a6e14:	b107      	cbz	r7, 80a6e18 <_strtod_l+0x2e8>
 80a6e16:	426d      	negs	r5, r5
 80a6e18:	2c00      	cmp	r4, #0
 80a6e1a:	d14c      	bne.n	80a6eb6 <_strtod_l+0x386>
 80a6e1c:	9907      	ldr	r1, [sp, #28]
 80a6e1e:	4301      	orrs	r1, r0
 80a6e20:	f47f aec7 	bne.w	80a6bb2 <_strtod_l+0x82>
 80a6e24:	2a00      	cmp	r2, #0
 80a6e26:	f47f aee0 	bne.w	80a6bea <_strtod_l+0xba>
 80a6e2a:	2b69      	cmp	r3, #105	; 0x69
 80a6e2c:	d026      	beq.n	80a6e7c <_strtod_l+0x34c>
 80a6e2e:	dc23      	bgt.n	80a6e78 <_strtod_l+0x348>
 80a6e30:	2b49      	cmp	r3, #73	; 0x49
 80a6e32:	d023      	beq.n	80a6e7c <_strtod_l+0x34c>
 80a6e34:	2b4e      	cmp	r3, #78	; 0x4e
 80a6e36:	f47f aed8 	bne.w	80a6bea <_strtod_l+0xba>
 80a6e3a:	499c      	ldr	r1, [pc, #624]	; (80a70ac <_strtod_l+0x57c>)
 80a6e3c:	a81b      	add	r0, sp, #108	; 0x6c
 80a6e3e:	f001 f9db 	bl	80a81f8 <__match>
 80a6e42:	2800      	cmp	r0, #0
 80a6e44:	f43f aed1 	beq.w	80a6bea <_strtod_l+0xba>
 80a6e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6e4a:	781b      	ldrb	r3, [r3, #0]
 80a6e4c:	2b28      	cmp	r3, #40	; 0x28
 80a6e4e:	d12c      	bne.n	80a6eaa <_strtod_l+0x37a>
 80a6e50:	4997      	ldr	r1, [pc, #604]	; (80a70b0 <_strtod_l+0x580>)
 80a6e52:	aa1e      	add	r2, sp, #120	; 0x78
 80a6e54:	a81b      	add	r0, sp, #108	; 0x6c
 80a6e56:	f001 f9e3 	bl	80a8220 <__hexnan>
 80a6e5a:	2805      	cmp	r0, #5
 80a6e5c:	d125      	bne.n	80a6eaa <_strtod_l+0x37a>
 80a6e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80a6e60:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80a6e64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a6e68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a6e6c:	e6a1      	b.n	80a6bb2 <_strtod_l+0x82>
 80a6e6e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80a6e72:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80a6e76:	e7bc      	b.n	80a6df2 <_strtod_l+0x2c2>
 80a6e78:	2b6e      	cmp	r3, #110	; 0x6e
 80a6e7a:	e7dc      	b.n	80a6e36 <_strtod_l+0x306>
 80a6e7c:	498d      	ldr	r1, [pc, #564]	; (80a70b4 <_strtod_l+0x584>)
 80a6e7e:	a81b      	add	r0, sp, #108	; 0x6c
 80a6e80:	f001 f9ba 	bl	80a81f8 <__match>
 80a6e84:	2800      	cmp	r0, #0
 80a6e86:	f43f aeb0 	beq.w	80a6bea <_strtod_l+0xba>
 80a6e8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6e8c:	498a      	ldr	r1, [pc, #552]	; (80a70b8 <_strtod_l+0x588>)
 80a6e8e:	3b01      	subs	r3, #1
 80a6e90:	a81b      	add	r0, sp, #108	; 0x6c
 80a6e92:	931b      	str	r3, [sp, #108]	; 0x6c
 80a6e94:	f001 f9b0 	bl	80a81f8 <__match>
 80a6e98:	b910      	cbnz	r0, 80a6ea0 <_strtod_l+0x370>
 80a6e9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a6e9c:	3301      	adds	r3, #1
 80a6e9e:	931b      	str	r3, [sp, #108]	; 0x6c
 80a6ea0:	f04f 0800 	mov.w	r8, #0
 80a6ea4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80a70c8 <_strtod_l+0x598>
 80a6ea8:	e683      	b.n	80a6bb2 <_strtod_l+0x82>
 80a6eaa:	4884      	ldr	r0, [pc, #528]	; (80a70bc <_strtod_l+0x58c>)
 80a6eac:	f001 ffa8 	bl	80a8e00 <nan>
 80a6eb0:	4680      	mov	r8, r0
 80a6eb2:	4689      	mov	r9, r1
 80a6eb4:	e67d      	b.n	80a6bb2 <_strtod_l+0x82>
 80a6eb6:	9b04      	ldr	r3, [sp, #16]
 80a6eb8:	f1bb 0f00 	cmp.w	fp, #0
 80a6ebc:	bf08      	it	eq
 80a6ebe:	46a3      	moveq	fp, r4
 80a6ec0:	1aeb      	subs	r3, r5, r3
 80a6ec2:	2c10      	cmp	r4, #16
 80a6ec4:	9806      	ldr	r0, [sp, #24]
 80a6ec6:	4626      	mov	r6, r4
 80a6ec8:	9307      	str	r3, [sp, #28]
 80a6eca:	bfa8      	it	ge
 80a6ecc:	2610      	movge	r6, #16
 80a6ece:	f7fe fc07 	bl	80a56e0 <__aeabi_ui2d>
 80a6ed2:	2c09      	cmp	r4, #9
 80a6ed4:	4680      	mov	r8, r0
 80a6ed6:	4689      	mov	r9, r1
 80a6ed8:	dd13      	ble.n	80a6f02 <_strtod_l+0x3d2>
 80a6eda:	4b79      	ldr	r3, [pc, #484]	; (80a70c0 <_strtod_l+0x590>)
 80a6edc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a6ee0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a6ee4:	f7fe fc76 	bl	80a57d4 <__aeabi_dmul>
 80a6ee8:	4680      	mov	r8, r0
 80a6eea:	9805      	ldr	r0, [sp, #20]
 80a6eec:	4689      	mov	r9, r1
 80a6eee:	f7fe fbf7 	bl	80a56e0 <__aeabi_ui2d>
 80a6ef2:	4602      	mov	r2, r0
 80a6ef4:	460b      	mov	r3, r1
 80a6ef6:	4640      	mov	r0, r8
 80a6ef8:	4649      	mov	r1, r9
 80a6efa:	f7fe fab5 	bl	80a5468 <__adddf3>
 80a6efe:	4680      	mov	r8, r0
 80a6f00:	4689      	mov	r9, r1
 80a6f02:	2c0f      	cmp	r4, #15
 80a6f04:	dc36      	bgt.n	80a6f74 <_strtod_l+0x444>
 80a6f06:	9b07      	ldr	r3, [sp, #28]
 80a6f08:	2b00      	cmp	r3, #0
 80a6f0a:	f43f ae52 	beq.w	80a6bb2 <_strtod_l+0x82>
 80a6f0e:	dd22      	ble.n	80a6f56 <_strtod_l+0x426>
 80a6f10:	2b16      	cmp	r3, #22
 80a6f12:	dc09      	bgt.n	80a6f28 <_strtod_l+0x3f8>
 80a6f14:	4c6a      	ldr	r4, [pc, #424]	; (80a70c0 <_strtod_l+0x590>)
 80a6f16:	4642      	mov	r2, r8
 80a6f18:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80a6f1c:	464b      	mov	r3, r9
 80a6f1e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a6f22:	f7fe fc57 	bl	80a57d4 <__aeabi_dmul>
 80a6f26:	e7c3      	b.n	80a6eb0 <_strtod_l+0x380>
 80a6f28:	9a07      	ldr	r2, [sp, #28]
 80a6f2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80a6f2e:	4293      	cmp	r3, r2
 80a6f30:	db20      	blt.n	80a6f74 <_strtod_l+0x444>
 80a6f32:	4d63      	ldr	r5, [pc, #396]	; (80a70c0 <_strtod_l+0x590>)
 80a6f34:	f1c4 040f 	rsb	r4, r4, #15
 80a6f38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80a6f3c:	4642      	mov	r2, r8
 80a6f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a6f42:	464b      	mov	r3, r9
 80a6f44:	f7fe fc46 	bl	80a57d4 <__aeabi_dmul>
 80a6f48:	9b07      	ldr	r3, [sp, #28]
 80a6f4a:	1b1c      	subs	r4, r3, r4
 80a6f4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80a6f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a6f54:	e7e5      	b.n	80a6f22 <_strtod_l+0x3f2>
 80a6f56:	9b07      	ldr	r3, [sp, #28]
 80a6f58:	3316      	adds	r3, #22
 80a6f5a:	db0b      	blt.n	80a6f74 <_strtod_l+0x444>
 80a6f5c:	9b04      	ldr	r3, [sp, #16]
 80a6f5e:	4a58      	ldr	r2, [pc, #352]	; (80a70c0 <_strtod_l+0x590>)
 80a6f60:	1b5d      	subs	r5, r3, r5
 80a6f62:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80a6f66:	4640      	mov	r0, r8
 80a6f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a6f6c:	4649      	mov	r1, r9
 80a6f6e:	f7fe fd5b 	bl	80a5a28 <__aeabi_ddiv>
 80a6f72:	e79d      	b.n	80a6eb0 <_strtod_l+0x380>
 80a6f74:	9b07      	ldr	r3, [sp, #28]
 80a6f76:	1ba6      	subs	r6, r4, r6
 80a6f78:	441e      	add	r6, r3
 80a6f7a:	2e00      	cmp	r6, #0
 80a6f7c:	dd71      	ble.n	80a7062 <_strtod_l+0x532>
 80a6f7e:	f016 030f 	ands.w	r3, r6, #15
 80a6f82:	d00a      	beq.n	80a6f9a <_strtod_l+0x46a>
 80a6f84:	494e      	ldr	r1, [pc, #312]	; (80a70c0 <_strtod_l+0x590>)
 80a6f86:	4642      	mov	r2, r8
 80a6f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a6f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a6f90:	464b      	mov	r3, r9
 80a6f92:	f7fe fc1f 	bl	80a57d4 <__aeabi_dmul>
 80a6f96:	4680      	mov	r8, r0
 80a6f98:	4689      	mov	r9, r1
 80a6f9a:	f036 060f 	bics.w	r6, r6, #15
 80a6f9e:	d050      	beq.n	80a7042 <_strtod_l+0x512>
 80a6fa0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80a6fa4:	dd27      	ble.n	80a6ff6 <_strtod_l+0x4c6>
 80a6fa6:	f04f 0b00 	mov.w	fp, #0
 80a6faa:	f8cd b010 	str.w	fp, [sp, #16]
 80a6fae:	f8cd b020 	str.w	fp, [sp, #32]
 80a6fb2:	f8cd b018 	str.w	fp, [sp, #24]
 80a6fb6:	2322      	movs	r3, #34	; 0x22
 80a6fb8:	f04f 0800 	mov.w	r8, #0
 80a6fbc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80a70c8 <_strtod_l+0x598>
 80a6fc0:	f8ca 3000 	str.w	r3, [sl]
 80a6fc4:	9b08      	ldr	r3, [sp, #32]
 80a6fc6:	2b00      	cmp	r3, #0
 80a6fc8:	f43f adf3 	beq.w	80a6bb2 <_strtod_l+0x82>
 80a6fcc:	4650      	mov	r0, sl
 80a6fce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a6fd0:	f001 fb02 	bl	80a85d8 <_Bfree>
 80a6fd4:	4650      	mov	r0, sl
 80a6fd6:	9906      	ldr	r1, [sp, #24]
 80a6fd8:	f001 fafe 	bl	80a85d8 <_Bfree>
 80a6fdc:	4650      	mov	r0, sl
 80a6fde:	9904      	ldr	r1, [sp, #16]
 80a6fe0:	f001 fafa 	bl	80a85d8 <_Bfree>
 80a6fe4:	4650      	mov	r0, sl
 80a6fe6:	9908      	ldr	r1, [sp, #32]
 80a6fe8:	f001 faf6 	bl	80a85d8 <_Bfree>
 80a6fec:	4659      	mov	r1, fp
 80a6fee:	4650      	mov	r0, sl
 80a6ff0:	f001 faf2 	bl	80a85d8 <_Bfree>
 80a6ff4:	e5dd      	b.n	80a6bb2 <_strtod_l+0x82>
 80a6ff6:	2300      	movs	r3, #0
 80a6ff8:	4640      	mov	r0, r8
 80a6ffa:	4649      	mov	r1, r9
 80a6ffc:	461f      	mov	r7, r3
 80a6ffe:	1136      	asrs	r6, r6, #4
 80a7000:	2e01      	cmp	r6, #1
 80a7002:	dc21      	bgt.n	80a7048 <_strtod_l+0x518>
 80a7004:	b10b      	cbz	r3, 80a700a <_strtod_l+0x4da>
 80a7006:	4680      	mov	r8, r0
 80a7008:	4689      	mov	r9, r1
 80a700a:	4b2e      	ldr	r3, [pc, #184]	; (80a70c4 <_strtod_l+0x594>)
 80a700c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a7010:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a7014:	4642      	mov	r2, r8
 80a7016:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a701a:	464b      	mov	r3, r9
 80a701c:	f7fe fbda 	bl	80a57d4 <__aeabi_dmul>
 80a7020:	4b29      	ldr	r3, [pc, #164]	; (80a70c8 <_strtod_l+0x598>)
 80a7022:	460a      	mov	r2, r1
 80a7024:	400b      	ands	r3, r1
 80a7026:	4929      	ldr	r1, [pc, #164]	; (80a70cc <_strtod_l+0x59c>)
 80a7028:	4680      	mov	r8, r0
 80a702a:	428b      	cmp	r3, r1
 80a702c:	d8bb      	bhi.n	80a6fa6 <_strtod_l+0x476>
 80a702e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a7032:	428b      	cmp	r3, r1
 80a7034:	bf86      	itte	hi
 80a7036:	f04f 38ff 	movhi.w	r8, #4294967295
 80a703a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80a70d0 <_strtod_l+0x5a0>
 80a703e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a7042:	2300      	movs	r3, #0
 80a7044:	9305      	str	r3, [sp, #20]
 80a7046:	e07e      	b.n	80a7146 <_strtod_l+0x616>
 80a7048:	07f2      	lsls	r2, r6, #31
 80a704a:	d507      	bpl.n	80a705c <_strtod_l+0x52c>
 80a704c:	4b1d      	ldr	r3, [pc, #116]	; (80a70c4 <_strtod_l+0x594>)
 80a704e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80a7052:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7056:	f7fe fbbd 	bl	80a57d4 <__aeabi_dmul>
 80a705a:	2301      	movs	r3, #1
 80a705c:	3701      	adds	r7, #1
 80a705e:	1076      	asrs	r6, r6, #1
 80a7060:	e7ce      	b.n	80a7000 <_strtod_l+0x4d0>
 80a7062:	d0ee      	beq.n	80a7042 <_strtod_l+0x512>
 80a7064:	4276      	negs	r6, r6
 80a7066:	f016 020f 	ands.w	r2, r6, #15
 80a706a:	d00a      	beq.n	80a7082 <_strtod_l+0x552>
 80a706c:	4b14      	ldr	r3, [pc, #80]	; (80a70c0 <_strtod_l+0x590>)
 80a706e:	4640      	mov	r0, r8
 80a7070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a7074:	4649      	mov	r1, r9
 80a7076:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a707a:	f7fe fcd5 	bl	80a5a28 <__aeabi_ddiv>
 80a707e:	4680      	mov	r8, r0
 80a7080:	4689      	mov	r9, r1
 80a7082:	1136      	asrs	r6, r6, #4
 80a7084:	d0dd      	beq.n	80a7042 <_strtod_l+0x512>
 80a7086:	2e1f      	cmp	r6, #31
 80a7088:	dd24      	ble.n	80a70d4 <_strtod_l+0x5a4>
 80a708a:	f04f 0b00 	mov.w	fp, #0
 80a708e:	f8cd b010 	str.w	fp, [sp, #16]
 80a7092:	f8cd b020 	str.w	fp, [sp, #32]
 80a7096:	f8cd b018 	str.w	fp, [sp, #24]
 80a709a:	2322      	movs	r3, #34	; 0x22
 80a709c:	f04f 0800 	mov.w	r8, #0
 80a70a0:	f04f 0900 	mov.w	r9, #0
 80a70a4:	f8ca 3000 	str.w	r3, [sl]
 80a70a8:	e78c      	b.n	80a6fc4 <_strtod_l+0x494>
 80a70aa:	bf00      	nop
 80a70ac:	080a920d 	.word	0x080a920d
 80a70b0:	080a9224 	.word	0x080a9224
 80a70b4:	080a9204 	.word	0x080a9204
 80a70b8:	080a9207 	.word	0x080a9207
 80a70bc:	080a939e 	.word	0x080a939e
 80a70c0:	080a93e0 	.word	0x080a93e0
 80a70c4:	080a93b8 	.word	0x080a93b8
 80a70c8:	7ff00000 	.word	0x7ff00000
 80a70cc:	7ca00000 	.word	0x7ca00000
 80a70d0:	7fefffff 	.word	0x7fefffff
 80a70d4:	f016 0310 	ands.w	r3, r6, #16
 80a70d8:	bf18      	it	ne
 80a70da:	236a      	movne	r3, #106	; 0x6a
 80a70dc:	4640      	mov	r0, r8
 80a70de:	9305      	str	r3, [sp, #20]
 80a70e0:	4649      	mov	r1, r9
 80a70e2:	2300      	movs	r3, #0
 80a70e4:	4fb2      	ldr	r7, [pc, #712]	; (80a73b0 <_strtod_l+0x880>)
 80a70e6:	07f2      	lsls	r2, r6, #31
 80a70e8:	d504      	bpl.n	80a70f4 <_strtod_l+0x5c4>
 80a70ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a70ee:	f7fe fb71 	bl	80a57d4 <__aeabi_dmul>
 80a70f2:	2301      	movs	r3, #1
 80a70f4:	1076      	asrs	r6, r6, #1
 80a70f6:	f107 0708 	add.w	r7, r7, #8
 80a70fa:	d1f4      	bne.n	80a70e6 <_strtod_l+0x5b6>
 80a70fc:	b10b      	cbz	r3, 80a7102 <_strtod_l+0x5d2>
 80a70fe:	4680      	mov	r8, r0
 80a7100:	4689      	mov	r9, r1
 80a7102:	9b05      	ldr	r3, [sp, #20]
 80a7104:	b1bb      	cbz	r3, 80a7136 <_strtod_l+0x606>
 80a7106:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a710a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a710e:	2b00      	cmp	r3, #0
 80a7110:	4649      	mov	r1, r9
 80a7112:	dd10      	ble.n	80a7136 <_strtod_l+0x606>
 80a7114:	2b1f      	cmp	r3, #31
 80a7116:	f340 812b 	ble.w	80a7370 <_strtod_l+0x840>
 80a711a:	2b34      	cmp	r3, #52	; 0x34
 80a711c:	bfd8      	it	le
 80a711e:	f04f 32ff 	movle.w	r2, #4294967295
 80a7122:	f04f 0800 	mov.w	r8, #0
 80a7126:	bfcf      	iteee	gt
 80a7128:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a712c:	3b20      	suble	r3, #32
 80a712e:	fa02 f303 	lslle.w	r3, r2, r3
 80a7132:	ea03 0901 	andle.w	r9, r3, r1
 80a7136:	2200      	movs	r2, #0
 80a7138:	2300      	movs	r3, #0
 80a713a:	4640      	mov	r0, r8
 80a713c:	4649      	mov	r1, r9
 80a713e:	f7fe fdb1 	bl	80a5ca4 <__aeabi_dcmpeq>
 80a7142:	2800      	cmp	r0, #0
 80a7144:	d1a1      	bne.n	80a708a <_strtod_l+0x55a>
 80a7146:	9b06      	ldr	r3, [sp, #24]
 80a7148:	465a      	mov	r2, fp
 80a714a:	9300      	str	r3, [sp, #0]
 80a714c:	4650      	mov	r0, sl
 80a714e:	4623      	mov	r3, r4
 80a7150:	9908      	ldr	r1, [sp, #32]
 80a7152:	f001 fa96 	bl	80a8682 <__s2b>
 80a7156:	9008      	str	r0, [sp, #32]
 80a7158:	2800      	cmp	r0, #0
 80a715a:	f43f af24 	beq.w	80a6fa6 <_strtod_l+0x476>
 80a715e:	9b04      	ldr	r3, [sp, #16]
 80a7160:	f04f 0b00 	mov.w	fp, #0
 80a7164:	1b5d      	subs	r5, r3, r5
 80a7166:	9b07      	ldr	r3, [sp, #28]
 80a7168:	f8cd b010 	str.w	fp, [sp, #16]
 80a716c:	2b00      	cmp	r3, #0
 80a716e:	bfb4      	ite	lt
 80a7170:	462b      	movlt	r3, r5
 80a7172:	2300      	movge	r3, #0
 80a7174:	930e      	str	r3, [sp, #56]	; 0x38
 80a7176:	9b07      	ldr	r3, [sp, #28]
 80a7178:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a717c:	9316      	str	r3, [sp, #88]	; 0x58
 80a717e:	9b08      	ldr	r3, [sp, #32]
 80a7180:	4650      	mov	r0, sl
 80a7182:	6859      	ldr	r1, [r3, #4]
 80a7184:	f001 f9f4 	bl	80a8570 <_Balloc>
 80a7188:	9006      	str	r0, [sp, #24]
 80a718a:	2800      	cmp	r0, #0
 80a718c:	f43f af13 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a7190:	9b08      	ldr	r3, [sp, #32]
 80a7192:	300c      	adds	r0, #12
 80a7194:	691a      	ldr	r2, [r3, #16]
 80a7196:	f103 010c 	add.w	r1, r3, #12
 80a719a:	3202      	adds	r2, #2
 80a719c:	0092      	lsls	r2, r2, #2
 80a719e:	f7ff fc23 	bl	80a69e8 <memcpy>
 80a71a2:	ab1e      	add	r3, sp, #120	; 0x78
 80a71a4:	9301      	str	r3, [sp, #4]
 80a71a6:	ab1d      	add	r3, sp, #116	; 0x74
 80a71a8:	9300      	str	r3, [sp, #0]
 80a71aa:	4642      	mov	r2, r8
 80a71ac:	464b      	mov	r3, r9
 80a71ae:	4650      	mov	r0, sl
 80a71b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a71b4:	f001 fd54 	bl	80a8c60 <__d2b>
 80a71b8:	901c      	str	r0, [sp, #112]	; 0x70
 80a71ba:	2800      	cmp	r0, #0
 80a71bc:	f43f aefb 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a71c0:	2101      	movs	r1, #1
 80a71c2:	4650      	mov	r0, sl
 80a71c4:	f001 fae9 	bl	80a879a <__i2b>
 80a71c8:	4603      	mov	r3, r0
 80a71ca:	9004      	str	r0, [sp, #16]
 80a71cc:	2800      	cmp	r0, #0
 80a71ce:	f43f aef2 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a71d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80a71d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80a71d6:	2d00      	cmp	r5, #0
 80a71d8:	bfab      	itete	ge
 80a71da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80a71dc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80a71de:	18ee      	addge	r6, r5, r3
 80a71e0:	1b5c      	sublt	r4, r3, r5
 80a71e2:	9b05      	ldr	r3, [sp, #20]
 80a71e4:	bfa8      	it	ge
 80a71e6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80a71e8:	eba5 0503 	sub.w	r5, r5, r3
 80a71ec:	4415      	add	r5, r2
 80a71ee:	4b71      	ldr	r3, [pc, #452]	; (80a73b4 <_strtod_l+0x884>)
 80a71f0:	f105 35ff 	add.w	r5, r5, #4294967295
 80a71f4:	bfb8      	it	lt
 80a71f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80a71f8:	429d      	cmp	r5, r3
 80a71fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80a71fe:	f280 80c9 	bge.w	80a7394 <_strtod_l+0x864>
 80a7202:	1b5b      	subs	r3, r3, r5
 80a7204:	2b1f      	cmp	r3, #31
 80a7206:	f04f 0701 	mov.w	r7, #1
 80a720a:	eba2 0203 	sub.w	r2, r2, r3
 80a720e:	f300 80b6 	bgt.w	80a737e <_strtod_l+0x84e>
 80a7212:	2500      	movs	r5, #0
 80a7214:	fa07 f303 	lsl.w	r3, r7, r3
 80a7218:	930f      	str	r3, [sp, #60]	; 0x3c
 80a721a:	18b7      	adds	r7, r6, r2
 80a721c:	9b05      	ldr	r3, [sp, #20]
 80a721e:	42be      	cmp	r6, r7
 80a7220:	4414      	add	r4, r2
 80a7222:	441c      	add	r4, r3
 80a7224:	4633      	mov	r3, r6
 80a7226:	bfa8      	it	ge
 80a7228:	463b      	movge	r3, r7
 80a722a:	42a3      	cmp	r3, r4
 80a722c:	bfa8      	it	ge
 80a722e:	4623      	movge	r3, r4
 80a7230:	2b00      	cmp	r3, #0
 80a7232:	bfc2      	ittt	gt
 80a7234:	1aff      	subgt	r7, r7, r3
 80a7236:	1ae4      	subgt	r4, r4, r3
 80a7238:	1af6      	subgt	r6, r6, r3
 80a723a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a723c:	2b00      	cmp	r3, #0
 80a723e:	dd17      	ble.n	80a7270 <_strtod_l+0x740>
 80a7240:	461a      	mov	r2, r3
 80a7242:	4650      	mov	r0, sl
 80a7244:	9904      	ldr	r1, [sp, #16]
 80a7246:	f001 fb4d 	bl	80a88e4 <__pow5mult>
 80a724a:	9004      	str	r0, [sp, #16]
 80a724c:	2800      	cmp	r0, #0
 80a724e:	f43f aeb2 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a7252:	4601      	mov	r1, r0
 80a7254:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a7256:	4650      	mov	r0, sl
 80a7258:	f001 faa8 	bl	80a87ac <__multiply>
 80a725c:	9009      	str	r0, [sp, #36]	; 0x24
 80a725e:	2800      	cmp	r0, #0
 80a7260:	f43f aea9 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a7264:	4650      	mov	r0, sl
 80a7266:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a7268:	f001 f9b6 	bl	80a85d8 <_Bfree>
 80a726c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a726e:	931c      	str	r3, [sp, #112]	; 0x70
 80a7270:	2f00      	cmp	r7, #0
 80a7272:	f300 8093 	bgt.w	80a739c <_strtod_l+0x86c>
 80a7276:	9b07      	ldr	r3, [sp, #28]
 80a7278:	2b00      	cmp	r3, #0
 80a727a:	dd08      	ble.n	80a728e <_strtod_l+0x75e>
 80a727c:	4650      	mov	r0, sl
 80a727e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80a7280:	9906      	ldr	r1, [sp, #24]
 80a7282:	f001 fb2f 	bl	80a88e4 <__pow5mult>
 80a7286:	9006      	str	r0, [sp, #24]
 80a7288:	2800      	cmp	r0, #0
 80a728a:	f43f ae94 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a728e:	2c00      	cmp	r4, #0
 80a7290:	dd08      	ble.n	80a72a4 <_strtod_l+0x774>
 80a7292:	4622      	mov	r2, r4
 80a7294:	4650      	mov	r0, sl
 80a7296:	9906      	ldr	r1, [sp, #24]
 80a7298:	f001 fb72 	bl	80a8980 <__lshift>
 80a729c:	9006      	str	r0, [sp, #24]
 80a729e:	2800      	cmp	r0, #0
 80a72a0:	f43f ae89 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a72a4:	2e00      	cmp	r6, #0
 80a72a6:	dd08      	ble.n	80a72ba <_strtod_l+0x78a>
 80a72a8:	4632      	mov	r2, r6
 80a72aa:	4650      	mov	r0, sl
 80a72ac:	9904      	ldr	r1, [sp, #16]
 80a72ae:	f001 fb67 	bl	80a8980 <__lshift>
 80a72b2:	9004      	str	r0, [sp, #16]
 80a72b4:	2800      	cmp	r0, #0
 80a72b6:	f43f ae7e 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a72ba:	4650      	mov	r0, sl
 80a72bc:	9a06      	ldr	r2, [sp, #24]
 80a72be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a72c0:	f001 fbd8 	bl	80a8a74 <__mdiff>
 80a72c4:	4683      	mov	fp, r0
 80a72c6:	2800      	cmp	r0, #0
 80a72c8:	f43f ae75 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a72cc:	2400      	movs	r4, #0
 80a72ce:	68c3      	ldr	r3, [r0, #12]
 80a72d0:	9904      	ldr	r1, [sp, #16]
 80a72d2:	60c4      	str	r4, [r0, #12]
 80a72d4:	930d      	str	r3, [sp, #52]	; 0x34
 80a72d6:	f001 fbb2 	bl	80a8a3e <__mcmp>
 80a72da:	42a0      	cmp	r0, r4
 80a72dc:	da70      	bge.n	80a73c0 <_strtod_l+0x890>
 80a72de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a72e0:	ea53 0308 	orrs.w	r3, r3, r8
 80a72e4:	f040 8096 	bne.w	80a7414 <_strtod_l+0x8e4>
 80a72e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a72ec:	2b00      	cmp	r3, #0
 80a72ee:	f040 8091 	bne.w	80a7414 <_strtod_l+0x8e4>
 80a72f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a72f6:	0d1b      	lsrs	r3, r3, #20
 80a72f8:	051b      	lsls	r3, r3, #20
 80a72fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a72fe:	f240 8089 	bls.w	80a7414 <_strtod_l+0x8e4>
 80a7302:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a7306:	b923      	cbnz	r3, 80a7312 <_strtod_l+0x7e2>
 80a7308:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a730c:	2b01      	cmp	r3, #1
 80a730e:	f340 8081 	ble.w	80a7414 <_strtod_l+0x8e4>
 80a7312:	4659      	mov	r1, fp
 80a7314:	2201      	movs	r2, #1
 80a7316:	4650      	mov	r0, sl
 80a7318:	f001 fb32 	bl	80a8980 <__lshift>
 80a731c:	9904      	ldr	r1, [sp, #16]
 80a731e:	4683      	mov	fp, r0
 80a7320:	f001 fb8d 	bl	80a8a3e <__mcmp>
 80a7324:	2800      	cmp	r0, #0
 80a7326:	dd75      	ble.n	80a7414 <_strtod_l+0x8e4>
 80a7328:	9905      	ldr	r1, [sp, #20]
 80a732a:	464b      	mov	r3, r9
 80a732c:	4a22      	ldr	r2, [pc, #136]	; (80a73b8 <_strtod_l+0x888>)
 80a732e:	2900      	cmp	r1, #0
 80a7330:	f000 8091 	beq.w	80a7456 <_strtod_l+0x926>
 80a7334:	ea02 0109 	and.w	r1, r2, r9
 80a7338:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80a733c:	f300 808b 	bgt.w	80a7456 <_strtod_l+0x926>
 80a7340:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80a7344:	f77f aea9 	ble.w	80a709a <_strtod_l+0x56a>
 80a7348:	2300      	movs	r3, #0
 80a734a:	4a1c      	ldr	r2, [pc, #112]	; (80a73bc <_strtod_l+0x88c>)
 80a734c:	4640      	mov	r0, r8
 80a734e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80a7352:	4649      	mov	r1, r9
 80a7354:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80a7358:	f7fe fa3c 	bl	80a57d4 <__aeabi_dmul>
 80a735c:	460b      	mov	r3, r1
 80a735e:	4303      	orrs	r3, r0
 80a7360:	bf08      	it	eq
 80a7362:	2322      	moveq	r3, #34	; 0x22
 80a7364:	4680      	mov	r8, r0
 80a7366:	4689      	mov	r9, r1
 80a7368:	bf08      	it	eq
 80a736a:	f8ca 3000 	streq.w	r3, [sl]
 80a736e:	e62d      	b.n	80a6fcc <_strtod_l+0x49c>
 80a7370:	f04f 32ff 	mov.w	r2, #4294967295
 80a7374:	fa02 f303 	lsl.w	r3, r2, r3
 80a7378:	ea03 0808 	and.w	r8, r3, r8
 80a737c:	e6db      	b.n	80a7136 <_strtod_l+0x606>
 80a737e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80a7382:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80a7386:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80a738a:	35e2      	adds	r5, #226	; 0xe2
 80a738c:	fa07 f505 	lsl.w	r5, r7, r5
 80a7390:	970f      	str	r7, [sp, #60]	; 0x3c
 80a7392:	e742      	b.n	80a721a <_strtod_l+0x6ea>
 80a7394:	2301      	movs	r3, #1
 80a7396:	2500      	movs	r5, #0
 80a7398:	930f      	str	r3, [sp, #60]	; 0x3c
 80a739a:	e73e      	b.n	80a721a <_strtod_l+0x6ea>
 80a739c:	463a      	mov	r2, r7
 80a739e:	4650      	mov	r0, sl
 80a73a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a73a2:	f001 faed 	bl	80a8980 <__lshift>
 80a73a6:	901c      	str	r0, [sp, #112]	; 0x70
 80a73a8:	2800      	cmp	r0, #0
 80a73aa:	f47f af64 	bne.w	80a7276 <_strtod_l+0x746>
 80a73ae:	e602      	b.n	80a6fb6 <_strtod_l+0x486>
 80a73b0:	080a9238 	.word	0x080a9238
 80a73b4:	fffffc02 	.word	0xfffffc02
 80a73b8:	7ff00000 	.word	0x7ff00000
 80a73bc:	39500000 	.word	0x39500000
 80a73c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a73c4:	d166      	bne.n	80a7494 <_strtod_l+0x964>
 80a73c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a73c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a73cc:	b35a      	cbz	r2, 80a7426 <_strtod_l+0x8f6>
 80a73ce:	4a9c      	ldr	r2, [pc, #624]	; (80a7640 <_strtod_l+0xb10>)
 80a73d0:	4293      	cmp	r3, r2
 80a73d2:	d12c      	bne.n	80a742e <_strtod_l+0x8fe>
 80a73d4:	9b05      	ldr	r3, [sp, #20]
 80a73d6:	4640      	mov	r0, r8
 80a73d8:	b303      	cbz	r3, 80a741c <_strtod_l+0x8ec>
 80a73da:	464b      	mov	r3, r9
 80a73dc:	4a99      	ldr	r2, [pc, #612]	; (80a7644 <_strtod_l+0xb14>)
 80a73de:	f04f 31ff 	mov.w	r1, #4294967295
 80a73e2:	401a      	ands	r2, r3
 80a73e4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80a73e8:	d81b      	bhi.n	80a7422 <_strtod_l+0x8f2>
 80a73ea:	0d12      	lsrs	r2, r2, #20
 80a73ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80a73f0:	fa01 f303 	lsl.w	r3, r1, r3
 80a73f4:	4298      	cmp	r0, r3
 80a73f6:	d11a      	bne.n	80a742e <_strtod_l+0x8fe>
 80a73f8:	4b93      	ldr	r3, [pc, #588]	; (80a7648 <_strtod_l+0xb18>)
 80a73fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a73fc:	429a      	cmp	r2, r3
 80a73fe:	d102      	bne.n	80a7406 <_strtod_l+0x8d6>
 80a7400:	3001      	adds	r0, #1
 80a7402:	f43f add8 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a7406:	f04f 0800 	mov.w	r8, #0
 80a740a:	4b8e      	ldr	r3, [pc, #568]	; (80a7644 <_strtod_l+0xb14>)
 80a740c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a740e:	401a      	ands	r2, r3
 80a7410:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80a7414:	9b05      	ldr	r3, [sp, #20]
 80a7416:	2b00      	cmp	r3, #0
 80a7418:	d196      	bne.n	80a7348 <_strtod_l+0x818>
 80a741a:	e5d7      	b.n	80a6fcc <_strtod_l+0x49c>
 80a741c:	f04f 33ff 	mov.w	r3, #4294967295
 80a7420:	e7e8      	b.n	80a73f4 <_strtod_l+0x8c4>
 80a7422:	460b      	mov	r3, r1
 80a7424:	e7e6      	b.n	80a73f4 <_strtod_l+0x8c4>
 80a7426:	ea53 0308 	orrs.w	r3, r3, r8
 80a742a:	f43f af7d 	beq.w	80a7328 <_strtod_l+0x7f8>
 80a742e:	b1e5      	cbz	r5, 80a746a <_strtod_l+0x93a>
 80a7430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7432:	421d      	tst	r5, r3
 80a7434:	d0ee      	beq.n	80a7414 <_strtod_l+0x8e4>
 80a7436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a7438:	4640      	mov	r0, r8
 80a743a:	4649      	mov	r1, r9
 80a743c:	9a05      	ldr	r2, [sp, #20]
 80a743e:	b1c3      	cbz	r3, 80a7472 <_strtod_l+0x942>
 80a7440:	f7ff fb53 	bl	80a6aea <sulp>
 80a7444:	4602      	mov	r2, r0
 80a7446:	460b      	mov	r3, r1
 80a7448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a744c:	f7fe f80c 	bl	80a5468 <__adddf3>
 80a7450:	4680      	mov	r8, r0
 80a7452:	4689      	mov	r9, r1
 80a7454:	e7de      	b.n	80a7414 <_strtod_l+0x8e4>
 80a7456:	4013      	ands	r3, r2
 80a7458:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a745c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a7460:	f04f 38ff 	mov.w	r8, #4294967295
 80a7464:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a7468:	e7d4      	b.n	80a7414 <_strtod_l+0x8e4>
 80a746a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a746c:	ea13 0f08 	tst.w	r3, r8
 80a7470:	e7e0      	b.n	80a7434 <_strtod_l+0x904>
 80a7472:	f7ff fb3a 	bl	80a6aea <sulp>
 80a7476:	4602      	mov	r2, r0
 80a7478:	460b      	mov	r3, r1
 80a747a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a747e:	f7fd fff1 	bl	80a5464 <__aeabi_dsub>
 80a7482:	2200      	movs	r2, #0
 80a7484:	2300      	movs	r3, #0
 80a7486:	4680      	mov	r8, r0
 80a7488:	4689      	mov	r9, r1
 80a748a:	f7fe fc0b 	bl	80a5ca4 <__aeabi_dcmpeq>
 80a748e:	2800      	cmp	r0, #0
 80a7490:	d0c0      	beq.n	80a7414 <_strtod_l+0x8e4>
 80a7492:	e602      	b.n	80a709a <_strtod_l+0x56a>
 80a7494:	4658      	mov	r0, fp
 80a7496:	9904      	ldr	r1, [sp, #16]
 80a7498:	f001 fc31 	bl	80a8cfe <__ratio>
 80a749c:	2200      	movs	r2, #0
 80a749e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a74a2:	4606      	mov	r6, r0
 80a74a4:	460f      	mov	r7, r1
 80a74a6:	f7fe fc11 	bl	80a5ccc <__aeabi_dcmple>
 80a74aa:	2800      	cmp	r0, #0
 80a74ac:	d075      	beq.n	80a759a <_strtod_l+0xa6a>
 80a74ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a74b0:	2b00      	cmp	r3, #0
 80a74b2:	d047      	beq.n	80a7544 <_strtod_l+0xa14>
 80a74b4:	2600      	movs	r6, #0
 80a74b6:	4f65      	ldr	r7, [pc, #404]	; (80a764c <_strtod_l+0xb1c>)
 80a74b8:	4d64      	ldr	r5, [pc, #400]	; (80a764c <_strtod_l+0xb1c>)
 80a74ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a74bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80a74c0:	0d1b      	lsrs	r3, r3, #20
 80a74c2:	051b      	lsls	r3, r3, #20
 80a74c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80a74c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a74c8:	4b61      	ldr	r3, [pc, #388]	; (80a7650 <_strtod_l+0xb20>)
 80a74ca:	429a      	cmp	r2, r3
 80a74cc:	f040 80c8 	bne.w	80a7660 <_strtod_l+0xb30>
 80a74d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a74d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80a74d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a74da:	4640      	mov	r0, r8
 80a74dc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80a74e0:	4649      	mov	r1, r9
 80a74e2:	f001 fb43 	bl	80a8b6c <__ulp>
 80a74e6:	4602      	mov	r2, r0
 80a74e8:	460b      	mov	r3, r1
 80a74ea:	4630      	mov	r0, r6
 80a74ec:	4639      	mov	r1, r7
 80a74ee:	f7fe f971 	bl	80a57d4 <__aeabi_dmul>
 80a74f2:	4642      	mov	r2, r8
 80a74f4:	464b      	mov	r3, r9
 80a74f6:	f7fd ffb7 	bl	80a5468 <__adddf3>
 80a74fa:	460b      	mov	r3, r1
 80a74fc:	4951      	ldr	r1, [pc, #324]	; (80a7644 <_strtod_l+0xb14>)
 80a74fe:	4a55      	ldr	r2, [pc, #340]	; (80a7654 <_strtod_l+0xb24>)
 80a7500:	4019      	ands	r1, r3
 80a7502:	4291      	cmp	r1, r2
 80a7504:	4680      	mov	r8, r0
 80a7506:	d95e      	bls.n	80a75c6 <_strtod_l+0xa96>
 80a7508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a750a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80a750e:	4293      	cmp	r3, r2
 80a7510:	d103      	bne.n	80a751a <_strtod_l+0x9ea>
 80a7512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7514:	3301      	adds	r3, #1
 80a7516:	f43f ad4e 	beq.w	80a6fb6 <_strtod_l+0x486>
 80a751a:	f04f 38ff 	mov.w	r8, #4294967295
 80a751e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80a7648 <_strtod_l+0xb18>
 80a7522:	4650      	mov	r0, sl
 80a7524:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a7526:	f001 f857 	bl	80a85d8 <_Bfree>
 80a752a:	4650      	mov	r0, sl
 80a752c:	9906      	ldr	r1, [sp, #24]
 80a752e:	f001 f853 	bl	80a85d8 <_Bfree>
 80a7532:	4650      	mov	r0, sl
 80a7534:	9904      	ldr	r1, [sp, #16]
 80a7536:	f001 f84f 	bl	80a85d8 <_Bfree>
 80a753a:	4659      	mov	r1, fp
 80a753c:	4650      	mov	r0, sl
 80a753e:	f001 f84b 	bl	80a85d8 <_Bfree>
 80a7542:	e61c      	b.n	80a717e <_strtod_l+0x64e>
 80a7544:	f1b8 0f00 	cmp.w	r8, #0
 80a7548:	d119      	bne.n	80a757e <_strtod_l+0xa4e>
 80a754a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a754c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a7550:	b9e3      	cbnz	r3, 80a758c <_strtod_l+0xa5c>
 80a7552:	2200      	movs	r2, #0
 80a7554:	4630      	mov	r0, r6
 80a7556:	4639      	mov	r1, r7
 80a7558:	4b3c      	ldr	r3, [pc, #240]	; (80a764c <_strtod_l+0xb1c>)
 80a755a:	f7fe fbad 	bl	80a5cb8 <__aeabi_dcmplt>
 80a755e:	b9c8      	cbnz	r0, 80a7594 <_strtod_l+0xa64>
 80a7560:	2200      	movs	r2, #0
 80a7562:	4630      	mov	r0, r6
 80a7564:	4639      	mov	r1, r7
 80a7566:	4b3c      	ldr	r3, [pc, #240]	; (80a7658 <_strtod_l+0xb28>)
 80a7568:	f7fe f934 	bl	80a57d4 <__aeabi_dmul>
 80a756c:	4604      	mov	r4, r0
 80a756e:	460d      	mov	r5, r1
 80a7570:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a7574:	9418      	str	r4, [sp, #96]	; 0x60
 80a7576:	9319      	str	r3, [sp, #100]	; 0x64
 80a7578:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80a757c:	e79d      	b.n	80a74ba <_strtod_l+0x98a>
 80a757e:	f1b8 0f01 	cmp.w	r8, #1
 80a7582:	d103      	bne.n	80a758c <_strtod_l+0xa5c>
 80a7584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7586:	2b00      	cmp	r3, #0
 80a7588:	f43f ad87 	beq.w	80a709a <_strtod_l+0x56a>
 80a758c:	2600      	movs	r6, #0
 80a758e:	2400      	movs	r4, #0
 80a7590:	4f32      	ldr	r7, [pc, #200]	; (80a765c <_strtod_l+0xb2c>)
 80a7592:	e791      	b.n	80a74b8 <_strtod_l+0x988>
 80a7594:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a7596:	4d30      	ldr	r5, [pc, #192]	; (80a7658 <_strtod_l+0xb28>)
 80a7598:	e7ea      	b.n	80a7570 <_strtod_l+0xa40>
 80a759a:	4b2f      	ldr	r3, [pc, #188]	; (80a7658 <_strtod_l+0xb28>)
 80a759c:	2200      	movs	r2, #0
 80a759e:	4630      	mov	r0, r6
 80a75a0:	4639      	mov	r1, r7
 80a75a2:	f7fe f917 	bl	80a57d4 <__aeabi_dmul>
 80a75a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a75a8:	4604      	mov	r4, r0
 80a75aa:	460d      	mov	r5, r1
 80a75ac:	b933      	cbnz	r3, 80a75bc <_strtod_l+0xa8c>
 80a75ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a75b2:	9010      	str	r0, [sp, #64]	; 0x40
 80a75b4:	9311      	str	r3, [sp, #68]	; 0x44
 80a75b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a75ba:	e77e      	b.n	80a74ba <_strtod_l+0x98a>
 80a75bc:	4602      	mov	r2, r0
 80a75be:	460b      	mov	r3, r1
 80a75c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a75c4:	e7f7      	b.n	80a75b6 <_strtod_l+0xa86>
 80a75c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80a75ca:	9b05      	ldr	r3, [sp, #20]
 80a75cc:	2b00      	cmp	r3, #0
 80a75ce:	d1a8      	bne.n	80a7522 <_strtod_l+0x9f2>
 80a75d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a75d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a75d6:	0d1b      	lsrs	r3, r3, #20
 80a75d8:	051b      	lsls	r3, r3, #20
 80a75da:	429a      	cmp	r2, r3
 80a75dc:	d1a1      	bne.n	80a7522 <_strtod_l+0x9f2>
 80a75de:	4620      	mov	r0, r4
 80a75e0:	4629      	mov	r1, r5
 80a75e2:	f001 fc7d 	bl	80a8ee0 <__aeabi_d2lz>
 80a75e6:	f7fe f8c7 	bl	80a5778 <__aeabi_l2d>
 80a75ea:	4602      	mov	r2, r0
 80a75ec:	460b      	mov	r3, r1
 80a75ee:	4620      	mov	r0, r4
 80a75f0:	4629      	mov	r1, r5
 80a75f2:	f7fd ff37 	bl	80a5464 <__aeabi_dsub>
 80a75f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a75f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a75fc:	ea43 0308 	orr.w	r3, r3, r8
 80a7600:	4313      	orrs	r3, r2
 80a7602:	4604      	mov	r4, r0
 80a7604:	460d      	mov	r5, r1
 80a7606:	d066      	beq.n	80a76d6 <_strtod_l+0xba6>
 80a7608:	a309      	add	r3, pc, #36	; (adr r3, 80a7630 <_strtod_l+0xb00>)
 80a760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a760e:	f7fe fb53 	bl	80a5cb8 <__aeabi_dcmplt>
 80a7612:	2800      	cmp	r0, #0
 80a7614:	f47f acda 	bne.w	80a6fcc <_strtod_l+0x49c>
 80a7618:	a307      	add	r3, pc, #28	; (adr r3, 80a7638 <_strtod_l+0xb08>)
 80a761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a761e:	4620      	mov	r0, r4
 80a7620:	4629      	mov	r1, r5
 80a7622:	f7fe fb67 	bl	80a5cf4 <__aeabi_dcmpgt>
 80a7626:	2800      	cmp	r0, #0
 80a7628:	f43f af7b 	beq.w	80a7522 <_strtod_l+0x9f2>
 80a762c:	e4ce      	b.n	80a6fcc <_strtod_l+0x49c>
 80a762e:	bf00      	nop
 80a7630:	94a03595 	.word	0x94a03595
 80a7634:	3fdfffff 	.word	0x3fdfffff
 80a7638:	35afe535 	.word	0x35afe535
 80a763c:	3fe00000 	.word	0x3fe00000
 80a7640:	000fffff 	.word	0x000fffff
 80a7644:	7ff00000 	.word	0x7ff00000
 80a7648:	7fefffff 	.word	0x7fefffff
 80a764c:	3ff00000 	.word	0x3ff00000
 80a7650:	7fe00000 	.word	0x7fe00000
 80a7654:	7c9fffff 	.word	0x7c9fffff
 80a7658:	3fe00000 	.word	0x3fe00000
 80a765c:	bff00000 	.word	0xbff00000
 80a7660:	9b05      	ldr	r3, [sp, #20]
 80a7662:	b313      	cbz	r3, 80a76aa <_strtod_l+0xb7a>
 80a7664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a7666:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a766a:	d81e      	bhi.n	80a76aa <_strtod_l+0xb7a>
 80a766c:	a326      	add	r3, pc, #152	; (adr r3, 80a7708 <_strtod_l+0xbd8>)
 80a766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7672:	4620      	mov	r0, r4
 80a7674:	4629      	mov	r1, r5
 80a7676:	f7fe fb29 	bl	80a5ccc <__aeabi_dcmple>
 80a767a:	b190      	cbz	r0, 80a76a2 <_strtod_l+0xb72>
 80a767c:	4629      	mov	r1, r5
 80a767e:	4620      	mov	r0, r4
 80a7680:	f7fe fb6a 	bl	80a5d58 <__aeabi_d2uiz>
 80a7684:	2801      	cmp	r0, #1
 80a7686:	bf38      	it	cc
 80a7688:	2001      	movcc	r0, #1
 80a768a:	f7fe f829 	bl	80a56e0 <__aeabi_ui2d>
 80a768e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a7690:	4604      	mov	r4, r0
 80a7692:	460d      	mov	r5, r1
 80a7694:	b9d3      	cbnz	r3, 80a76cc <_strtod_l+0xb9c>
 80a7696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a769a:	9012      	str	r0, [sp, #72]	; 0x48
 80a769c:	9313      	str	r3, [sp, #76]	; 0x4c
 80a769e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80a76a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a76a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a76a8:	1a9f      	subs	r7, r3, r2
 80a76aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a76ae:	f001 fa5d 	bl	80a8b6c <__ulp>
 80a76b2:	4602      	mov	r2, r0
 80a76b4:	460b      	mov	r3, r1
 80a76b6:	4630      	mov	r0, r6
 80a76b8:	4639      	mov	r1, r7
 80a76ba:	f7fe f88b 	bl	80a57d4 <__aeabi_dmul>
 80a76be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a76c2:	f7fd fed1 	bl	80a5468 <__adddf3>
 80a76c6:	4680      	mov	r8, r0
 80a76c8:	4689      	mov	r9, r1
 80a76ca:	e77e      	b.n	80a75ca <_strtod_l+0xa9a>
 80a76cc:	4602      	mov	r2, r0
 80a76ce:	460b      	mov	r3, r1
 80a76d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80a76d4:	e7e3      	b.n	80a769e <_strtod_l+0xb6e>
 80a76d6:	a30e      	add	r3, pc, #56	; (adr r3, 80a7710 <_strtod_l+0xbe0>)
 80a76d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a76dc:	f7fe faec 	bl	80a5cb8 <__aeabi_dcmplt>
 80a76e0:	e7a1      	b.n	80a7626 <_strtod_l+0xaf6>
 80a76e2:	2300      	movs	r3, #0
 80a76e4:	930c      	str	r3, [sp, #48]	; 0x30
 80a76e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a76e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a76ea:	6013      	str	r3, [r2, #0]
 80a76ec:	f7ff ba65 	b.w	80a6bba <_strtod_l+0x8a>
 80a76f0:	2b65      	cmp	r3, #101	; 0x65
 80a76f2:	f43f ab5c 	beq.w	80a6dae <_strtod_l+0x27e>
 80a76f6:	2b45      	cmp	r3, #69	; 0x45
 80a76f8:	f43f ab59 	beq.w	80a6dae <_strtod_l+0x27e>
 80a76fc:	2201      	movs	r2, #1
 80a76fe:	f7ff bb8d 	b.w	80a6e1c <_strtod_l+0x2ec>
 80a7702:	bf00      	nop
 80a7704:	f3af 8000 	nop.w
 80a7708:	ffc00000 	.word	0xffc00000
 80a770c:	41dfffff 	.word	0x41dfffff
 80a7710:	94a03595 	.word	0x94a03595
 80a7714:	3fcfffff 	.word	0x3fcfffff

080a7718 <strtod>:
 80a7718:	460a      	mov	r2, r1
 80a771a:	4601      	mov	r1, r0
 80a771c:	4802      	ldr	r0, [pc, #8]	; (80a7728 <strtod+0x10>)
 80a771e:	4b03      	ldr	r3, [pc, #12]	; (80a772c <strtod+0x14>)
 80a7720:	6800      	ldr	r0, [r0, #0]
 80a7722:	f7ff ba05 	b.w	80a6b30 <_strtod_l>
 80a7726:	bf00      	nop
 80a7728:	20000004 	.word	0x20000004
 80a772c:	200000cc 	.word	0x200000cc

080a7730 <_strtoul_l.isra.0>:
 80a7730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a7734:	468c      	mov	ip, r1
 80a7736:	4686      	mov	lr, r0
 80a7738:	4e3a      	ldr	r6, [pc, #232]	; (80a7824 <_strtoul_l.isra.0+0xf4>)
 80a773a:	4660      	mov	r0, ip
 80a773c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a7740:	5da5      	ldrb	r5, [r4, r6]
 80a7742:	f015 0508 	ands.w	r5, r5, #8
 80a7746:	d1f8      	bne.n	80a773a <_strtoul_l.isra.0+0xa>
 80a7748:	2c2d      	cmp	r4, #45	; 0x2d
 80a774a:	d134      	bne.n	80a77b6 <_strtoul_l.isra.0+0x86>
 80a774c:	f04f 0801 	mov.w	r8, #1
 80a7750:	f89c 4000 	ldrb.w	r4, [ip]
 80a7754:	f100 0c02 	add.w	ip, r0, #2
 80a7758:	2b00      	cmp	r3, #0
 80a775a:	d05e      	beq.n	80a781a <_strtoul_l.isra.0+0xea>
 80a775c:	2b10      	cmp	r3, #16
 80a775e:	d10c      	bne.n	80a777a <_strtoul_l.isra.0+0x4a>
 80a7760:	2c30      	cmp	r4, #48	; 0x30
 80a7762:	d10a      	bne.n	80a777a <_strtoul_l.isra.0+0x4a>
 80a7764:	f89c 0000 	ldrb.w	r0, [ip]
 80a7768:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a776c:	2858      	cmp	r0, #88	; 0x58
 80a776e:	d14f      	bne.n	80a7810 <_strtoul_l.isra.0+0xe0>
 80a7770:	2310      	movs	r3, #16
 80a7772:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a7776:	f10c 0c02 	add.w	ip, ip, #2
 80a777a:	f04f 37ff 	mov.w	r7, #4294967295
 80a777e:	fbb7 f7f3 	udiv	r7, r7, r3
 80a7782:	2500      	movs	r5, #0
 80a7784:	fb03 f907 	mul.w	r9, r3, r7
 80a7788:	4628      	mov	r0, r5
 80a778a:	ea6f 0909 	mvn.w	r9, r9
 80a778e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a7792:	2e09      	cmp	r6, #9
 80a7794:	d818      	bhi.n	80a77c8 <_strtoul_l.isra.0+0x98>
 80a7796:	4634      	mov	r4, r6
 80a7798:	42a3      	cmp	r3, r4
 80a779a:	dd24      	ble.n	80a77e6 <_strtoul_l.isra.0+0xb6>
 80a779c:	2d00      	cmp	r5, #0
 80a779e:	db1f      	blt.n	80a77e0 <_strtoul_l.isra.0+0xb0>
 80a77a0:	4287      	cmp	r7, r0
 80a77a2:	d31d      	bcc.n	80a77e0 <_strtoul_l.isra.0+0xb0>
 80a77a4:	d101      	bne.n	80a77aa <_strtoul_l.isra.0+0x7a>
 80a77a6:	45a1      	cmp	r9, r4
 80a77a8:	db1a      	blt.n	80a77e0 <_strtoul_l.isra.0+0xb0>
 80a77aa:	2501      	movs	r5, #1
 80a77ac:	fb00 4003 	mla	r0, r0, r3, r4
 80a77b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a77b4:	e7eb      	b.n	80a778e <_strtoul_l.isra.0+0x5e>
 80a77b6:	2c2b      	cmp	r4, #43	; 0x2b
 80a77b8:	bf08      	it	eq
 80a77ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a77be:	46a8      	mov	r8, r5
 80a77c0:	bf08      	it	eq
 80a77c2:	f100 0c02 	addeq.w	ip, r0, #2
 80a77c6:	e7c7      	b.n	80a7758 <_strtoul_l.isra.0+0x28>
 80a77c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a77cc:	2e19      	cmp	r6, #25
 80a77ce:	d801      	bhi.n	80a77d4 <_strtoul_l.isra.0+0xa4>
 80a77d0:	3c37      	subs	r4, #55	; 0x37
 80a77d2:	e7e1      	b.n	80a7798 <_strtoul_l.isra.0+0x68>
 80a77d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a77d8:	2e19      	cmp	r6, #25
 80a77da:	d804      	bhi.n	80a77e6 <_strtoul_l.isra.0+0xb6>
 80a77dc:	3c57      	subs	r4, #87	; 0x57
 80a77de:	e7db      	b.n	80a7798 <_strtoul_l.isra.0+0x68>
 80a77e0:	f04f 35ff 	mov.w	r5, #4294967295
 80a77e4:	e7e4      	b.n	80a77b0 <_strtoul_l.isra.0+0x80>
 80a77e6:	2d00      	cmp	r5, #0
 80a77e8:	da07      	bge.n	80a77fa <_strtoul_l.isra.0+0xca>
 80a77ea:	2322      	movs	r3, #34	; 0x22
 80a77ec:	f04f 30ff 	mov.w	r0, #4294967295
 80a77f0:	f8ce 3000 	str.w	r3, [lr]
 80a77f4:	b942      	cbnz	r2, 80a7808 <_strtoul_l.isra.0+0xd8>
 80a77f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a77fa:	f1b8 0f00 	cmp.w	r8, #0
 80a77fe:	d000      	beq.n	80a7802 <_strtoul_l.isra.0+0xd2>
 80a7800:	4240      	negs	r0, r0
 80a7802:	2a00      	cmp	r2, #0
 80a7804:	d0f7      	beq.n	80a77f6 <_strtoul_l.isra.0+0xc6>
 80a7806:	b10d      	cbz	r5, 80a780c <_strtoul_l.isra.0+0xdc>
 80a7808:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a780c:	6011      	str	r1, [r2, #0]
 80a780e:	e7f2      	b.n	80a77f6 <_strtoul_l.isra.0+0xc6>
 80a7810:	2430      	movs	r4, #48	; 0x30
 80a7812:	2b00      	cmp	r3, #0
 80a7814:	d1b1      	bne.n	80a777a <_strtoul_l.isra.0+0x4a>
 80a7816:	2308      	movs	r3, #8
 80a7818:	e7af      	b.n	80a777a <_strtoul_l.isra.0+0x4a>
 80a781a:	2c30      	cmp	r4, #48	; 0x30
 80a781c:	d0a2      	beq.n	80a7764 <_strtoul_l.isra.0+0x34>
 80a781e:	230a      	movs	r3, #10
 80a7820:	e7ab      	b.n	80a777a <_strtoul_l.isra.0+0x4a>
 80a7822:	bf00      	nop
 80a7824:	080a929d 	.word	0x080a929d

080a7828 <strtoul>:
 80a7828:	4613      	mov	r3, r2
 80a782a:	460a      	mov	r2, r1
 80a782c:	4601      	mov	r1, r0
 80a782e:	4802      	ldr	r0, [pc, #8]	; (80a7838 <strtoul+0x10>)
 80a7830:	6800      	ldr	r0, [r0, #0]
 80a7832:	f7ff bf7d 	b.w	80a7730 <_strtoul_l.isra.0>
 80a7836:	bf00      	nop
 80a7838:	20000004 	.word	0x20000004

080a783c <__tzcalc_limits>:
 80a783c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7840:	4680      	mov	r8, r0
 80a7842:	f000 fdcb 	bl	80a83dc <__gettzinfo>
 80a7846:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a784a:	4598      	cmp	r8, r3
 80a784c:	f340 8097 	ble.w	80a797e <__tzcalc_limits+0x142>
 80a7850:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a7854:	f240 126d 	movw	r2, #365	; 0x16d
 80a7858:	4443      	add	r3, r8
 80a785a:	109b      	asrs	r3, r3, #2
 80a785c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a7860:	fb02 3505 	mla	r5, r2, r5, r3
 80a7864:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a7868:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a786c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a7870:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a7874:	441d      	add	r5, r3
 80a7876:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a787a:	4442      	add	r2, r8
 80a787c:	fbb2 f2f3 	udiv	r2, r2, r3
 80a7880:	fb98 f7f3 	sdiv	r7, r8, r3
 80a7884:	4415      	add	r5, r2
 80a7886:	2264      	movs	r2, #100	; 0x64
 80a7888:	fb03 8717 	mls	r7, r3, r7, r8
 80a788c:	fb98 f6f2 	sdiv	r6, r8, r2
 80a7890:	fab7 fc87 	clz	ip, r7
 80a7894:	4604      	mov	r4, r0
 80a7896:	f04f 0e07 	mov.w	lr, #7
 80a789a:	fb02 8616 	mls	r6, r2, r6, r8
 80a789e:	f008 0303 	and.w	r3, r8, #3
 80a78a2:	f8c0 8004 	str.w	r8, [r0, #4]
 80a78a6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a78aa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a78ae:	9300      	str	r3, [sp, #0]
 80a78b0:	7a22      	ldrb	r2, [r4, #8]
 80a78b2:	6963      	ldr	r3, [r4, #20]
 80a78b4:	2a4a      	cmp	r2, #74	; 0x4a
 80a78b6:	d128      	bne.n	80a790a <__tzcalc_limits+0xce>
 80a78b8:	9900      	ldr	r1, [sp, #0]
 80a78ba:	18ea      	adds	r2, r5, r3
 80a78bc:	b901      	cbnz	r1, 80a78c0 <__tzcalc_limits+0x84>
 80a78be:	b906      	cbnz	r6, 80a78c2 <__tzcalc_limits+0x86>
 80a78c0:	bb0f      	cbnz	r7, 80a7906 <__tzcalc_limits+0xca>
 80a78c2:	2b3b      	cmp	r3, #59	; 0x3b
 80a78c4:	bfd4      	ite	le
 80a78c6:	2300      	movle	r3, #0
 80a78c8:	2301      	movgt	r3, #1
 80a78ca:	4413      	add	r3, r2
 80a78cc:	1e5a      	subs	r2, r3, #1
 80a78ce:	69a3      	ldr	r3, [r4, #24]
 80a78d0:	492c      	ldr	r1, [pc, #176]	; (80a7984 <__tzcalc_limits+0x148>)
 80a78d2:	3428      	adds	r4, #40	; 0x28
 80a78d4:	fb01 3202 	mla	r2, r1, r2, r3
 80a78d8:	6823      	ldr	r3, [r4, #0]
 80a78da:	4413      	add	r3, r2
 80a78dc:	461a      	mov	r2, r3
 80a78de:	17db      	asrs	r3, r3, #31
 80a78e0:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a78e4:	45a3      	cmp	fp, r4
 80a78e6:	d1e3      	bne.n	80a78b0 <__tzcalc_limits+0x74>
 80a78e8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a78ec:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a78f0:	4294      	cmp	r4, r2
 80a78f2:	eb75 0303 	sbcs.w	r3, r5, r3
 80a78f6:	bfb4      	ite	lt
 80a78f8:	2301      	movlt	r3, #1
 80a78fa:	2300      	movge	r3, #0
 80a78fc:	6003      	str	r3, [r0, #0]
 80a78fe:	2001      	movs	r0, #1
 80a7900:	b003      	add	sp, #12
 80a7902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7906:	2300      	movs	r3, #0
 80a7908:	e7df      	b.n	80a78ca <__tzcalc_limits+0x8e>
 80a790a:	2a44      	cmp	r2, #68	; 0x44
 80a790c:	d101      	bne.n	80a7912 <__tzcalc_limits+0xd6>
 80a790e:	18ea      	adds	r2, r5, r3
 80a7910:	e7dd      	b.n	80a78ce <__tzcalc_limits+0x92>
 80a7912:	9a00      	ldr	r2, [sp, #0]
 80a7914:	bb6a      	cbnz	r2, 80a7972 <__tzcalc_limits+0x136>
 80a7916:	2e00      	cmp	r6, #0
 80a7918:	bf0c      	ite	eq
 80a791a:	46e0      	moveq	r8, ip
 80a791c:	f04f 0801 	movne.w	r8, #1
 80a7920:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a7924:	68e2      	ldr	r2, [r4, #12]
 80a7926:	f04f 0900 	mov.w	r9, #0
 80a792a:	9201      	str	r2, [sp, #4]
 80a792c:	462a      	mov	r2, r5
 80a792e:	4916      	ldr	r1, [pc, #88]	; (80a7988 <__tzcalc_limits+0x14c>)
 80a7930:	fb0a 1808 	mla	r8, sl, r8, r1
 80a7934:	f1a8 0804 	sub.w	r8, r8, #4
 80a7938:	9901      	ldr	r1, [sp, #4]
 80a793a:	f109 0901 	add.w	r9, r9, #1
 80a793e:	4549      	cmp	r1, r9
 80a7940:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a7944:	dc17      	bgt.n	80a7976 <__tzcalc_limits+0x13a>
 80a7946:	f102 0804 	add.w	r8, r2, #4
 80a794a:	fb98 f9fe 	sdiv	r9, r8, lr
 80a794e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a7952:	eba8 0909 	sub.w	r9, r8, r9
 80a7956:	ebb3 0909 	subs.w	r9, r3, r9
 80a795a:	6923      	ldr	r3, [r4, #16]
 80a795c:	bf48      	it	mi
 80a795e:	f109 0907 	addmi.w	r9, r9, #7
 80a7962:	3b01      	subs	r3, #1
 80a7964:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a7968:	444b      	add	r3, r9
 80a796a:	4553      	cmp	r3, sl
 80a796c:	da05      	bge.n	80a797a <__tzcalc_limits+0x13e>
 80a796e:	441a      	add	r2, r3
 80a7970:	e7ad      	b.n	80a78ce <__tzcalc_limits+0x92>
 80a7972:	46e0      	mov	r8, ip
 80a7974:	e7d4      	b.n	80a7920 <__tzcalc_limits+0xe4>
 80a7976:	4452      	add	r2, sl
 80a7978:	e7de      	b.n	80a7938 <__tzcalc_limits+0xfc>
 80a797a:	3b07      	subs	r3, #7
 80a797c:	e7f5      	b.n	80a796a <__tzcalc_limits+0x12e>
 80a797e:	2000      	movs	r0, #0
 80a7980:	e7be      	b.n	80a7900 <__tzcalc_limits+0xc4>
 80a7982:	bf00      	nop
 80a7984:	00015180 	.word	0x00015180
 80a7988:	080a91a4 	.word	0x080a91a4

080a798c <__tz_lock>:
 80a798c:	4801      	ldr	r0, [pc, #4]	; (80a7994 <__tz_lock+0x8>)
 80a798e:	f000 bdd9 	b.w	80a8544 <__retarget_lock_acquire>
 80a7992:	bf00      	nop
 80a7994:	2000100f 	.word	0x2000100f

080a7998 <__tz_unlock>:
 80a7998:	4801      	ldr	r0, [pc, #4]	; (80a79a0 <__tz_unlock+0x8>)
 80a799a:	f000 bdd5 	b.w	80a8548 <__retarget_lock_release>
 80a799e:	bf00      	nop
 80a79a0:	2000100f 	.word	0x2000100f

080a79a4 <_tzset_unlocked>:
 80a79a4:	4b01      	ldr	r3, [pc, #4]	; (80a79ac <_tzset_unlocked+0x8>)
 80a79a6:	6818      	ldr	r0, [r3, #0]
 80a79a8:	f000 b802 	b.w	80a79b0 <_tzset_unlocked_r>
 80a79ac:	20000004 	.word	0x20000004

080a79b0 <_tzset_unlocked_r>:
 80a79b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a79b4:	b08d      	sub	sp, #52	; 0x34
 80a79b6:	4607      	mov	r7, r0
 80a79b8:	f000 fd10 	bl	80a83dc <__gettzinfo>
 80a79bc:	49b0      	ldr	r1, [pc, #704]	; (80a7c80 <_tzset_unlocked_r+0x2d0>)
 80a79be:	4605      	mov	r5, r0
 80a79c0:	4638      	mov	r0, r7
 80a79c2:	f000 fd03 	bl	80a83cc <_getenv_r>
 80a79c6:	4eaf      	ldr	r6, [pc, #700]	; (80a7c84 <_tzset_unlocked_r+0x2d4>)
 80a79c8:	4604      	mov	r4, r0
 80a79ca:	b970      	cbnz	r0, 80a79ea <_tzset_unlocked_r+0x3a>
 80a79cc:	4bae      	ldr	r3, [pc, #696]	; (80a7c88 <_tzset_unlocked_r+0x2d8>)
 80a79ce:	4aaf      	ldr	r2, [pc, #700]	; (80a7c8c <_tzset_unlocked_r+0x2dc>)
 80a79d0:	6018      	str	r0, [r3, #0]
 80a79d2:	4baf      	ldr	r3, [pc, #700]	; (80a7c90 <_tzset_unlocked_r+0x2e0>)
 80a79d4:	6018      	str	r0, [r3, #0]
 80a79d6:	4baf      	ldr	r3, [pc, #700]	; (80a7c94 <_tzset_unlocked_r+0x2e4>)
 80a79d8:	6830      	ldr	r0, [r6, #0]
 80a79da:	e9c3 2200 	strd	r2, r2, [r3]
 80a79de:	f7fc fb53 	bl	80a4088 <free>
 80a79e2:	6034      	str	r4, [r6, #0]
 80a79e4:	b00d      	add	sp, #52	; 0x34
 80a79e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a79ea:	6831      	ldr	r1, [r6, #0]
 80a79ec:	2900      	cmp	r1, #0
 80a79ee:	d15f      	bne.n	80a7ab0 <_tzset_unlocked_r+0x100>
 80a79f0:	6830      	ldr	r0, [r6, #0]
 80a79f2:	f7fc fb49 	bl	80a4088 <free>
 80a79f6:	4620      	mov	r0, r4
 80a79f8:	f7ff f85d 	bl	80a6ab6 <strlen>
 80a79fc:	1c41      	adds	r1, r0, #1
 80a79fe:	4638      	mov	r0, r7
 80a7a00:	f7fc fb5a 	bl	80a40b8 <_malloc_r>
 80a7a04:	6030      	str	r0, [r6, #0]
 80a7a06:	2800      	cmp	r0, #0
 80a7a08:	d157      	bne.n	80a7aba <_tzset_unlocked_r+0x10a>
 80a7a0a:	7823      	ldrb	r3, [r4, #0]
 80a7a0c:	ae0a      	add	r6, sp, #40	; 0x28
 80a7a0e:	2b3a      	cmp	r3, #58	; 0x3a
 80a7a10:	bf08      	it	eq
 80a7a12:	3401      	addeq	r4, #1
 80a7a14:	4633      	mov	r3, r6
 80a7a16:	4620      	mov	r0, r4
 80a7a18:	4a9f      	ldr	r2, [pc, #636]	; (80a7c98 <_tzset_unlocked_r+0x2e8>)
 80a7a1a:	49a0      	ldr	r1, [pc, #640]	; (80a7c9c <_tzset_unlocked_r+0x2ec>)
 80a7a1c:	f7fc fb3c 	bl	80a4098 <siscanf>
 80a7a20:	2800      	cmp	r0, #0
 80a7a22:	dddf      	ble.n	80a79e4 <_tzset_unlocked_r+0x34>
 80a7a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7a26:	18e7      	adds	r7, r4, r3
 80a7a28:	5ce3      	ldrb	r3, [r4, r3]
 80a7a2a:	2b2d      	cmp	r3, #45	; 0x2d
 80a7a2c:	d149      	bne.n	80a7ac2 <_tzset_unlocked_r+0x112>
 80a7a2e:	f04f 34ff 	mov.w	r4, #4294967295
 80a7a32:	3701      	adds	r7, #1
 80a7a34:	f04f 0800 	mov.w	r8, #0
 80a7a38:	f10d 0a20 	add.w	sl, sp, #32
 80a7a3c:	f10d 0b1e 	add.w	fp, sp, #30
 80a7a40:	4633      	mov	r3, r6
 80a7a42:	4638      	mov	r0, r7
 80a7a44:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a7a48:	4995      	ldr	r1, [pc, #596]	; (80a7ca0 <_tzset_unlocked_r+0x2f0>)
 80a7a4a:	9603      	str	r6, [sp, #12]
 80a7a4c:	f8cd b000 	str.w	fp, [sp]
 80a7a50:	aa07      	add	r2, sp, #28
 80a7a52:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a7a56:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a7a5a:	f7fc fb1d 	bl	80a4098 <siscanf>
 80a7a5e:	4540      	cmp	r0, r8
 80a7a60:	ddc0      	ble.n	80a79e4 <_tzset_unlocked_r+0x34>
 80a7a62:	213c      	movs	r1, #60	; 0x3c
 80a7a64:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7a68:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7a6c:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a7cac <_tzset_unlocked_r+0x2fc>
 80a7a70:	fb01 2203 	mla	r2, r1, r3, r2
 80a7a74:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7a78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7a7c:	fb01 2303 	mla	r3, r1, r3, r2
 80a7a80:	435c      	muls	r4, r3
 80a7a82:	4b85      	ldr	r3, [pc, #532]	; (80a7c98 <_tzset_unlocked_r+0x2e8>)
 80a7a84:	62ac      	str	r4, [r5, #40]	; 0x28
 80a7a86:	4c83      	ldr	r4, [pc, #524]	; (80a7c94 <_tzset_unlocked_r+0x2e4>)
 80a7a88:	464a      	mov	r2, r9
 80a7a8a:	6023      	str	r3, [r4, #0]
 80a7a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7a8e:	4983      	ldr	r1, [pc, #524]	; (80a7c9c <_tzset_unlocked_r+0x2ec>)
 80a7a90:	441f      	add	r7, r3
 80a7a92:	4638      	mov	r0, r7
 80a7a94:	4633      	mov	r3, r6
 80a7a96:	f7fc faff 	bl	80a4098 <siscanf>
 80a7a9a:	4540      	cmp	r0, r8
 80a7a9c:	dc17      	bgt.n	80a7ace <_tzset_unlocked_r+0x11e>
 80a7a9e:	6823      	ldr	r3, [r4, #0]
 80a7aa0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7aa2:	6063      	str	r3, [r4, #4]
 80a7aa4:	4b78      	ldr	r3, [pc, #480]	; (80a7c88 <_tzset_unlocked_r+0x2d8>)
 80a7aa6:	601a      	str	r2, [r3, #0]
 80a7aa8:	4b79      	ldr	r3, [pc, #484]	; (80a7c90 <_tzset_unlocked_r+0x2e0>)
 80a7aaa:	f8c3 8000 	str.w	r8, [r3]
 80a7aae:	e799      	b.n	80a79e4 <_tzset_unlocked_r+0x34>
 80a7ab0:	f7fe ffd4 	bl	80a6a5c <strcmp>
 80a7ab4:	2800      	cmp	r0, #0
 80a7ab6:	d19b      	bne.n	80a79f0 <_tzset_unlocked_r+0x40>
 80a7ab8:	e794      	b.n	80a79e4 <_tzset_unlocked_r+0x34>
 80a7aba:	4621      	mov	r1, r4
 80a7abc:	f7fe ffd8 	bl	80a6a70 <strcpy>
 80a7ac0:	e7a3      	b.n	80a7a0a <_tzset_unlocked_r+0x5a>
 80a7ac2:	2b2b      	cmp	r3, #43	; 0x2b
 80a7ac4:	f04f 0401 	mov.w	r4, #1
 80a7ac8:	bf08      	it	eq
 80a7aca:	3701      	addeq	r7, #1
 80a7acc:	e7b2      	b.n	80a7a34 <_tzset_unlocked_r+0x84>
 80a7ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7ad0:	f8c4 9004 	str.w	r9, [r4, #4]
 80a7ad4:	18fc      	adds	r4, r7, r3
 80a7ad6:	5cfb      	ldrb	r3, [r7, r3]
 80a7ad8:	2b2d      	cmp	r3, #45	; 0x2d
 80a7ada:	f040 808c 	bne.w	80a7bf6 <_tzset_unlocked_r+0x246>
 80a7ade:	f04f 37ff 	mov.w	r7, #4294967295
 80a7ae2:	3401      	adds	r4, #1
 80a7ae4:	2300      	movs	r3, #0
 80a7ae6:	4620      	mov	r0, r4
 80a7ae8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7aec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7af0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7af4:	930a      	str	r3, [sp, #40]	; 0x28
 80a7af6:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7afa:	4633      	mov	r3, r6
 80a7afc:	e9cd b600 	strd	fp, r6, [sp]
 80a7b00:	4967      	ldr	r1, [pc, #412]	; (80a7ca0 <_tzset_unlocked_r+0x2f0>)
 80a7b02:	aa07      	add	r2, sp, #28
 80a7b04:	f7fc fac8 	bl	80a4098 <siscanf>
 80a7b08:	2800      	cmp	r0, #0
 80a7b0a:	dc7a      	bgt.n	80a7c02 <_tzset_unlocked_r+0x252>
 80a7b0c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a7b0e:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a7b12:	652f      	str	r7, [r5, #80]	; 0x50
 80a7b14:	f04f 0900 	mov.w	r9, #0
 80a7b18:	462f      	mov	r7, r5
 80a7b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b1c:	441c      	add	r4, r3
 80a7b1e:	7823      	ldrb	r3, [r4, #0]
 80a7b20:	2b2c      	cmp	r3, #44	; 0x2c
 80a7b22:	bf08      	it	eq
 80a7b24:	3401      	addeq	r4, #1
 80a7b26:	f894 8000 	ldrb.w	r8, [r4]
 80a7b2a:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a7b2e:	d17a      	bne.n	80a7c26 <_tzset_unlocked_r+0x276>
 80a7b30:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a7b34:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a7b38:	ab09      	add	r3, sp, #36	; 0x24
 80a7b3a:	9300      	str	r3, [sp, #0]
 80a7b3c:	4620      	mov	r0, r4
 80a7b3e:	4633      	mov	r3, r6
 80a7b40:	4958      	ldr	r1, [pc, #352]	; (80a7ca4 <_tzset_unlocked_r+0x2f4>)
 80a7b42:	9603      	str	r6, [sp, #12]
 80a7b44:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a7b48:	f7fc faa6 	bl	80a4098 <siscanf>
 80a7b4c:	2803      	cmp	r0, #3
 80a7b4e:	f47f af49 	bne.w	80a79e4 <_tzset_unlocked_r+0x34>
 80a7b52:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a7b56:	1e4b      	subs	r3, r1, #1
 80a7b58:	2b0b      	cmp	r3, #11
 80a7b5a:	f63f af43 	bhi.w	80a79e4 <_tzset_unlocked_r+0x34>
 80a7b5e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7b62:	1e53      	subs	r3, r2, #1
 80a7b64:	2b04      	cmp	r3, #4
 80a7b66:	f63f af3d 	bhi.w	80a79e4 <_tzset_unlocked_r+0x34>
 80a7b6a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7b6e:	2b06      	cmp	r3, #6
 80a7b70:	f63f af38 	bhi.w	80a79e4 <_tzset_unlocked_r+0x34>
 80a7b74:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a7b78:	f887 8008 	strb.w	r8, [r7, #8]
 80a7b7c:	617b      	str	r3, [r7, #20]
 80a7b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b80:	eb04 0803 	add.w	r8, r4, r3
 80a7b84:	2302      	movs	r3, #2
 80a7b86:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7b8a:	2300      	movs	r3, #0
 80a7b8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7b90:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7b94:	930a      	str	r3, [sp, #40]	; 0x28
 80a7b96:	f898 3000 	ldrb.w	r3, [r8]
 80a7b9a:	2b2f      	cmp	r3, #47	; 0x2f
 80a7b9c:	d109      	bne.n	80a7bb2 <_tzset_unlocked_r+0x202>
 80a7b9e:	4633      	mov	r3, r6
 80a7ba0:	4640      	mov	r0, r8
 80a7ba2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7ba6:	e9cd b600 	strd	fp, r6, [sp]
 80a7baa:	493f      	ldr	r1, [pc, #252]	; (80a7ca8 <_tzset_unlocked_r+0x2f8>)
 80a7bac:	aa07      	add	r2, sp, #28
 80a7bae:	f7fc fa73 	bl	80a4098 <siscanf>
 80a7bb2:	213c      	movs	r1, #60	; 0x3c
 80a7bb4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7bb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7bbc:	3728      	adds	r7, #40	; 0x28
 80a7bbe:	fb01 2203 	mla	r2, r1, r3, r2
 80a7bc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7bc6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7bca:	fb01 2303 	mla	r3, r1, r3, r2
 80a7bce:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7bd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a7bd4:	4444      	add	r4, r8
 80a7bd6:	f1b9 0f00 	cmp.w	r9, #0
 80a7bda:	d021      	beq.n	80a7c20 <_tzset_unlocked_r+0x270>
 80a7bdc:	6868      	ldr	r0, [r5, #4]
 80a7bde:	f7ff fe2d 	bl	80a783c <__tzcalc_limits>
 80a7be2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7be4:	4b28      	ldr	r3, [pc, #160]	; (80a7c88 <_tzset_unlocked_r+0x2d8>)
 80a7be6:	601a      	str	r2, [r3, #0]
 80a7be8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a7bea:	1a9b      	subs	r3, r3, r2
 80a7bec:	bf18      	it	ne
 80a7bee:	2301      	movne	r3, #1
 80a7bf0:	4a27      	ldr	r2, [pc, #156]	; (80a7c90 <_tzset_unlocked_r+0x2e0>)
 80a7bf2:	6013      	str	r3, [r2, #0]
 80a7bf4:	e6f6      	b.n	80a79e4 <_tzset_unlocked_r+0x34>
 80a7bf6:	2b2b      	cmp	r3, #43	; 0x2b
 80a7bf8:	f04f 0701 	mov.w	r7, #1
 80a7bfc:	bf08      	it	eq
 80a7bfe:	3401      	addeq	r4, #1
 80a7c00:	e770      	b.n	80a7ae4 <_tzset_unlocked_r+0x134>
 80a7c02:	213c      	movs	r1, #60	; 0x3c
 80a7c04:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7c08:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7c0c:	fb01 2203 	mla	r2, r1, r3, r2
 80a7c10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7c14:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7c18:	fb01 2303 	mla	r3, r1, r3, r2
 80a7c1c:	435f      	muls	r7, r3
 80a7c1e:	e778      	b.n	80a7b12 <_tzset_unlocked_r+0x162>
 80a7c20:	f04f 0901 	mov.w	r9, #1
 80a7c24:	e77b      	b.n	80a7b1e <_tzset_unlocked_r+0x16e>
 80a7c26:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a7c2a:	bf0a      	itet	eq
 80a7c2c:	4643      	moveq	r3, r8
 80a7c2e:	2344      	movne	r3, #68	; 0x44
 80a7c30:	3401      	addeq	r4, #1
 80a7c32:	220a      	movs	r2, #10
 80a7c34:	4620      	mov	r0, r4
 80a7c36:	a90b      	add	r1, sp, #44	; 0x2c
 80a7c38:	9305      	str	r3, [sp, #20]
 80a7c3a:	f7ff fdf5 	bl	80a7828 <strtoul>
 80a7c3e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7c42:	9b05      	ldr	r3, [sp, #20]
 80a7c44:	45a0      	cmp	r8, r4
 80a7c46:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7c4a:	d114      	bne.n	80a7c76 <_tzset_unlocked_r+0x2c6>
 80a7c4c:	234d      	movs	r3, #77	; 0x4d
 80a7c4e:	f1b9 0f00 	cmp.w	r9, #0
 80a7c52:	d107      	bne.n	80a7c64 <_tzset_unlocked_r+0x2b4>
 80a7c54:	2103      	movs	r1, #3
 80a7c56:	722b      	strb	r3, [r5, #8]
 80a7c58:	2302      	movs	r3, #2
 80a7c5a:	f8c5 9014 	str.w	r9, [r5, #20]
 80a7c5e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a7c62:	e78f      	b.n	80a7b84 <_tzset_unlocked_r+0x1d4>
 80a7c64:	220b      	movs	r2, #11
 80a7c66:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a7c6a:	2301      	movs	r3, #1
 80a7c6c:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a7c70:	2300      	movs	r3, #0
 80a7c72:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a7c74:	e786      	b.n	80a7b84 <_tzset_unlocked_r+0x1d4>
 80a7c76:	b280      	uxth	r0, r0
 80a7c78:	723b      	strb	r3, [r7, #8]
 80a7c7a:	6178      	str	r0, [r7, #20]
 80a7c7c:	e782      	b.n	80a7b84 <_tzset_unlocked_r+0x1d4>
 80a7c7e:	bf00      	nop
 80a7c80:	080a9260 	.word	0x080a9260
 80a7c84:	20000ff8 	.word	0x20000ff8
 80a7c88:	20001000 	.word	0x20001000
 80a7c8c:	080a9263 	.word	0x080a9263
 80a7c90:	20000ffc 	.word	0x20000ffc
 80a7c94:	20000068 	.word	0x20000068
 80a7c98:	20000feb 	.word	0x20000feb
 80a7c9c:	080a9267 	.word	0x080a9267
 80a7ca0:	080a928a 	.word	0x080a928a
 80a7ca4:	080a9276 	.word	0x080a9276
 80a7ca8:	080a9289 	.word	0x080a9289
 80a7cac:	20000fe0 	.word	0x20000fe0

080a7cb0 <rshift>:
 80a7cb0:	6903      	ldr	r3, [r0, #16]
 80a7cb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a7cb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80a7cba:	f100 0414 	add.w	r4, r0, #20
 80a7cbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 80a7cc2:	dd46      	ble.n	80a7d52 <rshift+0xa2>
 80a7cc4:	f011 011f 	ands.w	r1, r1, #31
 80a7cc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80a7ccc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80a7cd0:	d10c      	bne.n	80a7cec <rshift+0x3c>
 80a7cd2:	4629      	mov	r1, r5
 80a7cd4:	f100 0710 	add.w	r7, r0, #16
 80a7cd8:	42b1      	cmp	r1, r6
 80a7cda:	d335      	bcc.n	80a7d48 <rshift+0x98>
 80a7cdc:	1a9b      	subs	r3, r3, r2
 80a7cde:	009b      	lsls	r3, r3, #2
 80a7ce0:	1eea      	subs	r2, r5, #3
 80a7ce2:	4296      	cmp	r6, r2
 80a7ce4:	bf38      	it	cc
 80a7ce6:	2300      	movcc	r3, #0
 80a7ce8:	4423      	add	r3, r4
 80a7cea:	e015      	b.n	80a7d18 <rshift+0x68>
 80a7cec:	46a1      	mov	r9, r4
 80a7cee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80a7cf2:	f1c1 0820 	rsb	r8, r1, #32
 80a7cf6:	40cf      	lsrs	r7, r1
 80a7cf8:	f105 0e04 	add.w	lr, r5, #4
 80a7cfc:	4576      	cmp	r6, lr
 80a7cfe:	46f4      	mov	ip, lr
 80a7d00:	d816      	bhi.n	80a7d30 <rshift+0x80>
 80a7d02:	1a9b      	subs	r3, r3, r2
 80a7d04:	009a      	lsls	r2, r3, #2
 80a7d06:	3a04      	subs	r2, #4
 80a7d08:	3501      	adds	r5, #1
 80a7d0a:	42ae      	cmp	r6, r5
 80a7d0c:	bf38      	it	cc
 80a7d0e:	2200      	movcc	r2, #0
 80a7d10:	18a3      	adds	r3, r4, r2
 80a7d12:	50a7      	str	r7, [r4, r2]
 80a7d14:	b107      	cbz	r7, 80a7d18 <rshift+0x68>
 80a7d16:	3304      	adds	r3, #4
 80a7d18:	42a3      	cmp	r3, r4
 80a7d1a:	eba3 0204 	sub.w	r2, r3, r4
 80a7d1e:	bf08      	it	eq
 80a7d20:	2300      	moveq	r3, #0
 80a7d22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80a7d26:	6102      	str	r2, [r0, #16]
 80a7d28:	bf08      	it	eq
 80a7d2a:	6143      	streq	r3, [r0, #20]
 80a7d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a7d30:	f8dc c000 	ldr.w	ip, [ip]
 80a7d34:	fa0c fc08 	lsl.w	ip, ip, r8
 80a7d38:	ea4c 0707 	orr.w	r7, ip, r7
 80a7d3c:	f849 7b04 	str.w	r7, [r9], #4
 80a7d40:	f85e 7b04 	ldr.w	r7, [lr], #4
 80a7d44:	40cf      	lsrs	r7, r1
 80a7d46:	e7d9      	b.n	80a7cfc <rshift+0x4c>
 80a7d48:	f851 cb04 	ldr.w	ip, [r1], #4
 80a7d4c:	f847 cf04 	str.w	ip, [r7, #4]!
 80a7d50:	e7c2      	b.n	80a7cd8 <rshift+0x28>
 80a7d52:	4623      	mov	r3, r4
 80a7d54:	e7e0      	b.n	80a7d18 <rshift+0x68>

080a7d56 <__hexdig_fun>:
 80a7d56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a7d5a:	2b09      	cmp	r3, #9
 80a7d5c:	d802      	bhi.n	80a7d64 <__hexdig_fun+0xe>
 80a7d5e:	3820      	subs	r0, #32
 80a7d60:	b2c0      	uxtb	r0, r0
 80a7d62:	4770      	bx	lr
 80a7d64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a7d68:	2b05      	cmp	r3, #5
 80a7d6a:	d801      	bhi.n	80a7d70 <__hexdig_fun+0x1a>
 80a7d6c:	3847      	subs	r0, #71	; 0x47
 80a7d6e:	e7f7      	b.n	80a7d60 <__hexdig_fun+0xa>
 80a7d70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a7d74:	2b05      	cmp	r3, #5
 80a7d76:	d801      	bhi.n	80a7d7c <__hexdig_fun+0x26>
 80a7d78:	3827      	subs	r0, #39	; 0x27
 80a7d7a:	e7f1      	b.n	80a7d60 <__hexdig_fun+0xa>
 80a7d7c:	2000      	movs	r0, #0
 80a7d7e:	4770      	bx	lr

080a7d80 <__gethex>:
 80a7d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7d84:	b08b      	sub	sp, #44	; 0x2c
 80a7d86:	9306      	str	r3, [sp, #24]
 80a7d88:	4bba      	ldr	r3, [pc, #744]	; (80a8074 <__gethex+0x2f4>)
 80a7d8a:	9002      	str	r0, [sp, #8]
 80a7d8c:	681b      	ldr	r3, [r3, #0]
 80a7d8e:	468b      	mov	fp, r1
 80a7d90:	4618      	mov	r0, r3
 80a7d92:	4690      	mov	r8, r2
 80a7d94:	9303      	str	r3, [sp, #12]
 80a7d96:	f7fe fe8e 	bl	80a6ab6 <strlen>
 80a7d9a:	4682      	mov	sl, r0
 80a7d9c:	9b03      	ldr	r3, [sp, #12]
 80a7d9e:	f8db 2000 	ldr.w	r2, [fp]
 80a7da2:	4403      	add	r3, r0
 80a7da4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a7da8:	9307      	str	r3, [sp, #28]
 80a7daa:	1c93      	adds	r3, r2, #2
 80a7dac:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80a7db0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80a7db4:	32fe      	adds	r2, #254	; 0xfe
 80a7db6:	18d1      	adds	r1, r2, r3
 80a7db8:	461f      	mov	r7, r3
 80a7dba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a7dbe:	9101      	str	r1, [sp, #4]
 80a7dc0:	2830      	cmp	r0, #48	; 0x30
 80a7dc2:	d0f8      	beq.n	80a7db6 <__gethex+0x36>
 80a7dc4:	f7ff ffc7 	bl	80a7d56 <__hexdig_fun>
 80a7dc8:	4604      	mov	r4, r0
 80a7dca:	2800      	cmp	r0, #0
 80a7dcc:	d13a      	bne.n	80a7e44 <__gethex+0xc4>
 80a7dce:	4652      	mov	r2, sl
 80a7dd0:	4638      	mov	r0, r7
 80a7dd2:	9903      	ldr	r1, [sp, #12]
 80a7dd4:	f7fe fe77 	bl	80a6ac6 <strncmp>
 80a7dd8:	4605      	mov	r5, r0
 80a7dda:	2800      	cmp	r0, #0
 80a7ddc:	d166      	bne.n	80a7eac <__gethex+0x12c>
 80a7dde:	f817 000a 	ldrb.w	r0, [r7, sl]
 80a7de2:	eb07 060a 	add.w	r6, r7, sl
 80a7de6:	f7ff ffb6 	bl	80a7d56 <__hexdig_fun>
 80a7dea:	2800      	cmp	r0, #0
 80a7dec:	d060      	beq.n	80a7eb0 <__gethex+0x130>
 80a7dee:	4633      	mov	r3, r6
 80a7df0:	7818      	ldrb	r0, [r3, #0]
 80a7df2:	461f      	mov	r7, r3
 80a7df4:	2830      	cmp	r0, #48	; 0x30
 80a7df6:	f103 0301 	add.w	r3, r3, #1
 80a7dfa:	d0f9      	beq.n	80a7df0 <__gethex+0x70>
 80a7dfc:	f7ff ffab 	bl	80a7d56 <__hexdig_fun>
 80a7e00:	2301      	movs	r3, #1
 80a7e02:	fab0 f480 	clz	r4, r0
 80a7e06:	4635      	mov	r5, r6
 80a7e08:	0964      	lsrs	r4, r4, #5
 80a7e0a:	9301      	str	r3, [sp, #4]
 80a7e0c:	463a      	mov	r2, r7
 80a7e0e:	4616      	mov	r6, r2
 80a7e10:	7830      	ldrb	r0, [r6, #0]
 80a7e12:	3201      	adds	r2, #1
 80a7e14:	f7ff ff9f 	bl	80a7d56 <__hexdig_fun>
 80a7e18:	2800      	cmp	r0, #0
 80a7e1a:	d1f8      	bne.n	80a7e0e <__gethex+0x8e>
 80a7e1c:	4652      	mov	r2, sl
 80a7e1e:	4630      	mov	r0, r6
 80a7e20:	9903      	ldr	r1, [sp, #12]
 80a7e22:	f7fe fe50 	bl	80a6ac6 <strncmp>
 80a7e26:	b980      	cbnz	r0, 80a7e4a <__gethex+0xca>
 80a7e28:	b94d      	cbnz	r5, 80a7e3e <__gethex+0xbe>
 80a7e2a:	eb06 050a 	add.w	r5, r6, sl
 80a7e2e:	462a      	mov	r2, r5
 80a7e30:	4616      	mov	r6, r2
 80a7e32:	7830      	ldrb	r0, [r6, #0]
 80a7e34:	3201      	adds	r2, #1
 80a7e36:	f7ff ff8e 	bl	80a7d56 <__hexdig_fun>
 80a7e3a:	2800      	cmp	r0, #0
 80a7e3c:	d1f8      	bne.n	80a7e30 <__gethex+0xb0>
 80a7e3e:	1bad      	subs	r5, r5, r6
 80a7e40:	00ad      	lsls	r5, r5, #2
 80a7e42:	e004      	b.n	80a7e4e <__gethex+0xce>
 80a7e44:	2400      	movs	r4, #0
 80a7e46:	4625      	mov	r5, r4
 80a7e48:	e7e0      	b.n	80a7e0c <__gethex+0x8c>
 80a7e4a:	2d00      	cmp	r5, #0
 80a7e4c:	d1f7      	bne.n	80a7e3e <__gethex+0xbe>
 80a7e4e:	7833      	ldrb	r3, [r6, #0]
 80a7e50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a7e54:	2b50      	cmp	r3, #80	; 0x50
 80a7e56:	d139      	bne.n	80a7ecc <__gethex+0x14c>
 80a7e58:	7873      	ldrb	r3, [r6, #1]
 80a7e5a:	2b2b      	cmp	r3, #43	; 0x2b
 80a7e5c:	d02a      	beq.n	80a7eb4 <__gethex+0x134>
 80a7e5e:	2b2d      	cmp	r3, #45	; 0x2d
 80a7e60:	d02c      	beq.n	80a7ebc <__gethex+0x13c>
 80a7e62:	f04f 0900 	mov.w	r9, #0
 80a7e66:	1c71      	adds	r1, r6, #1
 80a7e68:	7808      	ldrb	r0, [r1, #0]
 80a7e6a:	f7ff ff74 	bl	80a7d56 <__hexdig_fun>
 80a7e6e:	1e43      	subs	r3, r0, #1
 80a7e70:	b2db      	uxtb	r3, r3
 80a7e72:	2b18      	cmp	r3, #24
 80a7e74:	d82a      	bhi.n	80a7ecc <__gethex+0x14c>
 80a7e76:	f1a0 0210 	sub.w	r2, r0, #16
 80a7e7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a7e7e:	f7ff ff6a 	bl	80a7d56 <__hexdig_fun>
 80a7e82:	1e43      	subs	r3, r0, #1
 80a7e84:	b2db      	uxtb	r3, r3
 80a7e86:	2b18      	cmp	r3, #24
 80a7e88:	d91b      	bls.n	80a7ec2 <__gethex+0x142>
 80a7e8a:	f1b9 0f00 	cmp.w	r9, #0
 80a7e8e:	d000      	beq.n	80a7e92 <__gethex+0x112>
 80a7e90:	4252      	negs	r2, r2
 80a7e92:	4415      	add	r5, r2
 80a7e94:	f8cb 1000 	str.w	r1, [fp]
 80a7e98:	b1d4      	cbz	r4, 80a7ed0 <__gethex+0x150>
 80a7e9a:	9b01      	ldr	r3, [sp, #4]
 80a7e9c:	2b00      	cmp	r3, #0
 80a7e9e:	bf14      	ite	ne
 80a7ea0:	2700      	movne	r7, #0
 80a7ea2:	2706      	moveq	r7, #6
 80a7ea4:	4638      	mov	r0, r7
 80a7ea6:	b00b      	add	sp, #44	; 0x2c
 80a7ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7eac:	463e      	mov	r6, r7
 80a7eae:	4625      	mov	r5, r4
 80a7eb0:	2401      	movs	r4, #1
 80a7eb2:	e7cc      	b.n	80a7e4e <__gethex+0xce>
 80a7eb4:	f04f 0900 	mov.w	r9, #0
 80a7eb8:	1cb1      	adds	r1, r6, #2
 80a7eba:	e7d5      	b.n	80a7e68 <__gethex+0xe8>
 80a7ebc:	f04f 0901 	mov.w	r9, #1
 80a7ec0:	e7fa      	b.n	80a7eb8 <__gethex+0x138>
 80a7ec2:	230a      	movs	r3, #10
 80a7ec4:	fb03 0202 	mla	r2, r3, r2, r0
 80a7ec8:	3a10      	subs	r2, #16
 80a7eca:	e7d6      	b.n	80a7e7a <__gethex+0xfa>
 80a7ecc:	4631      	mov	r1, r6
 80a7ece:	e7e1      	b.n	80a7e94 <__gethex+0x114>
 80a7ed0:	4621      	mov	r1, r4
 80a7ed2:	1bf3      	subs	r3, r6, r7
 80a7ed4:	3b01      	subs	r3, #1
 80a7ed6:	2b07      	cmp	r3, #7
 80a7ed8:	dc50      	bgt.n	80a7f7c <__gethex+0x1fc>
 80a7eda:	9802      	ldr	r0, [sp, #8]
 80a7edc:	f000 fb48 	bl	80a8570 <_Balloc>
 80a7ee0:	f04f 0b00 	mov.w	fp, #0
 80a7ee4:	4604      	mov	r4, r0
 80a7ee6:	f100 0914 	add.w	r9, r0, #20
 80a7eea:	f1ca 0301 	rsb	r3, sl, #1
 80a7eee:	f8cd 9010 	str.w	r9, [sp, #16]
 80a7ef2:	f8cd b004 	str.w	fp, [sp, #4]
 80a7ef6:	9308      	str	r3, [sp, #32]
 80a7ef8:	42b7      	cmp	r7, r6
 80a7efa:	d342      	bcc.n	80a7f82 <__gethex+0x202>
 80a7efc:	9f04      	ldr	r7, [sp, #16]
 80a7efe:	9b01      	ldr	r3, [sp, #4]
 80a7f00:	f847 3b04 	str.w	r3, [r7], #4
 80a7f04:	eba7 0709 	sub.w	r7, r7, r9
 80a7f08:	10bf      	asrs	r7, r7, #2
 80a7f0a:	6127      	str	r7, [r4, #16]
 80a7f0c:	4618      	mov	r0, r3
 80a7f0e:	f000 fbf6 	bl	80a86fe <__hi0bits>
 80a7f12:	017f      	lsls	r7, r7, #5
 80a7f14:	f8d8 6000 	ldr.w	r6, [r8]
 80a7f18:	1a3f      	subs	r7, r7, r0
 80a7f1a:	42b7      	cmp	r7, r6
 80a7f1c:	dd65      	ble.n	80a7fea <__gethex+0x26a>
 80a7f1e:	1bbf      	subs	r7, r7, r6
 80a7f20:	4639      	mov	r1, r7
 80a7f22:	4620      	mov	r0, r4
 80a7f24:	f000 ff3c 	bl	80a8da0 <__any_on>
 80a7f28:	4682      	mov	sl, r0
 80a7f2a:	b1a8      	cbz	r0, 80a7f58 <__gethex+0x1d8>
 80a7f2c:	f04f 0a01 	mov.w	sl, #1
 80a7f30:	1e7b      	subs	r3, r7, #1
 80a7f32:	1159      	asrs	r1, r3, #5
 80a7f34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80a7f38:	f003 021f 	and.w	r2, r3, #31
 80a7f3c:	fa0a f202 	lsl.w	r2, sl, r2
 80a7f40:	420a      	tst	r2, r1
 80a7f42:	d009      	beq.n	80a7f58 <__gethex+0x1d8>
 80a7f44:	4553      	cmp	r3, sl
 80a7f46:	dd05      	ble.n	80a7f54 <__gethex+0x1d4>
 80a7f48:	4620      	mov	r0, r4
 80a7f4a:	1eb9      	subs	r1, r7, #2
 80a7f4c:	f000 ff28 	bl	80a8da0 <__any_on>
 80a7f50:	2800      	cmp	r0, #0
 80a7f52:	d147      	bne.n	80a7fe4 <__gethex+0x264>
 80a7f54:	f04f 0a02 	mov.w	sl, #2
 80a7f58:	4639      	mov	r1, r7
 80a7f5a:	4620      	mov	r0, r4
 80a7f5c:	f7ff fea8 	bl	80a7cb0 <rshift>
 80a7f60:	443d      	add	r5, r7
 80a7f62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a7f66:	42ab      	cmp	r3, r5
 80a7f68:	da4d      	bge.n	80a8006 <__gethex+0x286>
 80a7f6a:	4621      	mov	r1, r4
 80a7f6c:	9802      	ldr	r0, [sp, #8]
 80a7f6e:	f000 fb33 	bl	80a85d8 <_Bfree>
 80a7f72:	2300      	movs	r3, #0
 80a7f74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a7f76:	27a3      	movs	r7, #163	; 0xa3
 80a7f78:	6013      	str	r3, [r2, #0]
 80a7f7a:	e793      	b.n	80a7ea4 <__gethex+0x124>
 80a7f7c:	3101      	adds	r1, #1
 80a7f7e:	105b      	asrs	r3, r3, #1
 80a7f80:	e7a9      	b.n	80a7ed6 <__gethex+0x156>
 80a7f82:	1e73      	subs	r3, r6, #1
 80a7f84:	9a07      	ldr	r2, [sp, #28]
 80a7f86:	9305      	str	r3, [sp, #20]
 80a7f88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a7f8c:	4293      	cmp	r3, r2
 80a7f8e:	d019      	beq.n	80a7fc4 <__gethex+0x244>
 80a7f90:	f1bb 0f20 	cmp.w	fp, #32
 80a7f94:	d107      	bne.n	80a7fa6 <__gethex+0x226>
 80a7f96:	9b04      	ldr	r3, [sp, #16]
 80a7f98:	9a01      	ldr	r2, [sp, #4]
 80a7f9a:	f843 2b04 	str.w	r2, [r3], #4
 80a7f9e:	9304      	str	r3, [sp, #16]
 80a7fa0:	2300      	movs	r3, #0
 80a7fa2:	469b      	mov	fp, r3
 80a7fa4:	9301      	str	r3, [sp, #4]
 80a7fa6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a7faa:	f7ff fed4 	bl	80a7d56 <__hexdig_fun>
 80a7fae:	9b01      	ldr	r3, [sp, #4]
 80a7fb0:	f000 000f 	and.w	r0, r0, #15
 80a7fb4:	fa00 f00b 	lsl.w	r0, r0, fp
 80a7fb8:	4303      	orrs	r3, r0
 80a7fba:	9301      	str	r3, [sp, #4]
 80a7fbc:	f10b 0b04 	add.w	fp, fp, #4
 80a7fc0:	9b05      	ldr	r3, [sp, #20]
 80a7fc2:	e00d      	b.n	80a7fe0 <__gethex+0x260>
 80a7fc4:	9b05      	ldr	r3, [sp, #20]
 80a7fc6:	9a08      	ldr	r2, [sp, #32]
 80a7fc8:	4413      	add	r3, r2
 80a7fca:	42bb      	cmp	r3, r7
 80a7fcc:	d3e0      	bcc.n	80a7f90 <__gethex+0x210>
 80a7fce:	4618      	mov	r0, r3
 80a7fd0:	4652      	mov	r2, sl
 80a7fd2:	9903      	ldr	r1, [sp, #12]
 80a7fd4:	9309      	str	r3, [sp, #36]	; 0x24
 80a7fd6:	f7fe fd76 	bl	80a6ac6 <strncmp>
 80a7fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7fdc:	2800      	cmp	r0, #0
 80a7fde:	d1d7      	bne.n	80a7f90 <__gethex+0x210>
 80a7fe0:	461e      	mov	r6, r3
 80a7fe2:	e789      	b.n	80a7ef8 <__gethex+0x178>
 80a7fe4:	f04f 0a03 	mov.w	sl, #3
 80a7fe8:	e7b6      	b.n	80a7f58 <__gethex+0x1d8>
 80a7fea:	da09      	bge.n	80a8000 <__gethex+0x280>
 80a7fec:	1bf7      	subs	r7, r6, r7
 80a7fee:	4621      	mov	r1, r4
 80a7ff0:	463a      	mov	r2, r7
 80a7ff2:	9802      	ldr	r0, [sp, #8]
 80a7ff4:	f000 fcc4 	bl	80a8980 <__lshift>
 80a7ff8:	4604      	mov	r4, r0
 80a7ffa:	1bed      	subs	r5, r5, r7
 80a7ffc:	f100 0914 	add.w	r9, r0, #20
 80a8000:	f04f 0a00 	mov.w	sl, #0
 80a8004:	e7ad      	b.n	80a7f62 <__gethex+0x1e2>
 80a8006:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a800a:	42a8      	cmp	r0, r5
 80a800c:	dd6e      	ble.n	80a80ec <__gethex+0x36c>
 80a800e:	1b45      	subs	r5, r0, r5
 80a8010:	42ae      	cmp	r6, r5
 80a8012:	dc31      	bgt.n	80a8078 <__gethex+0x2f8>
 80a8014:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a8018:	2b02      	cmp	r3, #2
 80a801a:	d022      	beq.n	80a8062 <__gethex+0x2e2>
 80a801c:	2b03      	cmp	r3, #3
 80a801e:	d024      	beq.n	80a806a <__gethex+0x2ea>
 80a8020:	2b01      	cmp	r3, #1
 80a8022:	d115      	bne.n	80a8050 <__gethex+0x2d0>
 80a8024:	42ae      	cmp	r6, r5
 80a8026:	d113      	bne.n	80a8050 <__gethex+0x2d0>
 80a8028:	2e01      	cmp	r6, #1
 80a802a:	d10b      	bne.n	80a8044 <__gethex+0x2c4>
 80a802c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a8030:	9a06      	ldr	r2, [sp, #24]
 80a8032:	2762      	movs	r7, #98	; 0x62
 80a8034:	6013      	str	r3, [r2, #0]
 80a8036:	2301      	movs	r3, #1
 80a8038:	6123      	str	r3, [r4, #16]
 80a803a:	f8c9 3000 	str.w	r3, [r9]
 80a803e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8040:	601c      	str	r4, [r3, #0]
 80a8042:	e72f      	b.n	80a7ea4 <__gethex+0x124>
 80a8044:	4620      	mov	r0, r4
 80a8046:	1e71      	subs	r1, r6, #1
 80a8048:	f000 feaa 	bl	80a8da0 <__any_on>
 80a804c:	2800      	cmp	r0, #0
 80a804e:	d1ed      	bne.n	80a802c <__gethex+0x2ac>
 80a8050:	4621      	mov	r1, r4
 80a8052:	9802      	ldr	r0, [sp, #8]
 80a8054:	f000 fac0 	bl	80a85d8 <_Bfree>
 80a8058:	2300      	movs	r3, #0
 80a805a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a805c:	2750      	movs	r7, #80	; 0x50
 80a805e:	6013      	str	r3, [r2, #0]
 80a8060:	e720      	b.n	80a7ea4 <__gethex+0x124>
 80a8062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8064:	2b00      	cmp	r3, #0
 80a8066:	d1f3      	bne.n	80a8050 <__gethex+0x2d0>
 80a8068:	e7e0      	b.n	80a802c <__gethex+0x2ac>
 80a806a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a806c:	2b00      	cmp	r3, #0
 80a806e:	d1dd      	bne.n	80a802c <__gethex+0x2ac>
 80a8070:	e7ee      	b.n	80a8050 <__gethex+0x2d0>
 80a8072:	bf00      	nop
 80a8074:	080a93a0 	.word	0x080a93a0
 80a8078:	1e6f      	subs	r7, r5, #1
 80a807a:	f1ba 0f00 	cmp.w	sl, #0
 80a807e:	d132      	bne.n	80a80e6 <__gethex+0x366>
 80a8080:	b127      	cbz	r7, 80a808c <__gethex+0x30c>
 80a8082:	4639      	mov	r1, r7
 80a8084:	4620      	mov	r0, r4
 80a8086:	f000 fe8b 	bl	80a8da0 <__any_on>
 80a808a:	4682      	mov	sl, r0
 80a808c:	2101      	movs	r1, #1
 80a808e:	117b      	asrs	r3, r7, #5
 80a8090:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80a8094:	f007 071f 	and.w	r7, r7, #31
 80a8098:	fa01 f707 	lsl.w	r7, r1, r7
 80a809c:	421f      	tst	r7, r3
 80a809e:	f04f 0702 	mov.w	r7, #2
 80a80a2:	4629      	mov	r1, r5
 80a80a4:	4620      	mov	r0, r4
 80a80a6:	bf18      	it	ne
 80a80a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80a80ac:	1b76      	subs	r6, r6, r5
 80a80ae:	f7ff fdff 	bl	80a7cb0 <rshift>
 80a80b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80a80b6:	f1ba 0f00 	cmp.w	sl, #0
 80a80ba:	d048      	beq.n	80a814e <__gethex+0x3ce>
 80a80bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a80c0:	2b02      	cmp	r3, #2
 80a80c2:	d015      	beq.n	80a80f0 <__gethex+0x370>
 80a80c4:	2b03      	cmp	r3, #3
 80a80c6:	d017      	beq.n	80a80f8 <__gethex+0x378>
 80a80c8:	2b01      	cmp	r3, #1
 80a80ca:	d109      	bne.n	80a80e0 <__gethex+0x360>
 80a80cc:	f01a 0f02 	tst.w	sl, #2
 80a80d0:	d006      	beq.n	80a80e0 <__gethex+0x360>
 80a80d2:	f8d9 0000 	ldr.w	r0, [r9]
 80a80d6:	ea4a 0a00 	orr.w	sl, sl, r0
 80a80da:	f01a 0f01 	tst.w	sl, #1
 80a80de:	d10e      	bne.n	80a80fe <__gethex+0x37e>
 80a80e0:	f047 0710 	orr.w	r7, r7, #16
 80a80e4:	e033      	b.n	80a814e <__gethex+0x3ce>
 80a80e6:	f04f 0a01 	mov.w	sl, #1
 80a80ea:	e7cf      	b.n	80a808c <__gethex+0x30c>
 80a80ec:	2701      	movs	r7, #1
 80a80ee:	e7e2      	b.n	80a80b6 <__gethex+0x336>
 80a80f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a80f2:	f1c3 0301 	rsb	r3, r3, #1
 80a80f6:	9315      	str	r3, [sp, #84]	; 0x54
 80a80f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a80fa:	2b00      	cmp	r3, #0
 80a80fc:	d0f0      	beq.n	80a80e0 <__gethex+0x360>
 80a80fe:	f04f 0c00 	mov.w	ip, #0
 80a8102:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a8106:	f104 0314 	add.w	r3, r4, #20
 80a810a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80a810e:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 80a8112:	4618      	mov	r0, r3
 80a8114:	f853 2b04 	ldr.w	r2, [r3], #4
 80a8118:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a811c:	d01c      	beq.n	80a8158 <__gethex+0x3d8>
 80a811e:	3201      	adds	r2, #1
 80a8120:	6002      	str	r2, [r0, #0]
 80a8122:	2f02      	cmp	r7, #2
 80a8124:	f104 0314 	add.w	r3, r4, #20
 80a8128:	d138      	bne.n	80a819c <__gethex+0x41c>
 80a812a:	f8d8 2000 	ldr.w	r2, [r8]
 80a812e:	3a01      	subs	r2, #1
 80a8130:	42b2      	cmp	r2, r6
 80a8132:	d10a      	bne.n	80a814a <__gethex+0x3ca>
 80a8134:	2201      	movs	r2, #1
 80a8136:	1171      	asrs	r1, r6, #5
 80a8138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a813c:	f006 061f 	and.w	r6, r6, #31
 80a8140:	fa02 f606 	lsl.w	r6, r2, r6
 80a8144:	421e      	tst	r6, r3
 80a8146:	bf18      	it	ne
 80a8148:	4617      	movne	r7, r2
 80a814a:	f047 0720 	orr.w	r7, r7, #32
 80a814e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8150:	601c      	str	r4, [r3, #0]
 80a8152:	9b06      	ldr	r3, [sp, #24]
 80a8154:	601d      	str	r5, [r3, #0]
 80a8156:	e6a5      	b.n	80a7ea4 <__gethex+0x124>
 80a8158:	4299      	cmp	r1, r3
 80a815a:	f843 cc04 	str.w	ip, [r3, #-4]
 80a815e:	d8d8      	bhi.n	80a8112 <__gethex+0x392>
 80a8160:	68a3      	ldr	r3, [r4, #8]
 80a8162:	4599      	cmp	r9, r3
 80a8164:	db12      	blt.n	80a818c <__gethex+0x40c>
 80a8166:	6861      	ldr	r1, [r4, #4]
 80a8168:	9802      	ldr	r0, [sp, #8]
 80a816a:	3101      	adds	r1, #1
 80a816c:	f000 fa00 	bl	80a8570 <_Balloc>
 80a8170:	4682      	mov	sl, r0
 80a8172:	6922      	ldr	r2, [r4, #16]
 80a8174:	f104 010c 	add.w	r1, r4, #12
 80a8178:	3202      	adds	r2, #2
 80a817a:	0092      	lsls	r2, r2, #2
 80a817c:	300c      	adds	r0, #12
 80a817e:	f7fe fc33 	bl	80a69e8 <memcpy>
 80a8182:	4621      	mov	r1, r4
 80a8184:	9802      	ldr	r0, [sp, #8]
 80a8186:	f000 fa27 	bl	80a85d8 <_Bfree>
 80a818a:	4654      	mov	r4, sl
 80a818c:	6923      	ldr	r3, [r4, #16]
 80a818e:	1c5a      	adds	r2, r3, #1
 80a8190:	6122      	str	r2, [r4, #16]
 80a8192:	2201      	movs	r2, #1
 80a8194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a8198:	615a      	str	r2, [r3, #20]
 80a819a:	e7c2      	b.n	80a8122 <__gethex+0x3a2>
 80a819c:	6922      	ldr	r2, [r4, #16]
 80a819e:	454a      	cmp	r2, r9
 80a81a0:	dd0b      	ble.n	80a81ba <__gethex+0x43a>
 80a81a2:	2101      	movs	r1, #1
 80a81a4:	4620      	mov	r0, r4
 80a81a6:	f7ff fd83 	bl	80a7cb0 <rshift>
 80a81aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a81ae:	3501      	adds	r5, #1
 80a81b0:	42ab      	cmp	r3, r5
 80a81b2:	f6ff aeda 	blt.w	80a7f6a <__gethex+0x1ea>
 80a81b6:	2701      	movs	r7, #1
 80a81b8:	e7c7      	b.n	80a814a <__gethex+0x3ca>
 80a81ba:	f016 061f 	ands.w	r6, r6, #31
 80a81be:	d0fa      	beq.n	80a81b6 <__gethex+0x436>
 80a81c0:	449b      	add	fp, r3
 80a81c2:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 80a81c6:	f000 fa9a 	bl	80a86fe <__hi0bits>
 80a81ca:	f1c6 0620 	rsb	r6, r6, #32
 80a81ce:	42b0      	cmp	r0, r6
 80a81d0:	dbe7      	blt.n	80a81a2 <__gethex+0x422>
 80a81d2:	e7f0      	b.n	80a81b6 <__gethex+0x436>

080a81d4 <L_shift>:
 80a81d4:	f1c2 0208 	rsb	r2, r2, #8
 80a81d8:	0092      	lsls	r2, r2, #2
 80a81da:	b570      	push	{r4, r5, r6, lr}
 80a81dc:	f1c2 0620 	rsb	r6, r2, #32
 80a81e0:	6843      	ldr	r3, [r0, #4]
 80a81e2:	6804      	ldr	r4, [r0, #0]
 80a81e4:	fa03 f506 	lsl.w	r5, r3, r6
 80a81e8:	432c      	orrs	r4, r5
 80a81ea:	40d3      	lsrs	r3, r2
 80a81ec:	6004      	str	r4, [r0, #0]
 80a81ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80a81f2:	4288      	cmp	r0, r1
 80a81f4:	d3f4      	bcc.n	80a81e0 <L_shift+0xc>
 80a81f6:	bd70      	pop	{r4, r5, r6, pc}

080a81f8 <__match>:
 80a81f8:	b530      	push	{r4, r5, lr}
 80a81fa:	6803      	ldr	r3, [r0, #0]
 80a81fc:	3301      	adds	r3, #1
 80a81fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a8202:	b914      	cbnz	r4, 80a820a <__match+0x12>
 80a8204:	6003      	str	r3, [r0, #0]
 80a8206:	2001      	movs	r0, #1
 80a8208:	bd30      	pop	{r4, r5, pc}
 80a820a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a820e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a8212:	2d19      	cmp	r5, #25
 80a8214:	bf98      	it	ls
 80a8216:	3220      	addls	r2, #32
 80a8218:	42a2      	cmp	r2, r4
 80a821a:	d0f0      	beq.n	80a81fe <__match+0x6>
 80a821c:	2000      	movs	r0, #0
 80a821e:	e7f3      	b.n	80a8208 <__match+0x10>

080a8220 <__hexnan>:
 80a8220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8224:	2500      	movs	r5, #0
 80a8226:	680b      	ldr	r3, [r1, #0]
 80a8228:	4682      	mov	sl, r0
 80a822a:	115e      	asrs	r6, r3, #5
 80a822c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a8230:	f013 031f 	ands.w	r3, r3, #31
 80a8234:	bf18      	it	ne
 80a8236:	3604      	addne	r6, #4
 80a8238:	1f37      	subs	r7, r6, #4
 80a823a:	4690      	mov	r8, r2
 80a823c:	46b9      	mov	r9, r7
 80a823e:	463c      	mov	r4, r7
 80a8240:	46ab      	mov	fp, r5
 80a8242:	b087      	sub	sp, #28
 80a8244:	6801      	ldr	r1, [r0, #0]
 80a8246:	9301      	str	r3, [sp, #4]
 80a8248:	f846 5c04 	str.w	r5, [r6, #-4]
 80a824c:	9502      	str	r5, [sp, #8]
 80a824e:	784a      	ldrb	r2, [r1, #1]
 80a8250:	1c4b      	adds	r3, r1, #1
 80a8252:	9303      	str	r3, [sp, #12]
 80a8254:	b342      	cbz	r2, 80a82a8 <__hexnan+0x88>
 80a8256:	4610      	mov	r0, r2
 80a8258:	9105      	str	r1, [sp, #20]
 80a825a:	9204      	str	r2, [sp, #16]
 80a825c:	f7ff fd7b 	bl	80a7d56 <__hexdig_fun>
 80a8260:	2800      	cmp	r0, #0
 80a8262:	d14f      	bne.n	80a8304 <__hexnan+0xe4>
 80a8264:	9a04      	ldr	r2, [sp, #16]
 80a8266:	9905      	ldr	r1, [sp, #20]
 80a8268:	2a20      	cmp	r2, #32
 80a826a:	d818      	bhi.n	80a829e <__hexnan+0x7e>
 80a826c:	9b02      	ldr	r3, [sp, #8]
 80a826e:	459b      	cmp	fp, r3
 80a8270:	dd13      	ble.n	80a829a <__hexnan+0x7a>
 80a8272:	454c      	cmp	r4, r9
 80a8274:	d206      	bcs.n	80a8284 <__hexnan+0x64>
 80a8276:	2d07      	cmp	r5, #7
 80a8278:	dc04      	bgt.n	80a8284 <__hexnan+0x64>
 80a827a:	462a      	mov	r2, r5
 80a827c:	4649      	mov	r1, r9
 80a827e:	4620      	mov	r0, r4
 80a8280:	f7ff ffa8 	bl	80a81d4 <L_shift>
 80a8284:	4544      	cmp	r4, r8
 80a8286:	d950      	bls.n	80a832a <__hexnan+0x10a>
 80a8288:	2300      	movs	r3, #0
 80a828a:	f1a4 0904 	sub.w	r9, r4, #4
 80a828e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a8292:	461d      	mov	r5, r3
 80a8294:	464c      	mov	r4, r9
 80a8296:	f8cd b008 	str.w	fp, [sp, #8]
 80a829a:	9903      	ldr	r1, [sp, #12]
 80a829c:	e7d7      	b.n	80a824e <__hexnan+0x2e>
 80a829e:	2a29      	cmp	r2, #41	; 0x29
 80a82a0:	d156      	bne.n	80a8350 <__hexnan+0x130>
 80a82a2:	3102      	adds	r1, #2
 80a82a4:	f8ca 1000 	str.w	r1, [sl]
 80a82a8:	f1bb 0f00 	cmp.w	fp, #0
 80a82ac:	d050      	beq.n	80a8350 <__hexnan+0x130>
 80a82ae:	454c      	cmp	r4, r9
 80a82b0:	d206      	bcs.n	80a82c0 <__hexnan+0xa0>
 80a82b2:	2d07      	cmp	r5, #7
 80a82b4:	dc04      	bgt.n	80a82c0 <__hexnan+0xa0>
 80a82b6:	462a      	mov	r2, r5
 80a82b8:	4649      	mov	r1, r9
 80a82ba:	4620      	mov	r0, r4
 80a82bc:	f7ff ff8a 	bl	80a81d4 <L_shift>
 80a82c0:	4544      	cmp	r4, r8
 80a82c2:	d934      	bls.n	80a832e <__hexnan+0x10e>
 80a82c4:	4623      	mov	r3, r4
 80a82c6:	f1a8 0204 	sub.w	r2, r8, #4
 80a82ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80a82ce:	429f      	cmp	r7, r3
 80a82d0:	f842 1f04 	str.w	r1, [r2, #4]!
 80a82d4:	d2f9      	bcs.n	80a82ca <__hexnan+0xaa>
 80a82d6:	1b3b      	subs	r3, r7, r4
 80a82d8:	f023 0303 	bic.w	r3, r3, #3
 80a82dc:	3304      	adds	r3, #4
 80a82de:	3401      	adds	r4, #1
 80a82e0:	3e03      	subs	r6, #3
 80a82e2:	42b4      	cmp	r4, r6
 80a82e4:	bf88      	it	hi
 80a82e6:	2304      	movhi	r3, #4
 80a82e8:	2200      	movs	r2, #0
 80a82ea:	4443      	add	r3, r8
 80a82ec:	f843 2b04 	str.w	r2, [r3], #4
 80a82f0:	429f      	cmp	r7, r3
 80a82f2:	d2fb      	bcs.n	80a82ec <__hexnan+0xcc>
 80a82f4:	683b      	ldr	r3, [r7, #0]
 80a82f6:	b91b      	cbnz	r3, 80a8300 <__hexnan+0xe0>
 80a82f8:	4547      	cmp	r7, r8
 80a82fa:	d127      	bne.n	80a834c <__hexnan+0x12c>
 80a82fc:	2301      	movs	r3, #1
 80a82fe:	603b      	str	r3, [r7, #0]
 80a8300:	2005      	movs	r0, #5
 80a8302:	e026      	b.n	80a8352 <__hexnan+0x132>
 80a8304:	3501      	adds	r5, #1
 80a8306:	2d08      	cmp	r5, #8
 80a8308:	f10b 0b01 	add.w	fp, fp, #1
 80a830c:	dd06      	ble.n	80a831c <__hexnan+0xfc>
 80a830e:	4544      	cmp	r4, r8
 80a8310:	d9c3      	bls.n	80a829a <__hexnan+0x7a>
 80a8312:	2300      	movs	r3, #0
 80a8314:	2501      	movs	r5, #1
 80a8316:	f844 3c04 	str.w	r3, [r4, #-4]
 80a831a:	3c04      	subs	r4, #4
 80a831c:	6822      	ldr	r2, [r4, #0]
 80a831e:	f000 000f 	and.w	r0, r0, #15
 80a8322:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80a8326:	6022      	str	r2, [r4, #0]
 80a8328:	e7b7      	b.n	80a829a <__hexnan+0x7a>
 80a832a:	2508      	movs	r5, #8
 80a832c:	e7b5      	b.n	80a829a <__hexnan+0x7a>
 80a832e:	9b01      	ldr	r3, [sp, #4]
 80a8330:	2b00      	cmp	r3, #0
 80a8332:	d0df      	beq.n	80a82f4 <__hexnan+0xd4>
 80a8334:	f04f 32ff 	mov.w	r2, #4294967295
 80a8338:	f1c3 0320 	rsb	r3, r3, #32
 80a833c:	fa22 f303 	lsr.w	r3, r2, r3
 80a8340:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a8344:	401a      	ands	r2, r3
 80a8346:	f846 2c04 	str.w	r2, [r6, #-4]
 80a834a:	e7d3      	b.n	80a82f4 <__hexnan+0xd4>
 80a834c:	3f04      	subs	r7, #4
 80a834e:	e7d1      	b.n	80a82f4 <__hexnan+0xd4>
 80a8350:	2004      	movs	r0, #4
 80a8352:	b007      	add	sp, #28
 80a8354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8358 <_findenv_r>:
 80a8358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a835c:	4607      	mov	r7, r0
 80a835e:	4689      	mov	r9, r1
 80a8360:	4616      	mov	r6, r2
 80a8362:	f000 fd61 	bl	80a8e28 <__env_lock>
 80a8366:	4b18      	ldr	r3, [pc, #96]	; (80a83c8 <_findenv_r+0x70>)
 80a8368:	681c      	ldr	r4, [r3, #0]
 80a836a:	469a      	mov	sl, r3
 80a836c:	b134      	cbz	r4, 80a837c <_findenv_r+0x24>
 80a836e:	464b      	mov	r3, r9
 80a8370:	4698      	mov	r8, r3
 80a8372:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a8376:	b139      	cbz	r1, 80a8388 <_findenv_r+0x30>
 80a8378:	293d      	cmp	r1, #61	; 0x3d
 80a837a:	d1f9      	bne.n	80a8370 <_findenv_r+0x18>
 80a837c:	4638      	mov	r0, r7
 80a837e:	f000 fd59 	bl	80a8e34 <__env_unlock>
 80a8382:	2000      	movs	r0, #0
 80a8384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8388:	eba8 0809 	sub.w	r8, r8, r9
 80a838c:	46a3      	mov	fp, r4
 80a838e:	f854 0b04 	ldr.w	r0, [r4], #4
 80a8392:	2800      	cmp	r0, #0
 80a8394:	d0f2      	beq.n	80a837c <_findenv_r+0x24>
 80a8396:	4642      	mov	r2, r8
 80a8398:	4649      	mov	r1, r9
 80a839a:	f7fe fb94 	bl	80a6ac6 <strncmp>
 80a839e:	2800      	cmp	r0, #0
 80a83a0:	d1f4      	bne.n	80a838c <_findenv_r+0x34>
 80a83a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a83a6:	eb03 0508 	add.w	r5, r3, r8
 80a83aa:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a83ae:	2b3d      	cmp	r3, #61	; 0x3d
 80a83b0:	d1ec      	bne.n	80a838c <_findenv_r+0x34>
 80a83b2:	f8da 3000 	ldr.w	r3, [sl]
 80a83b6:	4638      	mov	r0, r7
 80a83b8:	ebab 0303 	sub.w	r3, fp, r3
 80a83bc:	109b      	asrs	r3, r3, #2
 80a83be:	6033      	str	r3, [r6, #0]
 80a83c0:	f000 fd38 	bl	80a8e34 <__env_unlock>
 80a83c4:	1c68      	adds	r0, r5, #1
 80a83c6:	e7dd      	b.n	80a8384 <_findenv_r+0x2c>
 80a83c8:	20000238 	.word	0x20000238

080a83cc <_getenv_r>:
 80a83cc:	b507      	push	{r0, r1, r2, lr}
 80a83ce:	aa01      	add	r2, sp, #4
 80a83d0:	f7ff ffc2 	bl	80a8358 <_findenv_r>
 80a83d4:	b003      	add	sp, #12
 80a83d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a83dc <__gettzinfo>:
 80a83dc:	4800      	ldr	r0, [pc, #0]	; (80a83e0 <__gettzinfo+0x4>)
 80a83de:	4770      	bx	lr
 80a83e0:	20000070 	.word	0x20000070

080a83e4 <gmtime_r>:
 80a83e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a83e8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a83ec:	460c      	mov	r4, r1
 80a83ee:	2300      	movs	r3, #0
 80a83f0:	4630      	mov	r0, r6
 80a83f2:	4639      	mov	r1, r7
 80a83f4:	4a4f      	ldr	r2, [pc, #316]	; (80a8534 <gmtime_r+0x150>)
 80a83f6:	f000 fd23 	bl	80a8e40 <__aeabi_ldivmod>
 80a83fa:	4639      	mov	r1, r7
 80a83fc:	4605      	mov	r5, r0
 80a83fe:	2300      	movs	r3, #0
 80a8400:	4630      	mov	r0, r6
 80a8402:	4a4c      	ldr	r2, [pc, #304]	; (80a8534 <gmtime_r+0x150>)
 80a8404:	f000 fd1c 	bl	80a8e40 <__aeabi_ldivmod>
 80a8408:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a840c:	2a00      	cmp	r2, #0
 80a840e:	bfbc      	itt	lt
 80a8410:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a8414:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a8418:	fbb2 f3f1 	udiv	r3, r2, r1
 80a841c:	fb01 2213 	mls	r2, r1, r3, r2
 80a8420:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a8424:	60a3      	str	r3, [r4, #8]
 80a8426:	fbb2 f3f1 	udiv	r3, r2, r1
 80a842a:	fb01 2213 	mls	r2, r1, r3, r2
 80a842e:	6022      	str	r2, [r4, #0]
 80a8430:	f04f 0207 	mov.w	r2, #7
 80a8434:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a8438:	bfac      	ite	ge
 80a843a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a843e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a8442:	6063      	str	r3, [r4, #4]
 80a8444:	1cc3      	adds	r3, r0, #3
 80a8446:	fb93 f2f2 	sdiv	r2, r3, r2
 80a844a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a844e:	1a9b      	subs	r3, r3, r2
 80a8450:	bf48      	it	mi
 80a8452:	3307      	addmi	r3, #7
 80a8454:	2800      	cmp	r0, #0
 80a8456:	4938      	ldr	r1, [pc, #224]	; (80a8538 <gmtime_r+0x154>)
 80a8458:	61a3      	str	r3, [r4, #24]
 80a845a:	bfbd      	ittte	lt
 80a845c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a8460:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a8464:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a8468:	fb90 f1f1 	sdivge	r1, r0, r1
 80a846c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a8470:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a8474:	4b31      	ldr	r3, [pc, #196]	; (80a853c <gmtime_r+0x158>)
 80a8476:	f240 176d 	movw	r7, #365	; 0x16d
 80a847a:	fb03 0001 	mla	r0, r3, r1, r0
 80a847e:	fbb0 f2f2 	udiv	r2, r0, r2
 80a8482:	fbb0 f3fc 	udiv	r3, r0, ip
 80a8486:	4402      	add	r2, r0
 80a8488:	1ad2      	subs	r2, r2, r3
 80a848a:	4b2d      	ldr	r3, [pc, #180]	; (80a8540 <gmtime_r+0x15c>)
 80a848c:	2664      	movs	r6, #100	; 0x64
 80a848e:	fbb0 f3f3 	udiv	r3, r0, r3
 80a8492:	1ad3      	subs	r3, r2, r3
 80a8494:	fbb3 f5f7 	udiv	r5, r3, r7
 80a8498:	fbb3 f3fc 	udiv	r3, r3, ip
 80a849c:	fbb5 f2f6 	udiv	r2, r5, r6
 80a84a0:	1ad3      	subs	r3, r2, r3
 80a84a2:	4403      	add	r3, r0
 80a84a4:	2099      	movs	r0, #153	; 0x99
 80a84a6:	fb07 3315 	mls	r3, r7, r5, r3
 80a84aa:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a84ae:	f10c 0c02 	add.w	ip, ip, #2
 80a84b2:	fbbc f7f0 	udiv	r7, ip, r0
 80a84b6:	f04f 0805 	mov.w	r8, #5
 80a84ba:	4378      	muls	r0, r7
 80a84bc:	3002      	adds	r0, #2
 80a84be:	fbb0 f0f8 	udiv	r0, r0, r8
 80a84c2:	f103 0e01 	add.w	lr, r3, #1
 80a84c6:	ebae 0000 	sub.w	r0, lr, r0
 80a84ca:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a84ce:	45f4      	cmp	ip, lr
 80a84d0:	bf94      	ite	ls
 80a84d2:	f04f 0c02 	movls.w	ip, #2
 80a84d6:	f06f 0c09 	mvnhi.w	ip, #9
 80a84da:	4467      	add	r7, ip
 80a84dc:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a84e0:	fb0c 5101 	mla	r1, ip, r1, r5
 80a84e4:	2f01      	cmp	r7, #1
 80a84e6:	bf98      	it	ls
 80a84e8:	3101      	addls	r1, #1
 80a84ea:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a84ee:	d30c      	bcc.n	80a850a <gmtime_r+0x126>
 80a84f0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a84f4:	61e3      	str	r3, [r4, #28]
 80a84f6:	2300      	movs	r3, #0
 80a84f8:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a84fc:	60e0      	str	r0, [r4, #12]
 80a84fe:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a8502:	4620      	mov	r0, r4
 80a8504:	6223      	str	r3, [r4, #32]
 80a8506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a850a:	f015 0f03 	tst.w	r5, #3
 80a850e:	d102      	bne.n	80a8516 <gmtime_r+0x132>
 80a8510:	fb06 5212 	mls	r2, r6, r2, r5
 80a8514:	b95a      	cbnz	r2, 80a852e <gmtime_r+0x14a>
 80a8516:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a851a:	fbb5 f2f6 	udiv	r2, r5, r6
 80a851e:	fb06 5212 	mls	r2, r6, r2, r5
 80a8522:	fab2 f282 	clz	r2, r2
 80a8526:	0952      	lsrs	r2, r2, #5
 80a8528:	333b      	adds	r3, #59	; 0x3b
 80a852a:	4413      	add	r3, r2
 80a852c:	e7e2      	b.n	80a84f4 <gmtime_r+0x110>
 80a852e:	2201      	movs	r2, #1
 80a8530:	e7fa      	b.n	80a8528 <gmtime_r+0x144>
 80a8532:	bf00      	nop
 80a8534:	00015180 	.word	0x00015180
 80a8538:	00023ab1 	.word	0x00023ab1
 80a853c:	fffdc54f 	.word	0xfffdc54f
 80a8540:	00023ab0 	.word	0x00023ab0

080a8544 <__retarget_lock_acquire>:
 80a8544:	4770      	bx	lr

080a8546 <__retarget_lock_acquire_recursive>:
 80a8546:	4770      	bx	lr

080a8548 <__retarget_lock_release>:
 80a8548:	4770      	bx	lr

080a854a <__retarget_lock_release_recursive>:
 80a854a:	4770      	bx	lr

080a854c <__ascii_mbtowc>:
 80a854c:	b082      	sub	sp, #8
 80a854e:	b901      	cbnz	r1, 80a8552 <__ascii_mbtowc+0x6>
 80a8550:	a901      	add	r1, sp, #4
 80a8552:	b142      	cbz	r2, 80a8566 <__ascii_mbtowc+0x1a>
 80a8554:	b14b      	cbz	r3, 80a856a <__ascii_mbtowc+0x1e>
 80a8556:	7813      	ldrb	r3, [r2, #0]
 80a8558:	600b      	str	r3, [r1, #0]
 80a855a:	7812      	ldrb	r2, [r2, #0]
 80a855c:	1e10      	subs	r0, r2, #0
 80a855e:	bf18      	it	ne
 80a8560:	2001      	movne	r0, #1
 80a8562:	b002      	add	sp, #8
 80a8564:	4770      	bx	lr
 80a8566:	4610      	mov	r0, r2
 80a8568:	e7fb      	b.n	80a8562 <__ascii_mbtowc+0x16>
 80a856a:	f06f 0001 	mvn.w	r0, #1
 80a856e:	e7f8      	b.n	80a8562 <__ascii_mbtowc+0x16>

080a8570 <_Balloc>:
 80a8570:	b570      	push	{r4, r5, r6, lr}
 80a8572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a8574:	4604      	mov	r4, r0
 80a8576:	460d      	mov	r5, r1
 80a8578:	b93e      	cbnz	r6, 80a858a <_Balloc+0x1a>
 80a857a:	2010      	movs	r0, #16
 80a857c:	f7fb fd7c 	bl	80a4078 <malloc>
 80a8580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a8584:	6260      	str	r0, [r4, #36]	; 0x24
 80a8586:	6006      	str	r6, [r0, #0]
 80a8588:	60c6      	str	r6, [r0, #12]
 80a858a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80a858c:	68f3      	ldr	r3, [r6, #12]
 80a858e:	b183      	cbz	r3, 80a85b2 <_Balloc+0x42>
 80a8590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a8592:	68db      	ldr	r3, [r3, #12]
 80a8594:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80a8598:	b9b8      	cbnz	r0, 80a85ca <_Balloc+0x5a>
 80a859a:	2101      	movs	r1, #1
 80a859c:	fa01 f605 	lsl.w	r6, r1, r5
 80a85a0:	1d72      	adds	r2, r6, #5
 80a85a2:	4620      	mov	r0, r4
 80a85a4:	0092      	lsls	r2, r2, #2
 80a85a6:	f000 fc1c 	bl	80a8de2 <_calloc_r>
 80a85aa:	b160      	cbz	r0, 80a85c6 <_Balloc+0x56>
 80a85ac:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80a85b0:	e00e      	b.n	80a85d0 <_Balloc+0x60>
 80a85b2:	2221      	movs	r2, #33	; 0x21
 80a85b4:	2104      	movs	r1, #4
 80a85b6:	4620      	mov	r0, r4
 80a85b8:	f000 fc13 	bl	80a8de2 <_calloc_r>
 80a85bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a85be:	60f0      	str	r0, [r6, #12]
 80a85c0:	68db      	ldr	r3, [r3, #12]
 80a85c2:	2b00      	cmp	r3, #0
 80a85c4:	d1e4      	bne.n	80a8590 <_Balloc+0x20>
 80a85c6:	2000      	movs	r0, #0
 80a85c8:	bd70      	pop	{r4, r5, r6, pc}
 80a85ca:	6802      	ldr	r2, [r0, #0]
 80a85cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80a85d0:	2300      	movs	r3, #0
 80a85d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80a85d6:	e7f7      	b.n	80a85c8 <_Balloc+0x58>

080a85d8 <_Bfree>:
 80a85d8:	b570      	push	{r4, r5, r6, lr}
 80a85da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a85dc:	4605      	mov	r5, r0
 80a85de:	460c      	mov	r4, r1
 80a85e0:	b93e      	cbnz	r6, 80a85f2 <_Bfree+0x1a>
 80a85e2:	2010      	movs	r0, #16
 80a85e4:	f7fb fd48 	bl	80a4078 <malloc>
 80a85e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a85ec:	6268      	str	r0, [r5, #36]	; 0x24
 80a85ee:	6006      	str	r6, [r0, #0]
 80a85f0:	60c6      	str	r6, [r0, #12]
 80a85f2:	b13c      	cbz	r4, 80a8604 <_Bfree+0x2c>
 80a85f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a85f6:	6862      	ldr	r2, [r4, #4]
 80a85f8:	68db      	ldr	r3, [r3, #12]
 80a85fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a85fe:	6021      	str	r1, [r4, #0]
 80a8600:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80a8604:	bd70      	pop	{r4, r5, r6, pc}

080a8606 <__multadd>:
 80a8606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a860a:	4698      	mov	r8, r3
 80a860c:	460c      	mov	r4, r1
 80a860e:	2300      	movs	r3, #0
 80a8610:	690e      	ldr	r6, [r1, #16]
 80a8612:	4607      	mov	r7, r0
 80a8614:	f101 0014 	add.w	r0, r1, #20
 80a8618:	6805      	ldr	r5, [r0, #0]
 80a861a:	3301      	adds	r3, #1
 80a861c:	b2a9      	uxth	r1, r5
 80a861e:	fb02 8101 	mla	r1, r2, r1, r8
 80a8622:	0c2d      	lsrs	r5, r5, #16
 80a8624:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80a8628:	fb02 c505 	mla	r5, r2, r5, ip
 80a862c:	b289      	uxth	r1, r1
 80a862e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80a8632:	429e      	cmp	r6, r3
 80a8634:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80a8638:	f840 1b04 	str.w	r1, [r0], #4
 80a863c:	dcec      	bgt.n	80a8618 <__multadd+0x12>
 80a863e:	f1b8 0f00 	cmp.w	r8, #0
 80a8642:	d01b      	beq.n	80a867c <__multadd+0x76>
 80a8644:	68a3      	ldr	r3, [r4, #8]
 80a8646:	42b3      	cmp	r3, r6
 80a8648:	dc12      	bgt.n	80a8670 <__multadd+0x6a>
 80a864a:	6861      	ldr	r1, [r4, #4]
 80a864c:	4638      	mov	r0, r7
 80a864e:	3101      	adds	r1, #1
 80a8650:	f7ff ff8e 	bl	80a8570 <_Balloc>
 80a8654:	4605      	mov	r5, r0
 80a8656:	6922      	ldr	r2, [r4, #16]
 80a8658:	f104 010c 	add.w	r1, r4, #12
 80a865c:	3202      	adds	r2, #2
 80a865e:	0092      	lsls	r2, r2, #2
 80a8660:	300c      	adds	r0, #12
 80a8662:	f7fe f9c1 	bl	80a69e8 <memcpy>
 80a8666:	4621      	mov	r1, r4
 80a8668:	4638      	mov	r0, r7
 80a866a:	f7ff ffb5 	bl	80a85d8 <_Bfree>
 80a866e:	462c      	mov	r4, r5
 80a8670:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80a8674:	3601      	adds	r6, #1
 80a8676:	f8c3 8014 	str.w	r8, [r3, #20]
 80a867a:	6126      	str	r6, [r4, #16]
 80a867c:	4620      	mov	r0, r4
 80a867e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a8682 <__s2b>:
 80a8682:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8686:	4615      	mov	r5, r2
 80a8688:	2209      	movs	r2, #9
 80a868a:	461f      	mov	r7, r3
 80a868c:	3308      	adds	r3, #8
 80a868e:	460c      	mov	r4, r1
 80a8690:	fb93 f3f2 	sdiv	r3, r3, r2
 80a8694:	4606      	mov	r6, r0
 80a8696:	2201      	movs	r2, #1
 80a8698:	2100      	movs	r1, #0
 80a869a:	429a      	cmp	r2, r3
 80a869c:	db20      	blt.n	80a86e0 <__s2b+0x5e>
 80a869e:	4630      	mov	r0, r6
 80a86a0:	f7ff ff66 	bl	80a8570 <_Balloc>
 80a86a4:	9b08      	ldr	r3, [sp, #32]
 80a86a6:	2d09      	cmp	r5, #9
 80a86a8:	6143      	str	r3, [r0, #20]
 80a86aa:	f04f 0301 	mov.w	r3, #1
 80a86ae:	6103      	str	r3, [r0, #16]
 80a86b0:	dd19      	ble.n	80a86e6 <__s2b+0x64>
 80a86b2:	f104 0909 	add.w	r9, r4, #9
 80a86b6:	46c8      	mov	r8, r9
 80a86b8:	442c      	add	r4, r5
 80a86ba:	f818 3b01 	ldrb.w	r3, [r8], #1
 80a86be:	4601      	mov	r1, r0
 80a86c0:	220a      	movs	r2, #10
 80a86c2:	4630      	mov	r0, r6
 80a86c4:	3b30      	subs	r3, #48	; 0x30
 80a86c6:	f7ff ff9e 	bl	80a8606 <__multadd>
 80a86ca:	45a0      	cmp	r8, r4
 80a86cc:	d1f5      	bne.n	80a86ba <__s2b+0x38>
 80a86ce:	f1a5 0408 	sub.w	r4, r5, #8
 80a86d2:	444c      	add	r4, r9
 80a86d4:	1b2d      	subs	r5, r5, r4
 80a86d6:	1963      	adds	r3, r4, r5
 80a86d8:	42bb      	cmp	r3, r7
 80a86da:	db07      	blt.n	80a86ec <__s2b+0x6a>
 80a86dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a86e0:	0052      	lsls	r2, r2, #1
 80a86e2:	3101      	adds	r1, #1
 80a86e4:	e7d9      	b.n	80a869a <__s2b+0x18>
 80a86e6:	2509      	movs	r5, #9
 80a86e8:	340a      	adds	r4, #10
 80a86ea:	e7f3      	b.n	80a86d4 <__s2b+0x52>
 80a86ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a86f0:	4601      	mov	r1, r0
 80a86f2:	220a      	movs	r2, #10
 80a86f4:	4630      	mov	r0, r6
 80a86f6:	3b30      	subs	r3, #48	; 0x30
 80a86f8:	f7ff ff85 	bl	80a8606 <__multadd>
 80a86fc:	e7eb      	b.n	80a86d6 <__s2b+0x54>

080a86fe <__hi0bits>:
 80a86fe:	0c02      	lsrs	r2, r0, #16
 80a8700:	0412      	lsls	r2, r2, #16
 80a8702:	4603      	mov	r3, r0
 80a8704:	b9ca      	cbnz	r2, 80a873a <__hi0bits+0x3c>
 80a8706:	0403      	lsls	r3, r0, #16
 80a8708:	2010      	movs	r0, #16
 80a870a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80a870e:	bf04      	itt	eq
 80a8710:	021b      	lsleq	r3, r3, #8
 80a8712:	3008      	addeq	r0, #8
 80a8714:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80a8718:	bf04      	itt	eq
 80a871a:	011b      	lsleq	r3, r3, #4
 80a871c:	3004      	addeq	r0, #4
 80a871e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80a8722:	bf04      	itt	eq
 80a8724:	009b      	lsleq	r3, r3, #2
 80a8726:	3002      	addeq	r0, #2
 80a8728:	2b00      	cmp	r3, #0
 80a872a:	db05      	blt.n	80a8738 <__hi0bits+0x3a>
 80a872c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80a8730:	f100 0001 	add.w	r0, r0, #1
 80a8734:	bf08      	it	eq
 80a8736:	2020      	moveq	r0, #32
 80a8738:	4770      	bx	lr
 80a873a:	2000      	movs	r0, #0
 80a873c:	e7e5      	b.n	80a870a <__hi0bits+0xc>

080a873e <__lo0bits>:
 80a873e:	6803      	ldr	r3, [r0, #0]
 80a8740:	4602      	mov	r2, r0
 80a8742:	f013 0007 	ands.w	r0, r3, #7
 80a8746:	d00b      	beq.n	80a8760 <__lo0bits+0x22>
 80a8748:	07d9      	lsls	r1, r3, #31
 80a874a:	d422      	bmi.n	80a8792 <__lo0bits+0x54>
 80a874c:	0798      	lsls	r0, r3, #30
 80a874e:	bf49      	itett	mi
 80a8750:	085b      	lsrmi	r3, r3, #1
 80a8752:	089b      	lsrpl	r3, r3, #2
 80a8754:	2001      	movmi	r0, #1
 80a8756:	6013      	strmi	r3, [r2, #0]
 80a8758:	bf5c      	itt	pl
 80a875a:	2002      	movpl	r0, #2
 80a875c:	6013      	strpl	r3, [r2, #0]
 80a875e:	4770      	bx	lr
 80a8760:	b299      	uxth	r1, r3
 80a8762:	b909      	cbnz	r1, 80a8768 <__lo0bits+0x2a>
 80a8764:	2010      	movs	r0, #16
 80a8766:	0c1b      	lsrs	r3, r3, #16
 80a8768:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a876c:	bf04      	itt	eq
 80a876e:	0a1b      	lsreq	r3, r3, #8
 80a8770:	3008      	addeq	r0, #8
 80a8772:	0719      	lsls	r1, r3, #28
 80a8774:	bf04      	itt	eq
 80a8776:	091b      	lsreq	r3, r3, #4
 80a8778:	3004      	addeq	r0, #4
 80a877a:	0799      	lsls	r1, r3, #30
 80a877c:	bf04      	itt	eq
 80a877e:	089b      	lsreq	r3, r3, #2
 80a8780:	3002      	addeq	r0, #2
 80a8782:	07d9      	lsls	r1, r3, #31
 80a8784:	d403      	bmi.n	80a878e <__lo0bits+0x50>
 80a8786:	085b      	lsrs	r3, r3, #1
 80a8788:	f100 0001 	add.w	r0, r0, #1
 80a878c:	d003      	beq.n	80a8796 <__lo0bits+0x58>
 80a878e:	6013      	str	r3, [r2, #0]
 80a8790:	4770      	bx	lr
 80a8792:	2000      	movs	r0, #0
 80a8794:	4770      	bx	lr
 80a8796:	2020      	movs	r0, #32
 80a8798:	4770      	bx	lr

080a879a <__i2b>:
 80a879a:	b510      	push	{r4, lr}
 80a879c:	460c      	mov	r4, r1
 80a879e:	2101      	movs	r1, #1
 80a87a0:	f7ff fee6 	bl	80a8570 <_Balloc>
 80a87a4:	2201      	movs	r2, #1
 80a87a6:	6144      	str	r4, [r0, #20]
 80a87a8:	6102      	str	r2, [r0, #16]
 80a87aa:	bd10      	pop	{r4, pc}

080a87ac <__multiply>:
 80a87ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a87b0:	4615      	mov	r5, r2
 80a87b2:	690a      	ldr	r2, [r1, #16]
 80a87b4:	692b      	ldr	r3, [r5, #16]
 80a87b6:	460c      	mov	r4, r1
 80a87b8:	429a      	cmp	r2, r3
 80a87ba:	bfbe      	ittt	lt
 80a87bc:	460b      	movlt	r3, r1
 80a87be:	462c      	movlt	r4, r5
 80a87c0:	461d      	movlt	r5, r3
 80a87c2:	6927      	ldr	r7, [r4, #16]
 80a87c4:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a87c8:	68a3      	ldr	r3, [r4, #8]
 80a87ca:	6861      	ldr	r1, [r4, #4]
 80a87cc:	eb07 0609 	add.w	r6, r7, r9
 80a87d0:	42b3      	cmp	r3, r6
 80a87d2:	bfb8      	it	lt
 80a87d4:	3101      	addlt	r1, #1
 80a87d6:	b085      	sub	sp, #20
 80a87d8:	f7ff feca 	bl	80a8570 <_Balloc>
 80a87dc:	f100 0114 	add.w	r1, r0, #20
 80a87e0:	460b      	mov	r3, r1
 80a87e2:	2200      	movs	r2, #0
 80a87e4:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 80a87e8:	4543      	cmp	r3, r8
 80a87ea:	d31d      	bcc.n	80a8828 <__multiply+0x7c>
 80a87ec:	f104 0314 	add.w	r3, r4, #20
 80a87f0:	f105 0214 	add.w	r2, r5, #20
 80a87f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80a87f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a87fc:	9302      	str	r3, [sp, #8]
 80a87fe:	1b3b      	subs	r3, r7, r4
 80a8800:	3b15      	subs	r3, #21
 80a8802:	f023 0303 	bic.w	r3, r3, #3
 80a8806:	3304      	adds	r3, #4
 80a8808:	f104 0515 	add.w	r5, r4, #21
 80a880c:	42af      	cmp	r7, r5
 80a880e:	bf38      	it	cc
 80a8810:	2304      	movcc	r3, #4
 80a8812:	9301      	str	r3, [sp, #4]
 80a8814:	9b02      	ldr	r3, [sp, #8]
 80a8816:	9203      	str	r2, [sp, #12]
 80a8818:	4293      	cmp	r3, r2
 80a881a:	d808      	bhi.n	80a882e <__multiply+0x82>
 80a881c:	2e00      	cmp	r6, #0
 80a881e:	dc5a      	bgt.n	80a88d6 <__multiply+0x12a>
 80a8820:	6106      	str	r6, [r0, #16]
 80a8822:	b005      	add	sp, #20
 80a8824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8828:	f843 2b04 	str.w	r2, [r3], #4
 80a882c:	e7dc      	b.n	80a87e8 <__multiply+0x3c>
 80a882e:	f8b2 a000 	ldrh.w	sl, [r2]
 80a8832:	f1ba 0f00 	cmp.w	sl, #0
 80a8836:	d024      	beq.n	80a8882 <__multiply+0xd6>
 80a8838:	4689      	mov	r9, r1
 80a883a:	f04f 0c00 	mov.w	ip, #0
 80a883e:	f104 0e14 	add.w	lr, r4, #20
 80a8842:	f85e 5b04 	ldr.w	r5, [lr], #4
 80a8846:	f8d9 b000 	ldr.w	fp, [r9]
 80a884a:	b2ab      	uxth	r3, r5
 80a884c:	fa1f fb8b 	uxth.w	fp, fp
 80a8850:	fb0a b303 	mla	r3, sl, r3, fp
 80a8854:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 80a8858:	f8d9 5000 	ldr.w	r5, [r9]
 80a885c:	4463      	add	r3, ip
 80a885e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a8862:	fb0a c50b 	mla	r5, sl, fp, ip
 80a8866:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 80a886a:	b29b      	uxth	r3, r3
 80a886c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80a8870:	4577      	cmp	r7, lr
 80a8872:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a8876:	f849 3b04 	str.w	r3, [r9], #4
 80a887a:	d8e2      	bhi.n	80a8842 <__multiply+0x96>
 80a887c:	9b01      	ldr	r3, [sp, #4]
 80a887e:	f841 c003 	str.w	ip, [r1, r3]
 80a8882:	9b03      	ldr	r3, [sp, #12]
 80a8884:	3204      	adds	r2, #4
 80a8886:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80a888a:	f1b9 0f00 	cmp.w	r9, #0
 80a888e:	d020      	beq.n	80a88d2 <__multiply+0x126>
 80a8890:	468e      	mov	lr, r1
 80a8892:	f04f 0a00 	mov.w	sl, #0
 80a8896:	680b      	ldr	r3, [r1, #0]
 80a8898:	f104 0c14 	add.w	ip, r4, #20
 80a889c:	f8bc 5000 	ldrh.w	r5, [ip]
 80a88a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80a88a4:	b29b      	uxth	r3, r3
 80a88a6:	fb09 b505 	mla	r5, r9, r5, fp
 80a88aa:	44aa      	add	sl, r5
 80a88ac:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a88b0:	f84e 3b04 	str.w	r3, [lr], #4
 80a88b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80a88b8:	f8be 5000 	ldrh.w	r5, [lr]
 80a88bc:	0c1b      	lsrs	r3, r3, #16
 80a88be:	fb09 5303 	mla	r3, r9, r3, r5
 80a88c2:	4567      	cmp	r7, ip
 80a88c4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80a88c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80a88cc:	d8e6      	bhi.n	80a889c <__multiply+0xf0>
 80a88ce:	9d01      	ldr	r5, [sp, #4]
 80a88d0:	514b      	str	r3, [r1, r5]
 80a88d2:	3104      	adds	r1, #4
 80a88d4:	e79e      	b.n	80a8814 <__multiply+0x68>
 80a88d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80a88da:	2b00      	cmp	r3, #0
 80a88dc:	d1a0      	bne.n	80a8820 <__multiply+0x74>
 80a88de:	3e01      	subs	r6, #1
 80a88e0:	e79c      	b.n	80a881c <__multiply+0x70>
	...

080a88e4 <__pow5mult>:
 80a88e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a88e8:	4615      	mov	r5, r2
 80a88ea:	f012 0203 	ands.w	r2, r2, #3
 80a88ee:	4606      	mov	r6, r0
 80a88f0:	460f      	mov	r7, r1
 80a88f2:	d007      	beq.n	80a8904 <__pow5mult+0x20>
 80a88f4:	4c21      	ldr	r4, [pc, #132]	; (80a897c <__pow5mult+0x98>)
 80a88f6:	3a01      	subs	r2, #1
 80a88f8:	2300      	movs	r3, #0
 80a88fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a88fe:	f7ff fe82 	bl	80a8606 <__multadd>
 80a8902:	4607      	mov	r7, r0
 80a8904:	10ad      	asrs	r5, r5, #2
 80a8906:	d035      	beq.n	80a8974 <__pow5mult+0x90>
 80a8908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a890a:	b93c      	cbnz	r4, 80a891c <__pow5mult+0x38>
 80a890c:	2010      	movs	r0, #16
 80a890e:	f7fb fbb3 	bl	80a4078 <malloc>
 80a8912:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80a8916:	6270      	str	r0, [r6, #36]	; 0x24
 80a8918:	6004      	str	r4, [r0, #0]
 80a891a:	60c4      	str	r4, [r0, #12]
 80a891c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a8920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a8924:	b94c      	cbnz	r4, 80a893a <__pow5mult+0x56>
 80a8926:	f240 2171 	movw	r1, #625	; 0x271
 80a892a:	4630      	mov	r0, r6
 80a892c:	f7ff ff35 	bl	80a879a <__i2b>
 80a8930:	2300      	movs	r3, #0
 80a8932:	4604      	mov	r4, r0
 80a8934:	f8c8 0008 	str.w	r0, [r8, #8]
 80a8938:	6003      	str	r3, [r0, #0]
 80a893a:	f04f 0900 	mov.w	r9, #0
 80a893e:	07eb      	lsls	r3, r5, #31
 80a8940:	d50a      	bpl.n	80a8958 <__pow5mult+0x74>
 80a8942:	4639      	mov	r1, r7
 80a8944:	4622      	mov	r2, r4
 80a8946:	4630      	mov	r0, r6
 80a8948:	f7ff ff30 	bl	80a87ac <__multiply>
 80a894c:	4680      	mov	r8, r0
 80a894e:	4639      	mov	r1, r7
 80a8950:	4630      	mov	r0, r6
 80a8952:	f7ff fe41 	bl	80a85d8 <_Bfree>
 80a8956:	4647      	mov	r7, r8
 80a8958:	106d      	asrs	r5, r5, #1
 80a895a:	d00b      	beq.n	80a8974 <__pow5mult+0x90>
 80a895c:	6820      	ldr	r0, [r4, #0]
 80a895e:	b938      	cbnz	r0, 80a8970 <__pow5mult+0x8c>
 80a8960:	4622      	mov	r2, r4
 80a8962:	4621      	mov	r1, r4
 80a8964:	4630      	mov	r0, r6
 80a8966:	f7ff ff21 	bl	80a87ac <__multiply>
 80a896a:	6020      	str	r0, [r4, #0]
 80a896c:	f8c0 9000 	str.w	r9, [r0]
 80a8970:	4604      	mov	r4, r0
 80a8972:	e7e4      	b.n	80a893e <__pow5mult+0x5a>
 80a8974:	4638      	mov	r0, r7
 80a8976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a897a:	bf00      	nop
 80a897c:	080a94a8 	.word	0x080a94a8

080a8980 <__lshift>:
 80a8980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8984:	460c      	mov	r4, r1
 80a8986:	4607      	mov	r7, r0
 80a8988:	4691      	mov	r9, r2
 80a898a:	6923      	ldr	r3, [r4, #16]
 80a898c:	6849      	ldr	r1, [r1, #4]
 80a898e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80a8992:	68a3      	ldr	r3, [r4, #8]
 80a8994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a8998:	f108 0601 	add.w	r6, r8, #1
 80a899c:	42b3      	cmp	r3, r6
 80a899e:	db3f      	blt.n	80a8a20 <__lshift+0xa0>
 80a89a0:	4638      	mov	r0, r7
 80a89a2:	f7ff fde5 	bl	80a8570 <_Balloc>
 80a89a6:	2300      	movs	r3, #0
 80a89a8:	4605      	mov	r5, r0
 80a89aa:	f100 0114 	add.w	r1, r0, #20
 80a89ae:	f100 0210 	add.w	r2, r0, #16
 80a89b2:	4618      	mov	r0, r3
 80a89b4:	4553      	cmp	r3, sl
 80a89b6:	db36      	blt.n	80a8a26 <__lshift+0xa6>
 80a89b8:	6920      	ldr	r0, [r4, #16]
 80a89ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80a89be:	f104 0314 	add.w	r3, r4, #20
 80a89c2:	f019 091f 	ands.w	r9, r9, #31
 80a89c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80a89ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80a89ce:	d02e      	beq.n	80a8a2e <__lshift+0xae>
 80a89d0:	468a      	mov	sl, r1
 80a89d2:	2200      	movs	r2, #0
 80a89d4:	f1c9 0e20 	rsb	lr, r9, #32
 80a89d8:	6818      	ldr	r0, [r3, #0]
 80a89da:	fa00 f009 	lsl.w	r0, r0, r9
 80a89de:	4302      	orrs	r2, r0
 80a89e0:	f84a 2b04 	str.w	r2, [sl], #4
 80a89e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80a89e8:	459c      	cmp	ip, r3
 80a89ea:	fa22 f20e 	lsr.w	r2, r2, lr
 80a89ee:	d8f3      	bhi.n	80a89d8 <__lshift+0x58>
 80a89f0:	ebac 0304 	sub.w	r3, ip, r4
 80a89f4:	3b15      	subs	r3, #21
 80a89f6:	f023 0303 	bic.w	r3, r3, #3
 80a89fa:	3304      	adds	r3, #4
 80a89fc:	f104 0015 	add.w	r0, r4, #21
 80a8a00:	4560      	cmp	r0, ip
 80a8a02:	bf88      	it	hi
 80a8a04:	2304      	movhi	r3, #4
 80a8a06:	50ca      	str	r2, [r1, r3]
 80a8a08:	b10a      	cbz	r2, 80a8a0e <__lshift+0x8e>
 80a8a0a:	f108 0602 	add.w	r6, r8, #2
 80a8a0e:	3e01      	subs	r6, #1
 80a8a10:	4638      	mov	r0, r7
 80a8a12:	4621      	mov	r1, r4
 80a8a14:	612e      	str	r6, [r5, #16]
 80a8a16:	f7ff fddf 	bl	80a85d8 <_Bfree>
 80a8a1a:	4628      	mov	r0, r5
 80a8a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a8a20:	3101      	adds	r1, #1
 80a8a22:	005b      	lsls	r3, r3, #1
 80a8a24:	e7ba      	b.n	80a899c <__lshift+0x1c>
 80a8a26:	f842 0f04 	str.w	r0, [r2, #4]!
 80a8a2a:	3301      	adds	r3, #1
 80a8a2c:	e7c2      	b.n	80a89b4 <__lshift+0x34>
 80a8a2e:	3904      	subs	r1, #4
 80a8a30:	f853 2b04 	ldr.w	r2, [r3], #4
 80a8a34:	459c      	cmp	ip, r3
 80a8a36:	f841 2f04 	str.w	r2, [r1, #4]!
 80a8a3a:	d8f9      	bhi.n	80a8a30 <__lshift+0xb0>
 80a8a3c:	e7e7      	b.n	80a8a0e <__lshift+0x8e>

080a8a3e <__mcmp>:
 80a8a3e:	4603      	mov	r3, r0
 80a8a40:	690a      	ldr	r2, [r1, #16]
 80a8a42:	6900      	ldr	r0, [r0, #16]
 80a8a44:	b530      	push	{r4, r5, lr}
 80a8a46:	1a80      	subs	r0, r0, r2
 80a8a48:	d10d      	bne.n	80a8a66 <__mcmp+0x28>
 80a8a4a:	3314      	adds	r3, #20
 80a8a4c:	3114      	adds	r1, #20
 80a8a4e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80a8a52:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a8a56:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80a8a5a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80a8a5e:	4295      	cmp	r5, r2
 80a8a60:	d002      	beq.n	80a8a68 <__mcmp+0x2a>
 80a8a62:	d304      	bcc.n	80a8a6e <__mcmp+0x30>
 80a8a64:	2001      	movs	r0, #1
 80a8a66:	bd30      	pop	{r4, r5, pc}
 80a8a68:	42a3      	cmp	r3, r4
 80a8a6a:	d3f4      	bcc.n	80a8a56 <__mcmp+0x18>
 80a8a6c:	e7fb      	b.n	80a8a66 <__mcmp+0x28>
 80a8a6e:	f04f 30ff 	mov.w	r0, #4294967295
 80a8a72:	e7f8      	b.n	80a8a66 <__mcmp+0x28>

080a8a74 <__mdiff>:
 80a8a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8a78:	460c      	mov	r4, r1
 80a8a7a:	4606      	mov	r6, r0
 80a8a7c:	4611      	mov	r1, r2
 80a8a7e:	4620      	mov	r0, r4
 80a8a80:	4692      	mov	sl, r2
 80a8a82:	f7ff ffdc 	bl	80a8a3e <__mcmp>
 80a8a86:	1e05      	subs	r5, r0, #0
 80a8a88:	d108      	bne.n	80a8a9c <__mdiff+0x28>
 80a8a8a:	4629      	mov	r1, r5
 80a8a8c:	4630      	mov	r0, r6
 80a8a8e:	f7ff fd6f 	bl	80a8570 <_Balloc>
 80a8a92:	2301      	movs	r3, #1
 80a8a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80a8a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8a9c:	bfa4      	itt	ge
 80a8a9e:	4653      	movge	r3, sl
 80a8aa0:	46a2      	movge	sl, r4
 80a8aa2:	4630      	mov	r0, r6
 80a8aa4:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a8aa8:	bfa6      	itte	ge
 80a8aaa:	461c      	movge	r4, r3
 80a8aac:	2500      	movge	r5, #0
 80a8aae:	2501      	movlt	r5, #1
 80a8ab0:	f7ff fd5e 	bl	80a8570 <_Balloc>
 80a8ab4:	f100 0814 	add.w	r8, r0, #20
 80a8ab8:	f8da 7010 	ldr.w	r7, [sl, #16]
 80a8abc:	60c5      	str	r5, [r0, #12]
 80a8abe:	f10a 0210 	add.w	r2, sl, #16
 80a8ac2:	f10a 0514 	add.w	r5, sl, #20
 80a8ac6:	f04f 0c00 	mov.w	ip, #0
 80a8aca:	46c2      	mov	sl, r8
 80a8acc:	6926      	ldr	r6, [r4, #16]
 80a8ace:	f104 0914 	add.w	r9, r4, #20
 80a8ad2:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80a8ad6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80a8ada:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80a8ade:	f859 3b04 	ldr.w	r3, [r9], #4
 80a8ae2:	fa1f f18b 	uxth.w	r1, fp
 80a8ae6:	4461      	add	r1, ip
 80a8ae8:	fa1f fc83 	uxth.w	ip, r3
 80a8aec:	0c1b      	lsrs	r3, r3, #16
 80a8aee:	eba1 010c 	sub.w	r1, r1, ip
 80a8af2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80a8af6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80a8afa:	b289      	uxth	r1, r1
 80a8afc:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a8b00:	454e      	cmp	r6, r9
 80a8b02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a8b06:	f84a 3b04 	str.w	r3, [sl], #4
 80a8b0a:	d8e6      	bhi.n	80a8ada <__mdiff+0x66>
 80a8b0c:	1b33      	subs	r3, r6, r4
 80a8b0e:	3b15      	subs	r3, #21
 80a8b10:	f023 0303 	bic.w	r3, r3, #3
 80a8b14:	3415      	adds	r4, #21
 80a8b16:	3304      	adds	r3, #4
 80a8b18:	42a6      	cmp	r6, r4
 80a8b1a:	bf38      	it	cc
 80a8b1c:	2304      	movcc	r3, #4
 80a8b1e:	441d      	add	r5, r3
 80a8b20:	4443      	add	r3, r8
 80a8b22:	461e      	mov	r6, r3
 80a8b24:	462c      	mov	r4, r5
 80a8b26:	4574      	cmp	r4, lr
 80a8b28:	d30e      	bcc.n	80a8b48 <__mdiff+0xd4>
 80a8b2a:	f10e 0203 	add.w	r2, lr, #3
 80a8b2e:	1b52      	subs	r2, r2, r5
 80a8b30:	f022 0203 	bic.w	r2, r2, #3
 80a8b34:	3d03      	subs	r5, #3
 80a8b36:	45ae      	cmp	lr, r5
 80a8b38:	bf38      	it	cc
 80a8b3a:	2200      	movcc	r2, #0
 80a8b3c:	441a      	add	r2, r3
 80a8b3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80a8b42:	b18b      	cbz	r3, 80a8b68 <__mdiff+0xf4>
 80a8b44:	6107      	str	r7, [r0, #16]
 80a8b46:	e7a7      	b.n	80a8a98 <__mdiff+0x24>
 80a8b48:	f854 8b04 	ldr.w	r8, [r4], #4
 80a8b4c:	fa1f f288 	uxth.w	r2, r8
 80a8b50:	4462      	add	r2, ip
 80a8b52:	1411      	asrs	r1, r2, #16
 80a8b54:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 80a8b58:	b292      	uxth	r2, r2
 80a8b5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a8b5e:	ea4f 4c21 	mov.w	ip, r1, asr #16
 80a8b62:	f846 2b04 	str.w	r2, [r6], #4
 80a8b66:	e7de      	b.n	80a8b26 <__mdiff+0xb2>
 80a8b68:	3f01      	subs	r7, #1
 80a8b6a:	e7e8      	b.n	80a8b3e <__mdiff+0xca>

080a8b6c <__ulp>:
 80a8b6c:	4b11      	ldr	r3, [pc, #68]	; (80a8bb4 <__ulp+0x48>)
 80a8b6e:	400b      	ands	r3, r1
 80a8b70:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a8b74:	2b00      	cmp	r3, #0
 80a8b76:	dd02      	ble.n	80a8b7e <__ulp+0x12>
 80a8b78:	2000      	movs	r0, #0
 80a8b7a:	4619      	mov	r1, r3
 80a8b7c:	4770      	bx	lr
 80a8b7e:	425b      	negs	r3, r3
 80a8b80:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80a8b84:	f04f 0000 	mov.w	r0, #0
 80a8b88:	f04f 0100 	mov.w	r1, #0
 80a8b8c:	ea4f 5223 	mov.w	r2, r3, asr #20
 80a8b90:	da04      	bge.n	80a8b9c <__ulp+0x30>
 80a8b92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a8b96:	fa43 f102 	asr.w	r1, r3, r2
 80a8b9a:	4770      	bx	lr
 80a8b9c:	f1a2 0314 	sub.w	r3, r2, #20
 80a8ba0:	2b1e      	cmp	r3, #30
 80a8ba2:	bfd6      	itet	le
 80a8ba4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80a8ba8:	2301      	movgt	r3, #1
 80a8baa:	fa22 f303 	lsrle.w	r3, r2, r3
 80a8bae:	4618      	mov	r0, r3
 80a8bb0:	4770      	bx	lr
 80a8bb2:	bf00      	nop
 80a8bb4:	7ff00000 	.word	0x7ff00000

080a8bb8 <__b2d>:
 80a8bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8bbc:	6907      	ldr	r7, [r0, #16]
 80a8bbe:	f100 0914 	add.w	r9, r0, #20
 80a8bc2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80a8bc6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80a8bca:	f1a7 0804 	sub.w	r8, r7, #4
 80a8bce:	4630      	mov	r0, r6
 80a8bd0:	f7ff fd95 	bl	80a86fe <__hi0bits>
 80a8bd4:	f1c0 0320 	rsb	r3, r0, #32
 80a8bd8:	280a      	cmp	r0, #10
 80a8bda:	600b      	str	r3, [r1, #0]
 80a8bdc:	491f      	ldr	r1, [pc, #124]	; (80a8c5c <__b2d+0xa4>)
 80a8bde:	dc17      	bgt.n	80a8c10 <__b2d+0x58>
 80a8be0:	45c1      	cmp	r9, r8
 80a8be2:	bf28      	it	cs
 80a8be4:	2200      	movcs	r2, #0
 80a8be6:	f1c0 0c0b 	rsb	ip, r0, #11
 80a8bea:	fa26 f30c 	lsr.w	r3, r6, ip
 80a8bee:	bf38      	it	cc
 80a8bf0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a8bf4:	ea43 0501 	orr.w	r5, r3, r1
 80a8bf8:	f100 0315 	add.w	r3, r0, #21
 80a8bfc:	fa06 f303 	lsl.w	r3, r6, r3
 80a8c00:	fa22 f20c 	lsr.w	r2, r2, ip
 80a8c04:	ea43 0402 	orr.w	r4, r3, r2
 80a8c08:	4620      	mov	r0, r4
 80a8c0a:	4629      	mov	r1, r5
 80a8c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8c10:	45c1      	cmp	r9, r8
 80a8c12:	bf2e      	itee	cs
 80a8c14:	2200      	movcs	r2, #0
 80a8c16:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a8c1a:	f1a7 0808 	subcc.w	r8, r7, #8
 80a8c1e:	f1b0 030b 	subs.w	r3, r0, #11
 80a8c22:	d016      	beq.n	80a8c52 <__b2d+0x9a>
 80a8c24:	f1c3 0720 	rsb	r7, r3, #32
 80a8c28:	fa22 f107 	lsr.w	r1, r2, r7
 80a8c2c:	45c8      	cmp	r8, r9
 80a8c2e:	fa06 f603 	lsl.w	r6, r6, r3
 80a8c32:	ea46 0601 	orr.w	r6, r6, r1
 80a8c36:	bf94      	ite	ls
 80a8c38:	2100      	movls	r1, #0
 80a8c3a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80a8c3e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80a8c42:	fa02 f003 	lsl.w	r0, r2, r3
 80a8c46:	40f9      	lsrs	r1, r7
 80a8c48:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a8c4c:	ea40 0401 	orr.w	r4, r0, r1
 80a8c50:	e7da      	b.n	80a8c08 <__b2d+0x50>
 80a8c52:	4614      	mov	r4, r2
 80a8c54:	ea46 0501 	orr.w	r5, r6, r1
 80a8c58:	e7d6      	b.n	80a8c08 <__b2d+0x50>
 80a8c5a:	bf00      	nop
 80a8c5c:	3ff00000 	.word	0x3ff00000

080a8c60 <__d2b>:
 80a8c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a8c64:	461c      	mov	r4, r3
 80a8c66:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80a8c6a:	2101      	movs	r1, #1
 80a8c6c:	4690      	mov	r8, r2
 80a8c6e:	f7ff fc7f 	bl	80a8570 <_Balloc>
 80a8c72:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80a8c76:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a8c7a:	4607      	mov	r7, r0
 80a8c7c:	bb2c      	cbnz	r4, 80a8cca <__d2b+0x6a>
 80a8c7e:	9301      	str	r3, [sp, #4]
 80a8c80:	f1b8 0300 	subs.w	r3, r8, #0
 80a8c84:	d026      	beq.n	80a8cd4 <__d2b+0x74>
 80a8c86:	4668      	mov	r0, sp
 80a8c88:	9300      	str	r3, [sp, #0]
 80a8c8a:	f7ff fd58 	bl	80a873e <__lo0bits>
 80a8c8e:	9900      	ldr	r1, [sp, #0]
 80a8c90:	b1f0      	cbz	r0, 80a8cd0 <__d2b+0x70>
 80a8c92:	9a01      	ldr	r2, [sp, #4]
 80a8c94:	f1c0 0320 	rsb	r3, r0, #32
 80a8c98:	fa02 f303 	lsl.w	r3, r2, r3
 80a8c9c:	430b      	orrs	r3, r1
 80a8c9e:	40c2      	lsrs	r2, r0
 80a8ca0:	617b      	str	r3, [r7, #20]
 80a8ca2:	9201      	str	r2, [sp, #4]
 80a8ca4:	9b01      	ldr	r3, [sp, #4]
 80a8ca6:	2b00      	cmp	r3, #0
 80a8ca8:	bf14      	ite	ne
 80a8caa:	2102      	movne	r1, #2
 80a8cac:	2101      	moveq	r1, #1
 80a8cae:	61bb      	str	r3, [r7, #24]
 80a8cb0:	6139      	str	r1, [r7, #16]
 80a8cb2:	b1c4      	cbz	r4, 80a8ce6 <__d2b+0x86>
 80a8cb4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a8cb8:	4404      	add	r4, r0
 80a8cba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a8cbe:	6034      	str	r4, [r6, #0]
 80a8cc0:	6028      	str	r0, [r5, #0]
 80a8cc2:	4638      	mov	r0, r7
 80a8cc4:	b002      	add	sp, #8
 80a8cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a8cce:	e7d6      	b.n	80a8c7e <__d2b+0x1e>
 80a8cd0:	6179      	str	r1, [r7, #20]
 80a8cd2:	e7e7      	b.n	80a8ca4 <__d2b+0x44>
 80a8cd4:	a801      	add	r0, sp, #4
 80a8cd6:	f7ff fd32 	bl	80a873e <__lo0bits>
 80a8cda:	2101      	movs	r1, #1
 80a8cdc:	9b01      	ldr	r3, [sp, #4]
 80a8cde:	6139      	str	r1, [r7, #16]
 80a8ce0:	617b      	str	r3, [r7, #20]
 80a8ce2:	3020      	adds	r0, #32
 80a8ce4:	e7e5      	b.n	80a8cb2 <__d2b+0x52>
 80a8ce6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a8cea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a8cee:	6030      	str	r0, [r6, #0]
 80a8cf0:	6918      	ldr	r0, [r3, #16]
 80a8cf2:	f7ff fd04 	bl	80a86fe <__hi0bits>
 80a8cf6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80a8cfa:	6029      	str	r1, [r5, #0]
 80a8cfc:	e7e1      	b.n	80a8cc2 <__d2b+0x62>

080a8cfe <__ratio>:
 80a8cfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8d02:	4688      	mov	r8, r1
 80a8d04:	4669      	mov	r1, sp
 80a8d06:	4681      	mov	r9, r0
 80a8d08:	f7ff ff56 	bl	80a8bb8 <__b2d>
 80a8d0c:	460f      	mov	r7, r1
 80a8d0e:	4604      	mov	r4, r0
 80a8d10:	460d      	mov	r5, r1
 80a8d12:	4640      	mov	r0, r8
 80a8d14:	a901      	add	r1, sp, #4
 80a8d16:	f7ff ff4f 	bl	80a8bb8 <__b2d>
 80a8d1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a8d1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a8d22:	468b      	mov	fp, r1
 80a8d24:	eba3 0c02 	sub.w	ip, r3, r2
 80a8d28:	e9dd 3200 	ldrd	r3, r2, [sp]
 80a8d2c:	1a9b      	subs	r3, r3, r2
 80a8d2e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80a8d32:	2b00      	cmp	r3, #0
 80a8d34:	bfd5      	itete	le
 80a8d36:	460a      	movle	r2, r1
 80a8d38:	462a      	movgt	r2, r5
 80a8d3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80a8d3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80a8d42:	bfd8      	it	le
 80a8d44:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80a8d48:	465b      	mov	r3, fp
 80a8d4a:	4602      	mov	r2, r0
 80a8d4c:	4639      	mov	r1, r7
 80a8d4e:	4620      	mov	r0, r4
 80a8d50:	f7fc fe6a 	bl	80a5a28 <__aeabi_ddiv>
 80a8d54:	b003      	add	sp, #12
 80a8d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8d5a <__copybits>:
 80a8d5a:	3901      	subs	r1, #1
 80a8d5c:	b570      	push	{r4, r5, r6, lr}
 80a8d5e:	1149      	asrs	r1, r1, #5
 80a8d60:	6914      	ldr	r4, [r2, #16]
 80a8d62:	3101      	adds	r1, #1
 80a8d64:	f102 0314 	add.w	r3, r2, #20
 80a8d68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a8d6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a8d70:	1f05      	subs	r5, r0, #4
 80a8d72:	42a3      	cmp	r3, r4
 80a8d74:	d30c      	bcc.n	80a8d90 <__copybits+0x36>
 80a8d76:	1aa3      	subs	r3, r4, r2
 80a8d78:	3b11      	subs	r3, #17
 80a8d7a:	f023 0303 	bic.w	r3, r3, #3
 80a8d7e:	3211      	adds	r2, #17
 80a8d80:	42a2      	cmp	r2, r4
 80a8d82:	bf88      	it	hi
 80a8d84:	2300      	movhi	r3, #0
 80a8d86:	4418      	add	r0, r3
 80a8d88:	2300      	movs	r3, #0
 80a8d8a:	4288      	cmp	r0, r1
 80a8d8c:	d305      	bcc.n	80a8d9a <__copybits+0x40>
 80a8d8e:	bd70      	pop	{r4, r5, r6, pc}
 80a8d90:	f853 6b04 	ldr.w	r6, [r3], #4
 80a8d94:	f845 6f04 	str.w	r6, [r5, #4]!
 80a8d98:	e7eb      	b.n	80a8d72 <__copybits+0x18>
 80a8d9a:	f840 3b04 	str.w	r3, [r0], #4
 80a8d9e:	e7f4      	b.n	80a8d8a <__copybits+0x30>

080a8da0 <__any_on>:
 80a8da0:	f100 0214 	add.w	r2, r0, #20
 80a8da4:	6900      	ldr	r0, [r0, #16]
 80a8da6:	114b      	asrs	r3, r1, #5
 80a8da8:	4298      	cmp	r0, r3
 80a8daa:	b510      	push	{r4, lr}
 80a8dac:	db11      	blt.n	80a8dd2 <__any_on+0x32>
 80a8dae:	dd0a      	ble.n	80a8dc6 <__any_on+0x26>
 80a8db0:	f011 011f 	ands.w	r1, r1, #31
 80a8db4:	d007      	beq.n	80a8dc6 <__any_on+0x26>
 80a8db6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a8dba:	fa24 f001 	lsr.w	r0, r4, r1
 80a8dbe:	fa00 f101 	lsl.w	r1, r0, r1
 80a8dc2:	428c      	cmp	r4, r1
 80a8dc4:	d10b      	bne.n	80a8dde <__any_on+0x3e>
 80a8dc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a8dca:	4293      	cmp	r3, r2
 80a8dcc:	d803      	bhi.n	80a8dd6 <__any_on+0x36>
 80a8dce:	2000      	movs	r0, #0
 80a8dd0:	bd10      	pop	{r4, pc}
 80a8dd2:	4603      	mov	r3, r0
 80a8dd4:	e7f7      	b.n	80a8dc6 <__any_on+0x26>
 80a8dd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a8dda:	2900      	cmp	r1, #0
 80a8ddc:	d0f5      	beq.n	80a8dca <__any_on+0x2a>
 80a8dde:	2001      	movs	r0, #1
 80a8de0:	e7f6      	b.n	80a8dd0 <__any_on+0x30>

080a8de2 <_calloc_r>:
 80a8de2:	b538      	push	{r3, r4, r5, lr}
 80a8de4:	fb02 f501 	mul.w	r5, r2, r1
 80a8de8:	4629      	mov	r1, r5
 80a8dea:	f7fb f965 	bl	80a40b8 <_malloc_r>
 80a8dee:	4604      	mov	r4, r0
 80a8df0:	b118      	cbz	r0, 80a8dfa <_calloc_r+0x18>
 80a8df2:	462a      	mov	r2, r5
 80a8df4:	2100      	movs	r1, #0
 80a8df6:	f7fd fe05 	bl	80a6a04 <memset>
 80a8dfa:	4620      	mov	r0, r4
 80a8dfc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a8e00 <nan>:
 80a8e00:	2000      	movs	r0, #0
 80a8e02:	4901      	ldr	r1, [pc, #4]	; (80a8e08 <nan+0x8>)
 80a8e04:	4770      	bx	lr
 80a8e06:	bf00      	nop
 80a8e08:	7ff80000 	.word	0x7ff80000

080a8e0c <__ascii_wctomb>:
 80a8e0c:	4603      	mov	r3, r0
 80a8e0e:	4608      	mov	r0, r1
 80a8e10:	b141      	cbz	r1, 80a8e24 <__ascii_wctomb+0x18>
 80a8e12:	2aff      	cmp	r2, #255	; 0xff
 80a8e14:	d904      	bls.n	80a8e20 <__ascii_wctomb+0x14>
 80a8e16:	228a      	movs	r2, #138	; 0x8a
 80a8e18:	f04f 30ff 	mov.w	r0, #4294967295
 80a8e1c:	601a      	str	r2, [r3, #0]
 80a8e1e:	4770      	bx	lr
 80a8e20:	2001      	movs	r0, #1
 80a8e22:	700a      	strb	r2, [r1, #0]
 80a8e24:	4770      	bx	lr
	...

080a8e28 <__env_lock>:
 80a8e28:	4801      	ldr	r0, [pc, #4]	; (80a8e30 <__env_lock+0x8>)
 80a8e2a:	f7ff bb8c 	b.w	80a8546 <__retarget_lock_acquire_recursive>
 80a8e2e:	bf00      	nop
 80a8e30:	2000100e 	.word	0x2000100e

080a8e34 <__env_unlock>:
 80a8e34:	4801      	ldr	r0, [pc, #4]	; (80a8e3c <__env_unlock+0x8>)
 80a8e36:	f7ff bb88 	b.w	80a854a <__retarget_lock_release_recursive>
 80a8e3a:	bf00      	nop
 80a8e3c:	2000100e 	.word	0x2000100e

080a8e40 <__aeabi_ldivmod>:
 80a8e40:	b97b      	cbnz	r3, 80a8e62 <__aeabi_ldivmod+0x22>
 80a8e42:	b972      	cbnz	r2, 80a8e62 <__aeabi_ldivmod+0x22>
 80a8e44:	2900      	cmp	r1, #0
 80a8e46:	bfbe      	ittt	lt
 80a8e48:	2000      	movlt	r0, #0
 80a8e4a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a8e4e:	e006      	blt.n	80a8e5e <__aeabi_ldivmod+0x1e>
 80a8e50:	bf08      	it	eq
 80a8e52:	2800      	cmpeq	r0, #0
 80a8e54:	bf1c      	itt	ne
 80a8e56:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a8e5a:	f04f 30ff 	movne.w	r0, #4294967295
 80a8e5e:	f7fd bcb9 	b.w	80a67d4 <__aeabi_idiv0>
 80a8e62:	f1ad 0c08 	sub.w	ip, sp, #8
 80a8e66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a8e6a:	2900      	cmp	r1, #0
 80a8e6c:	db09      	blt.n	80a8e82 <__aeabi_ldivmod+0x42>
 80a8e6e:	2b00      	cmp	r3, #0
 80a8e70:	db1a      	blt.n	80a8ea8 <__aeabi_ldivmod+0x68>
 80a8e72:	f7fd fb4d 	bl	80a6510 <__udivmoddi4>
 80a8e76:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8e7e:	b004      	add	sp, #16
 80a8e80:	4770      	bx	lr
 80a8e82:	4240      	negs	r0, r0
 80a8e84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8e88:	2b00      	cmp	r3, #0
 80a8e8a:	db1b      	blt.n	80a8ec4 <__aeabi_ldivmod+0x84>
 80a8e8c:	f7fd fb40 	bl	80a6510 <__udivmoddi4>
 80a8e90:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8e98:	b004      	add	sp, #16
 80a8e9a:	4240      	negs	r0, r0
 80a8e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8ea0:	4252      	negs	r2, r2
 80a8ea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8ea6:	4770      	bx	lr
 80a8ea8:	4252      	negs	r2, r2
 80a8eaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8eae:	f7fd fb2f 	bl	80a6510 <__udivmoddi4>
 80a8eb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8eb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8eba:	b004      	add	sp, #16
 80a8ebc:	4240      	negs	r0, r0
 80a8ebe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8ec2:	4770      	bx	lr
 80a8ec4:	4252      	negs	r2, r2
 80a8ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8eca:	f7fd fb21 	bl	80a6510 <__udivmoddi4>
 80a8ece:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8ed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8ed6:	b004      	add	sp, #16
 80a8ed8:	4252      	negs	r2, r2
 80a8eda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8ede:	4770      	bx	lr

080a8ee0 <__aeabi_d2lz>:
 80a8ee0:	b538      	push	{r3, r4, r5, lr}
 80a8ee2:	460c      	mov	r4, r1
 80a8ee4:	4605      	mov	r5, r0
 80a8ee6:	4621      	mov	r1, r4
 80a8ee8:	4628      	mov	r0, r5
 80a8eea:	2200      	movs	r2, #0
 80a8eec:	2300      	movs	r3, #0
 80a8eee:	f7fc fee3 	bl	80a5cb8 <__aeabi_dcmplt>
 80a8ef2:	b928      	cbnz	r0, 80a8f00 <__aeabi_d2lz+0x20>
 80a8ef4:	4628      	mov	r0, r5
 80a8ef6:	4621      	mov	r1, r4
 80a8ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a8efc:	f7fd baea 	b.w	80a64d4 <__aeabi_d2ulz>
 80a8f00:	4628      	mov	r0, r5
 80a8f02:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a8f06:	f7fd fae5 	bl	80a64d4 <__aeabi_d2ulz>
 80a8f0a:	4240      	negs	r0, r0
 80a8f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8f10:	bd38      	pop	{r3, r4, r5, pc}
 80a8f12:	bf00      	nop

080a8f14 <dynalib_user>:
 80a8f14:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a8f24:	0000 0000 0031 6548 6c6c 006f 6850 746f     ....1.Hello.Phot
 80a8f34:	006f 6f68 6b6f 722d 7365 6f70 736e 2f65     o.hook-response/
 80a8f44:	6557 7461 6568 0072 6553 7474 6e69 7367     Weather.Settings
 80a8f54:	5700 4669 0069 6944 7073 616c 0079 6144     .WiFi.Display.Da
 80a8f64:	6b72 6d20 0064 6241 756f 0074 7845 7469     rk md.About.Exit
 80a8f74:	7300 6769 7320 7274 4900 0050 654e 2074     .sig str.IP.Net 
 80a8f84:	616e 656d 5400 7572 742d 6e6f 0065 6547     name.Tru-tone.Ge
 80a8f94:	2074 7477 7268 4700 7465 7420 6d65 0070     t wthr.Get temp.
 80a8fa4:	694d 696e 6320 6b6c 4400 7261 206b 6c63     Mini clk.Dark cl
 80a8fb4:	0072 6944 7073 7420 6d65 0070 7953 2d73     r.Disp temp.Sys-
 80a8fc4:	7376 006e 6946 6d72 762d 6e73 5200 7365     vsn.Firm-vsn.Res
 80a8fd4:	7465 0000 111f 001f 0000 001f 151d 0017     et..............
 80a8fe4:	1515 001f 0407 001f 1517 001d 151f 001d     ................
 80a8ff4:	0101 001f 151f 001f 1517 001f 417f 7f41     .............AA.
 80a9004:	0000 7f00 4979 4f49 4949 7f49 080f 7f08     ....yIIOIII.....
 80a9014:	494f 7949 497f 7949 0101 7f01 497f 7f49     OIIy.IIy.....II.
 80a9024:	494f 7f49                                   OII.

080a9028 <CSWTCH.189>:
 80a9028:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a9038:	0050 0000 7061 0070 5925 252d 2d6d 6425     P...app.%Y-%m-%d
 80a9048:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a9058:	6d69 0065                                   ime.

080a905c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a9064:	4585 080a 458b 080a 45c9 080a 4599 080a     .E...E...E...E..
 80a9074:	4587 080a                                   .E..

080a9078 <_ZTV9IPAddress>:
	...
 80a9080:	4acd 080a 4abd 080a 4abf 080a               .J...J...J..

080a908c <_ZTV9USBSerial>:
	...
 80a9094:	4b89 080a 4bef 080a 4bc7 080a 4135 080a     .K...K...K..5A..
 80a90a4:	4bb9 080a 4b8b 080a 4b9b 080a 4be9 080a     .K...K...K...K..
 80a90b4:	4bab 080a 4b85 080a                         .K...K..

080a90bc <_ZTV11USARTSerial>:
	...
 80a90c4:	4d1d 080a 4d85 080a 4d61 080a 4135 080a     .M...M..aM..5A..
 80a90d4:	4d31 080a 4d4d 080a 4d3f 080a 4d5b 080a     1M..MM..?M..[M..
 80a90e4:	4d1f 080a 4d23 080a                         .M..#M..

080a90ec <_ZTV7TwoWire>:
	...
 80a90f4:	4e39 080a 4e83 080a 4e5b 080a 4e3b 080a     9N...N..[N..;N..
 80a9104:	4e63 080a 4e6b 080a 4e73 080a 4e7b 080a     cN..kN..sN..{N..

080a9114 <_ZTVN5spark9WiFiClassE>:
	...
 80a911c:	4f5f 080a 4f55 080a 4f4b 080a 4ebb 080a     _O..UO..KO...N..
 80a912c:	41c1 080a 4f3f 080a 4f33 080a 4f2b 080a     .A..?O..3O..+O..
 80a913c:	4f21 080a 4f17 080a 4ed3 080a               !O...O...N..

080a9148 <_ZTV10WiFiSignal>:
	...
 80a9150:	4eb5 080a 4ec5 080a 4eb7 080a 4f69 080a     .N...N...N..iO..
 80a9160:	4f99 080a 4fbd 080a 4fed 080a               .O...O...O..

080a916c <_ZTVN5spark12NetworkClassE>:
	...
 80a9174:	50c9 080a 50d3 080a 50dd 080a 50e7 080a     .P...P...P...P..
 80a9184:	50f1 080a 50fd 080a 5109 080a 5115 080a     .P...P...Q...Q..
 80a9194:	511d 080a 5127 080a 5131 080a               .Q..'Q..1Q..

080a91a0 <_ZSt7nothrow>:
 80a91a0:	0000 0000                                   ....

080a91a4 <__month_lengths>:
 80a91a4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a91b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a91c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a91d4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a91e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a91f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9204:	666e 6900 696e 7974 6100 006e               nf.inity.an.

080a9210 <fpi.6203>:
 80a9210:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a9220:	0000 0000                                   ....

080a9224 <fpinan.6239>:
 80a9224:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a9234:	0000 0000                                   ....

080a9238 <tinytens>:
 80a9238:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a9248:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a9258:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 80a9268:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80a9278:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80a9288:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80a9298:	2575 006e                                   u%n.

080a929c <_ctype_>:
 80a929c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a92ac:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a92bc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a92cc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a92dc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a92ec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a92fc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a930c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a931c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a939c:	2e00 0000                                   ....

080a93a0 <_C_numeric_locale>:
 80a93a0:	939d 080a 939e 080a 00c8 2000 0043 4f50     ........... C.PO
 80a93b0:	4953 0058 0000 0000                         SIX.....

080a93b8 <__mprec_bigtens>:
 80a93b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a93c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a93d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a93e0 <__mprec_tens>:
 80a93e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a93f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a9400:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a9410:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a9420:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a9430:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a9440:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a9450:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a9460:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a9470:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a9480:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a9490:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a94a0:	9db4 79d9 7843 44ea                         ...yCx.D

080a94a8 <p05.6127>:
 80a94a8:	0005 0000 0019 0000 007d 0000               ........}...

080a94b4 <link_const_variable_data_end>:
 80a94b4:	080a28c5 	.word	0x080a28c5
 80a94b8:	080a3bad 	.word	0x080a3bad
 80a94bc:	080a40f9 	.word	0x080a40f9
 80a94c0:	080a4209 	.word	0x080a4209
 80a94c4:	080a437d 	.word	0x080a437d
 80a94c8:	080a441d 	.word	0x080a441d
 80a94cc:	080a50b5 	.word	0x080a50b5
 80a94d0:	080a5181 	.word	0x080a5181
 80a94d4:	080a5305 	.word	0x080a5305

080a94d8 <link_constructors_end>:
	...
